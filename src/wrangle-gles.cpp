////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include <unordered_set>

#include <wrangle-gles.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadBuffer

void  glew::gles::glReadBuffer (GLenum src)
{
  // GL_ES_VERSION_3_0 - glReadBuffer
  if (s_deviceConfig.m_glReadBuffer)
  {
    s_deviceConfig.m_glReadBuffer (src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElements

void  glew::gles::glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
  // GL_ES_VERSION_3_0 - glDrawRangeElements
  if (s_deviceConfig.m_glDrawRangeElements)
  {
    s_deviceConfig.m_glDrawRangeElements (mode, start, end, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3D

void  glew::gles::glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexImage3D
  if (s_deviceConfig.m_glTexImage3D)
  {
    s_deviceConfig.m_glTexImage3D (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage3D

void  glew::gles::glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexSubImage3D
  if (s_deviceConfig.m_glTexSubImage3D)
  {
    s_deviceConfig.m_glTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage3D

void  glew::gles::glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glCopyTexSubImage3D
  if (s_deviceConfig.m_glCopyTexSubImage3D)
  {
    s_deviceConfig.m_glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage3D

void  glew::gles::glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexImage3D
  if (s_deviceConfig.m_glCompressedTexImage3D)
  {
    s_deviceConfig.m_glCompressedTexImage3D (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage3D

void  glew::gles::glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexSubImage3D
  if (s_deviceConfig.m_glCompressedTexSubImage3D)
  {
    s_deviceConfig.m_glCompressedTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenQueries

void  glew::gles::glGenQueries (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenQueries
  if (s_deviceConfig.m_glGenQueries)
  {
    s_deviceConfig.m_glGenQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteQueries

void  glew::gles::glDeleteQueries (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteQueries
  if (s_deviceConfig.m_glDeleteQueries)
  {
    s_deviceConfig.m_glDeleteQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsQuery

GLboolean glew::gles::glIsQuery (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsQuery
  if (s_deviceConfig.m_glIsQuery)
  {
    return s_deviceConfig.m_glIsQuery (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginQuery

void  glew::gles::glBeginQuery (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBeginQuery
  if (s_deviceConfig.m_glBeginQuery)
  {
    s_deviceConfig.m_glBeginQuery (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndQuery

void  glew::gles::glEndQuery (GLenum target)
{
  // GL_ES_VERSION_3_0 - glEndQuery
  if (s_deviceConfig.m_glEndQuery)
  {
    s_deviceConfig.m_glEndQuery (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryiv

void  glew::gles::glGetQueryiv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryiv
  if (s_deviceConfig.m_glGetQueryiv)
  {
    s_deviceConfig.m_glGetQueryiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectuiv

void  glew::gles::glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryObjectuiv
  if (s_deviceConfig.m_glGetQueryObjectuiv)
  {
    s_deviceConfig.m_glGetQueryObjectuiv (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapBuffer

GLboolean glew::gles::glUnmapBuffer (GLenum target)
{
  // GL_ES_VERSION_3_0 - glUnmapBuffer
  if (s_deviceConfig.m_glUnmapBuffer)
  {
    return s_deviceConfig.m_glUnmapBuffer (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferPointerv

void  glew::gles::glGetBufferPointerv (GLenum target, GLenum pname, void ** params)
{
  // GL_ES_VERSION_3_0 - glGetBufferPointerv
  if (s_deviceConfig.m_glGetBufferPointerv)
  {
    s_deviceConfig.m_glGetBufferPointerv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffers

void  glew::gles::glDrawBuffers (GLsizei n, const GLenum * bufs)
{
  // GL_ES_VERSION_3_0 - glDrawBuffers
  if (s_deviceConfig.m_glDrawBuffers)
  {
    s_deviceConfig.m_glDrawBuffers (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x3fv

void  glew::gles::glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x3fv
  if (s_deviceConfig.m_glUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glUniformMatrix2x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x2fv

void  glew::gles::glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x2fv
  if (s_deviceConfig.m_glUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glUniformMatrix3x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x4fv

void  glew::gles::glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x4fv
  if (s_deviceConfig.m_glUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glUniformMatrix2x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x2fv

void  glew::gles::glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x2fv
  if (s_deviceConfig.m_glUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glUniformMatrix4x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x4fv

void  glew::gles::glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x4fv
  if (s_deviceConfig.m_glUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glUniformMatrix3x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x3fv

void  glew::gles::glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x3fv
  if (s_deviceConfig.m_glUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glUniformMatrix4x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitFramebuffer

void  glew::gles::glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ES_VERSION_3_0 - glBlitFramebuffer
  if (s_deviceConfig.m_glBlitFramebuffer)
  {
    s_deviceConfig.m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisample

void  glew::gles::glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glRenderbufferStorageMultisample
  if (s_deviceConfig.m_glRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureLayer

void  glew::gles::glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ES_VERSION_3_0 - glFramebufferTextureLayer
  if (s_deviceConfig.m_glFramebufferTextureLayer)
  {
    s_deviceConfig.m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBufferRange

void * glew::gles::glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ES_VERSION_3_0 - glMapBufferRange
  if (s_deviceConfig.m_glMapBufferRange)
  {
    return s_deviceConfig.m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedBufferRange

void  glew::gles::glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_ES_VERSION_3_0 - glFlushMappedBufferRange
  if (s_deviceConfig.m_glFlushMappedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexArray

void  glew::gles::glBindVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glBindVertexArray
  if (s_deviceConfig.m_glBindVertexArray)
  {
    s_deviceConfig.m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteVertexArrays

void  glew::gles::glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glDeleteVertexArrays
  if (s_deviceConfig.m_glDeleteVertexArrays)
  {
    s_deviceConfig.m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenVertexArrays

void  glew::gles::glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glGenVertexArrays
  if (s_deviceConfig.m_glGenVertexArrays)
  {
    s_deviceConfig.m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVertexArray

GLboolean glew::gles::glIsVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glIsVertexArray
  if (s_deviceConfig.m_glIsVertexArray)
  {
    return s_deviceConfig.m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegeri_v

void  glew::gles::glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_ES_VERSION_3_0 - glGetIntegeri_v
  if (s_deviceConfig.m_glGetIntegeri_v)
  {
    s_deviceConfig.m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginTransformFeedback

void  glew::gles::glBeginTransformFeedback (GLenum primitiveMode)
{
  // GL_ES_VERSION_3_0 - glBeginTransformFeedback
  if (s_deviceConfig.m_glBeginTransformFeedback)
  {
    s_deviceConfig.m_glBeginTransformFeedback (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndTransformFeedback

void  glew::gles::glEndTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glEndTransformFeedback
  if (s_deviceConfig.m_glEndTransformFeedback)
  {
    s_deviceConfig.m_glEndTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferRange

void  glew::gles::glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glBindBufferRange
  if (s_deviceConfig.m_glBindBufferRange)
  {
    s_deviceConfig.m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferBase

void  glew::gles::glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_ES_VERSION_3_0 - glBindBufferBase
  if (s_deviceConfig.m_glBindBufferBase)
  {
    s_deviceConfig.m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackVaryings

void  glew::gles::glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
  // GL_ES_VERSION_3_0 - glTransformFeedbackVaryings
  if (s_deviceConfig.m_glTransformFeedbackVaryings)
  {
    s_deviceConfig.m_glTransformFeedbackVaryings (program, count, varyings, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbackVarying

void  glew::gles::glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetTransformFeedbackVarying
  if (s_deviceConfig.m_glGetTransformFeedbackVarying)
  {
    s_deviceConfig.m_glGetTransformFeedbackVarying (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIPointer

void  glew::gles::glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ES_VERSION_3_0 - glVertexAttribIPointer
  if (s_deviceConfig.m_glVertexAttribIPointer)
  {
    s_deviceConfig.m_glVertexAttribIPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIiv

void  glew::gles::glGetVertexAttribIiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIiv
  if (s_deviceConfig.m_glGetVertexAttribIiv)
  {
    s_deviceConfig.m_glGetVertexAttribIiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIuiv

void  glew::gles::glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIuiv
  if (s_deviceConfig.m_glGetVertexAttribIuiv)
  {
    s_deviceConfig.m_glGetVertexAttribIuiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4i

void  glew::gles::glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4i
  if (s_deviceConfig.m_glVertexAttribI4i)
  {
    s_deviceConfig.m_glVertexAttribI4i (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4ui

void  glew::gles::glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4ui
  if (s_deviceConfig.m_glVertexAttribI4ui)
  {
    s_deviceConfig.m_glVertexAttribI4ui (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4iv

void  glew::gles::glVertexAttribI4iv (GLuint index, const GLint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4iv
  if (s_deviceConfig.m_glVertexAttribI4iv)
  {
    s_deviceConfig.m_glVertexAttribI4iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4uiv

void  glew::gles::glVertexAttribI4uiv (GLuint index, const GLuint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4uiv
  if (s_deviceConfig.m_glVertexAttribI4uiv)
  {
    s_deviceConfig.m_glVertexAttribI4uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformuiv

void  glew::gles::glGetUniformuiv (GLuint program, GLint location, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetUniformuiv
  if (s_deviceConfig.m_glGetUniformuiv)
  {
    s_deviceConfig.m_glGetUniformuiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragDataLocation

GLint glew::gles::glGetFragDataLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetFragDataLocation
  if (s_deviceConfig.m_glGetFragDataLocation)
  {
    return s_deviceConfig.m_glGetFragDataLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1ui

void  glew::gles::glUniform1ui (GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_0 - glUniform1ui
  if (s_deviceConfig.m_glUniform1ui)
  {
    s_deviceConfig.m_glUniform1ui (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2ui

void  glew::gles::glUniform2ui (GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_0 - glUniform2ui
  if (s_deviceConfig.m_glUniform2ui)
  {
    s_deviceConfig.m_glUniform2ui (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3ui

void  glew::gles::glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_0 - glUniform3ui
  if (s_deviceConfig.m_glUniform3ui)
  {
    s_deviceConfig.m_glUniform3ui (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4ui

void  glew::gles::glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_0 - glUniform4ui
  if (s_deviceConfig.m_glUniform4ui)
  {
    s_deviceConfig.m_glUniform4ui (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1uiv

void  glew::gles::glUniform1uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform1uiv
  if (s_deviceConfig.m_glUniform1uiv)
  {
    s_deviceConfig.m_glUniform1uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2uiv

void  glew::gles::glUniform2uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform2uiv
  if (s_deviceConfig.m_glUniform2uiv)
  {
    s_deviceConfig.m_glUniform2uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3uiv

void  glew::gles::glUniform3uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform3uiv
  if (s_deviceConfig.m_glUniform3uiv)
  {
    s_deviceConfig.m_glUniform3uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4uiv

void  glew::gles::glUniform4uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform4uiv
  if (s_deviceConfig.m_glUniform4uiv)
  {
    s_deviceConfig.m_glUniform4uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferiv

void  glew::gles::glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferiv
  if (s_deviceConfig.m_glClearBufferiv)
  {
    s_deviceConfig.m_glClearBufferiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferuiv

void  glew::gles::glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferuiv
  if (s_deviceConfig.m_glClearBufferuiv)
  {
    s_deviceConfig.m_glClearBufferuiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferfv

void  glew::gles::glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferfv
  if (s_deviceConfig.m_glClearBufferfv)
  {
    s_deviceConfig.m_glClearBufferfv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferfi

void  glew::gles::glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  // GL_ES_VERSION_3_0 - glClearBufferfi
  if (s_deviceConfig.m_glClearBufferfi)
  {
    s_deviceConfig.m_glClearBufferfi (buffer, drawbuffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetStringi

const GLubyte * glew::gles::glGetStringi (GLenum name, GLuint index)
{
  // GL_ES_VERSION_3_0 - glGetStringi
  if (s_deviceConfig.m_glGetStringi)
  {
    return s_deviceConfig.m_glGetStringi (name, index);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyBufferSubData

void  glew::gles::glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glCopyBufferSubData
  if (s_deviceConfig.m_glCopyBufferSubData)
  {
    s_deviceConfig.m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformIndices

void  glew::gles::glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_ES_VERSION_3_0 - glGetUniformIndices
  if (s_deviceConfig.m_glGetUniformIndices)
  {
    s_deviceConfig.m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformsiv

void  glew::gles::glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformsiv
  if (s_deviceConfig.m_glGetActiveUniformsiv)
  {
    s_deviceConfig.m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformBlockIndex

GLuint glew::gles::glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetUniformBlockIndex
  if (s_deviceConfig.m_glGetUniformBlockIndex)
  {
    return s_deviceConfig.m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformBlockiv

void  glew::gles::glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockiv
  if (s_deviceConfig.m_glGetActiveUniformBlockiv)
  {
    s_deviceConfig.m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformBlockName

void  glew::gles::glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockName
  if (s_deviceConfig.m_glGetActiveUniformBlockName)
  {
    s_deviceConfig.m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformBlockBinding

void  glew::gles::glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_ES_VERSION_3_0 - glUniformBlockBinding
  if (s_deviceConfig.m_glUniformBlockBinding)
  {
    s_deviceConfig.m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstanced

void  glew::gles::glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawArraysInstanced
  if (s_deviceConfig.m_glDrawArraysInstanced)
  {
    s_deviceConfig.m_glDrawArraysInstanced (mode, first, count, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstanced

void  glew::gles::glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawElementsInstanced
  if (s_deviceConfig.m_glDrawElementsInstanced)
  {
    s_deviceConfig.m_glDrawElementsInstanced (mode, count, type, indices, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFenceSync

GLsync glew::gles::glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_ES_VERSION_3_0 - glFenceSync
  if (s_deviceConfig.m_glFenceSync)
  {
    return s_deviceConfig.m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsSync

GLboolean glew::gles::glIsSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glIsSync
  if (s_deviceConfig.m_glIsSync)
  {
    return s_deviceConfig.m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteSync

void  glew::gles::glDeleteSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glDeleteSync
  if (s_deviceConfig.m_glDeleteSync)
  {
    s_deviceConfig.m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientWaitSync

GLenum glew::gles::glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glClientWaitSync
  if (s_deviceConfig.m_glClientWaitSync)
  {
    return s_deviceConfig.m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWaitSync

void  glew::gles::glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glWaitSync
  if (s_deviceConfig.m_glWaitSync)
  {
    s_deviceConfig.m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInteger64v

void  glew::gles::glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64v
  if (s_deviceConfig.m_glGetInteger64v)
  {
    s_deviceConfig.m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSynciv

void  glew::gles::glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_ES_VERSION_3_0 - glGetSynciv
  if (s_deviceConfig.m_glGetSynciv)
  {
    s_deviceConfig.m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInteger64i_v

void  glew::gles::glGetInteger64i_v (GLenum target, GLuint index, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64i_v
  if (s_deviceConfig.m_glGetInteger64i_v)
  {
    s_deviceConfig.m_glGetInteger64i_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferParameteri64v

void  glew::gles::glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 * params)
{
  // GL_ES_VERSION_3_0 - glGetBufferParameteri64v
  if (s_deviceConfig.m_glGetBufferParameteri64v)
  {
    s_deviceConfig.m_glGetBufferParameteri64v (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenSamplers

void  glew::gles::glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glGenSamplers
  if (s_deviceConfig.m_glGenSamplers)
  {
    s_deviceConfig.m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteSamplers

void  glew::gles::glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glDeleteSamplers
  if (s_deviceConfig.m_glDeleteSamplers)
  {
    s_deviceConfig.m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsSampler

GLboolean glew::gles::glIsSampler (GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glIsSampler
  if (s_deviceConfig.m_glIsSampler)
  {
    return s_deviceConfig.m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindSampler

void  glew::gles::glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glBindSampler
  if (s_deviceConfig.m_glBindSampler)
  {
    s_deviceConfig.m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameteri

void  glew::gles::glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteri
  if (s_deviceConfig.m_glSamplerParameteri)
  {
    s_deviceConfig.m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameteriv

void  glew::gles::glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteriv
  if (s_deviceConfig.m_glSamplerParameteriv)
  {
    s_deviceConfig.m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterf

void  glew::gles::glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterf
  if (s_deviceConfig.m_glSamplerParameterf)
  {
    s_deviceConfig.m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterfv

void  glew::gles::glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterfv
  if (s_deviceConfig.m_glSamplerParameterfv)
  {
    s_deviceConfig.m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameteriv

void  glew::gles::glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameteriv
  if (s_deviceConfig.m_glGetSamplerParameteriv)
  {
    s_deviceConfig.m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterfv

void  glew::gles::glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameterfv
  if (s_deviceConfig.m_glGetSamplerParameterfv)
  {
    s_deviceConfig.m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisor

void  glew::gles::glVertexAttribDivisor (GLuint index, GLuint divisor)
{
  // GL_ES_VERSION_3_0 - glVertexAttribDivisor
  if (s_deviceConfig.m_glVertexAttribDivisor)
  {
    s_deviceConfig.m_glVertexAttribDivisor (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTransformFeedback

void  glew::gles::glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBindTransformFeedback
  if (s_deviceConfig.m_glBindTransformFeedback)
  {
    s_deviceConfig.m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteTransformFeedbacks

void  glew::gles::glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteTransformFeedbacks
  if (s_deviceConfig.m_glDeleteTransformFeedbacks)
  {
    s_deviceConfig.m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenTransformFeedbacks

void  glew::gles::glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenTransformFeedbacks
  if (s_deviceConfig.m_glGenTransformFeedbacks)
  {
    s_deviceConfig.m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTransformFeedback

GLboolean glew::gles::glIsTransformFeedback (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsTransformFeedback
  if (s_deviceConfig.m_glIsTransformFeedback)
  {
    return s_deviceConfig.m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPauseTransformFeedback

void  glew::gles::glPauseTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glPauseTransformFeedback
  if (s_deviceConfig.m_glPauseTransformFeedback)
  {
    s_deviceConfig.m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResumeTransformFeedback

void  glew::gles::glResumeTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glResumeTransformFeedback
  if (s_deviceConfig.m_glResumeTransformFeedback)
  {
    s_deviceConfig.m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramBinary

void  glew::gles::glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_ES_VERSION_3_0 - glGetProgramBinary
  if (s_deviceConfig.m_glGetProgramBinary)
  {
    s_deviceConfig.m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBinary

void  glew::gles::glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_ES_VERSION_3_0 - glProgramBinary
  if (s_deviceConfig.m_glProgramBinary)
  {
    s_deviceConfig.m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameteri

void  glew::gles::glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_ES_VERSION_3_0 - glProgramParameteri
  if (s_deviceConfig.m_glProgramParameteri)
  {
    s_deviceConfig.m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateFramebuffer

void  glew::gles::glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ES_VERSION_3_0 - glInvalidateFramebuffer
  if (s_deviceConfig.m_glInvalidateFramebuffer)
  {
    s_deviceConfig.m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateSubFramebuffer

void  glew::gles::glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glInvalidateSubFramebuffer
  if (s_deviceConfig.m_glInvalidateSubFramebuffer)
  {
    s_deviceConfig.m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage2D

void  glew::gles::glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glTexStorage2D
  if (s_deviceConfig.m_glTexStorage2D)
  {
    s_deviceConfig.m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage3D

void  glew::gles::glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ES_VERSION_3_0 - glTexStorage3D
  if (s_deviceConfig.m_glTexStorage3D)
  {
    s_deviceConfig.m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInternalformativ

void  glew::gles::glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetInternalformativ
  if (s_deviceConfig.m_glGetInternalformativ)
  {
    s_deviceConfig.m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDispatchCompute

void  glew::gles::glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_ES_VERSION_3_1 - glDispatchCompute
  if (s_deviceConfig.m_glDispatchCompute)
  {
    s_deviceConfig.m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDispatchComputeIndirect

void  glew::gles::glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_ES_VERSION_3_1 - glDispatchComputeIndirect
  if (s_deviceConfig.m_glDispatchComputeIndirect)
  {
    s_deviceConfig.m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysIndirect

void  glew::gles::glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawArraysIndirect
  if (s_deviceConfig.m_glDrawArraysIndirect)
  {
    s_deviceConfig.m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsIndirect

void  glew::gles::glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawElementsIndirect
  if (s_deviceConfig.m_glDrawElementsIndirect)
  {
    s_deviceConfig.m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferParameteri

void  glew::gles::glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_1 - glFramebufferParameteri
  if (s_deviceConfig.m_glFramebufferParameteri)
  {
    s_deviceConfig.m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFramebufferParameteriv

void  glew::gles::glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetFramebufferParameteriv
  if (s_deviceConfig.m_glGetFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramInterfaceiv

void  glew::gles::glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramInterfaceiv
  if (s_deviceConfig.m_glGetProgramInterfaceiv)
  {
    s_deviceConfig.m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceIndex

GLuint glew::gles::glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceIndex
  if (s_deviceConfig.m_glGetProgramResourceIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceName

void  glew::gles::glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceName
  if (s_deviceConfig.m_glGetProgramResourceName)
  {
    s_deviceConfig.m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceiv

void  glew::gles::glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceiv
  if (s_deviceConfig.m_glGetProgramResourceiv)
  {
    s_deviceConfig.m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceLocation

GLint glew::gles::glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceLocation
  if (s_deviceConfig.m_glGetProgramResourceLocation)
  {
    return s_deviceConfig.m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseProgramStages

void  glew::gles::glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_ES_VERSION_3_1 - glUseProgramStages
  if (s_deviceConfig.m_glUseProgramStages)
  {
    s_deviceConfig.m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveShaderProgram

void  glew::gles::glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_ES_VERSION_3_1 - glActiveShaderProgram
  if (s_deviceConfig.m_glActiveShaderProgram)
  {
    s_deviceConfig.m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShaderProgramv

GLuint glew::gles::glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_ES_VERSION_3_1 - glCreateShaderProgramv
  if (s_deviceConfig.m_glCreateShaderProgramv)
  {
    return s_deviceConfig.m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindProgramPipeline

void  glew::gles::glBindProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glBindProgramPipeline
  if (s_deviceConfig.m_glBindProgramPipeline)
  {
    s_deviceConfig.m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgramPipelines

void  glew::gles::glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glDeleteProgramPipelines
  if (s_deviceConfig.m_glDeleteProgramPipelines)
  {
    s_deviceConfig.m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenProgramPipelines

void  glew::gles::glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glGenProgramPipelines
  if (s_deviceConfig.m_glGenProgramPipelines)
  {
    s_deviceConfig.m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgramPipeline

GLboolean glew::gles::glIsProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glIsProgramPipeline
  if (s_deviceConfig.m_glIsProgramPipeline)
  {
    return s_deviceConfig.m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineiv

void  glew::gles::glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineiv
  if (s_deviceConfig.m_glGetProgramPipelineiv)
  {
    s_deviceConfig.m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1i

void  glew::gles::glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1i
  if (s_deviceConfig.m_glProgramUniform1i)
  {
    s_deviceConfig.m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2i

void  glew::gles::glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2i
  if (s_deviceConfig.m_glProgramUniform2i)
  {
    s_deviceConfig.m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3i

void  glew::gles::glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3i
  if (s_deviceConfig.m_glProgramUniform3i)
  {
    s_deviceConfig.m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4i

void  glew::gles::glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4i
  if (s_deviceConfig.m_glProgramUniform4i)
  {
    s_deviceConfig.m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ui

void  glew::gles::glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1ui
  if (s_deviceConfig.m_glProgramUniform1ui)
  {
    s_deviceConfig.m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ui

void  glew::gles::glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2ui
  if (s_deviceConfig.m_glProgramUniform2ui)
  {
    s_deviceConfig.m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ui

void  glew::gles::glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3ui
  if (s_deviceConfig.m_glProgramUniform3ui)
  {
    s_deviceConfig.m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ui

void  glew::gles::glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4ui
  if (s_deviceConfig.m_glProgramUniform4ui)
  {
    s_deviceConfig.m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1f

void  glew::gles::glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1f
  if (s_deviceConfig.m_glProgramUniform1f)
  {
    s_deviceConfig.m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2f

void  glew::gles::glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2f
  if (s_deviceConfig.m_glProgramUniform2f)
  {
    s_deviceConfig.m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3f

void  glew::gles::glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3f
  if (s_deviceConfig.m_glProgramUniform3f)
  {
    s_deviceConfig.m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4f

void  glew::gles::glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4f
  if (s_deviceConfig.m_glProgramUniform4f)
  {
    s_deviceConfig.m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1iv

void  glew::gles::glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1iv
  if (s_deviceConfig.m_glProgramUniform1iv)
  {
    s_deviceConfig.m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2iv

void  glew::gles::glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2iv
  if (s_deviceConfig.m_glProgramUniform2iv)
  {
    s_deviceConfig.m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3iv

void  glew::gles::glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3iv
  if (s_deviceConfig.m_glProgramUniform3iv)
  {
    s_deviceConfig.m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4iv

void  glew::gles::glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4iv
  if (s_deviceConfig.m_glProgramUniform4iv)
  {
    s_deviceConfig.m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uiv

void  glew::gles::glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1uiv
  if (s_deviceConfig.m_glProgramUniform1uiv)
  {
    s_deviceConfig.m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uiv

void  glew::gles::glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2uiv
  if (s_deviceConfig.m_glProgramUniform2uiv)
  {
    s_deviceConfig.m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uiv

void  glew::gles::glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3uiv
  if (s_deviceConfig.m_glProgramUniform3uiv)
  {
    s_deviceConfig.m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uiv

void  glew::gles::glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4uiv
  if (s_deviceConfig.m_glProgramUniform4uiv)
  {
    s_deviceConfig.m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fv

void  glew::gles::glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1fv
  if (s_deviceConfig.m_glProgramUniform1fv)
  {
    s_deviceConfig.m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fv

void  glew::gles::glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2fv
  if (s_deviceConfig.m_glProgramUniform2fv)
  {
    s_deviceConfig.m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fv

void  glew::gles::glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3fv
  if (s_deviceConfig.m_glProgramUniform3fv)
  {
    s_deviceConfig.m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fv

void  glew::gles::glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4fv
  if (s_deviceConfig.m_glProgramUniform4fv)
  {
    s_deviceConfig.m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2fv

void  glew::gles::glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2fv
  if (s_deviceConfig.m_glProgramUniformMatrix2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3fv

void  glew::gles::glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3fv
  if (s_deviceConfig.m_glProgramUniformMatrix3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4fv

void  glew::gles::glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4fv
  if (s_deviceConfig.m_glProgramUniformMatrix4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3fv

void  glew::gles::glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2fv

void  glew::gles::glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4fv

void  glew::gles::glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2fv

void  glew::gles::glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4fv

void  glew::gles::glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3fv

void  glew::gles::glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glValidateProgramPipeline

void  glew::gles::glValidateProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glValidateProgramPipeline
  if (s_deviceConfig.m_glValidateProgramPipeline)
  {
    s_deviceConfig.m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineInfoLog

void  glew::gles::glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineInfoLog
  if (s_deviceConfig.m_glGetProgramPipelineInfoLog)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindImageTexture

void  glew::gles::glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_ES_VERSION_3_1 - glBindImageTexture
  if (s_deviceConfig.m_glBindImageTexture)
  {
    s_deviceConfig.m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBooleani_v

void  glew::gles::glGetBooleani_v (GLenum target, GLuint index, GLboolean * data)
{
  // GL_ES_VERSION_3_1 - glGetBooleani_v
  if (s_deviceConfig.m_glGetBooleani_v)
  {
    s_deviceConfig.m_glGetBooleani_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMemoryBarrier

void  glew::gles::glMemoryBarrier (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrier
  if (s_deviceConfig.m_glMemoryBarrier)
  {
    s_deviceConfig.m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMemoryBarrierByRegion

void  glew::gles::glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrierByRegion
  if (s_deviceConfig.m_glMemoryBarrierByRegion)
  {
    s_deviceConfig.m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage2DMultisample

void  glew::gles::glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ES_VERSION_3_1 - glTexStorage2DMultisample
  if (s_deviceConfig.m_glTexStorage2DMultisample)
  {
    s_deviceConfig.m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultisamplefv

void  glew::gles::glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_ES_VERSION_3_1 - glGetMultisamplefv
  if (s_deviceConfig.m_glGetMultisamplefv)
  {
    s_deviceConfig.m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMaski

void  glew::gles::glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_ES_VERSION_3_1 - glSampleMaski
  if (s_deviceConfig.m_glSampleMaski)
  {
    s_deviceConfig.m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexLevelParameteriv

void  glew::gles::glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameteriv
  if (s_deviceConfig.m_glGetTexLevelParameteriv)
  {
    s_deviceConfig.m_glGetTexLevelParameteriv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexLevelParameterfv

void  glew::gles::glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameterfv
  if (s_deviceConfig.m_glGetTexLevelParameterfv)
  {
    s_deviceConfig.m_glGetTexLevelParameterfv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexBuffer

void  glew::gles::glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ES_VERSION_3_1 - glBindVertexBuffer
  if (s_deviceConfig.m_glBindVertexBuffer)
  {
    s_deviceConfig.m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribFormat

void  glew::gles::glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribFormat
  if (s_deviceConfig.m_glVertexAttribFormat)
  {
    s_deviceConfig.m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIFormat

void  glew::gles::glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribIFormat
  if (s_deviceConfig.m_glVertexAttribIFormat)
  {
    s_deviceConfig.m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribBinding

void  glew::gles::glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_ES_VERSION_3_1 - glVertexAttribBinding
  if (s_deviceConfig.m_glVertexAttribBinding)
  {
    s_deviceConfig.m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexBindingDivisor

void  glew::gles::glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_ES_VERSION_3_1 - glVertexBindingDivisor
  if (s_deviceConfig.m_glVertexBindingDivisor)
  {
    s_deviceConfig.m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorGroupsAMD

void  glew::gles::glGetPerfMonitorGroupsAMD (GLint * numGroups, GLsizei groupsSize, GLuint * groups)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupsAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupsAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD (numGroups, groupsSize, groups);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCountersAMD

void  glew::gles::glGetPerfMonitorCountersAMD (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCountersAMD
  if (s_deviceConfig.m_glGetPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCountersAMD (group, numCounters, maxActiveCounters, counterSize, counters);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorGroupStringAMD

void  glew::gles::glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD (group, bufSize, length, groupString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterStringAMD

void  glew::gles::glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD (group, counter, bufSize, length, counterString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterInfoAMD

void  glew::gles::glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void * data)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterInfoAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD (group, counter, pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenPerfMonitorsAMD

void  glew::gles::glGenPerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glGenPerfMonitorsAMD
  if (s_deviceConfig.m_glGenPerfMonitorsAMD)
  {
    s_deviceConfig.m_glGenPerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePerfMonitorsAMD

void  glew::gles::glDeletePerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glDeletePerfMonitorsAMD
  if (s_deviceConfig.m_glDeletePerfMonitorsAMD)
  {
    s_deviceConfig.m_glDeletePerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSelectPerfMonitorCountersAMD

void  glew::gles::glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList)
{
  // GL_AMD_performance_monitor - glSelectPerfMonitorCountersAMD
  if (s_deviceConfig.m_glSelectPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD (monitor, enable, group, numCounters, counterList);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginPerfMonitorAMD

void  glew::gles::glBeginPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glBeginPerfMonitorAMD
  if (s_deviceConfig.m_glBeginPerfMonitorAMD)
  {
    s_deviceConfig.m_glBeginPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndPerfMonitorAMD

void  glew::gles::glEndPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glEndPerfMonitorAMD
  if (s_deviceConfig.m_glEndPerfMonitorAMD)
  {
    s_deviceConfig.m_glEndPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterDataAMD

void  glew::gles::glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterDataAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterDataAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD (monitor, pname, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitFramebufferANGLE

void  glew::gles::glBlitFramebufferANGLE (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ANGLE_framebuffer_blit - glBlitFramebufferANGLE
  if (s_deviceConfig.m_glBlitFramebufferANGLE)
  {
    s_deviceConfig.m_glBlitFramebufferANGLE (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleANGLE

void  glew::gles::glRenderbufferStorageMultisampleANGLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ANGLE_framebuffer_multisample - glRenderbufferStorageMultisampleANGLE
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedANGLE

void  glew::gles::glDrawArraysInstancedANGLE (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawArraysInstancedANGLE
  if (s_deviceConfig.m_glDrawArraysInstancedANGLE)
  {
    s_deviceConfig.m_glDrawArraysInstancedANGLE (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedANGLE

void  glew::gles::glDrawElementsInstancedANGLE (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawElementsInstancedANGLE
  if (s_deviceConfig.m_glDrawElementsInstancedANGLE)
  {
    s_deviceConfig.m_glDrawElementsInstancedANGLE (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisorANGLE

void  glew::gles::glVertexAttribDivisorANGLE (GLuint index, GLuint divisor)
{
  // GL_ANGLE_instanced_arrays - glVertexAttribDivisorANGLE
  if (s_deviceConfig.m_glVertexAttribDivisorANGLE)
  {
    s_deviceConfig.m_glVertexAttribDivisorANGLE (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTranslatedShaderSourceANGLE

void  glew::gles::glGetTranslatedShaderSourceANGLE (GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source)
{
  // GL_ANGLE_translated_shader_source - glGetTranslatedShaderSourceANGLE
  if (s_deviceConfig.m_glGetTranslatedShaderSourceANGLE)
  {
    s_deviceConfig.m_glGetTranslatedShaderSourceANGLE (shader, bufsize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureLevelsAPPLE

void  glew::gles::glCopyTextureLevelsAPPLE (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  // GL_APPLE_copy_texture_levels - glCopyTextureLevelsAPPLE
  if (s_deviceConfig.m_glCopyTextureLevelsAPPLE)
  {
    s_deviceConfig.m_glCopyTextureLevelsAPPLE (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleAPPLE

void  glew::gles::glRenderbufferStorageMultisampleAPPLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_APPLE_framebuffer_multisample - glRenderbufferStorageMultisampleAPPLE
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResolveMultisampleFramebufferAPPLE

void  glew::gles::glResolveMultisampleFramebufferAPPLE ()
{
  // GL_APPLE_framebuffer_multisample - glResolveMultisampleFramebufferAPPLE
  if (s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE)
  {
    s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFenceSyncAPPLE

GLsync glew::gles::glFenceSyncAPPLE (GLenum condition, GLbitfield flags)
{
  // GL_APPLE_sync - glFenceSyncAPPLE
  if (s_deviceConfig.m_glFenceSyncAPPLE)
  {
    return s_deviceConfig.m_glFenceSyncAPPLE (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsSyncAPPLE

GLboolean glew::gles::glIsSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glIsSyncAPPLE
  if (s_deviceConfig.m_glIsSyncAPPLE)
  {
    return s_deviceConfig.m_glIsSyncAPPLE (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteSyncAPPLE

void  glew::gles::glDeleteSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glDeleteSyncAPPLE
  if (s_deviceConfig.m_glDeleteSyncAPPLE)
  {
    s_deviceConfig.m_glDeleteSyncAPPLE (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientWaitSyncAPPLE

GLenum glew::gles::glClientWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glClientWaitSyncAPPLE
  if (s_deviceConfig.m_glClientWaitSyncAPPLE)
  {
    return s_deviceConfig.m_glClientWaitSyncAPPLE (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWaitSyncAPPLE

void  glew::gles::glWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glWaitSyncAPPLE
  if (s_deviceConfig.m_glWaitSyncAPPLE)
  {
    s_deviceConfig.m_glWaitSyncAPPLE (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInteger64vAPPLE

void  glew::gles::glGetInteger64vAPPLE (GLenum pname, GLint64 * params)
{
  // GL_APPLE_sync - glGetInteger64vAPPLE
  if (s_deviceConfig.m_glGetInteger64vAPPLE)
  {
    s_deviceConfig.m_glGetInteger64vAPPLE (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSyncivAPPLE

void  glew::gles::glGetSyncivAPPLE (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_APPLE_sync - glGetSyncivAPPLE
  if (s_deviceConfig.m_glGetSyncivAPPLE)
  {
    s_deviceConfig.m_glGetSyncivAPPLE (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedBaseInstanceEXT

void  glew::gles::glDrawArraysInstancedBaseInstanceEXT (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawArraysInstancedBaseInstanceEXT
  if (s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseInstanceEXT

void  glew::gles::glDrawElementsInstancedBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseInstanceEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseVertexBaseInstanceEXT

void  glew::gles::glDrawElementsInstancedBaseVertexBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseVertexBaseInstanceEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferStorageEXT

void  glew::gles::glBufferStorageEXT (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_EXT_buffer_storage - glBufferStorageEXT
  if (s_deviceConfig.m_glBufferStorageEXT)
  {
    s_deviceConfig.m_glBufferStorageEXT (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyImageSubDataEXT

void  glew::gles::glCopyImageSubDataEXT (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_EXT_copy_image - glCopyImageSubDataEXT
  if (s_deviceConfig.m_glCopyImageSubDataEXT)
  {
    s_deviceConfig.m_glCopyImageSubDataEXT (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLabelObjectEXT

void  glew::gles::glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar * label)
{
  // GL_EXT_debug_label - glLabelObjectEXT
  if (s_deviceConfig.m_glLabelObjectEXT)
  {
    s_deviceConfig.m_glLabelObjectEXT (type, object, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectLabelEXT

void  glew::gles::glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_EXT_debug_label - glGetObjectLabelEXT
  if (s_deviceConfig.m_glGetObjectLabelEXT)
  {
    s_deviceConfig.m_glGetObjectLabelEXT (type, object, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInsertEventMarkerEXT

void  glew::gles::glInsertEventMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glInsertEventMarkerEXT
  if (s_deviceConfig.m_glInsertEventMarkerEXT)
  {
    s_deviceConfig.m_glInsertEventMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushGroupMarkerEXT

void  glew::gles::glPushGroupMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glPushGroupMarkerEXT
  if (s_deviceConfig.m_glPushGroupMarkerEXT)
  {
    s_deviceConfig.m_glPushGroupMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPopGroupMarkerEXT

void  glew::gles::glPopGroupMarkerEXT ()
{
  // GL_EXT_debug_marker - glPopGroupMarkerEXT
  if (s_deviceConfig.m_glPopGroupMarkerEXT)
  {
    s_deviceConfig.m_glPopGroupMarkerEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDiscardFramebufferEXT

void  glew::gles::glDiscardFramebufferEXT (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_EXT_discard_framebuffer - glDiscardFramebufferEXT
  if (s_deviceConfig.m_glDiscardFramebufferEXT)
  {
    s_deviceConfig.m_glDiscardFramebufferEXT (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenQueriesEXT

void  glew::gles::glGenQueriesEXT (GLsizei n, GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glGenQueriesEXT
  if (s_deviceConfig.m_glGenQueriesEXT)
  {
    s_deviceConfig.m_glGenQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteQueriesEXT

void  glew::gles::glDeleteQueriesEXT (GLsizei n, const GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glDeleteQueriesEXT
  if (s_deviceConfig.m_glDeleteQueriesEXT)
  {
    s_deviceConfig.m_glDeleteQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsQueryEXT

GLboolean glew::gles::glIsQueryEXT (GLuint id)
{
  // GL_EXT_disjoint_timer_query - glIsQueryEXT
  if (s_deviceConfig.m_glIsQueryEXT)
  {
    return s_deviceConfig.m_glIsQueryEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginQueryEXT

void  glew::gles::glBeginQueryEXT (GLenum target, GLuint id)
{
  // GL_EXT_disjoint_timer_query - glBeginQueryEXT
  if (s_deviceConfig.m_glBeginQueryEXT)
  {
    s_deviceConfig.m_glBeginQueryEXT (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndQueryEXT

void  glew::gles::glEndQueryEXT (GLenum target)
{
  // GL_EXT_disjoint_timer_query - glEndQueryEXT
  if (s_deviceConfig.m_glEndQueryEXT)
  {
    s_deviceConfig.m_glEndQueryEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glQueryCounterEXT

void  glew::gles::glQueryCounterEXT (GLuint id, GLenum target)
{
  // GL_EXT_disjoint_timer_query - glQueryCounterEXT
  if (s_deviceConfig.m_glQueryCounterEXT)
  {
    s_deviceConfig.m_glQueryCounterEXT (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryivEXT

void  glew::gles::glGetQueryivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryivEXT
  if (s_deviceConfig.m_glGetQueryivEXT)
  {
    s_deviceConfig.m_glGetQueryivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectivEXT

void  glew::gles::glGetQueryObjectivEXT (GLuint id, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectivEXT
  if (s_deviceConfig.m_glGetQueryObjectivEXT)
  {
    s_deviceConfig.m_glGetQueryObjectivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectuivEXT

void  glew::gles::glGetQueryObjectuivEXT (GLuint id, GLenum pname, GLuint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectuivEXT
  if (s_deviceConfig.m_glGetQueryObjectuivEXT)
  {
    s_deviceConfig.m_glGetQueryObjectuivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjecti64vEXT

void  glew::gles::glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjecti64vEXT
  if (s_deviceConfig.m_glGetQueryObjecti64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjecti64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectui64vEXT

void  glew::gles::glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectui64vEXT
  if (s_deviceConfig.m_glGetQueryObjectui64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjectui64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffersEXT

void  glew::gles::glDrawBuffersEXT (GLsizei n, const GLenum * bufs)
{
  // GL_EXT_draw_buffers - glDrawBuffersEXT
  if (s_deviceConfig.m_glDrawBuffersEXT)
  {
    s_deviceConfig.m_glDrawBuffersEXT (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableiEXT

void  glew::gles::glEnableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glEnableiEXT
  if (s_deviceConfig.m_glEnableiEXT)
  {
    s_deviceConfig.m_glEnableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableiEXT

void  glew::gles::glDisableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glDisableiEXT
  if (s_deviceConfig.m_glDisableiEXT)
  {
    s_deviceConfig.m_glDisableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationiEXT

void  glew::gles::glBlendEquationiEXT (GLuint buf, GLenum mode)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationiEXT
  if (s_deviceConfig.m_glBlendEquationiEXT)
  {
    s_deviceConfig.m_glBlendEquationiEXT (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparateiEXT

void  glew::gles::glBlendEquationSeparateiEXT (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationSeparateiEXT
  if (s_deviceConfig.m_glBlendEquationSeparateiEXT)
  {
    s_deviceConfig.m_glBlendEquationSeparateiEXT (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFunciEXT

void  glew::gles::glBlendFunciEXT (GLuint buf, GLenum src, GLenum dst)
{
  // GL_EXT_draw_buffers_indexed - glBlendFunciEXT
  if (s_deviceConfig.m_glBlendFunciEXT)
  {
    s_deviceConfig.m_glBlendFunciEXT (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateiEXT

void  glew::gles::glBlendFuncSeparateiEXT (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendFuncSeparateiEXT
  if (s_deviceConfig.m_glBlendFuncSeparateiEXT)
  {
    s_deviceConfig.m_glBlendFuncSeparateiEXT (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorMaskiEXT

void  glew::gles::glColorMaskiEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_EXT_draw_buffers_indexed - glColorMaskiEXT
  if (s_deviceConfig.m_glColorMaskiEXT)
  {
    s_deviceConfig.m_glColorMaskiEXT (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsEnablediEXT

GLboolean glew::gles::glIsEnablediEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glIsEnablediEXT
  if (s_deviceConfig.m_glIsEnablediEXT)
  {
    return s_deviceConfig.m_glIsEnablediEXT (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsBaseVertexEXT

void  glew::gles::glDrawElementsBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsBaseVertexEXT
  if (s_deviceConfig.m_glDrawElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawElementsBaseVertexEXT (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementsBaseVertexEXT

void  glew::gles::glDrawRangeElementsBaseVertexEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawRangeElementsBaseVertexEXT
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseVertexEXT

void  glew::gles::glDrawElementsInstancedBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsBaseVertexEXT

void  glew::gles::glMultiDrawElementsBaseVertexEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glMultiDrawElementsBaseVertexEXT
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedEXT

void  glew::gles::glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawArraysInstancedEXT
  if (s_deviceConfig.m_glDrawArraysInstancedEXT)
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT (mode, start, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedEXT

void  glew::gles::glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawElementsInstancedEXT
  if (s_deviceConfig.m_glDrawElementsInstancedEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureEXT

void  glew::gles::glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_EXT_geometry_shader - glFramebufferTextureEXT
  if (s_deviceConfig.m_glFramebufferTextureEXT)
  {
    s_deviceConfig.m_glFramebufferTextureEXT (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisorEXT

void  glew::gles::glVertexAttribDivisorEXT (GLuint index, GLuint divisor)
{
  // GL_EXT_instanced_arrays - glVertexAttribDivisorEXT
  if (s_deviceConfig.m_glVertexAttribDivisorEXT)
  {
    s_deviceConfig.m_glVertexAttribDivisorEXT (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBufferRangeEXT

void * glew::gles::glMapBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_EXT_map_buffer_range - glMapBufferRangeEXT
  if (s_deviceConfig.m_glMapBufferRangeEXT)
  {
    return s_deviceConfig.m_glMapBufferRangeEXT (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedBufferRangeEXT

void  glew::gles::glFlushMappedBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_EXT_map_buffer_range - glFlushMappedBufferRangeEXT
  if (s_deviceConfig.m_glFlushMappedBufferRangeEXT)
  {
    s_deviceConfig.m_glFlushMappedBufferRangeEXT (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysEXT

void  glew::gles::glMultiDrawArraysEXT (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawArraysEXT
  if (s_deviceConfig.m_glMultiDrawArraysEXT)
  {
    s_deviceConfig.m_glMultiDrawArraysEXT (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsEXT

void  glew::gles::glMultiDrawElementsEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawElementsEXT
  if (s_deviceConfig.m_glMultiDrawElementsEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirectEXT

void  glew::gles::glMultiDrawArraysIndirectEXT (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawArraysIndirectEXT
  if (s_deviceConfig.m_glMultiDrawArraysIndirectEXT)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectEXT (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirectEXT

void  glew::gles::glMultiDrawElementsIndirectEXT (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawElementsIndirectEXT
  if (s_deviceConfig.m_glMultiDrawElementsIndirectEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectEXT (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleEXT

void  glew::gles::glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_multisampled_render_to_texture - glRenderbufferStorageMultisampleEXT
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleEXT)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture2DMultisampleEXT

void  glew::gles::glFramebufferTexture2DMultisampleEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_EXT_multisampled_render_to_texture - glFramebufferTexture2DMultisampleEXT
  if (s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT)
  {
    s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadBufferIndexedEXT

void  glew::gles::glReadBufferIndexedEXT (GLenum src, GLint index)
{
  // GL_EXT_multiview_draw_buffers - glReadBufferIndexedEXT
  if (s_deviceConfig.m_glReadBufferIndexedEXT)
  {
    s_deviceConfig.m_glReadBufferIndexedEXT (src, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffersIndexedEXT

void  glew::gles::glDrawBuffersIndexedEXT (GLint n, const GLenum * location, const GLint * indices)
{
  // GL_EXT_multiview_draw_buffers - glDrawBuffersIndexedEXT
  if (s_deviceConfig.m_glDrawBuffersIndexedEXT)
  {
    s_deviceConfig.m_glDrawBuffersIndexedEXT (n, location, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegeri_vEXT

void  glew::gles::glGetIntegeri_vEXT (GLenum target, GLuint index, GLint * data)
{
  // GL_EXT_multiview_draw_buffers - glGetIntegeri_vEXT
  if (s_deviceConfig.m_glGetIntegeri_vEXT)
  {
    s_deviceConfig.m_glGetIntegeri_vEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrimitiveBoundingBoxEXT

void  glew::gles::glPrimitiveBoundingBoxEXT (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_EXT_primitive_bounding_box - glPrimitiveBoundingBoxEXT
  if (s_deviceConfig.m_glPrimitiveBoundingBoxEXT)
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxEXT (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterSamplesEXT

void  glew::gles::glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
{
  // GL_EXT_raster_multisample - glRasterSamplesEXT
  if (s_deviceConfig.m_glRasterSamplesEXT)
  {
    s_deviceConfig.m_glRasterSamplesEXT (samples, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetGraphicsResetStatusEXT

GLenum glew::gles::glGetGraphicsResetStatusEXT ()
{
  // GL_EXT_robustness - glGetGraphicsResetStatusEXT
  if (s_deviceConfig.m_glGetGraphicsResetStatusEXT)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusEXT ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadnPixelsEXT

void  glew::gles::glReadnPixelsEXT (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_EXT_robustness - glReadnPixelsEXT
  if (s_deviceConfig.m_glReadnPixelsEXT)
  {
    s_deviceConfig.m_glReadnPixelsEXT (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformfvEXT

void  glew::gles::glGetnUniformfvEXT (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_EXT_robustness - glGetnUniformfvEXT
  if (s_deviceConfig.m_glGetnUniformfvEXT)
  {
    s_deviceConfig.m_glGetnUniformfvEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformivEXT

void  glew::gles::glGetnUniformivEXT (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_EXT_robustness - glGetnUniformivEXT
  if (s_deviceConfig.m_glGetnUniformivEXT)
  {
    s_deviceConfig.m_glGetnUniformivEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveShaderProgramEXT

void  glew::gles::glActiveShaderProgramEXT (GLuint pipeline, GLuint program)
{
  // GL_EXT_separate_shader_objects - glActiveShaderProgramEXT
  if (s_deviceConfig.m_glActiveShaderProgramEXT)
  {
    s_deviceConfig.m_glActiveShaderProgramEXT (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindProgramPipelineEXT

void  glew::gles::glBindProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glBindProgramPipelineEXT
  if (s_deviceConfig.m_glBindProgramPipelineEXT)
  {
    s_deviceConfig.m_glBindProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShaderProgramvEXT

GLuint glew::gles::glCreateShaderProgramvEXT (GLenum type, GLsizei count, const GLchar ** strings)
{
  // GL_EXT_separate_shader_objects - glCreateShaderProgramvEXT
  if (s_deviceConfig.m_glCreateShaderProgramvEXT)
  {
    return s_deviceConfig.m_glCreateShaderProgramvEXT (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgramPipelinesEXT

void  glew::gles::glDeleteProgramPipelinesEXT (GLsizei n, const GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glDeleteProgramPipelinesEXT
  if (s_deviceConfig.m_glDeleteProgramPipelinesEXT)
  {
    s_deviceConfig.m_glDeleteProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenProgramPipelinesEXT

void  glew::gles::glGenProgramPipelinesEXT (GLsizei n, GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glGenProgramPipelinesEXT
  if (s_deviceConfig.m_glGenProgramPipelinesEXT)
  {
    s_deviceConfig.m_glGenProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineInfoLogEXT

void  glew::gles::glGetProgramPipelineInfoLogEXT (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineInfoLogEXT
  if (s_deviceConfig.m_glGetProgramPipelineInfoLogEXT)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLogEXT (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineivEXT

void  glew::gles::glGetProgramPipelineivEXT (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineivEXT
  if (s_deviceConfig.m_glGetProgramPipelineivEXT)
  {
    s_deviceConfig.m_glGetProgramPipelineivEXT (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgramPipelineEXT

GLboolean glew::gles::glIsProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glIsProgramPipelineEXT
  if (s_deviceConfig.m_glIsProgramPipelineEXT)
  {
    return s_deviceConfig.m_glIsProgramPipelineEXT (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameteriEXT

void  glew::gles::glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
{
  // GL_EXT_separate_shader_objects - glProgramParameteriEXT
  if (s_deviceConfig.m_glProgramParameteriEXT)
  {
    s_deviceConfig.m_glProgramParameteriEXT (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fEXT

void  glew::gles::glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fEXT
  if (s_deviceConfig.m_glProgramUniform1fEXT)
  {
    s_deviceConfig.m_glProgramUniform1fEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fvEXT

void  glew::gles::glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fvEXT
  if (s_deviceConfig.m_glProgramUniform1fvEXT)
  {
    s_deviceConfig.m_glProgramUniform1fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1iEXT

void  glew::gles::glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1iEXT
  if (s_deviceConfig.m_glProgramUniform1iEXT)
  {
    s_deviceConfig.m_glProgramUniform1iEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ivEXT

void  glew::gles::glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1ivEXT
  if (s_deviceConfig.m_glProgramUniform1ivEXT)
  {
    s_deviceConfig.m_glProgramUniform1ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fEXT

void  glew::gles::glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fEXT
  if (s_deviceConfig.m_glProgramUniform2fEXT)
  {
    s_deviceConfig.m_glProgramUniform2fEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fvEXT

void  glew::gles::glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fvEXT
  if (s_deviceConfig.m_glProgramUniform2fvEXT)
  {
    s_deviceConfig.m_glProgramUniform2fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2iEXT

void  glew::gles::glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2iEXT
  if (s_deviceConfig.m_glProgramUniform2iEXT)
  {
    s_deviceConfig.m_glProgramUniform2iEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ivEXT

void  glew::gles::glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2ivEXT
  if (s_deviceConfig.m_glProgramUniform2ivEXT)
  {
    s_deviceConfig.m_glProgramUniform2ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fEXT

void  glew::gles::glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fEXT
  if (s_deviceConfig.m_glProgramUniform3fEXT)
  {
    s_deviceConfig.m_glProgramUniform3fEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fvEXT

void  glew::gles::glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fvEXT
  if (s_deviceConfig.m_glProgramUniform3fvEXT)
  {
    s_deviceConfig.m_glProgramUniform3fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3iEXT

void  glew::gles::glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3iEXT
  if (s_deviceConfig.m_glProgramUniform3iEXT)
  {
    s_deviceConfig.m_glProgramUniform3iEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ivEXT

void  glew::gles::glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3ivEXT
  if (s_deviceConfig.m_glProgramUniform3ivEXT)
  {
    s_deviceConfig.m_glProgramUniform3ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fEXT

void  glew::gles::glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fEXT
  if (s_deviceConfig.m_glProgramUniform4fEXT)
  {
    s_deviceConfig.m_glProgramUniform4fEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fvEXT

void  glew::gles::glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fvEXT
  if (s_deviceConfig.m_glProgramUniform4fvEXT)
  {
    s_deviceConfig.m_glProgramUniform4fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4iEXT

void  glew::gles::glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4iEXT
  if (s_deviceConfig.m_glProgramUniform4iEXT)
  {
    s_deviceConfig.m_glProgramUniform4iEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ivEXT

void  glew::gles::glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4ivEXT
  if (s_deviceConfig.m_glProgramUniform4ivEXT)
  {
    s_deviceConfig.m_glProgramUniform4ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2fvEXT

void  glew::gles::glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3fvEXT

void  glew::gles::glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4fvEXT

void  glew::gles::glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseProgramStagesEXT

void  glew::gles::glUseProgramStagesEXT (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_EXT_separate_shader_objects - glUseProgramStagesEXT
  if (s_deviceConfig.m_glUseProgramStagesEXT)
  {
    s_deviceConfig.m_glUseProgramStagesEXT (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glValidateProgramPipelineEXT

void  glew::gles::glValidateProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glValidateProgramPipelineEXT
  if (s_deviceConfig.m_glValidateProgramPipelineEXT)
  {
    s_deviceConfig.m_glValidateProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uiEXT

void  glew::gles::glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uiEXT
  if (s_deviceConfig.m_glProgramUniform1uiEXT)
  {
    s_deviceConfig.m_glProgramUniform1uiEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uiEXT

void  glew::gles::glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uiEXT
  if (s_deviceConfig.m_glProgramUniform2uiEXT)
  {
    s_deviceConfig.m_glProgramUniform2uiEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uiEXT

void  glew::gles::glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uiEXT
  if (s_deviceConfig.m_glProgramUniform3uiEXT)
  {
    s_deviceConfig.m_glProgramUniform3uiEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uiEXT

void  glew::gles::glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uiEXT
  if (s_deviceConfig.m_glProgramUniform4uiEXT)
  {
    s_deviceConfig.m_glProgramUniform4uiEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uivEXT

void  glew::gles::glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uivEXT
  if (s_deviceConfig.m_glProgramUniform1uivEXT)
  {
    s_deviceConfig.m_glProgramUniform1uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uivEXT

void  glew::gles::glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uivEXT
  if (s_deviceConfig.m_glProgramUniform2uivEXT)
  {
    s_deviceConfig.m_glProgramUniform2uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uivEXT

void  glew::gles::glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uivEXT
  if (s_deviceConfig.m_glProgramUniform3uivEXT)
  {
    s_deviceConfig.m_glProgramUniform3uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uivEXT

void  glew::gles::glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uivEXT
  if (s_deviceConfig.m_glProgramUniform4uivEXT)
  {
    s_deviceConfig.m_glProgramUniform4uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3fvEXT

void  glew::gles::glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2fvEXT

void  glew::gles::glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4fvEXT

void  glew::gles::glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2fvEXT

void  glew::gles::glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4fvEXT

void  glew::gles::glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3fvEXT

void  glew::gles::glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexPageCommitmentARB

void  glew::gles::glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_EXT_sparse_texture - glTexPageCommitmentARB
  if (s_deviceConfig.m_glTexPageCommitmentARB)
  {
    s_deviceConfig.m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPatchParameteriEXT

void  glew::gles::glPatchParameteriEXT (GLenum pname, GLint value)
{
  // GL_EXT_tessellation_shader - glPatchParameteriEXT
  if (s_deviceConfig.m_glPatchParameteriEXT)
  {
    s_deviceConfig.m_glPatchParameteriEXT (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIivEXT

void  glew::gles::glTexParameterIivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIivEXT
  if (s_deviceConfig.m_glTexParameterIivEXT)
  {
    s_deviceConfig.m_glTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIuivEXT

void  glew::gles::glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIuivEXT
  if (s_deviceConfig.m_glTexParameterIuivEXT)
  {
    s_deviceConfig.m_glTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIivEXT

void  glew::gles::glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIivEXT
  if (s_deviceConfig.m_glGetTexParameterIivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIuivEXT

void  glew::gles::glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIuivEXT
  if (s_deviceConfig.m_glGetTexParameterIuivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIivEXT

void  glew::gles::glSamplerParameterIivEXT (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIivEXT
  if (s_deviceConfig.m_glSamplerParameterIivEXT)
  {
    s_deviceConfig.m_glSamplerParameterIivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIuivEXT

void  glew::gles::glSamplerParameterIuivEXT (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIuivEXT
  if (s_deviceConfig.m_glSamplerParameterIuivEXT)
  {
    s_deviceConfig.m_glSamplerParameterIuivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIivEXT

void  glew::gles::glGetSamplerParameterIivEXT (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIivEXT
  if (s_deviceConfig.m_glGetSamplerParameterIivEXT)
  {
    s_deviceConfig.m_glGetSamplerParameterIivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIuivEXT

void  glew::gles::glGetSamplerParameterIuivEXT (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIuivEXT
  if (s_deviceConfig.m_glGetSamplerParameterIuivEXT)
  {
    s_deviceConfig.m_glGetSamplerParameterIuivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferEXT

void  glew::gles::glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_texture_buffer - glTexBufferEXT
  if (s_deviceConfig.m_glTexBufferEXT)
  {
    s_deviceConfig.m_glTexBufferEXT (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferRangeEXT

void  glew::gles::glTexBufferRangeEXT (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_EXT_texture_buffer - glTexBufferRangeEXT
  if (s_deviceConfig.m_glTexBufferRangeEXT)
  {
    s_deviceConfig.m_glTexBufferRangeEXT (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage1DEXT

void  glew::gles::glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTexStorage1DEXT
  if (s_deviceConfig.m_glTexStorage1DEXT)
  {
    s_deviceConfig.m_glTexStorage1DEXT (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage2DEXT

void  glew::gles::glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTexStorage2DEXT
  if (s_deviceConfig.m_glTexStorage2DEXT)
  {
    s_deviceConfig.m_glTexStorage2DEXT (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage3DEXT

void  glew::gles::glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTexStorage3DEXT
  if (s_deviceConfig.m_glTexStorage3DEXT)
  {
    s_deviceConfig.m_glTexStorage3DEXT (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage1DEXT

void  glew::gles::glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTextureStorage1DEXT
  if (s_deviceConfig.m_glTextureStorage1DEXT)
  {
    s_deviceConfig.m_glTextureStorage1DEXT (texture, target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage2DEXT

void  glew::gles::glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTextureStorage2DEXT
  if (s_deviceConfig.m_glTextureStorage2DEXT)
  {
    s_deviceConfig.m_glTextureStorage2DEXT (texture, target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage3DEXT

void  glew::gles::glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTextureStorage3DEXT
  if (s_deviceConfig.m_glTextureStorage3DEXT)
  {
    s_deviceConfig.m_glTextureStorage3DEXT (texture, target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureViewEXT

void  glew::gles::glTextureViewEXT (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_EXT_texture_view - glTextureViewEXT
  if (s_deviceConfig.m_glTextureViewEXT)
  {
    s_deviceConfig.m_glTextureViewEXT (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleIMG

void  glew::gles::glRenderbufferStorageMultisampleIMG (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_IMG_multisampled_render_to_texture - glRenderbufferStorageMultisampleIMG
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleIMG)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleIMG (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture2DMultisampleIMG

void  glew::gles::glFramebufferTexture2DMultisampleIMG (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_IMG_multisampled_render_to_texture - glFramebufferTexture2DMultisampleIMG
  if (s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG)
  {
    s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginPerfQueryINTEL

void  glew::gles::glBeginPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glBeginPerfQueryINTEL
  if (s_deviceConfig.m_glBeginPerfQueryINTEL)
  {
    s_deviceConfig.m_glBeginPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreatePerfQueryINTEL

void  glew::gles::glCreatePerfQueryINTEL (GLuint queryId, GLuint * queryHandle)
{
  // GL_INTEL_performance_query - glCreatePerfQueryINTEL
  if (s_deviceConfig.m_glCreatePerfQueryINTEL)
  {
    s_deviceConfig.m_glCreatePerfQueryINTEL (queryId, queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePerfQueryINTEL

void  glew::gles::glDeletePerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glDeletePerfQueryINTEL
  if (s_deviceConfig.m_glDeletePerfQueryINTEL)
  {
    s_deviceConfig.m_glDeletePerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndPerfQueryINTEL

void  glew::gles::glEndPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glEndPerfQueryINTEL
  if (s_deviceConfig.m_glEndPerfQueryINTEL)
  {
    s_deviceConfig.m_glEndPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFirstPerfQueryIdINTEL

void  glew::gles::glGetFirstPerfQueryIdINTEL (GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetFirstPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetFirstPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL (queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNextPerfQueryIdINTEL

void  glew::gles::glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint * nextQueryId)
{
  // GL_INTEL_performance_query - glGetNextPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetNextPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL (queryId, nextQueryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfCounterInfoINTEL

void  glew::gles::glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue)
{
  // GL_INTEL_performance_query - glGetPerfCounterInfoINTEL
  if (s_deviceConfig.m_glGetPerfCounterInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfCounterInfoINTEL (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryDataINTEL

void  glew::gles::glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten)
{
  // GL_INTEL_performance_query - glGetPerfQueryDataINTEL
  if (s_deviceConfig.m_glGetPerfQueryDataINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryDataINTEL (queryHandle, flags, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryIdByNameINTEL

void  glew::gles::glGetPerfQueryIdByNameINTEL (GLchar * queryName, GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetPerfQueryIdByNameINTEL
  if (s_deviceConfig.m_glGetPerfQueryIdByNameINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL (queryName, queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryInfoINTEL

void  glew::gles::glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask)
{
  // GL_INTEL_performance_query - glGetPerfQueryInfoINTEL
  if (s_deviceConfig.m_glGetPerfQueryInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryInfoINTEL (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendBarrierKHR

void  glew::gles::glBlendBarrierKHR ()
{
  // GL_KHR_blend_equation_advanced - glBlendBarrierKHR
  if (s_deviceConfig.m_glBlendBarrierKHR)
  {
    s_deviceConfig.m_glBlendBarrierKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageControlKHR

void  glew::gles::glDebugMessageControlKHR (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_KHR_debug - glDebugMessageControlKHR
  if (s_deviceConfig.m_glDebugMessageControlKHR)
  {
    s_deviceConfig.m_glDebugMessageControlKHR (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageInsertKHR

void  glew::gles::glDebugMessageInsertKHR (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_KHR_debug - glDebugMessageInsertKHR
  if (s_deviceConfig.m_glDebugMessageInsertKHR)
  {
    s_deviceConfig.m_glDebugMessageInsertKHR (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageCallbackKHR

void  glew::gles::glDebugMessageCallbackKHR (GLDEBUGPROCKHR callback, const void * userParam)
{
  // GL_KHR_debug - glDebugMessageCallbackKHR
  if (s_deviceConfig.m_glDebugMessageCallbackKHR)
  {
    s_deviceConfig.m_glDebugMessageCallbackKHR (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDebugMessageLogKHR

GLuint glew::gles::glGetDebugMessageLogKHR (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_KHR_debug - glGetDebugMessageLogKHR
  if (s_deviceConfig.m_glGetDebugMessageLogKHR)
  {
    return s_deviceConfig.m_glGetDebugMessageLogKHR (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushDebugGroupKHR

void  glew::gles::glPushDebugGroupKHR (GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
  // GL_KHR_debug - glPushDebugGroupKHR
  if (s_deviceConfig.m_glPushDebugGroupKHR)
  {
    s_deviceConfig.m_glPushDebugGroupKHR (source, id, length, message);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPopDebugGroupKHR

void  glew::gles::glPopDebugGroupKHR ()
{
  // GL_KHR_debug - glPopDebugGroupKHR
  if (s_deviceConfig.m_glPopDebugGroupKHR)
  {
    s_deviceConfig.m_glPopDebugGroupKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectLabelKHR

void  glew::gles::glObjectLabelKHR (GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectLabelKHR
  if (s_deviceConfig.m_glObjectLabelKHR)
  {
    s_deviceConfig.m_glObjectLabelKHR (identifier, name, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectLabelKHR

void  glew::gles::glGetObjectLabelKHR (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectLabelKHR
  if (s_deviceConfig.m_glGetObjectLabelKHR)
  {
    s_deviceConfig.m_glGetObjectLabelKHR (identifier, name, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectPtrLabelKHR

void  glew::gles::glObjectPtrLabelKHR (const void * ptr, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectPtrLabelKHR
  if (s_deviceConfig.m_glObjectPtrLabelKHR)
  {
    s_deviceConfig.m_glObjectPtrLabelKHR (ptr, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectPtrLabelKHR

void  glew::gles::glGetObjectPtrLabelKHR (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectPtrLabelKHR
  if (s_deviceConfig.m_glGetObjectPtrLabelKHR)
  {
    s_deviceConfig.m_glGetObjectPtrLabelKHR (ptr, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPointervKHR

void  glew::gles::glGetPointervKHR (GLenum pname, void ** params)
{
  // GL_KHR_debug - glGetPointervKHR
  if (s_deviceConfig.m_glGetPointervKHR)
  {
    s_deviceConfig.m_glGetPointervKHR (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetGraphicsResetStatusKHR

GLenum glew::gles::glGetGraphicsResetStatusKHR ()
{
  // GL_KHR_robustness - glGetGraphicsResetStatusKHR
  if (s_deviceConfig.m_glGetGraphicsResetStatusKHR)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusKHR ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadnPixelsKHR

void  glew::gles::glReadnPixelsKHR (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_KHR_robustness - glReadnPixelsKHR
  if (s_deviceConfig.m_glReadnPixelsKHR)
  {
    s_deviceConfig.m_glReadnPixelsKHR (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformfvKHR

void  glew::gles::glGetnUniformfvKHR (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_KHR_robustness - glGetnUniformfvKHR
  if (s_deviceConfig.m_glGetnUniformfvKHR)
  {
    s_deviceConfig.m_glGetnUniformfvKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformivKHR

void  glew::gles::glGetnUniformivKHR (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_KHR_robustness - glGetnUniformivKHR
  if (s_deviceConfig.m_glGetnUniformivKHR)
  {
    s_deviceConfig.m_glGetnUniformivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformuivKHR

void  glew::gles::glGetnUniformuivKHR (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_KHR_robustness - glGetnUniformuivKHR
  if (s_deviceConfig.m_glGetnUniformuivKHR)
  {
    s_deviceConfig.m_glGetnUniformuivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureHandleNV

GLuint64 glew::gles::glGetTextureHandleNV (GLuint texture)
{
  // GL_NV_bindless_texture - glGetTextureHandleNV
  if (s_deviceConfig.m_glGetTextureHandleNV)
  {
    return s_deviceConfig.m_glGetTextureHandleNV (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureSamplerHandleNV

GLuint64 glew::gles::glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
{
  // GL_NV_bindless_texture - glGetTextureSamplerHandleNV
  if (s_deviceConfig.m_glGetTextureSamplerHandleNV)
  {
    return s_deviceConfig.m_glGetTextureSamplerHandleNV (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleResidentNV

void  glew::gles::glMakeTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleNonResidentNV

void  glew::gles::glMakeTextureHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleNonResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetImageHandleNV

GLuint64 glew::gles::glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_NV_bindless_texture - glGetImageHandleNV
  if (s_deviceConfig.m_glGetImageHandleNV)
  {
    return s_deviceConfig.m_glGetImageHandleNV (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleResidentNV

void  glew::gles::glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
{
  // GL_NV_bindless_texture - glMakeImageHandleResidentNV
  if (s_deviceConfig.m_glMakeImageHandleResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleResidentNV (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleNonResidentNV

void  glew::gles::glMakeImageHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeImageHandleNonResidentNV
  if (s_deviceConfig.m_glMakeImageHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64NV

void  glew::gles::glUniformHandleui64NV (GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glUniformHandleui64NV
  if (s_deviceConfig.m_glUniformHandleui64NV)
  {
    s_deviceConfig.m_glUniformHandleui64NV (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64vNV

void  glew::gles::glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_NV_bindless_texture - glUniformHandleui64vNV
  if (s_deviceConfig.m_glUniformHandleui64vNV)
  {
    s_deviceConfig.m_glUniformHandleui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64NV

void  glew::gles::glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64NV
  if (s_deviceConfig.m_glProgramUniformHandleui64NV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64NV (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64vNV

void  glew::gles::glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64vNV
  if (s_deviceConfig.m_glProgramUniformHandleui64vNV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64vNV (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTextureHandleResidentNV

GLboolean glew::gles::glIsTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsTextureHandleResidentNV
  if (s_deviceConfig.m_glIsTextureHandleResidentNV)
  {
    return s_deviceConfig.m_glIsTextureHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsImageHandleResidentNV

GLboolean glew::gles::glIsImageHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsImageHandleResidentNV
  if (s_deviceConfig.m_glIsImageHandleResidentNV)
  {
    return s_deviceConfig.m_glIsImageHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendParameteriNV

void  glew::gles::glBlendParameteriNV (GLenum pname, GLint value)
{
  // GL_NV_blend_equation_advanced - glBlendParameteriNV
  if (s_deviceConfig.m_glBlendParameteriNV)
  {
    s_deviceConfig.m_glBlendParameteriNV (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendBarrierNV

void  glew::gles::glBlendBarrierNV ()
{
  // GL_NV_blend_equation_advanced - glBlendBarrierNV
  if (s_deviceConfig.m_glBlendBarrierNV)
  {
    s_deviceConfig.m_glBlendBarrierNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginConditionalRenderNV

void  glew::gles::glBeginConditionalRenderNV (GLuint id, GLenum mode)
{
  // GL_NV_conditional_render - glBeginConditionalRenderNV
  if (s_deviceConfig.m_glBeginConditionalRenderNV)
  {
    s_deviceConfig.m_glBeginConditionalRenderNV (id, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndConditionalRenderNV

void  glew::gles::glEndConditionalRenderNV ()
{
  // GL_NV_conditional_render - glEndConditionalRenderNV
  if (s_deviceConfig.m_glEndConditionalRenderNV)
  {
    s_deviceConfig.m_glEndConditionalRenderNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSubpixelPrecisionBiasNV

void  glew::gles::glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
{
  // GL_NV_conservative_raster - glSubpixelPrecisionBiasNV
  if (s_deviceConfig.m_glSubpixelPrecisionBiasNV)
  {
    s_deviceConfig.m_glSubpixelPrecisionBiasNV (xbits, ybits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyBufferSubDataNV

void  glew::gles::glCopyBufferSubDataNV (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_NV_copy_buffer - glCopyBufferSubDataNV
  if (s_deviceConfig.m_glCopyBufferSubDataNV)
  {
    s_deviceConfig.m_glCopyBufferSubDataNV (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageMaskNV

void  glew::gles::glCoverageMaskNV (GLboolean mask)
{
  // GL_NV_coverage_sample - glCoverageMaskNV
  if (s_deviceConfig.m_glCoverageMaskNV)
  {
    s_deviceConfig.m_glCoverageMaskNV (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageOperationNV

void  glew::gles::glCoverageOperationNV (GLenum operation)
{
  // GL_NV_coverage_sample - glCoverageOperationNV
  if (s_deviceConfig.m_glCoverageOperationNV)
  {
    s_deviceConfig.m_glCoverageOperationNV (operation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffersNV

void  glew::gles::glDrawBuffersNV (GLsizei n, const GLenum * bufs)
{
  // GL_NV_draw_buffers - glDrawBuffersNV
  if (s_deviceConfig.m_glDrawBuffersNV)
  {
    s_deviceConfig.m_glDrawBuffersNV (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedNV

void  glew::gles::glDrawArraysInstancedNV (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawArraysInstancedNV
  if (s_deviceConfig.m_glDrawArraysInstancedNV)
  {
    s_deviceConfig.m_glDrawArraysInstancedNV (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedNV

void  glew::gles::glDrawElementsInstancedNV (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawElementsInstancedNV
  if (s_deviceConfig.m_glDrawElementsInstancedNV)
  {
    s_deviceConfig.m_glDrawElementsInstancedNV (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFencesNV

void  glew::gles::glDeleteFencesNV (GLsizei n, const GLuint * fences)
{
  // GL_NV_fence - glDeleteFencesNV
  if (s_deviceConfig.m_glDeleteFencesNV)
  {
    s_deviceConfig.m_glDeleteFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFencesNV

void  glew::gles::glGenFencesNV (GLsizei n, GLuint * fences)
{
  // GL_NV_fence - glGenFencesNV
  if (s_deviceConfig.m_glGenFencesNV)
  {
    s_deviceConfig.m_glGenFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsFenceNV

GLboolean glew::gles::glIsFenceNV (GLuint fence)
{
  // GL_NV_fence - glIsFenceNV
  if (s_deviceConfig.m_glIsFenceNV)
  {
    return s_deviceConfig.m_glIsFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTestFenceNV

GLboolean glew::gles::glTestFenceNV (GLuint fence)
{
  // GL_NV_fence - glTestFenceNV
  if (s_deviceConfig.m_glTestFenceNV)
  {
    return s_deviceConfig.m_glTestFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFenceivNV

void  glew::gles::glGetFenceivNV (GLuint fence, GLenum pname, GLint * params)
{
  // GL_NV_fence - glGetFenceivNV
  if (s_deviceConfig.m_glGetFenceivNV)
  {
    s_deviceConfig.m_glGetFenceivNV (fence, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishFenceNV

void  glew::gles::glFinishFenceNV (GLuint fence)
{
  // GL_NV_fence - glFinishFenceNV
  if (s_deviceConfig.m_glFinishFenceNV)
  {
    s_deviceConfig.m_glFinishFenceNV (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetFenceNV

void  glew::gles::glSetFenceNV (GLuint fence, GLenum condition)
{
  // GL_NV_fence - glSetFenceNV
  if (s_deviceConfig.m_glSetFenceNV)
  {
    s_deviceConfig.m_glSetFenceNV (fence, condition);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentCoverageColorNV

void  glew::gles::glFragmentCoverageColorNV (GLuint color)
{
  // GL_NV_fragment_coverage_to_color - glFragmentCoverageColorNV
  if (s_deviceConfig.m_glFragmentCoverageColorNV)
  {
    s_deviceConfig.m_glFragmentCoverageColorNV (color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitFramebufferNV

void  glew::gles::glBlitFramebufferNV (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_NV_framebuffer_blit - glBlitFramebufferNV
  if (s_deviceConfig.m_glBlitFramebufferNV)
  {
    s_deviceConfig.m_glBlitFramebufferNV (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageModulationTableNV

void  glew::gles::glCoverageModulationTableNV (GLsizei n, const GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationTableNV
  if (s_deviceConfig.m_glCoverageModulationTableNV)
  {
    s_deviceConfig.m_glCoverageModulationTableNV (n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCoverageModulationTableNV

void  glew::gles::glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glGetCoverageModulationTableNV
  if (s_deviceConfig.m_glGetCoverageModulationTableNV)
  {
    s_deviceConfig.m_glGetCoverageModulationTableNV (bufsize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageModulationNV

void  glew::gles::glCoverageModulationNV (GLenum components)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationNV
  if (s_deviceConfig.m_glCoverageModulationNV)
  {
    s_deviceConfig.m_glCoverageModulationNV (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleNV

void  glew::gles::glRenderbufferStorageMultisampleNV (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_NV_framebuffer_multisample - glRenderbufferStorageMultisampleNV
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleNV)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleNV (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisorNV

void  glew::gles::glVertexAttribDivisorNV (GLuint index, GLuint divisor)
{
  // GL_NV_instanced_arrays - glVertexAttribDivisorNV
  if (s_deviceConfig.m_glVertexAttribDivisorNV)
  {
    s_deviceConfig.m_glVertexAttribDivisorNV (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInternalformatSampleivNV

void  glew::gles::glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_NV_internalformat_sample_query - glGetInternalformatSampleivNV
  if (s_deviceConfig.m_glGetInternalformatSampleivNV)
  {
    s_deviceConfig.m_glGetInternalformatSampleivNV (target, internalformat, samples, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x3fvNV

void  glew::gles::glUniformMatrix2x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x3fvNV
  if (s_deviceConfig.m_glUniformMatrix2x3fvNV)
  {
    s_deviceConfig.m_glUniformMatrix2x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x2fvNV

void  glew::gles::glUniformMatrix3x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x2fvNV
  if (s_deviceConfig.m_glUniformMatrix3x2fvNV)
  {
    s_deviceConfig.m_glUniformMatrix3x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x4fvNV

void  glew::gles::glUniformMatrix2x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x4fvNV
  if (s_deviceConfig.m_glUniformMatrix2x4fvNV)
  {
    s_deviceConfig.m_glUniformMatrix2x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x2fvNV

void  glew::gles::glUniformMatrix4x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x2fvNV
  if (s_deviceConfig.m_glUniformMatrix4x2fvNV)
  {
    s_deviceConfig.m_glUniformMatrix4x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x4fvNV

void  glew::gles::glUniformMatrix3x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x4fvNV
  if (s_deviceConfig.m_glUniformMatrix3x4fvNV)
  {
    s_deviceConfig.m_glUniformMatrix3x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x3fvNV

void  glew::gles::glUniformMatrix4x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x3fvNV
  if (s_deviceConfig.m_glUniformMatrix4x3fvNV)
  {
    s_deviceConfig.m_glUniformMatrix4x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenPathsNV

GLuint glew::gles::glGenPathsNV (GLsizei range)
{
  // GL_NV_path_rendering - glGenPathsNV
  if (s_deviceConfig.m_glGenPathsNV)
  {
    return s_deviceConfig.m_glGenPathsNV (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePathsNV

void  glew::gles::glDeletePathsNV (GLuint path, GLsizei range)
{
  // GL_NV_path_rendering - glDeletePathsNV
  if (s_deviceConfig.m_glDeletePathsNV)
  {
    s_deviceConfig.m_glDeletePathsNV (path, range);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPathNV

GLboolean glew::gles::glIsPathNV (GLuint path)
{
  // GL_NV_path_rendering - glIsPathNV
  if (s_deviceConfig.m_glIsPathNV)
  {
    return s_deviceConfig.m_glIsPathNV (path);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCommandsNV

void  glew::gles::glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCommandsNV
  if (s_deviceConfig.m_glPathCommandsNV)
  {
    s_deviceConfig.m_glPathCommandsNV (path, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCoordsNV

void  glew::gles::glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCoordsNV
  if (s_deviceConfig.m_glPathCoordsNV)
  {
    s_deviceConfig.m_glPathCoordsNV (path, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathSubCommandsNV

void  glew::gles::glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCommandsNV
  if (s_deviceConfig.m_glPathSubCommandsNV)
  {
    s_deviceConfig.m_glPathSubCommandsNV (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathSubCoordsNV

void  glew::gles::glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCoordsNV
  if (s_deviceConfig.m_glPathSubCoordsNV)
  {
    s_deviceConfig.m_glPathSubCoordsNV (path, coordStart, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStringNV

void  glew::gles::glPathStringNV (GLuint path, GLenum format, GLsizei length, const void * pathString)
{
  // GL_NV_path_rendering - glPathStringNV
  if (s_deviceConfig.m_glPathStringNV)
  {
    s_deviceConfig.m_glPathStringNV (path, format, length, pathString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphsNV

void  glew::gles::glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphsNV
  if (s_deviceConfig.m_glPathGlyphsNV)
  {
    s_deviceConfig.m_glPathGlyphsNV (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphRangeNV

void  glew::gles::glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphRangeNV
  if (s_deviceConfig.m_glPathGlyphRangeNV)
  {
    s_deviceConfig.m_glPathGlyphRangeNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightPathsNV

void  glew::gles::glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights)
{
  // GL_NV_path_rendering - glWeightPathsNV
  if (s_deviceConfig.m_glWeightPathsNV)
  {
    s_deviceConfig.m_glWeightPathsNV (resultPath, numPaths, paths, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyPathNV

void  glew::gles::glCopyPathNV (GLuint resultPath, GLuint srcPath)
{
  // GL_NV_path_rendering - glCopyPathNV
  if (s_deviceConfig.m_glCopyPathNV)
  {
    s_deviceConfig.m_glCopyPathNV (resultPath, srcPath);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInterpolatePathsNV

void  glew::gles::glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  // GL_NV_path_rendering - glInterpolatePathsNV
  if (s_deviceConfig.m_glInterpolatePathsNV)
  {
    s_deviceConfig.m_glInterpolatePathsNV (resultPath, pathA, pathB, weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformPathNV

void  glew::gles::glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glTransformPathNV
  if (s_deviceConfig.m_glTransformPathNV)
  {
    s_deviceConfig.m_glTransformPathNV (resultPath, srcPath, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterivNV

void  glew::gles::glPathParameterivNV (GLuint path, GLenum pname, const GLint * value)
{
  // GL_NV_path_rendering - glPathParameterivNV
  if (s_deviceConfig.m_glPathParameterivNV)
  {
    s_deviceConfig.m_glPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameteriNV

void  glew::gles::glPathParameteriNV (GLuint path, GLenum pname, GLint value)
{
  // GL_NV_path_rendering - glPathParameteriNV
  if (s_deviceConfig.m_glPathParameteriNV)
  {
    s_deviceConfig.m_glPathParameteriNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterfvNV

void  glew::gles::glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat * value)
{
  // GL_NV_path_rendering - glPathParameterfvNV
  if (s_deviceConfig.m_glPathParameterfvNV)
  {
    s_deviceConfig.m_glPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterfNV

void  glew::gles::glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
{
  // GL_NV_path_rendering - glPathParameterfNV
  if (s_deviceConfig.m_glPathParameterfNV)
  {
    s_deviceConfig.m_glPathParameterfNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathDashArrayNV

void  glew::gles::glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat * dashArray)
{
  // GL_NV_path_rendering - glPathDashArrayNV
  if (s_deviceConfig.m_glPathDashArrayNV)
  {
    s_deviceConfig.m_glPathDashArrayNV (path, dashCount, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStencilFuncNV

void  glew::gles::glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
{
  // GL_NV_path_rendering - glPathStencilFuncNV
  if (s_deviceConfig.m_glPathStencilFuncNV)
  {
    s_deviceConfig.m_glPathStencilFuncNV (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStencilDepthOffsetNV

void  glew::gles::glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
{
  // GL_NV_path_rendering - glPathStencilDepthOffsetNV
  if (s_deviceConfig.m_glPathStencilDepthOffsetNV)
  {
    s_deviceConfig.m_glPathStencilDepthOffsetNV (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFillPathNV

void  glew::gles::glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
{
  // GL_NV_path_rendering - glStencilFillPathNV
  if (s_deviceConfig.m_glStencilFillPathNV)
  {
    s_deviceConfig.m_glStencilFillPathNV (path, fillMode, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilStrokePathNV

void  glew::gles::glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
{
  // GL_NV_path_rendering - glStencilStrokePathNV
  if (s_deviceConfig.m_glStencilStrokePathNV)
  {
    s_deviceConfig.m_glStencilStrokePathNV (path, reference, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFillPathInstancedNV

void  glew::gles::glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilFillPathInstancedNV
  if (s_deviceConfig.m_glStencilFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilStrokePathInstancedNV

void  glew::gles::glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCoverDepthFuncNV

void  glew::gles::glPathCoverDepthFuncNV (GLenum func)
{
  // GL_NV_path_rendering - glPathCoverDepthFuncNV
  if (s_deviceConfig.m_glPathCoverDepthFuncNV)
  {
    s_deviceConfig.m_glPathCoverDepthFuncNV (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverFillPathNV

void  glew::gles::glCoverFillPathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverFillPathNV
  if (s_deviceConfig.m_glCoverFillPathNV)
  {
    s_deviceConfig.m_glCoverFillPathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverStrokePathNV

void  glew::gles::glCoverStrokePathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverStrokePathNV
  if (s_deviceConfig.m_glCoverStrokePathNV)
  {
    s_deviceConfig.m_glCoverStrokePathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverFillPathInstancedNV

void  glew::gles::glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverFillPathInstancedNV
  if (s_deviceConfig.m_glCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverStrokePathInstancedNV

void  glew::gles::glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathParameterivNV

void  glew::gles::glGetPathParameterivNV (GLuint path, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathParameterivNV
  if (s_deviceConfig.m_glGetPathParameterivNV)
  {
    s_deviceConfig.m_glGetPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathParameterfvNV

void  glew::gles::glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathParameterfvNV
  if (s_deviceConfig.m_glGetPathParameterfvNV)
  {
    s_deviceConfig.m_glGetPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathCommandsNV

void  glew::gles::glGetPathCommandsNV (GLuint path, GLubyte * commands)
{
  // GL_NV_path_rendering - glGetPathCommandsNV
  if (s_deviceConfig.m_glGetPathCommandsNV)
  {
    s_deviceConfig.m_glGetPathCommandsNV (path, commands);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathCoordsNV

void  glew::gles::glGetPathCoordsNV (GLuint path, GLfloat * coords)
{
  // GL_NV_path_rendering - glGetPathCoordsNV
  if (s_deviceConfig.m_glGetPathCoordsNV)
  {
    s_deviceConfig.m_glGetPathCoordsNV (path, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathDashArrayNV

void  glew::gles::glGetPathDashArrayNV (GLuint path, GLfloat * dashArray)
{
  // GL_NV_path_rendering - glGetPathDashArrayNV
  if (s_deviceConfig.m_glGetPathDashArrayNV)
  {
    s_deviceConfig.m_glGetPathDashArrayNV (path, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathMetricsNV

void  glew::gles::glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricsNV
  if (s_deviceConfig.m_glGetPathMetricsNV)
  {
    s_deviceConfig.m_glGetPathMetricsNV (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathMetricRangeNV

void  glew::gles::glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricRangeNV
  if (s_deviceConfig.m_glGetPathMetricRangeNV)
  {
    s_deviceConfig.m_glGetPathMetricRangeNV (metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathSpacingNV

void  glew::gles::glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing)
{
  // GL_NV_path_rendering - glGetPathSpacingNV
  if (s_deviceConfig.m_glGetPathSpacingNV)
  {
    s_deviceConfig.m_glGetPathSpacingNV (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPointInFillPathNV

GLboolean glew::gles::glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInFillPathNV
  if (s_deviceConfig.m_glIsPointInFillPathNV)
  {
    return s_deviceConfig.m_glIsPointInFillPathNV (path, mask, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPointInStrokePathNV

GLboolean glew::gles::glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInStrokePathNV
  if (s_deviceConfig.m_glIsPointInStrokePathNV)
  {
    return s_deviceConfig.m_glIsPointInStrokePathNV (path, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathLengthNV

GLfloat glew::gles::glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  // GL_NV_path_rendering - glGetPathLengthNV
  if (s_deviceConfig.m_glGetPathLengthNV)
  {
    return s_deviceConfig.m_glGetPathLengthNV (path, startSegment, numSegments);
  }
  return ((GLfloat)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointAlongPathNV

GLboolean glew::gles::glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY)
{
  // GL_NV_path_rendering - glPointAlongPathNV
  if (s_deviceConfig.m_glPointAlongPathNV)
  {
    return s_deviceConfig.m_glPointAlongPathNV (path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoad3x2fNV

void  glew::gles::glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x2fNV
  if (s_deviceConfig.m_glMatrixLoad3x2fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoad3x3fNV

void  glew::gles::glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x3fNV
  if (s_deviceConfig.m_glMatrixLoad3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadTranspose3x3fNV

void  glew::gles::glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoadTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixLoadTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMult3x2fNV

void  glew::gles::glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x2fNV
  if (s_deviceConfig.m_glMatrixMult3x2fNV)
  {
    s_deviceConfig.m_glMatrixMult3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMult3x3fNV

void  glew::gles::glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x3fNV
  if (s_deviceConfig.m_glMatrixMult3x3fNV)
  {
    s_deviceConfig.m_glMatrixMult3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultTranspose3x3fNV

void  glew::gles::glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMultTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixMultTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverFillPathNV

void  glew::gles::glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathNV (path, fillMode, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverStrokePathNV

void  glew::gles::glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathNV (path, reference, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverFillPathInstancedNV

void  glew::gles::glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverStrokePathInstancedNV

void  glew::gles::glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphIndexRangeNV

GLenum glew::gles::glPathGlyphIndexRangeNV (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
{
  // GL_NV_path_rendering - glPathGlyphIndexRangeNV
  if (s_deviceConfig.m_glPathGlyphIndexRangeNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexRangeNV (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphIndexArrayNV

GLenum glew::gles::glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexArrayNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathMemoryGlyphIndexArrayNV

GLenum glew::gles::glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathMemoryGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramPathFragmentInputGenNV

void  glew::gles::glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glProgramPathFragmentInputGenNV
  if (s_deviceConfig.m_glProgramPathFragmentInputGenNV)
  {
    s_deviceConfig.m_glProgramPathFragmentInputGenNV (program, location, genMode, components, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourcefvNV

void  glew::gles::glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params)
{
  // GL_NV_path_rendering - glGetProgramResourcefvNV
  if (s_deviceConfig.m_glGetProgramResourcefvNV)
  {
    s_deviceConfig.m_glGetProgramResourcefvNV (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPolygonModeNV

void  glew::gles::glPolygonModeNV (GLenum face, GLenum mode)
{
  // GL_NV_polygon_mode - glPolygonModeNV
  if (s_deviceConfig.m_glPolygonModeNV)
  {
    s_deviceConfig.m_glPolygonModeNV (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadBufferNV

void  glew::gles::glReadBufferNV (GLenum mode)
{
  // GL_NV_read_buffer - glReadBufferNV
  if (s_deviceConfig.m_glReadBufferNV)
  {
    s_deviceConfig.m_glReadBufferNV (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferSampleLocationsfvNV

void  glew::gles::glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV (target, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferSampleLocationsfvNV

void  glew::gles::glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glNamedFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV (framebuffer, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResolveDepthValuesNV

void  glew::gles::glResolveDepthValuesNV ()
{
  // GL_NV_sample_locations - glResolveDepthValuesNV
  if (s_deviceConfig.m_glResolveDepthValuesNV)
  {
    s_deviceConfig.m_glResolveDepthValuesNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportArrayvNV

void  glew::gles::glViewportArrayvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportArrayvNV
  if (s_deviceConfig.m_glViewportArrayvNV)
  {
    s_deviceConfig.m_glViewportArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportIndexedfNV

void  glew::gles::glViewportIndexedfNV (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_NV_viewport_array - glViewportIndexedfNV
  if (s_deviceConfig.m_glViewportIndexedfNV)
  {
    s_deviceConfig.m_glViewportIndexedfNV (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportIndexedfvNV

void  glew::gles::glViewportIndexedfvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportIndexedfvNV
  if (s_deviceConfig.m_glViewportIndexedfvNV)
  {
    s_deviceConfig.m_glViewportIndexedfvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorArrayvNV

void  glew::gles::glScissorArrayvNV (GLuint first, GLsizei count, const GLint * v)
{
  // GL_NV_viewport_array - glScissorArrayvNV
  if (s_deviceConfig.m_glScissorArrayvNV)
  {
    s_deviceConfig.m_glScissorArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorIndexedNV

void  glew::gles::glScissorIndexedNV (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_NV_viewport_array - glScissorIndexedNV
  if (s_deviceConfig.m_glScissorIndexedNV)
  {
    s_deviceConfig.m_glScissorIndexedNV (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorIndexedvNV

void  glew::gles::glScissorIndexedvNV (GLuint index, const GLint * v)
{
  // GL_NV_viewport_array - glScissorIndexedvNV
  if (s_deviceConfig.m_glScissorIndexedvNV)
  {
    s_deviceConfig.m_glScissorIndexedvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangeArrayfvNV

void  glew::gles::glDepthRangeArrayfvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glDepthRangeArrayfvNV
  if (s_deviceConfig.m_glDepthRangeArrayfvNV)
  {
    s_deviceConfig.m_glDepthRangeArrayfvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangeIndexedfNV

void  glew::gles::glDepthRangeIndexedfNV (GLuint index, GLfloat n, GLfloat f)
{
  // GL_NV_viewport_array - glDepthRangeIndexedfNV
  if (s_deviceConfig.m_glDepthRangeIndexedfNV)
  {
    s_deviceConfig.m_glDepthRangeIndexedfNV (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFloati_vNV

void  glew::gles::glGetFloati_vNV (GLenum target, GLuint index, GLfloat * data)
{
  // GL_NV_viewport_array - glGetFloati_vNV
  if (s_deviceConfig.m_glGetFloati_vNV)
  {
    s_deviceConfig.m_glGetFloati_vNV (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableiNV

void  glew::gles::glEnableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glEnableiNV
  if (s_deviceConfig.m_glEnableiNV)
  {
    s_deviceConfig.m_glEnableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableiNV

void  glew::gles::glDisableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glDisableiNV
  if (s_deviceConfig.m_glDisableiNV)
  {
    s_deviceConfig.m_glDisableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsEnablediNV

GLboolean glew::gles::glIsEnablediNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glIsEnablediNV
  if (s_deviceConfig.m_glIsEnablediNV)
  {
    return s_deviceConfig.m_glIsEnablediNV (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEGLImageTargetTexture2DOES

void  glew::gles::glEGLImageTargetTexture2DOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetTexture2DOES
  if (s_deviceConfig.m_glEGLImageTargetTexture2DOES)
  {
    s_deviceConfig.m_glEGLImageTargetTexture2DOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEGLImageTargetRenderbufferStorageOES

void  glew::gles::glEGLImageTargetRenderbufferStorageOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetRenderbufferStorageOES
  if (s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES)
  {
    s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyImageSubDataOES

void  glew::gles::glCopyImageSubDataOES (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_OES_copy_image - glCopyImageSubDataOES
  if (s_deviceConfig.m_glCopyImageSubDataOES)
  {
    s_deviceConfig.m_glCopyImageSubDataOES (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableiOES

void  glew::gles::glEnableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glEnableiOES
  if (s_deviceConfig.m_glEnableiOES)
  {
    s_deviceConfig.m_glEnableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableiOES

void  glew::gles::glDisableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glDisableiOES
  if (s_deviceConfig.m_glDisableiOES)
  {
    s_deviceConfig.m_glDisableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationiOES

void  glew::gles::glBlendEquationiOES (GLuint buf, GLenum mode)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationiOES
  if (s_deviceConfig.m_glBlendEquationiOES)
  {
    s_deviceConfig.m_glBlendEquationiOES (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparateiOES

void  glew::gles::glBlendEquationSeparateiOES (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationSeparateiOES
  if (s_deviceConfig.m_glBlendEquationSeparateiOES)
  {
    s_deviceConfig.m_glBlendEquationSeparateiOES (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFunciOES

void  glew::gles::glBlendFunciOES (GLuint buf, GLenum src, GLenum dst)
{
  // GL_OES_draw_buffers_indexed - glBlendFunciOES
  if (s_deviceConfig.m_glBlendFunciOES)
  {
    s_deviceConfig.m_glBlendFunciOES (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateiOES

void  glew::gles::glBlendFuncSeparateiOES (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendFuncSeparateiOES
  if (s_deviceConfig.m_glBlendFuncSeparateiOES)
  {
    s_deviceConfig.m_glBlendFuncSeparateiOES (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorMaskiOES

void  glew::gles::glColorMaskiOES (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_OES_draw_buffers_indexed - glColorMaskiOES
  if (s_deviceConfig.m_glColorMaskiOES)
  {
    s_deviceConfig.m_glColorMaskiOES (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsEnablediOES

GLboolean glew::gles::glIsEnablediOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glIsEnablediOES
  if (s_deviceConfig.m_glIsEnablediOES)
  {
    return s_deviceConfig.m_glIsEnablediOES (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsBaseVertexOES

void  glew::gles::glDrawElementsBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsBaseVertexOES
  if (s_deviceConfig.m_glDrawElementsBaseVertexOES)
  {
    s_deviceConfig.m_glDrawElementsBaseVertexOES (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementsBaseVertexOES

void  glew::gles::glDrawRangeElementsBaseVertexOES (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawRangeElementsBaseVertexOES
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertexOES)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertexOES (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseVertexOES

void  glew::gles::glDrawElementsInstancedBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexOES
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsBaseVertexOES

void  glew::gles::glMultiDrawElementsBaseVertexOES (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_OES_draw_elements_base_vertex - glMultiDrawElementsBaseVertexOES
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertexOES)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertexOES (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureOES

void  glew::gles::glFramebufferTextureOES (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_OES_geometry_shader - glFramebufferTextureOES
  if (s_deviceConfig.m_glFramebufferTextureOES)
  {
    s_deviceConfig.m_glFramebufferTextureOES (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramBinaryOES

void  glew::gles::glGetProgramBinaryOES (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_OES_get_program_binary - glGetProgramBinaryOES
  if (s_deviceConfig.m_glGetProgramBinaryOES)
  {
    s_deviceConfig.m_glGetProgramBinaryOES (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBinaryOES

void  glew::gles::glProgramBinaryOES (GLuint program, GLenum binaryFormat, const void * binary, GLint length)
{
  // GL_OES_get_program_binary - glProgramBinaryOES
  if (s_deviceConfig.m_glProgramBinaryOES)
  {
    s_deviceConfig.m_glProgramBinaryOES (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBufferOES

void * glew::gles::glMapBufferOES (GLenum target, GLenum access)
{
  // GL_OES_mapbuffer - glMapBufferOES
  if (s_deviceConfig.m_glMapBufferOES)
  {
    return s_deviceConfig.m_glMapBufferOES (target, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapBufferOES

GLboolean glew::gles::glUnmapBufferOES (GLenum target)
{
  // GL_OES_mapbuffer - glUnmapBufferOES
  if (s_deviceConfig.m_glUnmapBufferOES)
  {
    return s_deviceConfig.m_glUnmapBufferOES (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferPointervOES

void  glew::gles::glGetBufferPointervOES (GLenum target, GLenum pname, void ** params)
{
  // GL_OES_mapbuffer - glGetBufferPointervOES
  if (s_deviceConfig.m_glGetBufferPointervOES)
  {
    s_deviceConfig.m_glGetBufferPointervOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrimitiveBoundingBoxOES

void  glew::gles::glPrimitiveBoundingBoxOES (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_OES_primitive_bounding_box - glPrimitiveBoundingBoxOES
  if (s_deviceConfig.m_glPrimitiveBoundingBoxOES)
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxOES (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMinSampleShadingOES

void  glew::gles::glMinSampleShadingOES (GLfloat value)
{
  // GL_OES_sample_shading - glMinSampleShadingOES
  if (s_deviceConfig.m_glMinSampleShadingOES)
  {
    s_deviceConfig.m_glMinSampleShadingOES (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPatchParameteriOES

void  glew::gles::glPatchParameteriOES (GLenum pname, GLint value)
{
  // GL_OES_tessellation_shader - glPatchParameteriOES
  if (s_deviceConfig.m_glPatchParameteriOES)
  {
    s_deviceConfig.m_glPatchParameteriOES (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3DOES

void  glew::gles::glTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexImage3DOES
  if (s_deviceConfig.m_glTexImage3DOES)
  {
    s_deviceConfig.m_glTexImage3DOES (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage3DOES

void  glew::gles::glTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexSubImage3DOES
  if (s_deviceConfig.m_glTexSubImage3DOES)
  {
    s_deviceConfig.m_glTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage3DOES

void  glew::gles::glCopyTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_OES_texture_3D - glCopyTexSubImage3DOES
  if (s_deviceConfig.m_glCopyTexSubImage3DOES)
  {
    s_deviceConfig.m_glCopyTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage3DOES

void  glew::gles::glCompressedTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexImage3DOES
  if (s_deviceConfig.m_glCompressedTexImage3DOES)
  {
    s_deviceConfig.m_glCompressedTexImage3DOES (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage3DOES

void  glew::gles::glCompressedTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexSubImage3DOES
  if (s_deviceConfig.m_glCompressedTexSubImage3DOES)
  {
    s_deviceConfig.m_glCompressedTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture3DOES

void  glew::gles::glFramebufferTexture3DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_OES_texture_3D - glFramebufferTexture3DOES
  if (s_deviceConfig.m_glFramebufferTexture3DOES)
  {
    s_deviceConfig.m_glFramebufferTexture3DOES (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIivOES

void  glew::gles::glTexParameterIivOES (GLenum target, GLenum pname, const GLint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIivOES
  if (s_deviceConfig.m_glTexParameterIivOES)
  {
    s_deviceConfig.m_glTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIuivOES

void  glew::gles::glTexParameterIuivOES (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIuivOES
  if (s_deviceConfig.m_glTexParameterIuivOES)
  {
    s_deviceConfig.m_glTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIivOES

void  glew::gles::glGetTexParameterIivOES (GLenum target, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIivOES
  if (s_deviceConfig.m_glGetTexParameterIivOES)
  {
    s_deviceConfig.m_glGetTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIuivOES

void  glew::gles::glGetTexParameterIuivOES (GLenum target, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIuivOES
  if (s_deviceConfig.m_glGetTexParameterIuivOES)
  {
    s_deviceConfig.m_glGetTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIivOES

void  glew::gles::glSamplerParameterIivOES (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIivOES
  if (s_deviceConfig.m_glSamplerParameterIivOES)
  {
    s_deviceConfig.m_glSamplerParameterIivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIuivOES

void  glew::gles::glSamplerParameterIuivOES (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIuivOES
  if (s_deviceConfig.m_glSamplerParameterIuivOES)
  {
    s_deviceConfig.m_glSamplerParameterIuivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIivOES

void  glew::gles::glGetSamplerParameterIivOES (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIivOES
  if (s_deviceConfig.m_glGetSamplerParameterIivOES)
  {
    s_deviceConfig.m_glGetSamplerParameterIivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIuivOES

void  glew::gles::glGetSamplerParameterIuivOES (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIuivOES
  if (s_deviceConfig.m_glGetSamplerParameterIuivOES)
  {
    s_deviceConfig.m_glGetSamplerParameterIuivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferOES

void  glew::gles::glTexBufferOES (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_OES_texture_buffer - glTexBufferOES
  if (s_deviceConfig.m_glTexBufferOES)
  {
    s_deviceConfig.m_glTexBufferOES (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferRangeOES

void  glew::gles::glTexBufferRangeOES (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_OES_texture_buffer - glTexBufferRangeOES
  if (s_deviceConfig.m_glTexBufferRangeOES)
  {
    s_deviceConfig.m_glTexBufferRangeOES (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage3DMultisampleOES

void  glew::gles::glTexStorage3DMultisampleOES (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_OES_texture_storage_multisample_2d_array - glTexStorage3DMultisampleOES
  if (s_deviceConfig.m_glTexStorage3DMultisampleOES)
  {
    s_deviceConfig.m_glTexStorage3DMultisampleOES (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureViewOES

void  glew::gles::glTextureViewOES (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_OES_texture_view - glTextureViewOES
  if (s_deviceConfig.m_glTextureViewOES)
  {
    s_deviceConfig.m_glTextureViewOES (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexArrayOES

void  glew::gles::glBindVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glBindVertexArrayOES
  if (s_deviceConfig.m_glBindVertexArrayOES)
  {
    s_deviceConfig.m_glBindVertexArrayOES (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteVertexArraysOES

void  glew::gles::glDeleteVertexArraysOES (GLsizei n, const GLuint * arrays)
{
  // GL_OES_vertex_array_object - glDeleteVertexArraysOES
  if (s_deviceConfig.m_glDeleteVertexArraysOES)
  {
    s_deviceConfig.m_glDeleteVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenVertexArraysOES

void  glew::gles::glGenVertexArraysOES (GLsizei n, GLuint * arrays)
{
  // GL_OES_vertex_array_object - glGenVertexArraysOES
  if (s_deviceConfig.m_glGenVertexArraysOES)
  {
    s_deviceConfig.m_glGenVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVertexArrayOES

GLboolean glew::gles::glIsVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glIsVertexArrayOES
  if (s_deviceConfig.m_glIsVertexArrayOES)
  {
    return s_deviceConfig.m_glIsVertexArrayOES (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureMultiviewOVR

void  glew::gles::glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
{
  // GL_OVR_multiview - glFramebufferTextureMultiviewOVR
  if (s_deviceConfig.m_glFramebufferTextureMultiviewOVR)
  {
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR (target, attachment, texture, level, baseViewIndex, numViews);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAlphaFuncQCOM

void  glew::gles::glAlphaFuncQCOM (GLenum func, GLclampf ref)
{
  // GL_QCOM_alpha_test - glAlphaFuncQCOM
  if (s_deviceConfig.m_glAlphaFuncQCOM)
  {
    s_deviceConfig.m_glAlphaFuncQCOM (func, ref);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDriverControlsQCOM

void  glew::gles::glGetDriverControlsQCOM (GLint * num, GLsizei size, GLuint * driverControls)
{
  // GL_QCOM_driver_control - glGetDriverControlsQCOM
  if (s_deviceConfig.m_glGetDriverControlsQCOM)
  {
    s_deviceConfig.m_glGetDriverControlsQCOM (num, size, driverControls);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDriverControlStringQCOM

void  glew::gles::glGetDriverControlStringQCOM (GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString)
{
  // GL_QCOM_driver_control - glGetDriverControlStringQCOM
  if (s_deviceConfig.m_glGetDriverControlStringQCOM)
  {
    s_deviceConfig.m_glGetDriverControlStringQCOM (driverControl, bufSize, length, driverControlString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableDriverControlQCOM

void  glew::gles::glEnableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glEnableDriverControlQCOM
  if (s_deviceConfig.m_glEnableDriverControlQCOM)
  {
    s_deviceConfig.m_glEnableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableDriverControlQCOM

void  glew::gles::glDisableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glDisableDriverControlQCOM
  if (s_deviceConfig.m_glDisableDriverControlQCOM)
  {
    s_deviceConfig.m_glDisableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetTexturesQCOM

void  glew::gles::glExtGetTexturesQCOM (GLuint * textures, GLint maxTextures, GLint * numTextures)
{
  // GL_QCOM_extended_get - glExtGetTexturesQCOM
  if (s_deviceConfig.m_glExtGetTexturesQCOM)
  {
    s_deviceConfig.m_glExtGetTexturesQCOM (textures, maxTextures, numTextures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetBuffersQCOM

void  glew::gles::glExtGetBuffersQCOM (GLuint * buffers, GLint maxBuffers, GLint * numBuffers)
{
  // GL_QCOM_extended_get - glExtGetBuffersQCOM
  if (s_deviceConfig.m_glExtGetBuffersQCOM)
  {
    s_deviceConfig.m_glExtGetBuffersQCOM (buffers, maxBuffers, numBuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetRenderbuffersQCOM

void  glew::gles::glExtGetRenderbuffersQCOM (GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers)
{
  // GL_QCOM_extended_get - glExtGetRenderbuffersQCOM
  if (s_deviceConfig.m_glExtGetRenderbuffersQCOM)
  {
    s_deviceConfig.m_glExtGetRenderbuffersQCOM (renderbuffers, maxRenderbuffers, numRenderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetFramebuffersQCOM

void  glew::gles::glExtGetFramebuffersQCOM (GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers)
{
  // GL_QCOM_extended_get - glExtGetFramebuffersQCOM
  if (s_deviceConfig.m_glExtGetFramebuffersQCOM)
  {
    s_deviceConfig.m_glExtGetFramebuffersQCOM (framebuffers, maxFramebuffers, numFramebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetTexLevelParameterivQCOM

void  glew::gles::glExtGetTexLevelParameterivQCOM (GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params)
{
  // GL_QCOM_extended_get - glExtGetTexLevelParameterivQCOM
  if (s_deviceConfig.m_glExtGetTexLevelParameterivQCOM)
  {
    s_deviceConfig.m_glExtGetTexLevelParameterivQCOM (texture, face, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtTexObjectStateOverrideiQCOM

void  glew::gles::glExtTexObjectStateOverrideiQCOM (GLenum target, GLenum pname, GLint param)
{
  // GL_QCOM_extended_get - glExtTexObjectStateOverrideiQCOM
  if (s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM)
  {
    s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetTexSubImageQCOM

void  glew::gles::glExtGetTexSubImageQCOM (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels)
{
  // GL_QCOM_extended_get - glExtGetTexSubImageQCOM
  if (s_deviceConfig.m_glExtGetTexSubImageQCOM)
  {
    s_deviceConfig.m_glExtGetTexSubImageQCOM (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetBufferPointervQCOM

void  glew::gles::glExtGetBufferPointervQCOM (GLenum target, void ** params)
{
  // GL_QCOM_extended_get - glExtGetBufferPointervQCOM
  if (s_deviceConfig.m_glExtGetBufferPointervQCOM)
  {
    s_deviceConfig.m_glExtGetBufferPointervQCOM (target, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetShadersQCOM

void  glew::gles::glExtGetShadersQCOM (GLuint * shaders, GLint maxShaders, GLint * numShaders)
{
  // GL_QCOM_extended_get2 - glExtGetShadersQCOM
  if (s_deviceConfig.m_glExtGetShadersQCOM)
  {
    s_deviceConfig.m_glExtGetShadersQCOM (shaders, maxShaders, numShaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetProgramsQCOM

void  glew::gles::glExtGetProgramsQCOM (GLuint * programs, GLint maxPrograms, GLint * numPrograms)
{
  // GL_QCOM_extended_get2 - glExtGetProgramsQCOM
  if (s_deviceConfig.m_glExtGetProgramsQCOM)
  {
    s_deviceConfig.m_glExtGetProgramsQCOM (programs, maxPrograms, numPrograms);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtIsProgramBinaryQCOM

GLboolean glew::gles::glExtIsProgramBinaryQCOM (GLuint program)
{
  // GL_QCOM_extended_get2 - glExtIsProgramBinaryQCOM
  if (s_deviceConfig.m_glExtIsProgramBinaryQCOM)
  {
    return s_deviceConfig.m_glExtIsProgramBinaryQCOM (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtGetProgramBinarySourceQCOM

void  glew::gles::glExtGetProgramBinarySourceQCOM (GLuint program, GLenum shadertype, GLchar * source, GLint * length)
{
  // GL_QCOM_extended_get2 - glExtGetProgramBinarySourceQCOM
  if (s_deviceConfig.m_glExtGetProgramBinarySourceQCOM)
  {
    s_deviceConfig.m_glExtGetProgramBinarySourceQCOM (program, shadertype, source, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStartTilingQCOM

void  glew::gles::glStartTilingQCOM (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glStartTilingQCOM
  if (s_deviceConfig.m_glStartTilingQCOM)
  {
    s_deviceConfig.m_glStartTilingQCOM (x, y, width, height, preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndTilingQCOM

void  glew::gles::glEndTilingQCOM (GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glEndTilingQCOM
  if (s_deviceConfig.m_glEndTilingQCOM)
  {
    s_deviceConfig.m_glEndTilingQCOM (preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

glew::gles::DeviceConfig glew::gles::s_deviceConfig;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gles::Initialise ()
{
  memset (&s_deviceConfig, 0, sizeof (s_deviceConfig));

  // 
  // Determine current driver's feature reporting.
  // 

  #undef glGetString

  const unsigned char *glVersion = glGetString (GL_VERSION);

  if (!glVersion)
  {
    glVersion = (const unsigned char*) "";
  }

  const size_t glVersionLen = strlen ((const char *) glVersion);

  if (glVersionLen)
  {
#if _WIN32
  #define strncasecmp _strnicmp
#endif

    const bool es20Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 2", 11) == 0);
    const bool es30Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 3", 11) == 0);
    const bool es31Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 3.1", 13) == 0);

    s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_2_0] = es20Supported;
    s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_0] = es30Supported;
    s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1] = es31Supported;
  }

  // 
  // Evaluate extension support.
  // 

  std::unordered_set <std::string> supportedExtensions;

  const unsigned char *glExtensions = glGetString (GL_EXTENSIONS);

  if (!glExtensions)
  {
    glExtensions = (const unsigned char*) ""; // Protect against some drivers will happily passing back NULL.
  }

  const size_t glExtensionsLen = strlen ((const char *) glExtensions);

  if (glExtensionsLen)
  {
    unsigned char *thisExtStart = (unsigned char *) glExtensions;

    unsigned char *thisExtEnd = NULL;

    char thisExtBuffer [128];

    memset (thisExtBuffer, 0, sizeof (thisExtBuffer));

    do 
    {
      const char * seperator = strchr ((const char *) thisExtStart, ' ');

      if (seperator)
      {
        const size_t len = (((uintptr_t) seperator - (uintptr_t) thisExtStart) / sizeof (unsigned char));

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len, 127)] = '\0';

        thisExtEnd = (unsigned char *) seperator + 1; // skip tab character
      }
      else
      {
        const size_t len = strlen ((const char *) thisExtStart);

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len + 1, 127)] = '\0';

        thisExtEnd = NULL;
      }

      std::string thisExt (thisExtBuffer);

      if (supportedExtensions.find (thisExt) == supportedExtensions.end ())
      {
        supportedExtensions.insert (thisExt);
      }

      thisExtStart = thisExtEnd;
    }
    while ((thisExtStart && *thisExtStart != '\0') && (thisExtEnd && *thisExtEnd != '\0'));
  }

  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_compressed_3DC_texture] = (supportedExtensions.find ("GL_AMD_compressed_3DC_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_compressed_ATC_texture] = (supportedExtensions.find ("GL_AMD_compressed_ATC_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor] = (supportedExtensions.find ("GL_AMD_performance_monitor") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_program_binary_Z400] = (supportedExtensions.find ("GL_AMD_program_binary_Z400") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANDROID_extension_pack_es31a] = (supportedExtensions.find ("GL_ANDROID_extension_pack_es31a") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_depth_texture] = (supportedExtensions.find ("GL_ANGLE_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_blit] = (supportedExtensions.find ("GL_ANGLE_framebuffer_blit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_multisample] = (supportedExtensions.find ("GL_ANGLE_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_instanced_arrays] = (supportedExtensions.find ("GL_ANGLE_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_pack_reverse_row_order] = (supportedExtensions.find ("GL_ANGLE_pack_reverse_row_order") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_program_binary] = (supportedExtensions.find ("GL_ANGLE_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_compression_dxt3] = (supportedExtensions.find ("GL_ANGLE_texture_compression_dxt3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_compression_dxt5] = (supportedExtensions.find ("GL_ANGLE_texture_compression_dxt5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_usage] = (supportedExtensions.find ("GL_ANGLE_texture_usage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_translated_shader_source] = (supportedExtensions.find ("GL_ANGLE_translated_shader_source") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_clip_distance] = (supportedExtensions.find ("GL_APPLE_clip_distance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_color_buffer_packed_float] = (supportedExtensions.find ("GL_APPLE_color_buffer_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_copy_texture_levels] = (supportedExtensions.find ("GL_APPLE_copy_texture_levels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_framebuffer_multisample] = (supportedExtensions.find ("GL_APPLE_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_rgb_422] = (supportedExtensions.find ("GL_APPLE_rgb_422") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_sync] = (supportedExtensions.find ("GL_APPLE_sync") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_format_BGRA8888] = (supportedExtensions.find ("GL_APPLE_texture_format_BGRA8888") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_max_level] = (supportedExtensions.find ("GL_APPLE_texture_max_level") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_packed_float] = (supportedExtensions.find ("GL_APPLE_texture_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_mali_program_binary] = (supportedExtensions.find ("GL_ARM_mali_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_mali_shader_binary] = (supportedExtensions.find ("GL_ARM_mali_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_rgba8] = (supportedExtensions.find ("GL_ARM_rgba8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_shader_framebuffer_fetch] = (supportedExtensions.find ("GL_ARM_shader_framebuffer_fetch") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_shader_framebuffer_fetch_depth_stencil] = (supportedExtensions.find ("GL_ARM_shader_framebuffer_fetch_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_DMP_program_binary] = (supportedExtensions.find ("GL_DMP_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_DMP_shader_binary] = (supportedExtensions.find ("GL_DMP_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_base_instance] = (supportedExtensions.find ("GL_EXT_base_instance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_minmax] = (supportedExtensions.find ("GL_EXT_blend_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_buffer_storage] = (supportedExtensions.find ("GL_EXT_buffer_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_color_buffer_half_float] = (supportedExtensions.find ("GL_EXT_color_buffer_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_image] = (supportedExtensions.find ("GL_EXT_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label] = (supportedExtensions.find ("GL_EXT_debug_label") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker] = (supportedExtensions.find ("GL_EXT_debug_marker") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_discard_framebuffer] = (supportedExtensions.find ("GL_EXT_discard_framebuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_disjoint_timer_query] = (supportedExtensions.find ("GL_EXT_disjoint_timer_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers] = (supportedExtensions.find ("GL_EXT_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers_indexed] = (supportedExtensions.find ("GL_EXT_draw_buffers_indexed") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_elements_base_vertex] = (supportedExtensions.find ("GL_EXT_draw_elements_base_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced] = (supportedExtensions.find ("GL_EXT_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_float_blend] = (supportedExtensions.find ("GL_EXT_float_blend") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_point_size] = (supportedExtensions.find ("GL_EXT_geometry_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader] = (supportedExtensions.find ("GL_EXT_geometry_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_shader5] = (supportedExtensions.find ("GL_EXT_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_instanced_arrays] = (supportedExtensions.find ("GL_EXT_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_map_buffer_range] = (supportedExtensions.find ("GL_EXT_map_buffer_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays] = (supportedExtensions.find ("GL_EXT_multi_draw_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_indirect] = (supportedExtensions.find ("GL_EXT_multi_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisampled_render_to_texture] = (supportedExtensions.find ("GL_EXT_multisampled_render_to_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multiview_draw_buffers] = (supportedExtensions.find ("GL_EXT_multiview_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_occlusion_query_boolean] = (supportedExtensions.find ("GL_EXT_occlusion_query_boolean") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_post_depth_coverage] = (supportedExtensions.find ("GL_EXT_post_depth_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_primitive_bounding_box] = (supportedExtensions.find ("GL_EXT_primitive_bounding_box") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pvrtc_sRGB] = (supportedExtensions.find ("GL_EXT_pvrtc_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample] = (supportedExtensions.find ("GL_EXT_raster_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_read_format_bgra] = (supportedExtensions.find ("GL_EXT_read_format_bgra") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_render_snorm] = (supportedExtensions.find ("GL_EXT_render_snorm") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_robustness] = (supportedExtensions.find ("GL_EXT_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sRGB] = (supportedExtensions.find ("GL_EXT_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sRGB_write_control] = (supportedExtensions.find ("GL_EXT_sRGB_write_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects] = (supportedExtensions.find ("GL_EXT_separate_shader_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_framebuffer_fetch] = (supportedExtensions.find ("GL_EXT_shader_framebuffer_fetch") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_implicit_conversions] = (supportedExtensions.find ("GL_EXT_shader_implicit_conversions") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_integer_mix] = (supportedExtensions.find ("GL_EXT_shader_integer_mix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_io_blocks] = (supportedExtensions.find ("GL_EXT_shader_io_blocks") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_pixel_local_storage] = (supportedExtensions.find ("GL_EXT_shader_pixel_local_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_texture_lod] = (supportedExtensions.find ("GL_EXT_shader_texture_lod") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shadow_samplers] = (supportedExtensions.find ("GL_EXT_shadow_samplers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sparse_texture] = (supportedExtensions.find ("GL_EXT_sparse_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_point_size] = (supportedExtensions.find ("GL_EXT_tessellation_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_shader] = (supportedExtensions.find ("GL_EXT_tessellation_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_border_clamp] = (supportedExtensions.find ("GL_EXT_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer] = (supportedExtensions.find ("GL_EXT_texture_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_dxt1] = (supportedExtensions.find ("GL_EXT_texture_compression_dxt1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_s3tc] = (supportedExtensions.find ("GL_EXT_texture_compression_s3tc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_cube_map_array] = (supportedExtensions.find ("GL_EXT_texture_cube_map_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_anisotropic] = (supportedExtensions.find ("GL_EXT_texture_filter_anisotropic") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax] = (supportedExtensions.find ("GL_EXT_texture_filter_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_format_BGRA8888] = (supportedExtensions.find ("GL_EXT_texture_format_BGRA8888") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_norm16] = (supportedExtensions.find ("GL_EXT_texture_norm16") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_rg] = (supportedExtensions.find ("GL_EXT_texture_rg") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_decode] = (supportedExtensions.find ("GL_EXT_texture_sRGB_decode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_R8] = (supportedExtensions.find ("GL_EXT_texture_sRGB_R8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_RG8] = (supportedExtensions.find ("GL_EXT_texture_sRGB_RG8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage] = (supportedExtensions.find ("GL_EXT_texture_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_type_2_10_10_10_REV] = (supportedExtensions.find ("GL_EXT_texture_type_2_10_10_10_REV") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_view] = (supportedExtensions.find ("GL_EXT_texture_view") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_unpack_subimage] = (supportedExtensions.find ("GL_EXT_unpack_subimage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_YUV_target] = (supportedExtensions.find ("GL_EXT_YUV_target") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_FJ_shader_binary_GCCSO] = (supportedExtensions.find ("GL_FJ_shader_binary_GCCSO") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_multisampled_render_to_texture] = (supportedExtensions.find ("GL_IMG_multisampled_render_to_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_program_binary] = (supportedExtensions.find ("GL_IMG_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_read_format] = (supportedExtensions.find ("GL_IMG_read_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_shader_binary] = (supportedExtensions.find ("GL_IMG_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_texture_compression_pvrtc] = (supportedExtensions.find ("GL_IMG_texture_compression_pvrtc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_texture_compression_pvrtc2] = (supportedExtensions.find ("GL_IMG_texture_compression_pvrtc2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query] = (supportedExtensions.find ("GL_INTEL_performance_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_context_flush_control] = (supportedExtensions.find ("GL_KHR_context_flush_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug] = (supportedExtensions.find ("GL_KHR_debug") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_no_error] = (supportedExtensions.find ("GL_KHR_no_error") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robust_buffer_access_behavior] = (supportedExtensions.find ("GL_KHR_robust_buffer_access_behavior") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness] = (supportedExtensions.find ("GL_KHR_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_hdr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_hdr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_ldr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_ldr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture] = (supportedExtensions.find ("GL_NV_bindless_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced] = (supportedExtensions.find ("GL_NV_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_NV_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render] = (supportedExtensions.find ("GL_NV_conditional_render") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster] = (supportedExtensions.find ("GL_NV_conservative_raster") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_buffer] = (supportedExtensions.find ("GL_NV_copy_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_coverage_sample] = (supportedExtensions.find ("GL_NV_coverage_sample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_depth_nonlinear] = (supportedExtensions.find ("GL_NV_depth_nonlinear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_buffers] = (supportedExtensions.find ("GL_NV_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_instanced] = (supportedExtensions.find ("GL_NV_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_explicit_attrib_location] = (supportedExtensions.find ("GL_NV_explicit_attrib_location") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fbo_color_attachments] = (supportedExtensions.find ("GL_NV_fbo_color_attachments") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence] = (supportedExtensions.find ("GL_NV_fence") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fill_rectangle] = (supportedExtensions.find ("GL_NV_fill_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color] = (supportedExtensions.find ("GL_NV_fragment_coverage_to_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_shader_interlock] = (supportedExtensions.find ("GL_NV_fragment_shader_interlock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_blit] = (supportedExtensions.find ("GL_NV_framebuffer_blit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples] = (supportedExtensions.find ("GL_NV_framebuffer_mixed_samples") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample] = (supportedExtensions.find ("GL_NV_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_generate_mipmap_sRGB] = (supportedExtensions.find ("GL_NV_generate_mipmap_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_shader_passthrough] = (supportedExtensions.find ("GL_NV_geometry_shader_passthrough") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_image_formats] = (supportedExtensions.find ("GL_NV_image_formats") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_instanced_arrays] = (supportedExtensions.find ("GL_NV_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query] = (supportedExtensions.find ("GL_NV_internalformat_sample_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_non_square_matrices] = (supportedExtensions.find ("GL_NV_non_square_matrices") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering] = (supportedExtensions.find ("GL_NV_path_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_polygon_mode] = (supportedExtensions.find ("GL_NV_polygon_mode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer] = (supportedExtensions.find ("GL_NV_read_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer_front] = (supportedExtensions.find ("GL_NV_read_buffer_front") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_depth] = (supportedExtensions.find ("GL_NV_read_depth") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_depth_stencil] = (supportedExtensions.find ("GL_NV_read_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_stencil] = (supportedExtensions.find ("GL_NV_read_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering_shared_edge] = (supportedExtensions.find ("GL_NV_path_rendering_shared_edge") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sRGB_formats] = (supportedExtensions.find ("GL_NV_sRGB_formats") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations] = (supportedExtensions.find ("GL_NV_sample_locations") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_mask_override_coverage] = (supportedExtensions.find ("GL_NV_sample_mask_override_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_noperspective_interpolation] = (supportedExtensions.find ("GL_NV_shader_noperspective_interpolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shadow_samplers_array] = (supportedExtensions.find ("GL_NV_shadow_samplers_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shadow_samplers_cube] = (supportedExtensions.find ("GL_NV_shadow_samplers_cube") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_border_clamp] = (supportedExtensions.find ("GL_NV_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_compression_s3tc_update] = (supportedExtensions.find ("GL_NV_texture_compression_s3tc_update") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_npot_2D_mipmap] = (supportedExtensions.find ("GL_NV_texture_npot_2D_mipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array] = (supportedExtensions.find ("GL_NV_viewport_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array2] = (supportedExtensions.find ("GL_NV_viewport_array2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image] = (supportedExtensions.find ("GL_OES_EGL_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image_external] = (supportedExtensions.find ("GL_OES_EGL_image_external") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image_external_essl3] = (supportedExtensions.find ("GL_OES_EGL_image_external_essl3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_ETC1_RGB8_sub_texture] = (supportedExtensions.find ("GL_OES_compressed_ETC1_RGB8_sub_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_ETC1_RGB8_texture] = (supportedExtensions.find ("GL_OES_compressed_ETC1_RGB8_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_paletted_texture] = (supportedExtensions.find ("GL_OES_compressed_paletted_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_copy_image] = (supportedExtensions.find ("GL_OES_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth24] = (supportedExtensions.find ("GL_OES_depth24") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth32] = (supportedExtensions.find ("GL_OES_depth32") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth_texture] = (supportedExtensions.find ("GL_OES_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_buffers_indexed] = (supportedExtensions.find ("GL_OES_draw_buffers_indexed") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_elements_base_vertex] = (supportedExtensions.find ("GL_OES_draw_elements_base_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_element_index_uint] = (supportedExtensions.find ("GL_OES_element_index_uint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_fbo_render_mipmap] = (supportedExtensions.find ("GL_OES_fbo_render_mipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_fragment_precision_high] = (supportedExtensions.find ("GL_OES_fragment_precision_high") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_shader] = (supportedExtensions.find ("GL_OES_geometry_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_point_size] = (supportedExtensions.find ("GL_OES_geometry_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_get_program_binary] = (supportedExtensions.find ("GL_OES_get_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_gpu_shader5] = (supportedExtensions.find ("GL_OES_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_mapbuffer] = (supportedExtensions.find ("GL_OES_mapbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_packed_depth_stencil] = (supportedExtensions.find ("GL_OES_packed_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_primitive_bounding_box] = (supportedExtensions.find ("GL_OES_primitive_bounding_box") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_required_internalformat] = (supportedExtensions.find ("GL_OES_required_internalformat") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_rgb8_rgba8] = (supportedExtensions.find ("GL_OES_rgb8_rgba8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_shading] = (supportedExtensions.find ("GL_OES_sample_shading") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_variables] = (supportedExtensions.find ("GL_OES_sample_variables") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_image_atomic] = (supportedExtensions.find ("GL_OES_shader_image_atomic") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_io_blocks] = (supportedExtensions.find ("GL_OES_shader_io_blocks") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_multisample_interpolation] = (supportedExtensions.find ("GL_OES_shader_multisample_interpolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_standard_derivatives] = (supportedExtensions.find ("GL_OES_standard_derivatives") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_stencil1] = (supportedExtensions.find ("GL_OES_stencil1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_stencil4] = (supportedExtensions.find ("GL_OES_stencil4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_surfaceless_context] = (supportedExtensions.find ("GL_OES_surfaceless_context") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_shader] = (supportedExtensions.find ("GL_OES_tessellation_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_point_size] = (supportedExtensions.find ("GL_OES_tessellation_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_3D] = (supportedExtensions.find ("GL_OES_texture_3D") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_border_clamp] = (supportedExtensions.find ("GL_OES_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_buffer] = (supportedExtensions.find ("GL_OES_texture_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_compression_astc] = (supportedExtensions.find ("GL_OES_texture_compression_astc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_cube_map_array] = (supportedExtensions.find ("GL_OES_texture_cube_map_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_float] = (supportedExtensions.find ("GL_OES_texture_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_float_linear] = (supportedExtensions.find ("GL_OES_texture_float_linear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_half_float] = (supportedExtensions.find ("GL_OES_texture_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_half_float_linear] = (supportedExtensions.find ("GL_OES_texture_half_float_linear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_npot] = (supportedExtensions.find ("GL_OES_texture_npot") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_stencil8] = (supportedExtensions.find ("GL_OES_texture_stencil8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_storage_multisample_2d_array] = (supportedExtensions.find ("GL_OES_texture_storage_multisample_2d_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_view] = (supportedExtensions.find ("GL_OES_texture_view") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_array_object] = (supportedExtensions.find ("GL_OES_vertex_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_half_float] = (supportedExtensions.find ("GL_OES_vertex_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_type_10_10_10_2] = (supportedExtensions.find ("GL_OES_vertex_type_10_10_10_2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview] = (supportedExtensions.find ("GL_OVR_multiview") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview2] = (supportedExtensions.find ("GL_OVR_multiview2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_alpha_test] = (supportedExtensions.find ("GL_QCOM_alpha_test") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_binning_control] = (supportedExtensions.find ("GL_QCOM_binning_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_driver_control] = (supportedExtensions.find ("GL_QCOM_driver_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get] = (supportedExtensions.find ("GL_QCOM_extended_get") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get2] = (supportedExtensions.find ("GL_QCOM_extended_get2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_perfmon_global_mode] = (supportedExtensions.find ("GL_QCOM_perfmon_global_mode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_tiled_rendering] = (supportedExtensions.find ("GL_QCOM_tiled_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_writeonly_rendering] = (supportedExtensions.find ("GL_QCOM_writeonly_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_VIV_shader_binary] = (supportedExtensions.find ("GL_VIV_shader_binary") != supportedExtensions.end ());

  // GL_ES_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_0])
  {
    s_deviceConfig.m_glReadBuffer = (PFNGLREADBUFFERPROC) glewGetProcAddress ("glReadBuffer");
    s_deviceConfig.m_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) glewGetProcAddress ("glDrawRangeElements");
    s_deviceConfig.m_glTexImage3D = (PFNGLTEXIMAGE3DPROC) glewGetProcAddress ("glTexImage3D");
    s_deviceConfig.m_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) glewGetProcAddress ("glTexSubImage3D");
    s_deviceConfig.m_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) glewGetProcAddress ("glCopyTexSubImage3D");
    s_deviceConfig.m_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) glewGetProcAddress ("glCompressedTexImage3D");
    s_deviceConfig.m_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) glewGetProcAddress ("glCompressedTexSubImage3D");
    s_deviceConfig.m_glGenQueries = (PFNGLGENQUERIESPROC) glewGetProcAddress ("glGenQueries");
    s_deviceConfig.m_glDeleteQueries = (PFNGLDELETEQUERIESPROC) glewGetProcAddress ("glDeleteQueries");
    s_deviceConfig.m_glIsQuery = (PFNGLISQUERYPROC) glewGetProcAddress ("glIsQuery");
    s_deviceConfig.m_glBeginQuery = (PFNGLBEGINQUERYPROC) glewGetProcAddress ("glBeginQuery");
    s_deviceConfig.m_glEndQuery = (PFNGLENDQUERYPROC) glewGetProcAddress ("glEndQuery");
    s_deviceConfig.m_glGetQueryiv = (PFNGLGETQUERYIVPROC) glewGetProcAddress ("glGetQueryiv");
    s_deviceConfig.m_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) glewGetProcAddress ("glGetQueryObjectuiv");
    s_deviceConfig.m_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) glewGetProcAddress ("glUnmapBuffer");
    s_deviceConfig.m_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) glewGetProcAddress ("glGetBufferPointerv");
    s_deviceConfig.m_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) glewGetProcAddress ("glDrawBuffers");
    s_deviceConfig.m_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) glewGetProcAddress ("glUniformMatrix2x3fv");
    s_deviceConfig.m_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) glewGetProcAddress ("glUniformMatrix3x2fv");
    s_deviceConfig.m_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) glewGetProcAddress ("glUniformMatrix2x4fv");
    s_deviceConfig.m_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) glewGetProcAddress ("glUniformMatrix4x2fv");
    s_deviceConfig.m_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) glewGetProcAddress ("glUniformMatrix3x4fv");
    s_deviceConfig.m_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) glewGetProcAddress ("glUniformMatrix4x3fv");
    s_deviceConfig.m_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) glewGetProcAddress ("glBlitFramebuffer");
    s_deviceConfig.m_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) glewGetProcAddress ("glRenderbufferStorageMultisample");
    s_deviceConfig.m_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) glewGetProcAddress ("glFramebufferTextureLayer");
    s_deviceConfig.m_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) glewGetProcAddress ("glMapBufferRange");
    s_deviceConfig.m_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) glewGetProcAddress ("glFlushMappedBufferRange");
    s_deviceConfig.m_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) glewGetProcAddress ("glBindVertexArray");
    s_deviceConfig.m_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) glewGetProcAddress ("glDeleteVertexArrays");
    s_deviceConfig.m_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) glewGetProcAddress ("glGenVertexArrays");
    s_deviceConfig.m_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) glewGetProcAddress ("glIsVertexArray");
    s_deviceConfig.m_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glewGetProcAddress ("glGetIntegeri_v");
    s_deviceConfig.m_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glBeginTransformFeedback");
    s_deviceConfig.m_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glEndTransformFeedback");
    s_deviceConfig.m_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glewGetProcAddress ("glBindBufferRange");
    s_deviceConfig.m_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glewGetProcAddress ("glBindBufferBase");
    s_deviceConfig.m_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) glewGetProcAddress ("glTransformFeedbackVaryings");
    s_deviceConfig.m_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) glewGetProcAddress ("glGetTransformFeedbackVarying");
    s_deviceConfig.m_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) glewGetProcAddress ("glVertexAttribIPointer");
    s_deviceConfig.m_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) glewGetProcAddress ("glGetVertexAttribIiv");
    s_deviceConfig.m_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) glewGetProcAddress ("glGetVertexAttribIuiv");
    s_deviceConfig.m_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) glewGetProcAddress ("glVertexAttribI4i");
    s_deviceConfig.m_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) glewGetProcAddress ("glVertexAttribI4ui");
    s_deviceConfig.m_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) glewGetProcAddress ("glVertexAttribI4iv");
    s_deviceConfig.m_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) glewGetProcAddress ("glVertexAttribI4uiv");
    s_deviceConfig.m_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) glewGetProcAddress ("glGetUniformuiv");
    s_deviceConfig.m_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) glewGetProcAddress ("glGetFragDataLocation");
    s_deviceConfig.m_glUniform1ui = (PFNGLUNIFORM1UIPROC) glewGetProcAddress ("glUniform1ui");
    s_deviceConfig.m_glUniform2ui = (PFNGLUNIFORM2UIPROC) glewGetProcAddress ("glUniform2ui");
    s_deviceConfig.m_glUniform3ui = (PFNGLUNIFORM3UIPROC) glewGetProcAddress ("glUniform3ui");
    s_deviceConfig.m_glUniform4ui = (PFNGLUNIFORM4UIPROC) glewGetProcAddress ("glUniform4ui");
    s_deviceConfig.m_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) glewGetProcAddress ("glUniform1uiv");
    s_deviceConfig.m_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) glewGetProcAddress ("glUniform2uiv");
    s_deviceConfig.m_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) glewGetProcAddress ("glUniform3uiv");
    s_deviceConfig.m_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) glewGetProcAddress ("glUniform4uiv");
    s_deviceConfig.m_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) glewGetProcAddress ("glClearBufferiv");
    s_deviceConfig.m_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) glewGetProcAddress ("glClearBufferuiv");
    s_deviceConfig.m_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) glewGetProcAddress ("glClearBufferfv");
    s_deviceConfig.m_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) glewGetProcAddress ("glClearBufferfi");
    s_deviceConfig.m_glGetStringi = (PFNGLGETSTRINGIPROC) glewGetProcAddress ("glGetStringi");
    s_deviceConfig.m_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) glewGetProcAddress ("glCopyBufferSubData");
    s_deviceConfig.m_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) glewGetProcAddress ("glGetUniformIndices");
    s_deviceConfig.m_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) glewGetProcAddress ("glGetActiveUniformsiv");
    s_deviceConfig.m_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) glewGetProcAddress ("glGetUniformBlockIndex");
    s_deviceConfig.m_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) glewGetProcAddress ("glGetActiveUniformBlockiv");
    s_deviceConfig.m_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) glewGetProcAddress ("glGetActiveUniformBlockName");
    s_deviceConfig.m_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) glewGetProcAddress ("glUniformBlockBinding");
    s_deviceConfig.m_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) glewGetProcAddress ("glDrawArraysInstanced");
    s_deviceConfig.m_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) glewGetProcAddress ("glDrawElementsInstanced");
    s_deviceConfig.m_glFenceSync = (PFNGLFENCESYNCPROC) glewGetProcAddress ("glFenceSync");
    s_deviceConfig.m_glIsSync = (PFNGLISSYNCPROC) glewGetProcAddress ("glIsSync");
    s_deviceConfig.m_glDeleteSync = (PFNGLDELETESYNCPROC) glewGetProcAddress ("glDeleteSync");
    s_deviceConfig.m_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) glewGetProcAddress ("glClientWaitSync");
    s_deviceConfig.m_glWaitSync = (PFNGLWAITSYNCPROC) glewGetProcAddress ("glWaitSync");
    s_deviceConfig.m_glGetInteger64v = (PFNGLGETINTEGER64VPROC) glewGetProcAddress ("glGetInteger64v");
    s_deviceConfig.m_glGetSynciv = (PFNGLGETSYNCIVPROC) glewGetProcAddress ("glGetSynciv");
    s_deviceConfig.m_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) glewGetProcAddress ("glGetInteger64i_v");
    s_deviceConfig.m_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) glewGetProcAddress ("glGetBufferParameteri64v");
    s_deviceConfig.m_glGenSamplers = (PFNGLGENSAMPLERSPROC) glewGetProcAddress ("glGenSamplers");
    s_deviceConfig.m_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) glewGetProcAddress ("glDeleteSamplers");
    s_deviceConfig.m_glIsSampler = (PFNGLISSAMPLERPROC) glewGetProcAddress ("glIsSampler");
    s_deviceConfig.m_glBindSampler = (PFNGLBINDSAMPLERPROC) glewGetProcAddress ("glBindSampler");
    s_deviceConfig.m_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) glewGetProcAddress ("glSamplerParameteri");
    s_deviceConfig.m_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glSamplerParameteriv");
    s_deviceConfig.m_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) glewGetProcAddress ("glSamplerParameterf");
    s_deviceConfig.m_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glSamplerParameterfv");
    s_deviceConfig.m_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glGetSamplerParameteriv");
    s_deviceConfig.m_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glGetSamplerParameterfv");
    s_deviceConfig.m_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) glewGetProcAddress ("glVertexAttribDivisor");
    s_deviceConfig.m_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glBindTransformFeedback");
    s_deviceConfig.m_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glDeleteTransformFeedbacks");
    s_deviceConfig.m_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glGenTransformFeedbacks");
    s_deviceConfig.m_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glIsTransformFeedback");
    s_deviceConfig.m_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glPauseTransformFeedback");
    s_deviceConfig.m_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glResumeTransformFeedback");
    s_deviceConfig.m_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) glewGetProcAddress ("glGetProgramBinary");
    s_deviceConfig.m_glProgramBinary = (PFNGLPROGRAMBINARYPROC) glewGetProcAddress ("glProgramBinary");
    s_deviceConfig.m_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) glewGetProcAddress ("glProgramParameteri");
    s_deviceConfig.m_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateFramebuffer");
    s_deviceConfig.m_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateSubFramebuffer");
    s_deviceConfig.m_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) glewGetProcAddress ("glTexStorage2D");
    s_deviceConfig.m_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) glewGetProcAddress ("glTexStorage3D");
    s_deviceConfig.m_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) glewGetProcAddress ("glGetInternalformativ");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) glewGetProcAddress ("glDispatchCompute");
    s_deviceConfig.m_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) glewGetProcAddress ("glDispatchComputeIndirect");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) glewGetProcAddress ("glDrawArraysIndirect");
    s_deviceConfig.m_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) glewGetProcAddress ("glDrawElementsIndirect");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) glewGetProcAddress ("glFramebufferParameteri");
    s_deviceConfig.m_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetFramebufferParameteriv");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) glewGetProcAddress ("glGetProgramInterfaceiv");
    s_deviceConfig.m_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) glewGetProcAddress ("glGetProgramResourceIndex");
    s_deviceConfig.m_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) glewGetProcAddress ("glGetProgramResourceName");
    s_deviceConfig.m_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) glewGetProcAddress ("glGetProgramResourceiv");
    s_deviceConfig.m_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) glewGetProcAddress ("glGetProgramResourceLocation");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) glewGetProcAddress ("glUseProgramStages");
    s_deviceConfig.m_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) glewGetProcAddress ("glActiveShaderProgram");
    s_deviceConfig.m_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) glewGetProcAddress ("glCreateShaderProgramv");
    s_deviceConfig.m_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) glewGetProcAddress ("glBindProgramPipeline");
    s_deviceConfig.m_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) glewGetProcAddress ("glDeleteProgramPipelines");
    s_deviceConfig.m_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) glewGetProcAddress ("glGenProgramPipelines");
    s_deviceConfig.m_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) glewGetProcAddress ("glIsProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) glewGetProcAddress ("glGetProgramPipelineiv");
    s_deviceConfig.m_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) glewGetProcAddress ("glProgramUniform1i");
    s_deviceConfig.m_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) glewGetProcAddress ("glProgramUniform2i");
    s_deviceConfig.m_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) glewGetProcAddress ("glProgramUniform3i");
    s_deviceConfig.m_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) glewGetProcAddress ("glProgramUniform4i");
    s_deviceConfig.m_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) glewGetProcAddress ("glProgramUniform1ui");
    s_deviceConfig.m_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) glewGetProcAddress ("glProgramUniform2ui");
    s_deviceConfig.m_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) glewGetProcAddress ("glProgramUniform3ui");
    s_deviceConfig.m_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) glewGetProcAddress ("glProgramUniform4ui");
    s_deviceConfig.m_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) glewGetProcAddress ("glProgramUniform1f");
    s_deviceConfig.m_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) glewGetProcAddress ("glProgramUniform2f");
    s_deviceConfig.m_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) glewGetProcAddress ("glProgramUniform3f");
    s_deviceConfig.m_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) glewGetProcAddress ("glProgramUniform4f");
    s_deviceConfig.m_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) glewGetProcAddress ("glProgramUniform1iv");
    s_deviceConfig.m_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) glewGetProcAddress ("glProgramUniform2iv");
    s_deviceConfig.m_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) glewGetProcAddress ("glProgramUniform3iv");
    s_deviceConfig.m_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) glewGetProcAddress ("glProgramUniform4iv");
    s_deviceConfig.m_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) glewGetProcAddress ("glProgramUniform1uiv");
    s_deviceConfig.m_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) glewGetProcAddress ("glProgramUniform2uiv");
    s_deviceConfig.m_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) glewGetProcAddress ("glProgramUniform3uiv");
    s_deviceConfig.m_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) glewGetProcAddress ("glProgramUniform4uiv");
    s_deviceConfig.m_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) glewGetProcAddress ("glProgramUniform1fv");
    s_deviceConfig.m_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) glewGetProcAddress ("glProgramUniform2fv");
    s_deviceConfig.m_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) glewGetProcAddress ("glProgramUniform3fv");
    s_deviceConfig.m_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) glewGetProcAddress ("glProgramUniform4fv");
    s_deviceConfig.m_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) glewGetProcAddress ("glProgramUniformMatrix2fv");
    s_deviceConfig.m_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) glewGetProcAddress ("glProgramUniformMatrix3fv");
    s_deviceConfig.m_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) glewGetProcAddress ("glProgramUniformMatrix4fv");
    s_deviceConfig.m_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x3fv");
    s_deviceConfig.m_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x2fv");
    s_deviceConfig.m_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x2fv");
    s_deviceConfig.m_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x3fv");
    s_deviceConfig.m_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) glewGetProcAddress ("glValidateProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) glewGetProcAddress ("glGetProgramPipelineInfoLog");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) glewGetProcAddress ("glBindImageTexture");
    s_deviceConfig.m_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) glewGetProcAddress ("glGetBooleani_v");
    s_deviceConfig.m_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) glewGetProcAddress ("glMemoryBarrier");
    s_deviceConfig.m_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) glewGetProcAddress ("glMemoryBarrierByRegion");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTexStorage2DMultisample");
    s_deviceConfig.m_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) glewGetProcAddress ("glGetMultisamplefv");
    s_deviceConfig.m_glSampleMaski = (PFNGLSAMPLEMASKIPROC) glewGetProcAddress ("glSampleMaski");
    s_deviceConfig.m_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) glewGetProcAddress ("glGetTexLevelParameteriv");
    s_deviceConfig.m_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) glewGetProcAddress ("glGetTexLevelParameterfv");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    s_deviceConfig.m_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) glewGetProcAddress ("glBindVertexBuffer");
    s_deviceConfig.m_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) glewGetProcAddress ("glVertexAttribFormat");
    s_deviceConfig.m_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) glewGetProcAddress ("glVertexAttribIFormat");
    s_deviceConfig.m_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) glewGetProcAddress ("glVertexAttribBinding");
    s_deviceConfig.m_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) glewGetProcAddress ("glVertexBindingDivisor");
  }

  // GL_AMD_performance_monitor
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor])
  {
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC) glewGetProcAddress ("glGetPerfMonitorGroupsAMD");
    s_deviceConfig.m_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC) glewGetProcAddress ("glGetPerfMonitorCountersAMD");
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) glewGetProcAddress ("glGetPerfMonitorGroupStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterInfoAMD");
    s_deviceConfig.m_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC) glewGetProcAddress ("glGenPerfMonitorsAMD");
    s_deviceConfig.m_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC) glewGetProcAddress ("glDeletePerfMonitorsAMD");
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) glewGetProcAddress ("glSelectPerfMonitorCountersAMD");
    s_deviceConfig.m_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC) glewGetProcAddress ("glBeginPerfMonitorAMD");
    s_deviceConfig.m_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC) glewGetProcAddress ("glEndPerfMonitorAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterDataAMD");
  }

  // GL_ANGLE_framebuffer_blit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_blit])
  {
    s_deviceConfig.m_glBlitFramebufferANGLE = (PFNGLBLITFRAMEBUFFERANGLEPROC) glewGetProcAddress ("glBlitFramebufferANGLE");
  }

  // GL_ANGLE_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_multisample])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleANGLE");
  }

  // GL_ANGLE_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_instanced_arrays])
  {
    s_deviceConfig.m_glDrawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC) glewGetProcAddress ("glDrawArraysInstancedANGLE");
    s_deviceConfig.m_glDrawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) glewGetProcAddress ("glDrawElementsInstancedANGLE");
    s_deviceConfig.m_glVertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC) glewGetProcAddress ("glVertexAttribDivisorANGLE");
  }

  // GL_ANGLE_translated_shader_source
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_translated_shader_source])
  {
    s_deviceConfig.m_glGetTranslatedShaderSourceANGLE = (PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) glewGetProcAddress ("glGetTranslatedShaderSourceANGLE");
  }

  // GL_APPLE_copy_texture_levels
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_copy_texture_levels])
  {
    s_deviceConfig.m_glCopyTextureLevelsAPPLE = (PFNGLCOPYTEXTURELEVELSAPPLEPROC) glewGetProcAddress ("glCopyTextureLevelsAPPLE");
  }

  // GL_APPLE_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_framebuffer_multisample])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleAPPLE");
    s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE = (PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) glewGetProcAddress ("glResolveMultisampleFramebufferAPPLE");
  }

  // GL_APPLE_sync
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_sync])
  {
    s_deviceConfig.m_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC) glewGetProcAddress ("glFenceSyncAPPLE");
    s_deviceConfig.m_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC) glewGetProcAddress ("glIsSyncAPPLE");
    s_deviceConfig.m_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC) glewGetProcAddress ("glDeleteSyncAPPLE");
    s_deviceConfig.m_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC) glewGetProcAddress ("glClientWaitSyncAPPLE");
    s_deviceConfig.m_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC) glewGetProcAddress ("glWaitSyncAPPLE");
    s_deviceConfig.m_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC) glewGetProcAddress ("glGetInteger64vAPPLE");
    s_deviceConfig.m_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC) glewGetProcAddress ("glGetSyncivAPPLE");
  }

  // GL_EXT_base_instance
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_base_instance])
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC) glewGetProcAddress ("glDrawArraysInstancedBaseInstanceEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC) glewGetProcAddress ("glDrawElementsInstancedBaseInstanceEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
  }

  // GL_EXT_buffer_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_buffer_storage])
  {
    s_deviceConfig.m_glBufferStorageEXT = (PFNGLBUFFERSTORAGEEXTPROC) glewGetProcAddress ("glBufferStorageEXT");
  }

  // GL_EXT_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_image])
  {
    s_deviceConfig.m_glCopyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC) glewGetProcAddress ("glCopyImageSubDataEXT");
  }

  // GL_EXT_debug_label
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label])
  {
    s_deviceConfig.m_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC) glewGetProcAddress ("glLabelObjectEXT");
    s_deviceConfig.m_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC) glewGetProcAddress ("glGetObjectLabelEXT");
  }

  // GL_EXT_debug_marker
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker])
  {
    s_deviceConfig.m_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC) glewGetProcAddress ("glInsertEventMarkerEXT");
    s_deviceConfig.m_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC) glewGetProcAddress ("glPushGroupMarkerEXT");
    s_deviceConfig.m_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC) glewGetProcAddress ("glPopGroupMarkerEXT");
  }

  // GL_EXT_discard_framebuffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_discard_framebuffer])
  {
    s_deviceConfig.m_glDiscardFramebufferEXT = (PFNGLDISCARDFRAMEBUFFEREXTPROC) glewGetProcAddress ("glDiscardFramebufferEXT");
  }

  // GL_EXT_disjoint_timer_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_disjoint_timer_query])
  {
    s_deviceConfig.m_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC) glewGetProcAddress ("glGenQueriesEXT");
    s_deviceConfig.m_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC) glewGetProcAddress ("glDeleteQueriesEXT");
    s_deviceConfig.m_glIsQueryEXT = (PFNGLISQUERYEXTPROC) glewGetProcAddress ("glIsQueryEXT");
    s_deviceConfig.m_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC) glewGetProcAddress ("glBeginQueryEXT");
    s_deviceConfig.m_glEndQueryEXT = (PFNGLENDQUERYEXTPROC) glewGetProcAddress ("glEndQueryEXT");
    s_deviceConfig.m_glQueryCounterEXT = (PFNGLQUERYCOUNTEREXTPROC) glewGetProcAddress ("glQueryCounterEXT");
    s_deviceConfig.m_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC) glewGetProcAddress ("glGetQueryivEXT");
    s_deviceConfig.m_glGetQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC) glewGetProcAddress ("glGetQueryObjectivEXT");
    s_deviceConfig.m_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC) glewGetProcAddress ("glGetQueryObjectuivEXT");
    s_deviceConfig.m_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) glewGetProcAddress ("glGetQueryObjecti64vEXT");
    s_deviceConfig.m_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) glewGetProcAddress ("glGetQueryObjectui64vEXT");
  }

  // GL_EXT_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers])
  {
    s_deviceConfig.m_glDrawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC) glewGetProcAddress ("glDrawBuffersEXT");
  }

  // GL_EXT_draw_buffers_indexed
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers_indexed])
  {
    s_deviceConfig.m_glEnableiEXT = (PFNGLENABLEIEXTPROC) glewGetProcAddress ("glEnableiEXT");
    s_deviceConfig.m_glDisableiEXT = (PFNGLDISABLEIEXTPROC) glewGetProcAddress ("glDisableiEXT");
    s_deviceConfig.m_glBlendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC) glewGetProcAddress ("glBlendEquationiEXT");
    s_deviceConfig.m_glBlendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC) glewGetProcAddress ("glBlendEquationSeparateiEXT");
    s_deviceConfig.m_glBlendFunciEXT = (PFNGLBLENDFUNCIEXTPROC) glewGetProcAddress ("glBlendFunciEXT");
    s_deviceConfig.m_glBlendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC) glewGetProcAddress ("glBlendFuncSeparateiEXT");
    s_deviceConfig.m_glColorMaskiEXT = (PFNGLCOLORMASKIEXTPROC) glewGetProcAddress ("glColorMaskiEXT");
    s_deviceConfig.m_glIsEnablediEXT = (PFNGLISENABLEDIEXTPROC) glewGetProcAddress ("glIsEnablediEXT");
  }

  // GL_EXT_draw_elements_base_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_elements_base_vertex])
  {
    s_deviceConfig.m_glDrawElementsBaseVertexEXT = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC) glewGetProcAddress ("glDrawElementsBaseVertexEXT");
    s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC) glewGetProcAddress ("glDrawRangeElementsBaseVertexEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertexEXT");
    s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) glewGetProcAddress ("glMultiDrawElementsBaseVertexEXT");
  }

  // GL_EXT_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced])
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawArraysInstancedEXT");
    s_deviceConfig.m_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawElementsInstancedEXT");
  }

  // GL_EXT_geometry_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader])
  {
    s_deviceConfig.m_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) glewGetProcAddress ("glFramebufferTextureEXT");
  }

  // GL_EXT_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_instanced_arrays])
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawArraysInstancedEXT");
    s_deviceConfig.m_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawElementsInstancedEXT");
    s_deviceConfig.m_glVertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC) glewGetProcAddress ("glVertexAttribDivisorEXT");
  }

  // GL_EXT_map_buffer_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_map_buffer_range])
  {
    s_deviceConfig.m_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC) glewGetProcAddress ("glMapBufferRangeEXT");
    s_deviceConfig.m_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) glewGetProcAddress ("glFlushMappedBufferRangeEXT");
  }

  // GL_EXT_multi_draw_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays])
  {
    s_deviceConfig.m_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) glewGetProcAddress ("glMultiDrawArraysEXT");
    s_deviceConfig.m_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) glewGetProcAddress ("glMultiDrawElementsEXT");
  }

  // GL_EXT_multi_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_indirect])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectEXT = (PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC) glewGetProcAddress ("glMultiDrawArraysIndirectEXT");
    s_deviceConfig.m_glMultiDrawElementsIndirectEXT = (PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC) glewGetProcAddress ("glMultiDrawElementsIndirectEXT");
  }

  // GL_EXT_multisampled_render_to_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisampled_render_to_texture])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleEXT");
    s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) glewGetProcAddress ("glFramebufferTexture2DMultisampleEXT");
  }

  // GL_EXT_multiview_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multiview_draw_buffers])
  {
    s_deviceConfig.m_glReadBufferIndexedEXT = (PFNGLREADBUFFERINDEXEDEXTPROC) glewGetProcAddress ("glReadBufferIndexedEXT");
    s_deviceConfig.m_glDrawBuffersIndexedEXT = (PFNGLDRAWBUFFERSINDEXEDEXTPROC) glewGetProcAddress ("glDrawBuffersIndexedEXT");
    s_deviceConfig.m_glGetIntegeri_vEXT = (PFNGLGETINTEGERI_VEXTPROC) glewGetProcAddress ("glGetIntegeri_vEXT");
  }

  // GL_EXT_occlusion_query_boolean
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_occlusion_query_boolean])
  {
    s_deviceConfig.m_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC) glewGetProcAddress ("glGenQueriesEXT");
    s_deviceConfig.m_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC) glewGetProcAddress ("glDeleteQueriesEXT");
    s_deviceConfig.m_glIsQueryEXT = (PFNGLISQUERYEXTPROC) glewGetProcAddress ("glIsQueryEXT");
    s_deviceConfig.m_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC) glewGetProcAddress ("glBeginQueryEXT");
    s_deviceConfig.m_glEndQueryEXT = (PFNGLENDQUERYEXTPROC) glewGetProcAddress ("glEndQueryEXT");
    s_deviceConfig.m_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC) glewGetProcAddress ("glGetQueryivEXT");
    s_deviceConfig.m_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC) glewGetProcAddress ("glGetQueryObjectuivEXT");
  }

  // GL_EXT_primitive_bounding_box
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_primitive_bounding_box])
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC) glewGetProcAddress ("glPrimitiveBoundingBoxEXT");
  }

  // GL_EXT_raster_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_robustness])
  {
    s_deviceConfig.m_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC) glewGetProcAddress ("glGetGraphicsResetStatusEXT");
    s_deviceConfig.m_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC) glewGetProcAddress ("glReadnPixelsEXT");
    s_deviceConfig.m_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC) glewGetProcAddress ("glGetnUniformfvEXT");
    s_deviceConfig.m_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC) glewGetProcAddress ("glGetnUniformivEXT");
  }

  // GL_EXT_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects])
  {
    s_deviceConfig.m_glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC) glewGetProcAddress ("glActiveShaderProgramEXT");
    s_deviceConfig.m_glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC) glewGetProcAddress ("glBindProgramPipelineEXT");
    s_deviceConfig.m_glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC) glewGetProcAddress ("glCreateShaderProgramvEXT");
    s_deviceConfig.m_glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC) glewGetProcAddress ("glDeleteProgramPipelinesEXT");
    s_deviceConfig.m_glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC) glewGetProcAddress ("glGenProgramPipelinesEXT");
    s_deviceConfig.m_glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) glewGetProcAddress ("glGetProgramPipelineInfoLogEXT");
    s_deviceConfig.m_glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC) glewGetProcAddress ("glGetProgramPipelineivEXT");
    s_deviceConfig.m_glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC) glewGetProcAddress ("glIsProgramPipelineEXT");
    s_deviceConfig.m_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) glewGetProcAddress ("glProgramParameteriEXT");
    s_deviceConfig.m_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) glewGetProcAddress ("glProgramUniform1fEXT");
    s_deviceConfig.m_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) glewGetProcAddress ("glProgramUniform1fvEXT");
    s_deviceConfig.m_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) glewGetProcAddress ("glProgramUniform1iEXT");
    s_deviceConfig.m_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) glewGetProcAddress ("glProgramUniform1ivEXT");
    s_deviceConfig.m_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) glewGetProcAddress ("glProgramUniform2fEXT");
    s_deviceConfig.m_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) glewGetProcAddress ("glProgramUniform2fvEXT");
    s_deviceConfig.m_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) glewGetProcAddress ("glProgramUniform2iEXT");
    s_deviceConfig.m_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) glewGetProcAddress ("glProgramUniform2ivEXT");
    s_deviceConfig.m_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) glewGetProcAddress ("glProgramUniform3fEXT");
    s_deviceConfig.m_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) glewGetProcAddress ("glProgramUniform3fvEXT");
    s_deviceConfig.m_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) glewGetProcAddress ("glProgramUniform3iEXT");
    s_deviceConfig.m_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) glewGetProcAddress ("glProgramUniform3ivEXT");
    s_deviceConfig.m_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) glewGetProcAddress ("glProgramUniform4fEXT");
    s_deviceConfig.m_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) glewGetProcAddress ("glProgramUniform4fvEXT");
    s_deviceConfig.m_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) glewGetProcAddress ("glProgramUniform4iEXT");
    s_deviceConfig.m_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) glewGetProcAddress ("glProgramUniform4ivEXT");
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4fvEXT");
    s_deviceConfig.m_glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC) glewGetProcAddress ("glUseProgramStagesEXT");
    s_deviceConfig.m_glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) glewGetProcAddress ("glValidateProgramPipelineEXT");
  }

  // GL_EXT_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects])
  {
    s_deviceConfig.m_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) glewGetProcAddress ("glProgramUniform1uiEXT");
    s_deviceConfig.m_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) glewGetProcAddress ("glProgramUniform2uiEXT");
    s_deviceConfig.m_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) glewGetProcAddress ("glProgramUniform3uiEXT");
    s_deviceConfig.m_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) glewGetProcAddress ("glProgramUniform4uiEXT");
    s_deviceConfig.m_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) glewGetProcAddress ("glProgramUniform1uivEXT");
    s_deviceConfig.m_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) glewGetProcAddress ("glProgramUniform2uivEXT");
    s_deviceConfig.m_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) glewGetProcAddress ("glProgramUniform3uivEXT");
    s_deviceConfig.m_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) glewGetProcAddress ("glProgramUniform4uivEXT");
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x3fvEXT");
  }

  // GL_EXT_sparse_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sparse_texture])
  {
    s_deviceConfig.m_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC) glewGetProcAddress ("glTexPageCommitmentARB");
  }

  // GL_EXT_tessellation_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_shader])
  {
    s_deviceConfig.m_glPatchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC) glewGetProcAddress ("glPatchParameteriEXT");
  }

  // GL_EXT_texture_border_clamp
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_border_clamp])
  {
    s_deviceConfig.m_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glTexParameterIivEXT");
    s_deviceConfig.m_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glTexParameterIuivEXT");
    s_deviceConfig.m_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetTexParameterIivEXT");
    s_deviceConfig.m_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetTexParameterIuivEXT");
    s_deviceConfig.m_glSamplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC) glewGetProcAddress ("glSamplerParameterIivEXT");
    s_deviceConfig.m_glSamplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC) glewGetProcAddress ("glSamplerParameterIuivEXT");
    s_deviceConfig.m_glGetSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetSamplerParameterIivEXT");
    s_deviceConfig.m_glGetSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetSamplerParameterIuivEXT");
  }

  // GL_EXT_texture_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer])
  {
    s_deviceConfig.m_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) glewGetProcAddress ("glTexBufferEXT");
    s_deviceConfig.m_glTexBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC) glewGetProcAddress ("glTexBufferRangeEXT");
  }

  // GL_EXT_texture_filter_minmax
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_texture_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage])
  {
    s_deviceConfig.m_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC) glewGetProcAddress ("glTexStorage1DEXT");
    s_deviceConfig.m_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC) glewGetProcAddress ("glTexStorage2DEXT");
    s_deviceConfig.m_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC) glewGetProcAddress ("glTexStorage3DEXT");
  }

  // GL_EXT_texture_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage])
  {
    s_deviceConfig.m_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) glewGetProcAddress ("glTextureStorage1DEXT");
    s_deviceConfig.m_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) glewGetProcAddress ("glTextureStorage2DEXT");
    s_deviceConfig.m_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) glewGetProcAddress ("glTextureStorage3DEXT");
  }

  // GL_EXT_texture_view
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_view])
  {
    s_deviceConfig.m_glTextureViewEXT = (PFNGLTEXTUREVIEWEXTPROC) glewGetProcAddress ("glTextureViewEXT");
  }

  // GL_IMG_multisampled_render_to_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_IMG_multisampled_render_to_texture])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleIMG");
    s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) glewGetProcAddress ("glFramebufferTexture2DMultisampleIMG");
  }

  // GL_INTEL_performance_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query])
  {
    s_deviceConfig.m_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC) glewGetProcAddress ("glBeginPerfQueryINTEL");
    s_deviceConfig.m_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC) glewGetProcAddress ("glCreatePerfQueryINTEL");
    s_deviceConfig.m_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC) glewGetProcAddress ("glDeletePerfQueryINTEL");
    s_deviceConfig.m_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC) glewGetProcAddress ("glEndPerfQueryINTEL");
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC) glewGetProcAddress ("glGetFirstPerfQueryIdINTEL");
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC) glewGetProcAddress ("glGetNextPerfQueryIdINTEL");
    s_deviceConfig.m_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC) glewGetProcAddress ("glGetPerfCounterInfoINTEL");
    s_deviceConfig.m_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC) glewGetProcAddress ("glGetPerfQueryDataINTEL");
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC) glewGetProcAddress ("glGetPerfQueryIdByNameINTEL");
    s_deviceConfig.m_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC) glewGetProcAddress ("glGetPerfQueryInfoINTEL");
  }

  // GL_KHR_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced])
  {
    s_deviceConfig.m_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC) glewGetProcAddress ("glBlendBarrierKHR");
  }

  // GL_KHR_debug
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug])
  {
    s_deviceConfig.m_glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC) glewGetProcAddress ("glDebugMessageControlKHR");
    s_deviceConfig.m_glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC) glewGetProcAddress ("glDebugMessageInsertKHR");
    s_deviceConfig.m_glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC) glewGetProcAddress ("glDebugMessageCallbackKHR");
    s_deviceConfig.m_glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC) glewGetProcAddress ("glGetDebugMessageLogKHR");
    s_deviceConfig.m_glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC) glewGetProcAddress ("glPushDebugGroupKHR");
    s_deviceConfig.m_glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC) glewGetProcAddress ("glPopDebugGroupKHR");
    s_deviceConfig.m_glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC) glewGetProcAddress ("glObjectLabelKHR");
    s_deviceConfig.m_glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC) glewGetProcAddress ("glGetObjectLabelKHR");
    s_deviceConfig.m_glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC) glewGetProcAddress ("glObjectPtrLabelKHR");
    s_deviceConfig.m_glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC) glewGetProcAddress ("glGetObjectPtrLabelKHR");
    s_deviceConfig.m_glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC) glewGetProcAddress ("glGetPointervKHR");
  }

  // GL_KHR_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness])
  {
    s_deviceConfig.m_glGetGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC) glewGetProcAddress ("glGetGraphicsResetStatusKHR");
    s_deviceConfig.m_glReadnPixelsKHR = (PFNGLREADNPIXELSKHRPROC) glewGetProcAddress ("glReadnPixelsKHR");
    s_deviceConfig.m_glGetnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC) glewGetProcAddress ("glGetnUniformfvKHR");
    s_deviceConfig.m_glGetnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC) glewGetProcAddress ("glGetnUniformivKHR");
    s_deviceConfig.m_glGetnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC) glewGetProcAddress ("glGetnUniformuivKHR");
  }

  // GL_NV_bindless_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture])
  {
    s_deviceConfig.m_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC) glewGetProcAddress ("glGetTextureHandleNV");
    s_deviceConfig.m_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC) glewGetProcAddress ("glGetTextureSamplerHandleNV");
    s_deviceConfig.m_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) glewGetProcAddress ("glMakeTextureHandleResidentNV");
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) glewGetProcAddress ("glMakeTextureHandleNonResidentNV");
    s_deviceConfig.m_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC) glewGetProcAddress ("glGetImageHandleNV");
    s_deviceConfig.m_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) glewGetProcAddress ("glMakeImageHandleResidentNV");
    s_deviceConfig.m_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) glewGetProcAddress ("glMakeImageHandleNonResidentNV");
    s_deviceConfig.m_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC) glewGetProcAddress ("glUniformHandleui64NV");
    s_deviceConfig.m_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC) glewGetProcAddress ("glUniformHandleui64vNV");
    s_deviceConfig.m_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) glewGetProcAddress ("glProgramUniformHandleui64NV");
    s_deviceConfig.m_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) glewGetProcAddress ("glProgramUniformHandleui64vNV");
    s_deviceConfig.m_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC) glewGetProcAddress ("glIsTextureHandleResidentNV");
    s_deviceConfig.m_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC) glewGetProcAddress ("glIsImageHandleResidentNV");
  }

  // GL_NV_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced])
  {
    s_deviceConfig.m_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC) glewGetProcAddress ("glBlendParameteriNV");
    s_deviceConfig.m_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC) glewGetProcAddress ("glBlendBarrierNV");
  }

  // GL_NV_conditional_render
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render])
  {
    s_deviceConfig.m_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) glewGetProcAddress ("glBeginConditionalRenderNV");
    s_deviceConfig.m_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) glewGetProcAddress ("glEndConditionalRenderNV");
  }

  // GL_NV_conservative_raster
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster])
  {
    s_deviceConfig.m_glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC) glewGetProcAddress ("glSubpixelPrecisionBiasNV");
  }

  // GL_NV_copy_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_buffer])
  {
    s_deviceConfig.m_glCopyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC) glewGetProcAddress ("glCopyBufferSubDataNV");
  }

  // GL_NV_coverage_sample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_coverage_sample])
  {
    s_deviceConfig.m_glCoverageMaskNV = (PFNGLCOVERAGEMASKNVPROC) glewGetProcAddress ("glCoverageMaskNV");
    s_deviceConfig.m_glCoverageOperationNV = (PFNGLCOVERAGEOPERATIONNVPROC) glewGetProcAddress ("glCoverageOperationNV");
  }

  // GL_NV_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_buffers])
  {
    s_deviceConfig.m_glDrawBuffersNV = (PFNGLDRAWBUFFERSNVPROC) glewGetProcAddress ("glDrawBuffersNV");
  }

  // GL_NV_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_instanced])
  {
    s_deviceConfig.m_glDrawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC) glewGetProcAddress ("glDrawArraysInstancedNV");
    s_deviceConfig.m_glDrawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC) glewGetProcAddress ("glDrawElementsInstancedNV");
  }

  // GL_NV_fence
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence])
  {
    s_deviceConfig.m_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC) glewGetProcAddress ("glDeleteFencesNV");
    s_deviceConfig.m_glGenFencesNV = (PFNGLGENFENCESNVPROC) glewGetProcAddress ("glGenFencesNV");
    s_deviceConfig.m_glIsFenceNV = (PFNGLISFENCENVPROC) glewGetProcAddress ("glIsFenceNV");
    s_deviceConfig.m_glTestFenceNV = (PFNGLTESTFENCENVPROC) glewGetProcAddress ("glTestFenceNV");
    s_deviceConfig.m_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC) glewGetProcAddress ("glGetFenceivNV");
    s_deviceConfig.m_glFinishFenceNV = (PFNGLFINISHFENCENVPROC) glewGetProcAddress ("glFinishFenceNV");
    s_deviceConfig.m_glSetFenceNV = (PFNGLSETFENCENVPROC) glewGetProcAddress ("glSetFenceNV");
  }

  // GL_NV_fragment_coverage_to_color
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color])
  {
    s_deviceConfig.m_glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC) glewGetProcAddress ("glFragmentCoverageColorNV");
  }

  // GL_NV_framebuffer_blit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_blit])
  {
    s_deviceConfig.m_glBlitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC) glewGetProcAddress ("glBlitFramebufferNV");
  }

  // GL_NV_framebuffer_mixed_samples
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
    s_deviceConfig.m_glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC) glewGetProcAddress ("glCoverageModulationTableNV");
    s_deviceConfig.m_glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC) glewGetProcAddress ("glGetCoverageModulationTableNV");
    s_deviceConfig.m_glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC) glewGetProcAddress ("glCoverageModulationNV");
  }

  // GL_NV_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleNV");
  }

  // GL_NV_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_instanced_arrays])
  {
    s_deviceConfig.m_glVertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC) glewGetProcAddress ("glVertexAttribDivisorNV");
  }

  // GL_NV_internalformat_sample_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query])
  {
    s_deviceConfig.m_glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) glewGetProcAddress ("glGetInternalformatSampleivNV");
  }

  // GL_NV_non_square_matrices
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_non_square_matrices])
  {
    s_deviceConfig.m_glUniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC) glewGetProcAddress ("glUniformMatrix2x3fvNV");
    s_deviceConfig.m_glUniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC) glewGetProcAddress ("glUniformMatrix3x2fvNV");
    s_deviceConfig.m_glUniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC) glewGetProcAddress ("glUniformMatrix2x4fvNV");
    s_deviceConfig.m_glUniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC) glewGetProcAddress ("glUniformMatrix4x2fvNV");
    s_deviceConfig.m_glUniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC) glewGetProcAddress ("glUniformMatrix3x4fvNV");
    s_deviceConfig.m_glUniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC) glewGetProcAddress ("glUniformMatrix4x3fvNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glGenPathsNV = (PFNGLGENPATHSNVPROC) glewGetProcAddress ("glGenPathsNV");
    s_deviceConfig.m_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC) glewGetProcAddress ("glDeletePathsNV");
    s_deviceConfig.m_glIsPathNV = (PFNGLISPATHNVPROC) glewGetProcAddress ("glIsPathNV");
    s_deviceConfig.m_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC) glewGetProcAddress ("glPathCommandsNV");
    s_deviceConfig.m_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC) glewGetProcAddress ("glPathCoordsNV");
    s_deviceConfig.m_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC) glewGetProcAddress ("glPathSubCommandsNV");
    s_deviceConfig.m_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC) glewGetProcAddress ("glPathSubCoordsNV");
    s_deviceConfig.m_glPathStringNV = (PFNGLPATHSTRINGNVPROC) glewGetProcAddress ("glPathStringNV");
    s_deviceConfig.m_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC) glewGetProcAddress ("glPathGlyphsNV");
    s_deviceConfig.m_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC) glewGetProcAddress ("glPathGlyphRangeNV");
    s_deviceConfig.m_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC) glewGetProcAddress ("glWeightPathsNV");
    s_deviceConfig.m_glCopyPathNV = (PFNGLCOPYPATHNVPROC) glewGetProcAddress ("glCopyPathNV");
    s_deviceConfig.m_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC) glewGetProcAddress ("glInterpolatePathsNV");
    s_deviceConfig.m_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC) glewGetProcAddress ("glTransformPathNV");
    s_deviceConfig.m_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC) glewGetProcAddress ("glPathParameterivNV");
    s_deviceConfig.m_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC) glewGetProcAddress ("glPathParameteriNV");
    s_deviceConfig.m_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC) glewGetProcAddress ("glPathParameterfvNV");
    s_deviceConfig.m_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC) glewGetProcAddress ("glPathParameterfNV");
    s_deviceConfig.m_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC) glewGetProcAddress ("glPathDashArrayNV");
    s_deviceConfig.m_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC) glewGetProcAddress ("glPathStencilFuncNV");
    s_deviceConfig.m_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC) glewGetProcAddress ("glPathStencilDepthOffsetNV");
    s_deviceConfig.m_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC) glewGetProcAddress ("glStencilFillPathNV");
    s_deviceConfig.m_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC) glewGetProcAddress ("glStencilStrokePathNV");
    s_deviceConfig.m_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilFillPathInstancedNV");
    s_deviceConfig.m_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilStrokePathInstancedNV");
    s_deviceConfig.m_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC) glewGetProcAddress ("glPathCoverDepthFuncNV");
    s_deviceConfig.m_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC) glewGetProcAddress ("glCoverFillPathNV");
    s_deviceConfig.m_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC) glewGetProcAddress ("glCoverStrokePathNV");
    s_deviceConfig.m_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glCoverFillPathInstancedNV");
    s_deviceConfig.m_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glCoverStrokePathInstancedNV");
    s_deviceConfig.m_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC) glewGetProcAddress ("glGetPathParameterivNV");
    s_deviceConfig.m_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC) glewGetProcAddress ("glGetPathParameterfvNV");
    s_deviceConfig.m_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC) glewGetProcAddress ("glGetPathCommandsNV");
    s_deviceConfig.m_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC) glewGetProcAddress ("glGetPathCoordsNV");
    s_deviceConfig.m_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC) glewGetProcAddress ("glGetPathDashArrayNV");
    s_deviceConfig.m_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC) glewGetProcAddress ("glGetPathMetricsNV");
    s_deviceConfig.m_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC) glewGetProcAddress ("glGetPathMetricRangeNV");
    s_deviceConfig.m_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC) glewGetProcAddress ("glGetPathSpacingNV");
    s_deviceConfig.m_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC) glewGetProcAddress ("glIsPointInFillPathNV");
    s_deviceConfig.m_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC) glewGetProcAddress ("glIsPointInStrokePathNV");
    s_deviceConfig.m_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC) glewGetProcAddress ("glGetPathLengthNV");
    s_deviceConfig.m_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC) glewGetProcAddress ("glPointAlongPathNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC) glewGetProcAddress ("glMatrixLoad3x2fNV");
    s_deviceConfig.m_glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC) glewGetProcAddress ("glMatrixLoad3x3fNV");
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) glewGetProcAddress ("glMatrixLoadTranspose3x3fNV");
    s_deviceConfig.m_glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC) glewGetProcAddress ("glMatrixMult3x2fNV");
    s_deviceConfig.m_glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC) glewGetProcAddress ("glMatrixMult3x3fNV");
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) glewGetProcAddress ("glMatrixMultTranspose3x3fNV");
    s_deviceConfig.m_glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC) glewGetProcAddress ("glStencilThenCoverFillPathNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) glewGetProcAddress ("glStencilThenCoverStrokePathNV");
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilThenCoverFillPathInstancedNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilThenCoverStrokePathInstancedNV");
    s_deviceConfig.m_glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC) glewGetProcAddress ("glPathGlyphIndexRangeNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC) glewGetProcAddress ("glPathGlyphIndexArrayNV");
    s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) glewGetProcAddress ("glPathMemoryGlyphIndexArrayNV");
    s_deviceConfig.m_glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) glewGetProcAddress ("glProgramPathFragmentInputGenNV");
    s_deviceConfig.m_glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC) glewGetProcAddress ("glGetProgramResourcefvNV");
  }

  // GL_NV_polygon_mode
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_polygon_mode])
  {
    s_deviceConfig.m_glPolygonModeNV = (PFNGLPOLYGONMODENVPROC) glewGetProcAddress ("glPolygonModeNV");
  }

  // GL_NV_read_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer])
  {
    s_deviceConfig.m_glReadBufferNV = (PFNGLREADBUFFERNVPROC) glewGetProcAddress ("glReadBufferNV");
  }

  // GL_NV_sample_locations
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations])
  {
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glewGetProcAddress ("glFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glewGetProcAddress ("glNamedFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC) glewGetProcAddress ("glResolveDepthValuesNV");
  }

  // GL_NV_viewport_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array])
  {
    s_deviceConfig.m_glViewportArrayvNV = (PFNGLVIEWPORTARRAYVNVPROC) glewGetProcAddress ("glViewportArrayvNV");
    s_deviceConfig.m_glViewportIndexedfNV = (PFNGLVIEWPORTINDEXEDFNVPROC) glewGetProcAddress ("glViewportIndexedfNV");
    s_deviceConfig.m_glViewportIndexedfvNV = (PFNGLVIEWPORTINDEXEDFVNVPROC) glewGetProcAddress ("glViewportIndexedfvNV");
    s_deviceConfig.m_glScissorArrayvNV = (PFNGLSCISSORARRAYVNVPROC) glewGetProcAddress ("glScissorArrayvNV");
    s_deviceConfig.m_glScissorIndexedNV = (PFNGLSCISSORINDEXEDNVPROC) glewGetProcAddress ("glScissorIndexedNV");
    s_deviceConfig.m_glScissorIndexedvNV = (PFNGLSCISSORINDEXEDVNVPROC) glewGetProcAddress ("glScissorIndexedvNV");
    s_deviceConfig.m_glDepthRangeArrayfvNV = (PFNGLDEPTHRANGEARRAYFVNVPROC) glewGetProcAddress ("glDepthRangeArrayfvNV");
    s_deviceConfig.m_glDepthRangeIndexedfNV = (PFNGLDEPTHRANGEINDEXEDFNVPROC) glewGetProcAddress ("glDepthRangeIndexedfNV");
    s_deviceConfig.m_glGetFloati_vNV = (PFNGLGETFLOATI_VNVPROC) glewGetProcAddress ("glGetFloati_vNV");
    s_deviceConfig.m_glEnableiNV = (PFNGLENABLEINVPROC) glewGetProcAddress ("glEnableiNV");
    s_deviceConfig.m_glDisableiNV = (PFNGLDISABLEINVPROC) glewGetProcAddress ("glDisableiNV");
    s_deviceConfig.m_glIsEnablediNV = (PFNGLISENABLEDINVPROC) glewGetProcAddress ("glIsEnablediNV");
  }

  // GL_OES_EGL_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image])
  {
    s_deviceConfig.m_glEGLImageTargetTexture2DOES = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) glewGetProcAddress ("glEGLImageTargetTexture2DOES");
    s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) glewGetProcAddress ("glEGLImageTargetRenderbufferStorageOES");
  }

  // GL_OES_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_copy_image])
  {
    s_deviceConfig.m_glCopyImageSubDataOES = (PFNGLCOPYIMAGESUBDATAOESPROC) glewGetProcAddress ("glCopyImageSubDataOES");
  }

  // GL_OES_draw_buffers_indexed
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_buffers_indexed])
  {
    s_deviceConfig.m_glEnableiOES = (PFNGLENABLEIOESPROC) glewGetProcAddress ("glEnableiOES");
    s_deviceConfig.m_glDisableiOES = (PFNGLDISABLEIOESPROC) glewGetProcAddress ("glDisableiOES");
    s_deviceConfig.m_glBlendEquationiOES = (PFNGLBLENDEQUATIONIOESPROC) glewGetProcAddress ("glBlendEquationiOES");
    s_deviceConfig.m_glBlendEquationSeparateiOES = (PFNGLBLENDEQUATIONSEPARATEIOESPROC) glewGetProcAddress ("glBlendEquationSeparateiOES");
    s_deviceConfig.m_glBlendFunciOES = (PFNGLBLENDFUNCIOESPROC) glewGetProcAddress ("glBlendFunciOES");
    s_deviceConfig.m_glBlendFuncSeparateiOES = (PFNGLBLENDFUNCSEPARATEIOESPROC) glewGetProcAddress ("glBlendFuncSeparateiOES");
    s_deviceConfig.m_glColorMaskiOES = (PFNGLCOLORMASKIOESPROC) glewGetProcAddress ("glColorMaskiOES");
    s_deviceConfig.m_glIsEnablediOES = (PFNGLISENABLEDIOESPROC) glewGetProcAddress ("glIsEnablediOES");
  }

  // GL_OES_draw_elements_base_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_elements_base_vertex])
  {
    s_deviceConfig.m_glDrawElementsBaseVertexOES = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC) glewGetProcAddress ("glDrawElementsBaseVertexOES");
    s_deviceConfig.m_glDrawRangeElementsBaseVertexOES = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC) glewGetProcAddress ("glDrawRangeElementsBaseVertexOES");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertexOES");
    s_deviceConfig.m_glMultiDrawElementsBaseVertexOES = (PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC) glewGetProcAddress ("glMultiDrawElementsBaseVertexOES");
  }

  // GL_OES_geometry_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_shader])
  {
    s_deviceConfig.m_glFramebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC) glewGetProcAddress ("glFramebufferTextureOES");
  }

  // GL_OES_get_program_binary
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_get_program_binary])
  {
    s_deviceConfig.m_glGetProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC) glewGetProcAddress ("glGetProgramBinaryOES");
    s_deviceConfig.m_glProgramBinaryOES = (PFNGLPROGRAMBINARYOESPROC) glewGetProcAddress ("glProgramBinaryOES");
  }

  // GL_OES_mapbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_mapbuffer])
  {
    s_deviceConfig.m_glMapBufferOES = (PFNGLMAPBUFFEROESPROC) glewGetProcAddress ("glMapBufferOES");
    s_deviceConfig.m_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC) glewGetProcAddress ("glUnmapBufferOES");
    s_deviceConfig.m_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC) glewGetProcAddress ("glGetBufferPointervOES");
  }

  // GL_OES_primitive_bounding_box
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_primitive_bounding_box])
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxOES = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC) glewGetProcAddress ("glPrimitiveBoundingBoxOES");
  }

  // GL_OES_sample_shading
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_shading])
  {
    s_deviceConfig.m_glMinSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC) glewGetProcAddress ("glMinSampleShadingOES");
  }

  // GL_OES_tessellation_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_shader])
  {
    s_deviceConfig.m_glPatchParameteriOES = (PFNGLPATCHPARAMETERIOESPROC) glewGetProcAddress ("glPatchParameteriOES");
  }

  // GL_OES_texture_3D
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_3D])
  {
    s_deviceConfig.m_glTexImage3DOES = (PFNGLTEXIMAGE3DOESPROC) glewGetProcAddress ("glTexImage3DOES");
    s_deviceConfig.m_glTexSubImage3DOES = (PFNGLTEXSUBIMAGE3DOESPROC) glewGetProcAddress ("glTexSubImage3DOES");
    s_deviceConfig.m_glCopyTexSubImage3DOES = (PFNGLCOPYTEXSUBIMAGE3DOESPROC) glewGetProcAddress ("glCopyTexSubImage3DOES");
    s_deviceConfig.m_glCompressedTexImage3DOES = (PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) glewGetProcAddress ("glCompressedTexImage3DOES");
    s_deviceConfig.m_glCompressedTexSubImage3DOES = (PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) glewGetProcAddress ("glCompressedTexSubImage3DOES");
    s_deviceConfig.m_glFramebufferTexture3DOES = (PFNGLFRAMEBUFFERTEXTURE3DOESPROC) glewGetProcAddress ("glFramebufferTexture3DOES");
  }

  // GL_OES_texture_border_clamp
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_border_clamp])
  {
    s_deviceConfig.m_glTexParameterIivOES = (PFNGLTEXPARAMETERIIVOESPROC) glewGetProcAddress ("glTexParameterIivOES");
    s_deviceConfig.m_glTexParameterIuivOES = (PFNGLTEXPARAMETERIUIVOESPROC) glewGetProcAddress ("glTexParameterIuivOES");
    s_deviceConfig.m_glGetTexParameterIivOES = (PFNGLGETTEXPARAMETERIIVOESPROC) glewGetProcAddress ("glGetTexParameterIivOES");
    s_deviceConfig.m_glGetTexParameterIuivOES = (PFNGLGETTEXPARAMETERIUIVOESPROC) glewGetProcAddress ("glGetTexParameterIuivOES");
    s_deviceConfig.m_glSamplerParameterIivOES = (PFNGLSAMPLERPARAMETERIIVOESPROC) glewGetProcAddress ("glSamplerParameterIivOES");
    s_deviceConfig.m_glSamplerParameterIuivOES = (PFNGLSAMPLERPARAMETERIUIVOESPROC) glewGetProcAddress ("glSamplerParameterIuivOES");
    s_deviceConfig.m_glGetSamplerParameterIivOES = (PFNGLGETSAMPLERPARAMETERIIVOESPROC) glewGetProcAddress ("glGetSamplerParameterIivOES");
    s_deviceConfig.m_glGetSamplerParameterIuivOES = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC) glewGetProcAddress ("glGetSamplerParameterIuivOES");
  }

  // GL_OES_texture_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_buffer])
  {
    s_deviceConfig.m_glTexBufferOES = (PFNGLTEXBUFFEROESPROC) glewGetProcAddress ("glTexBufferOES");
    s_deviceConfig.m_glTexBufferRangeOES = (PFNGLTEXBUFFERRANGEOESPROC) glewGetProcAddress ("glTexBufferRangeOES");
  }

  // GL_OES_texture_storage_multisample_2d_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_storage_multisample_2d_array])
  {
    s_deviceConfig.m_glTexStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC) glewGetProcAddress ("glTexStorage3DMultisampleOES");
  }

  // GL_OES_texture_view
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_view])
  {
    s_deviceConfig.m_glTextureViewOES = (PFNGLTEXTUREVIEWOESPROC) glewGetProcAddress ("glTextureViewOES");
  }

  // GL_OES_vertex_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_array_object])
  {
    s_deviceConfig.m_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC) glewGetProcAddress ("glBindVertexArrayOES");
    s_deviceConfig.m_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC) glewGetProcAddress ("glDeleteVertexArraysOES");
    s_deviceConfig.m_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC) glewGetProcAddress ("glGenVertexArraysOES");
    s_deviceConfig.m_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC) glewGetProcAddress ("glIsVertexArrayOES");
  }

  // GL_OVR_multiview
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview])
  {
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) glewGetProcAddress ("glFramebufferTextureMultiviewOVR");
  }

  // GL_QCOM_alpha_test
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_alpha_test])
  {
    s_deviceConfig.m_glAlphaFuncQCOM = (PFNGLALPHAFUNCQCOMPROC) glewGetProcAddress ("glAlphaFuncQCOM");
  }

  // GL_QCOM_driver_control
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_driver_control])
  {
    s_deviceConfig.m_glGetDriverControlsQCOM = (PFNGLGETDRIVERCONTROLSQCOMPROC) glewGetProcAddress ("glGetDriverControlsQCOM");
    s_deviceConfig.m_glGetDriverControlStringQCOM = (PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) glewGetProcAddress ("glGetDriverControlStringQCOM");
    s_deviceConfig.m_glEnableDriverControlQCOM = (PFNGLENABLEDRIVERCONTROLQCOMPROC) glewGetProcAddress ("glEnableDriverControlQCOM");
    s_deviceConfig.m_glDisableDriverControlQCOM = (PFNGLDISABLEDRIVERCONTROLQCOMPROC) glewGetProcAddress ("glDisableDriverControlQCOM");
  }

  // GL_QCOM_extended_get
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get])
  {
    s_deviceConfig.m_glExtGetTexturesQCOM = (PFNGLEXTGETTEXTURESQCOMPROC) glewGetProcAddress ("glExtGetTexturesQCOM");
    s_deviceConfig.m_glExtGetBuffersQCOM = (PFNGLEXTGETBUFFERSQCOMPROC) glewGetProcAddress ("glExtGetBuffersQCOM");
    s_deviceConfig.m_glExtGetRenderbuffersQCOM = (PFNGLEXTGETRENDERBUFFERSQCOMPROC) glewGetProcAddress ("glExtGetRenderbuffersQCOM");
    s_deviceConfig.m_glExtGetFramebuffersQCOM = (PFNGLEXTGETFRAMEBUFFERSQCOMPROC) glewGetProcAddress ("glExtGetFramebuffersQCOM");
    s_deviceConfig.m_glExtGetTexLevelParameterivQCOM = (PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) glewGetProcAddress ("glExtGetTexLevelParameterivQCOM");
    s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM = (PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) glewGetProcAddress ("glExtTexObjectStateOverrideiQCOM");
    s_deviceConfig.m_glExtGetTexSubImageQCOM = (PFNGLEXTGETTEXSUBIMAGEQCOMPROC) glewGetProcAddress ("glExtGetTexSubImageQCOM");
    s_deviceConfig.m_glExtGetBufferPointervQCOM = (PFNGLEXTGETBUFFERPOINTERVQCOMPROC) glewGetProcAddress ("glExtGetBufferPointervQCOM");
  }

  // GL_QCOM_extended_get2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get2])
  {
    s_deviceConfig.m_glExtGetShadersQCOM = (PFNGLEXTGETSHADERSQCOMPROC) glewGetProcAddress ("glExtGetShadersQCOM");
    s_deviceConfig.m_glExtGetProgramsQCOM = (PFNGLEXTGETPROGRAMSQCOMPROC) glewGetProcAddress ("glExtGetProgramsQCOM");
    s_deviceConfig.m_glExtIsProgramBinaryQCOM = (PFNGLEXTISPROGRAMBINARYQCOMPROC) glewGetProcAddress ("glExtIsProgramBinaryQCOM");
    s_deviceConfig.m_glExtGetProgramBinarySourceQCOM = (PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) glewGetProcAddress ("glExtGetProgramBinarySourceQCOM");
  }

  // GL_QCOM_tiled_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_tiled_rendering])
  {
    s_deviceConfig.m_glStartTilingQCOM = (PFNGLSTARTTILINGQCOMPROC) glewGetProcAddress ("glStartTilingQCOM");
    s_deviceConfig.m_glEndTilingQCOM = (PFNGLENDTILINGQCOMPROC) glewGetProcAddress ("glEndTilingQCOM");
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gles::Deinitialise ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
