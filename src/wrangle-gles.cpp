////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-gles.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadBuffer(GLenum src) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadBuffer) {
    prototypeCalled = true;
    glesContext->m_glReadBuffer(src);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawRangeElements) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElements(mode, start, end, count, type, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexImage3D) {
    prototypeCalled = true;
    glesContext->m_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexSubImage3D) {
    prototypeCalled = true;
    glesContext->m_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyTexSubImage3D) {
    prototypeCalled = true;
    glesContext->m_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCompressedTexImage3D) {
    prototypeCalled = true;
    glesContext->m_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCompressedTexSubImage3D) {
    prototypeCalled = true;
    glesContext->m_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenQueries(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenQueries) {
    prototypeCalled = true;
    glesContext->m_glGenQueries(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteQueries(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteQueries) {
    prototypeCalled = true;
    glesContext->m_glDeleteQueries(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsQuery(GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsQuery) {
    prototypeCalled = true;
    result = glesContext->m_glIsQuery(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginQuery(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginQuery) {
    prototypeCalled = true;
    glesContext->m_glBeginQuery(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndQuery(GLenum target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndQuery) {
    prototypeCalled = true;
    glesContext->m_glEndQuery(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryiv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryiv) {
    prototypeCalled = true;
    glesContext->m_glGetQueryiv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryObjectuiv) {
    prototypeCalled = true;
    glesContext->m_glGetQueryObjectuiv(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glUnmapBuffer(GLenum target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glUnmapBuffer) {
    prototypeCalled = true;
    result = glesContext->m_glUnmapBuffer(target);
  }
  if (!prototypeCalled && glesContext->m_glUnmapBufferOES) {
    prototypeCalled = true;
    result = glesContext->m_glUnmapBufferOES(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetBufferPointerv(GLenum target, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetBufferPointerv) {
    prototypeCalled = true;
    glesContext->m_glGetBufferPointerv(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetBufferPointervOES) {
    prototypeCalled = true;
    glesContext->m_glGetBufferPointervOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawBuffers(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawBuffers) {
    prototypeCalled = true;
    glesContext->m_glDrawBuffers(n, bufs);
  }
  if (!prototypeCalled && glesContext->m_glDrawBuffersEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawBuffersEXT(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x3fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x3fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x3fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x3fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x2fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x2fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x2fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x2fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x4fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x4fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x4fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x4fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x2fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x2fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x2fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x2fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x4fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x4fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x4fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x4fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x3fv) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x3fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x3fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x3fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlitFramebuffer) {
    prototypeCalled = true;
    glesContext->m_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  if (!prototypeCalled && glesContext->m_glBlitFramebufferNV) {
    prototypeCalled = true;
    glesContext->m_glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisample) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  }
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  }
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleNV) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureLayer) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gles_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glesContext->m_glMapBufferRange) {
    prototypeCalled = true;
    result = glesContext->m_glMapBufferRange(target, offset, length, access);
  }
  if (!prototypeCalled && glesContext->m_glMapBufferRangeEXT) {
    prototypeCalled = true;
    result = glesContext->m_glMapBufferRangeEXT(target, offset, length, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFlushMappedBufferRange) {
    prototypeCalled = true;
    glesContext->m_glFlushMappedBufferRange(target, offset, length);
  }
  if (!prototypeCalled && glesContext->m_glFlushMappedBufferRangeEXT) {
    prototypeCalled = true;
    glesContext->m_glFlushMappedBufferRangeEXT(target, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindVertexArray(GLuint array) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindVertexArray) {
    prototypeCalled = true;
    glesContext->m_glBindVertexArray(array);
  }
  if (!prototypeCalled && glesContext->m_glBindVertexArrayOES) {
    prototypeCalled = true;
    glesContext->m_glBindVertexArrayOES(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteVertexArrays(GLsizei n, const GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteVertexArrays) {
    prototypeCalled = true;
    glesContext->m_glDeleteVertexArrays(n, arrays);
  }
  if (!prototypeCalled && glesContext->m_glDeleteVertexArraysOES) {
    prototypeCalled = true;
    glesContext->m_glDeleteVertexArraysOES(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenVertexArrays(GLsizei n, GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenVertexArrays) {
    prototypeCalled = true;
    glesContext->m_glGenVertexArrays(n, arrays);
  }
  if (!prototypeCalled && glesContext->m_glGenVertexArraysOES) {
    prototypeCalled = true;
    glesContext->m_glGenVertexArraysOES(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsVertexArray(GLuint array) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsVertexArray) {
    prototypeCalled = true;
    result = glesContext->m_glIsVertexArray(array);
  }
  if (!prototypeCalled && glesContext->m_glIsVertexArrayOES) {
    prototypeCalled = true;
    result = glesContext->m_glIsVertexArrayOES(array);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetIntegeri_v(GLenum target, GLuint index, GLint * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetIntegeri_v) {
    prototypeCalled = true;
    glesContext->m_glGetIntegeri_v(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginTransformFeedback(GLenum primitiveMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginTransformFeedback) {
    prototypeCalled = true;
    glesContext->m_glBeginTransformFeedback(primitiveMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndTransformFeedback) {
    prototypeCalled = true;
    glesContext->m_glEndTransformFeedback();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindBufferRange) {
    prototypeCalled = true;
    glesContext->m_glBindBufferRange(target, index, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindBufferBase) {
    prototypeCalled = true;
    glesContext->m_glBindBufferBase(target, index, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTransformFeedbackVaryings) {
    prototypeCalled = true;
    glesContext->m_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTransformFeedbackVarying) {
    prototypeCalled = true;
    glesContext->m_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribIPointer) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribIPointer(index, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetVertexAttribIiv) {
    prototypeCalled = true;
    glesContext->m_glGetVertexAttribIiv(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetVertexAttribIuiv) {
    prototypeCalled = true;
    glesContext->m_glGetVertexAttribIuiv(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribI4i) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribI4i(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribI4ui) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribI4ui(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribI4iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribI4iv) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribI4iv(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribI4uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribI4uiv) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribI4uiv(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetUniformuiv(GLuint program, GLint location, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetUniformuiv) {
    prototypeCalled = true;
    glesContext->m_glGetUniformuiv(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gles_glGetFragDataLocation(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glesContext->m_glGetFragDataLocation) {
    prototypeCalled = true;
    result = glesContext->m_glGetFragDataLocation(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1ui(GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1ui) {
    prototypeCalled = true;
    glesContext->m_glUniform1ui(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2ui) {
    prototypeCalled = true;
    glesContext->m_glUniform2ui(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3ui) {
    prototypeCalled = true;
    glesContext->m_glUniform3ui(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4ui) {
    prototypeCalled = true;
    glesContext->m_glUniform4ui(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1uiv) {
    prototypeCalled = true;
    glesContext->m_glUniform1uiv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2uiv) {
    prototypeCalled = true;
    glesContext->m_glUniform2uiv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3uiv) {
    prototypeCalled = true;
    glesContext->m_glUniform3uiv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4uiv) {
    prototypeCalled = true;
    glesContext->m_glUniform4uiv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearBufferiv) {
    prototypeCalled = true;
    glesContext->m_glClearBufferiv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearBufferuiv) {
    prototypeCalled = true;
    glesContext->m_glClearBufferuiv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearBufferfv) {
    prototypeCalled = true;
    glesContext->m_glClearBufferfv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearBufferfi) {
    prototypeCalled = true;
    glesContext->m_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * _glew_gles_glGetStringi(GLenum name, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  const GLubyte * result = ((const GLubyte *)0);
  if (!prototypeCalled && glesContext->m_glGetStringi) {
    prototypeCalled = true;
    result = glesContext->m_glGetStringi(name, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyBufferSubData) {
    prototypeCalled = true;
    glesContext->m_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  }
  if (!prototypeCalled && glesContext->m_glCopyBufferSubDataNV) {
    prototypeCalled = true;
    glesContext->m_glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetUniformIndices) {
    prototypeCalled = true;
    glesContext->m_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetActiveUniformsiv) {
    prototypeCalled = true;
    glesContext->m_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glGetUniformBlockIndex) {
    prototypeCalled = true;
    result = glesContext->m_glGetUniformBlockIndex(program, uniformBlockName);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetActiveUniformBlockiv) {
    prototypeCalled = true;
    glesContext->m_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetActiveUniformBlockName) {
    prototypeCalled = true;
    glesContext->m_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformBlockBinding) {
    prototypeCalled = true;
    glesContext->m_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysInstanced) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstanced(mode, first, count, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedANGLE) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedANGLE(mode, first, count, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedEXT(mode, first, count, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedNV(mode, first, count, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstanced) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstanced(mode, count, type, indices, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedANGLE) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedANGLE(mode, count, type, indices, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedEXT(mode, count, type, indices, instancecount);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedNV(mode, count, type, indices, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync _glew_gles_glFenceSync(GLenum condition, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLsync result = ((GLsync)0);
  if (!prototypeCalled && glesContext->m_glFenceSync) {
    prototypeCalled = true;
    result = glesContext->m_glFenceSync(condition, flags);
  }
  if (!prototypeCalled && glesContext->m_glFenceSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glFenceSyncAPPLE(condition, flags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsSync(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsSync) {
    prototypeCalled = true;
    result = glesContext->m_glIsSync(sync);
  }
  if (!prototypeCalled && glesContext->m_glIsSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glIsSyncAPPLE(sync);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteSync(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteSync) {
    prototypeCalled = true;
    glesContext->m_glDeleteSync(sync);
  }
  if (!prototypeCalled && glesContext->m_glDeleteSyncAPPLE) {
    prototypeCalled = true;
    glesContext->m_glDeleteSyncAPPLE(sync);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glClientWaitSync) {
    prototypeCalled = true;
    result = glesContext->m_glClientWaitSync(sync, flags, timeout);
  }
  if (!prototypeCalled && glesContext->m_glClientWaitSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glClientWaitSyncAPPLE(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWaitSync) {
    prototypeCalled = true;
    glesContext->m_glWaitSync(sync, flags, timeout);
  }
  if (!prototypeCalled && glesContext->m_glWaitSyncAPPLE) {
    prototypeCalled = true;
    glesContext->m_glWaitSyncAPPLE(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInteger64v(GLenum pname, GLint64 * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInteger64v) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64v(pname, data);
  }
  if (!prototypeCalled && glesContext->m_glGetInteger64vAPPLE) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64vAPPLE(pname, data);
  }
  if (!prototypeCalled && glesContext->m_glGetInteger64vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64vEXT(pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSynciv) {
    prototypeCalled = true;
    glesContext->m_glGetSynciv(sync, pname, count, length, values);
  }
  if (!prototypeCalled && glesContext->m_glGetSyncivAPPLE) {
    prototypeCalled = true;
    glesContext->m_glGetSyncivAPPLE(sync, pname, count, length, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInteger64i_v) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64i_v(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetBufferParameteri64v) {
    prototypeCalled = true;
    glesContext->m_glGetBufferParameteri64v(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenSamplers(GLsizei count, GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenSamplers) {
    prototypeCalled = true;
    glesContext->m_glGenSamplers(count, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteSamplers(GLsizei count, const GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteSamplers) {
    prototypeCalled = true;
    glesContext->m_glDeleteSamplers(count, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsSampler(GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsSampler) {
    prototypeCalled = true;
    result = glesContext->m_glIsSampler(sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindSampler(GLuint unit, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindSampler) {
    prototypeCalled = true;
    glesContext->m_glBindSampler(unit, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameteri) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameteri(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameteriv) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameteriv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterf) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterf(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterfv) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterfv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameteriv) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameteriv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterfv) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterfv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribDivisor(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisor) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisor(index, divisor);
  }
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorANGLE) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorANGLE(index, divisor);
  }
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorEXT) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorEXT(index, divisor);
  }
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorNV) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorNV(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindTransformFeedback(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindTransformFeedback) {
    prototypeCalled = true;
    glesContext->m_glBindTransformFeedback(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteTransformFeedbacks) {
    prototypeCalled = true;
    glesContext->m_glDeleteTransformFeedbacks(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenTransformFeedbacks(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenTransformFeedbacks) {
    prototypeCalled = true;
    glesContext->m_glGenTransformFeedbacks(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsTransformFeedback(GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsTransformFeedback) {
    prototypeCalled = true;
    result = glesContext->m_glIsTransformFeedback(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPauseTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPauseTransformFeedback) {
    prototypeCalled = true;
    glesContext->m_glPauseTransformFeedback();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glResumeTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glResumeTransformFeedback) {
    prototypeCalled = true;
    glesContext->m_glResumeTransformFeedback();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramBinary) {
    prototypeCalled = true;
    glesContext->m_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  }
  if (!prototypeCalled && glesContext->m_glGetProgramBinaryOES) {
    prototypeCalled = true;
    glesContext->m_glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramBinary) {
    prototypeCalled = true;
    glesContext->m_glProgramBinary(program, binaryFormat, binary, length);
  }
  if (!prototypeCalled && glesContext->m_glProgramBinaryOES) {
    prototypeCalled = true;
    glesContext->m_glProgramBinaryOES(program, binaryFormat, binary, (GLint) length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramParameteri) {
    prototypeCalled = true;
    glesContext->m_glProgramParameteri(program, pname, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramParameteriEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramParameteriEXT(program, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glInvalidateFramebuffer) {
    prototypeCalled = true;
    glesContext->m_glInvalidateFramebuffer(target, numAttachments, attachments);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glInvalidateSubFramebuffer) {
    prototypeCalled = true;
    glesContext->m_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage2D) {
    prototypeCalled = true;
    glesContext->m_glTexStorage2D(target, levels, internalformat, width, height);
  }
  if (!prototypeCalled && glesContext->m_glTexStorage2DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorage2DEXT(target, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage3D) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3D(target, levels, internalformat, width, height, depth);
  }
  if (!prototypeCalled && glesContext->m_glTexStorage3DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInternalformativ) {
    prototypeCalled = true;
    glesContext->m_glGetInternalformativ(target, internalformat, pname, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDispatchCompute) {
    prototypeCalled = true;
    glesContext->m_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDispatchComputeIndirect(GLintptr indirect) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDispatchComputeIndirect) {
    prototypeCalled = true;
    glesContext->m_glDispatchComputeIndirect(indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysIndirect(GLenum mode, const void * indirect) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysIndirect) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysIndirect(mode, indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsIndirect) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsIndirect(mode, type, indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferParameteri) {
    prototypeCalled = true;
    glesContext->m_glFramebufferParameteri(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFramebufferParameteriv) {
    prototypeCalled = true;
    glesContext->m_glGetFramebufferParameteriv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramInterfaceiv) {
    prototypeCalled = true;
    glesContext->m_glGetProgramInterfaceiv(program, programInterface, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glGetProgramResourceIndex) {
    prototypeCalled = true;
    result = glesContext->m_glGetProgramResourceIndex(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramResourceName) {
    prototypeCalled = true;
    glesContext->m_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramResourceiv) {
    prototypeCalled = true;
    glesContext->m_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gles_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glesContext->m_glGetProgramResourceLocation) {
    prototypeCalled = true;
    result = glesContext->m_glGetProgramResourceLocation(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUseProgramStages) {
    prototypeCalled = true;
    glesContext->m_glUseProgramStages(pipeline, stages, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glActiveShaderProgram(GLuint pipeline, GLuint program) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glActiveShaderProgram) {
    prototypeCalled = true;
    glesContext->m_glActiveShaderProgram(pipeline, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glCreateShaderProgramv) {
    prototypeCalled = true;
    result = glesContext->m_glCreateShaderProgramv(type, count, strings);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindProgramPipeline) {
    prototypeCalled = true;
    glesContext->m_glBindProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteProgramPipelines) {
    prototypeCalled = true;
    glesContext->m_glDeleteProgramPipelines(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenProgramPipelines(GLsizei n, GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenProgramPipelines) {
    prototypeCalled = true;
    glesContext->m_glGenProgramPipelines(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsProgramPipeline) {
    prototypeCalled = true;
    result = glesContext->m_glIsProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramPipelineiv) {
    prototypeCalled = true;
    glesContext->m_glGetProgramPipelineiv(pipeline, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1i) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1i(program, location, v0);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1iEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2i) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2i(program, location, v0, v1);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2iEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3i) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3i(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3iEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4i) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4i(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1ui) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1ui(program, location, v0);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1uiEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2ui) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2ui(program, location, v0, v1);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2uiEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3ui) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3ui(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4ui) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4ui(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1f) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1f(program, location, v0);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1fEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2f) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2f(program, location, v0, v1);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2fEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3f) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3f(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3fEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4f) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4f(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1iv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1iv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2iv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2iv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3iv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3iv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4iv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4iv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1uiv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1uiv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2uiv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2uiv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3uiv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3uiv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4uiv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4uiv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1fv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform1fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2fv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3fv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4fv(program, location, count, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniform4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x3fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x2fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x4fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x2fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x4fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x3fv) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glValidateProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glValidateProgramPipeline) {
    prototypeCalled = true;
    glesContext->m_glValidateProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramPipelineInfoLog) {
    prototypeCalled = true;
    glesContext->m_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindImageTexture) {
    prototypeCalled = true;
    glesContext->m_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetBooleani_v) {
    prototypeCalled = true;
    glesContext->m_glGetBooleani_v(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMemoryBarrier(GLbitfield barriers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMemoryBarrier) {
    prototypeCalled = true;
    glesContext->m_glMemoryBarrier(barriers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMemoryBarrierByRegion(GLbitfield barriers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMemoryBarrierByRegion) {
    prototypeCalled = true;
    glesContext->m_glMemoryBarrierByRegion(barriers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage2DMultisample) {
    prototypeCalled = true;
    glesContext->m_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetMultisamplefv) {
    prototypeCalled = true;
    glesContext->m_glGetMultisamplefv(pname, index, val);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSampleMaski) {
    prototypeCalled = true;
    glesContext->m_glSampleMaski(maskNumber, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexLevelParameteriv) {
    prototypeCalled = true;
    glesContext->m_glGetTexLevelParameteriv(target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexLevelParameterfv) {
    prototypeCalled = true;
    glesContext->m_glGetTexLevelParameterfv(target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindVertexBuffer) {
    prototypeCalled = true;
    glesContext->m_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribFormat) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribIFormat) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribBinding) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribBinding(attribindex, bindingindex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexBindingDivisor) {
    prototypeCalled = true;
    glesContext->m_glVertexBindingDivisor(bindingindex, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendBarrier() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendBarrier) {
    prototypeCalled = true;
    glesContext->m_glBlendBarrier();
  }
  if (!prototypeCalled && glesContext->m_glBlendBarrierKHR) {
    prototypeCalled = true;
    glesContext->m_glBlendBarrierKHR();
  }
  if (!prototypeCalled && glesContext->m_glBlendBarrierNV) {
    prototypeCalled = true;
    glesContext->m_glBlendBarrierNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyImageSubData) {
    prototypeCalled = true;
    glesContext->m_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  if (!prototypeCalled && glesContext->m_glCopyImageSubDataEXT) {
    prototypeCalled = true;
    glesContext->m_glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  if (!prototypeCalled && glesContext->m_glCopyImageSubDataOES) {
    prototypeCalled = true;
    glesContext->m_glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageControl) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageControl(source, type, severity, count, ids, enabled);
  }
  if (!prototypeCalled && glesContext->m_glDebugMessageControlKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageControlKHR(source, type, severity, count, ids, enabled);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageInsert) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageInsert(source, type, id, severity, length, buf);
  }
  if (!prototypeCalled && glesContext->m_glDebugMessageInsertKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageInsertKHR(source, type, id, severity, length, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageCallback) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageCallback(callback, userParam);
  }
  if (!prototypeCalled && glesContext->m_glDebugMessageCallbackKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageCallbackKHR((GLDEBUGPROCKHR) callback, userParam);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glGetDebugMessageLog) {
    prototypeCalled = true;
    result = glesContext->m_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  if (!prototypeCalled && glesContext->m_glGetDebugMessageLogKHR) {
    prototypeCalled = true;
    result = glesContext->m_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPushDebugGroup) {
    prototypeCalled = true;
    glesContext->m_glPushDebugGroup(source, id, length, message);
  }
  if (!prototypeCalled && glesContext->m_glPushDebugGroupKHR) {
    prototypeCalled = true;
    glesContext->m_glPushDebugGroupKHR(source, id, length, message);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPopDebugGroup() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPopDebugGroup) {
    prototypeCalled = true;
    glesContext->m_glPopDebugGroup();
  }
  if (!prototypeCalled && glesContext->m_glPopDebugGroupKHR) {
    prototypeCalled = true;
    glesContext->m_glPopDebugGroupKHR();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glObjectLabel) {
    prototypeCalled = true;
    glesContext->m_glObjectLabel(identifier, name, length, label);
  }
  if (!prototypeCalled && glesContext->m_glObjectLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glObjectLabelKHR(identifier, name, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetObjectLabel) {
    prototypeCalled = true;
    glesContext->m_glGetObjectLabel(identifier, name, bufSize, length, label);
  }
  if (!prototypeCalled && glesContext->m_glGetObjectLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glGetObjectLabelKHR(identifier, name, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glObjectPtrLabel) {
    prototypeCalled = true;
    glesContext->m_glObjectPtrLabel(ptr, length, label);
  }
  if (!prototypeCalled && glesContext->m_glObjectPtrLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glObjectPtrLabelKHR(ptr, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetObjectPtrLabel) {
    prototypeCalled = true;
    glesContext->m_glGetObjectPtrLabel(ptr, bufSize, length, label);
  }
  if (!prototypeCalled && glesContext->m_glGetObjectPtrLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glGetObjectPtrLabelKHR(ptr, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPointerv(GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPointerv) {
    prototypeCalled = true;
    glesContext->m_glGetPointerv(pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetPointervKHR) {
    prototypeCalled = true;
    glesContext->m_glGetPointervKHR(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEnablei(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEnablei) {
    prototypeCalled = true;
    glesContext->m_glEnablei(target, index);
  }
  if (!prototypeCalled && glesContext->m_glEnableiEXT) {
    prototypeCalled = true;
    glesContext->m_glEnableiEXT(target, index);
  }
  if (!prototypeCalled && glesContext->m_glEnableiNV) {
    prototypeCalled = true;
    glesContext->m_glEnableiNV(target, index);
  }
  if (!prototypeCalled && glesContext->m_glEnableiOES) {
    prototypeCalled = true;
    glesContext->m_glEnableiOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDisablei(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDisablei) {
    prototypeCalled = true;
    glesContext->m_glDisablei(target, index);
  }
  if (!prototypeCalled && glesContext->m_glDisableiEXT) {
    prototypeCalled = true;
    glesContext->m_glDisableiEXT(target, index);
  }
  if (!prototypeCalled && glesContext->m_glDisableiNV) {
    prototypeCalled = true;
    glesContext->m_glDisableiNV(target, index);
  }
  if (!prototypeCalled && glesContext->m_glDisableiOES) {
    prototypeCalled = true;
    glesContext->m_glDisableiOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationi(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationi) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationi(buf, mode);
  }
  if (!prototypeCalled && glesContext->m_glBlendEquationiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationiEXT(buf, mode);
  }
  if (!prototypeCalled && glesContext->m_glBlendEquationiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationiOES(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationSeparatei) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  }
  if (!prototypeCalled && glesContext->m_glBlendEquationSeparateiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
  }
  if (!prototypeCalled && glesContext->m_glBlendEquationSeparateiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFunci) {
    prototypeCalled = true;
    glesContext->m_glBlendFunci(buf, src, dst);
  }
  if (!prototypeCalled && glesContext->m_glBlendFunciEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendFunciEXT(buf, src, dst);
  }
  if (!prototypeCalled && glesContext->m_glBlendFunciOES) {
    prototypeCalled = true;
    glesContext->m_glBlendFunciOES(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFuncSeparatei) {
    prototypeCalled = true;
    glesContext->m_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  if (!prototypeCalled && glesContext->m_glBlendFuncSeparateiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  if (!prototypeCalled && glesContext->m_glBlendFuncSeparateiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glColorMaski) {
    prototypeCalled = true;
    glesContext->m_glColorMaski(index, r, g, b, a);
  }
  if (!prototypeCalled && glesContext->m_glColorMaskiEXT) {
    prototypeCalled = true;
    glesContext->m_glColorMaskiEXT(index, r, g, b, a);
  }
  if (!prototypeCalled && glesContext->m_glColorMaskiOES) {
    prototypeCalled = true;
    glesContext->m_glColorMaskiOES(index, r, g, b, a);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsEnabledi(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsEnabledi) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnabledi(target, index);
  }
  if (!prototypeCalled && glesContext->m_glIsEnablediEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediEXT(target, index);
  }
  if (!prototypeCalled && glesContext->m_glIsEnablediNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediNV(target, index);
  }
  if (!prototypeCalled && glesContext->m_glIsEnablediOES) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsBaseVertex) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawRangeElementsBaseVertex) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawRangeElementsBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawRangeElementsBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertex) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
  }
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTexture) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTexture(target, attachment, texture, level);
  }
  if (!prototypeCalled && glesContext->m_glFramebufferTextureEXT) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureEXT(target, attachment, texture, level);
  }
  if (!prototypeCalled && glesContext->m_glFramebufferTextureOES) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureOES(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPrimitiveBoundingBox) {
    prototypeCalled = true;
    glesContext->m_glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  if (!prototypeCalled && glesContext->m_glPrimitiveBoundingBoxEXT) {
    prototypeCalled = true;
    glesContext->m_glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  if (!prototypeCalled && glesContext->m_glPrimitiveBoundingBoxOES) {
    prototypeCalled = true;
    glesContext->m_glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glGetGraphicsResetStatus() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glGetGraphicsResetStatus) {
    prototypeCalled = true;
    result = glesContext->m_glGetGraphicsResetStatus();
  }
  if (!prototypeCalled && glesContext->m_glGetGraphicsResetStatusEXT) {
    prototypeCalled = true;
    result = glesContext->m_glGetGraphicsResetStatusEXT();
  }
  if (!prototypeCalled && glesContext->m_glGetGraphicsResetStatusKHR) {
    prototypeCalled = true;
    result = glesContext->m_glGetGraphicsResetStatusKHR();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadnPixels) {
    prototypeCalled = true;
    glesContext->m_glReadnPixels(x, y, width, height, format, type, bufSize, data);
  }
  if (!prototypeCalled && glesContext->m_glReadnPixelsEXT) {
    prototypeCalled = true;
    glesContext->m_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
  }
  if (!prototypeCalled && glesContext->m_glReadnPixelsKHR) {
    prototypeCalled = true;
    glesContext->m_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformfv) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformfv(program, location, bufSize, params);
  }
  if (!prototypeCalled && glesContext->m_glGetnUniformfvEXT) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformfvEXT(program, location, bufSize, params);
  }
  if (!prototypeCalled && glesContext->m_glGetnUniformfvKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformfvKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformiv) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformiv(program, location, bufSize, params);
  }
  if (!prototypeCalled && glesContext->m_glGetnUniformivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformivEXT(program, location, bufSize, params);
  }
  if (!prototypeCalled && glesContext->m_glGetnUniformivKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformivKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformuiv) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformuiv(program, location, bufSize, params);
  }
  if (!prototypeCalled && glesContext->m_glGetnUniformuivKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformuivKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMinSampleShading(GLfloat value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMinSampleShading) {
    prototypeCalled = true;
    glesContext->m_glMinSampleShading(value);
  }
  if (!prototypeCalled && glesContext->m_glMinSampleShadingOES) {
    prototypeCalled = true;
    glesContext->m_glMinSampleShadingOES(value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPatchParameteri(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPatchParameteri) {
    prototypeCalled = true;
    glesContext->m_glPatchParameteri(pname, value);
  }
  if (!prototypeCalled && glesContext->m_glPatchParameteriEXT) {
    prototypeCalled = true;
    glesContext->m_glPatchParameteriEXT(pname, value);
  }
  if (!prototypeCalled && glesContext->m_glPatchParameteriOES) {
    prototypeCalled = true;
    glesContext->m_glPatchParameteriOES(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIiv) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIiv(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glTexParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIivEXT(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glTexParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIuiv) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIuiv(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glTexParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIuivEXT(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glTexParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIuivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIiv) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIiv(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetTexParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIivEXT(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetTexParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIuiv) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIuiv(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetTexParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIuivEXT(target, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetTexParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIuivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIiv) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIiv(sampler, pname, param);
  }
  if (!prototypeCalled && glesContext->m_glSamplerParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIivEXT(sampler, pname, param);
  }
  if (!prototypeCalled && glesContext->m_glSamplerParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIivOES(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIuiv) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIuiv(sampler, pname, param);
  }
  if (!prototypeCalled && glesContext->m_glSamplerParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIuivEXT(sampler, pname, param);
  }
  if (!prototypeCalled && glesContext->m_glSamplerParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIuivOES(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIiv) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIiv(sampler, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIivEXT(sampler, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIivOES(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIuiv) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIuiv(sampler, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIuivEXT(sampler, pname, params);
  }
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIuivOES(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBuffer) {
    prototypeCalled = true;
    glesContext->m_glTexBuffer(target, internalformat, buffer);
  }
  if (!prototypeCalled && glesContext->m_glTexBufferEXT) {
    prototypeCalled = true;
    glesContext->m_glTexBufferEXT(target, internalformat, buffer);
  }
  if (!prototypeCalled && glesContext->m_glTexBufferOES) {
    prototypeCalled = true;
    glesContext->m_glTexBufferOES(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBufferRange) {
    prototypeCalled = true;
    glesContext->m_glTexBufferRange(target, internalformat, buffer, offset, size);
  }
  if (!prototypeCalled && glesContext->m_glTexBufferRangeEXT) {
    prototypeCalled = true;
    glesContext->m_glTexBufferRangeEXT(target, internalformat, buffer, offset, size);
  }
  if (!prototypeCalled && glesContext->m_glTexBufferRangeOES) {
    prototypeCalled = true;
    glesContext->m_glTexBufferRangeOES(target, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage3DMultisample) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  if (!prototypeCalled && glesContext->m_glTexStorage3DMultisampleOES) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleAdvancedAMD) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedRenderbufferStorageMultisampleAdvancedAMD) {
    prototypeCalled = true;
    glesContext->m_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorGroupsAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorCountersAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorGroupStringAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorCounterStringAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorCounterInfoAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenPerfMonitorsAMD) {
    prototypeCalled = true;
    glesContext->m_glGenPerfMonitorsAMD(n, monitors);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeletePerfMonitorsAMD) {
    prototypeCalled = true;
    glesContext->m_glDeletePerfMonitorsAMD(n, monitors);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSelectPerfMonitorCountersAMD) {
    prototypeCalled = true;
    glesContext->m_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginPerfMonitorAMD(GLuint monitor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginPerfMonitorAMD) {
    prototypeCalled = true;
    glesContext->m_glBeginPerfMonitorAMD(monitor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndPerfMonitorAMD(GLuint monitor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndPerfMonitorAMD) {
    prototypeCalled = true;
    glesContext->m_glEndPerfMonitorAMD(monitor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfMonitorCounterDataAMD) {
    prototypeCalled = true;
    glesContext->m_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlitFramebufferANGLE) {
    prototypeCalled = true;
    glesContext->m_glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleANGLE) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedANGLE) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedANGLE(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedANGLE) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorANGLE) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorANGLE(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTranslatedShaderSourceANGLE) {
    prototypeCalled = true;
    glesContext->m_glGetTranslatedShaderSourceANGLE(shader, bufSize, length, source);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyTextureLevelsAPPLE) {
    prototypeCalled = true;
    glesContext->m_glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleAPPLE) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glResolveMultisampleFramebufferAPPLE() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glResolveMultisampleFramebufferAPPLE) {
    prototypeCalled = true;
    glesContext->m_glResolveMultisampleFramebufferAPPLE();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync _glew_gles_glFenceSyncAPPLE(GLenum condition, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLsync result = ((GLsync)0);
  if (!prototypeCalled && glesContext->m_glFenceSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glFenceSyncAPPLE(condition, flags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsSyncAPPLE(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glIsSyncAPPLE(sync);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteSyncAPPLE(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteSyncAPPLE) {
    prototypeCalled = true;
    glesContext->m_glDeleteSyncAPPLE(sync);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glClientWaitSyncAPPLE) {
    prototypeCalled = true;
    result = glesContext->m_glClientWaitSyncAPPLE(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWaitSyncAPPLE) {
    prototypeCalled = true;
    glesContext->m_glWaitSyncAPPLE(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInteger64vAPPLE(GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInteger64vAPPLE) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64vAPPLE(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSyncivAPPLE) {
    prototypeCalled = true;
    glesContext->m_glGetSyncivAPPLE(sync, pname, count, length, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEGLImageTargetTexStorageEXT) {
    prototypeCalled = true;
    glesContext->m_glEGLImageTargetTexStorageEXT(target, image, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEGLImageTargetTextureStorageEXT) {
    prototypeCalled = true;
    glesContext->m_glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedBaseInstanceEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseInstanceEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertexBaseInstanceEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindFragDataLocationIndexedEXT) {
    prototypeCalled = true;
    glesContext->m_glBindFragDataLocationIndexedEXT(program, colorNumber, index, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindFragDataLocationEXT) {
    prototypeCalled = true;
    glesContext->m_glBindFragDataLocationEXT(program, color, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gles_glGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glesContext->m_glGetProgramResourceLocationIndexEXT) {
    prototypeCalled = true;
    result = glesContext->m_glGetProgramResourceLocationIndexEXT(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gles_glGetFragDataIndexEXT(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glesContext->m_glGetFragDataIndexEXT) {
    prototypeCalled = true;
    result = glesContext->m_glGetFragDataIndexEXT(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBufferStorageEXT) {
    prototypeCalled = true;
    glesContext->m_glBufferStorageEXT(target, size, data, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearTexImageEXT) {
    prototypeCalled = true;
    glesContext->m_glClearTexImageEXT(texture, level, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearTexSubImageEXT) {
    prototypeCalled = true;
    glesContext->m_glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClipControlEXT(GLenum origin, GLenum depth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClipControlEXT) {
    prototypeCalled = true;
    glesContext->m_glClipControlEXT(origin, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyImageSubDataEXT) {
    prototypeCalled = true;
    glesContext->m_glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glLabelObjectEXT) {
    prototypeCalled = true;
    glesContext->m_glLabelObjectEXT(type, object, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetObjectLabelEXT) {
    prototypeCalled = true;
    glesContext->m_glGetObjectLabelEXT(type, object, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glInsertEventMarkerEXT(GLsizei length, const GLchar * marker) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glInsertEventMarkerEXT) {
    prototypeCalled = true;
    glesContext->m_glInsertEventMarkerEXT(length, marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPushGroupMarkerEXT(GLsizei length, const GLchar * marker) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPushGroupMarkerEXT) {
    prototypeCalled = true;
    glesContext->m_glPushGroupMarkerEXT(length, marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPopGroupMarkerEXT() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPopGroupMarkerEXT) {
    prototypeCalled = true;
    glesContext->m_glPopGroupMarkerEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDiscardFramebufferEXT) {
    prototypeCalled = true;
    glesContext->m_glDiscardFramebufferEXT(target, numAttachments, attachments);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenQueriesEXT(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenQueriesEXT) {
    prototypeCalled = true;
    glesContext->m_glGenQueriesEXT(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteQueriesEXT(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteQueriesEXT) {
    prototypeCalled = true;
    glesContext->m_glDeleteQueriesEXT(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsQueryEXT(GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsQueryEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsQueryEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginQueryEXT(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginQueryEXT) {
    prototypeCalled = true;
    glesContext->m_glBeginQueryEXT(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndQueryEXT(GLenum target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndQueryEXT) {
    prototypeCalled = true;
    glesContext->m_glEndQueryEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glQueryCounterEXT(GLuint id, GLenum target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glQueryCounterEXT) {
    prototypeCalled = true;
    glesContext->m_glQueryCounterEXT(id, target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetQueryivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryObjectivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetQueryObjectivEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryObjectuivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetQueryObjectuivEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryObjecti64vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetQueryObjecti64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetQueryObjectui64vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetQueryObjectui64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInteger64vEXT(GLenum pname, GLint64 * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInteger64vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetInteger64vEXT(pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawBuffersEXT(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawBuffersEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawBuffersEXT(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEnableiEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEnableiEXT) {
    prototypeCalled = true;
    glesContext->m_glEnableiEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDisableiEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDisableiEXT) {
    prototypeCalled = true;
    glesContext->m_glDisableiEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationiEXT(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationiEXT(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationSeparateiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFunciEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendFunciEXT(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFuncSeparateiEXT) {
    prototypeCalled = true;
    glesContext->m_glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glColorMaskiEXT) {
    prototypeCalled = true;
    glesContext->m_glColorMaskiEXT(index, r, g, b, a);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsEnablediEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsEnablediEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawRangeElementsBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawElementsBaseVertexEXT) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, drawcount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedEXT(mode, start, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawTransformFeedbackEXT(GLenum mode, GLuint id) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawTransformFeedbackEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawTransformFeedbackEXT(mode, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawTransformFeedbackInstancedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawTransformFeedbackInstancedEXT(mode, id, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBufferStorageExternalEXT) {
    prototypeCalled = true;
    glesContext->m_glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedBufferStorageExternalEXT) {
    prototypeCalled = true;
    glesContext->m_glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureEXT) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureEXT(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribDivisorEXT(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorEXT) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorEXT(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gles_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glesContext->m_glMapBufferRangeEXT) {
    prototypeCalled = true;
    result = glesContext->m_glMapBufferRangeEXT(target, offset, length, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFlushMappedBufferRangeEXT) {
    prototypeCalled = true;
    glesContext->m_glFlushMappedBufferRangeEXT(target, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetUnsignedBytevEXT(GLenum pname, GLubyte * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetUnsignedBytevEXT) {
    prototypeCalled = true;
    glesContext->m_glGetUnsignedBytevEXT(pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetUnsignedBytei_vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetUnsignedBytei_vEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteMemoryObjectsEXT) {
    prototypeCalled = true;
    glesContext->m_glDeleteMemoryObjectsEXT(n, memoryObjects);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsMemoryObjectEXT(GLuint memoryObject) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsMemoryObjectEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsMemoryObjectEXT(memoryObject);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCreateMemoryObjectsEXT) {
    prototypeCalled = true;
    glesContext->m_glCreateMemoryObjectsEXT(n, memoryObjects);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMemoryObjectParameterivEXT) {
    prototypeCalled = true;
    glesContext->m_glMemoryObjectParameterivEXT(memoryObject, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetMemoryObjectParameterivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetMemoryObjectParameterivEXT(memoryObject, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorageMem2DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorageMem2DMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorageMem3DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorageMem3DMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBufferStorageMemEXT) {
    prototypeCalled = true;
    glesContext->m_glBufferStorageMemEXT(target, size, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorageMem2DEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorageMem2DMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorageMem3DEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorageMem3DMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedBufferStorageMemEXT) {
    prototypeCalled = true;
    glesContext->m_glNamedBufferStorageMemEXT(buffer, size, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportMemoryFdEXT) {
    prototypeCalled = true;
    glesContext->m_glImportMemoryFdEXT(memory, size, handleType, fd);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportMemoryWin32HandleEXT) {
    prototypeCalled = true;
    glesContext->m_glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportMemoryWin32NameEXT) {
    prototypeCalled = true;
    glesContext->m_glImportMemoryWin32NameEXT(memory, size, handleType, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawArraysEXT) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawArraysEXT(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawElementsEXT) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawElementsEXT(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawArraysIndirectEXT) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawElementsIndirectEXT) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTexture2DMultisampleEXT) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadBufferIndexedEXT(GLenum src, GLint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadBufferIndexedEXT) {
    prototypeCalled = true;
    glesContext->m_glReadBufferIndexedEXT(src, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawBuffersIndexedEXT) {
    prototypeCalled = true;
    glesContext->m_glDrawBuffersIndexedEXT(n, location, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetIntegeri_vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetIntegeri_vEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPolygonOffsetClampEXT) {
    prototypeCalled = true;
    glesContext->m_glPolygonOffsetClampEXT(factor, units, clamp);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPrimitiveBoundingBoxEXT) {
    prototypeCalled = true;
    glesContext->m_glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRasterSamplesEXT) {
    prototypeCalled = true;
    glesContext->m_glRasterSamplesEXT(samples, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glGetGraphicsResetStatusEXT() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glGetGraphicsResetStatusEXT) {
    prototypeCalled = true;
    result = glesContext->m_glGetGraphicsResetStatusEXT();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadnPixelsEXT) {
    prototypeCalled = true;
    glesContext->m_glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformfvEXT) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformfvEXT(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformivEXT(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenSemaphoresEXT(GLsizei n, GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenSemaphoresEXT) {
    prototypeCalled = true;
    glesContext->m_glGenSemaphoresEXT(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteSemaphoresEXT) {
    prototypeCalled = true;
    glesContext->m_glDeleteSemaphoresEXT(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsSemaphoreEXT(GLuint semaphore) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsSemaphoreEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsSemaphoreEXT(semaphore);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSemaphoreParameterui64vEXT) {
    prototypeCalled = true;
    glesContext->m_glSemaphoreParameterui64vEXT(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSemaphoreParameterui64vEXT) {
    prototypeCalled = true;
    glesContext->m_glGetSemaphoreParameterui64vEXT(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWaitSemaphoreEXT) {
    prototypeCalled = true;
    glesContext->m_glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSignalSemaphoreEXT) {
    prototypeCalled = true;
    glesContext->m_glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportSemaphoreFdEXT) {
    prototypeCalled = true;
    glesContext->m_glImportSemaphoreFdEXT(semaphore, handleType, fd);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportSemaphoreWin32HandleEXT) {
    prototypeCalled = true;
    glesContext->m_glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glImportSemaphoreWin32NameEXT) {
    prototypeCalled = true;
    glesContext->m_glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glActiveShaderProgramEXT(GLuint pipeline, GLuint program) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glActiveShaderProgramEXT) {
    prototypeCalled = true;
    glesContext->m_glActiveShaderProgramEXT(pipeline, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindProgramPipelineEXT(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindProgramPipelineEXT) {
    prototypeCalled = true;
    glesContext->m_glBindProgramPipelineEXT(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glCreateShaderProgramvEXT) {
    prototypeCalled = true;
    result = glesContext->m_glCreateShaderProgramvEXT(type, count, strings);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteProgramPipelinesEXT) {
    prototypeCalled = true;
    glesContext->m_glDeleteProgramPipelinesEXT(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenProgramPipelinesEXT) {
    prototypeCalled = true;
    glesContext->m_glGenProgramPipelinesEXT(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramPipelineInfoLogEXT) {
    prototypeCalled = true;
    glesContext->m_glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramPipelineivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetProgramPipelineivEXT(pipeline, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsProgramPipelineEXT(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsProgramPipelineEXT) {
    prototypeCalled = true;
    result = glesContext->m_glIsProgramPipelineEXT(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramParameteriEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramParameteriEXT(program, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1fEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1iEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2fEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2iEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3fEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3iEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4fEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4iEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4ivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUseProgramStagesEXT) {
    prototypeCalled = true;
    glesContext->m_glUseProgramStagesEXT(pipeline, stages, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glValidateProgramPipelineEXT(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glValidateProgramPipelineEXT) {
    prototypeCalled = true;
    glesContext->m_glValidateProgramPipelineEXT(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1uiEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2uiEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4uiEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4uivEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix2x4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x2fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix3x4fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformMatrix4x3fvEXT) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferFetchBarrierEXT() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferFetchBarrierEXT) {
    prototypeCalled = true;
    glesContext->m_glFramebufferFetchBarrierEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferPixelLocalStorageSizeEXT) {
    prototypeCalled = true;
    glesContext->m_glFramebufferPixelLocalStorageSizeEXT(target, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsizei _glew_gles_glGetFramebufferPixelLocalStorageSizeEXT(GLuint target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLsizei result = ((GLsizei)0);
  if (!prototypeCalled && glesContext->m_glGetFramebufferPixelLocalStorageSizeEXT) {
    prototypeCalled = true;
    result = glesContext->m_glGetFramebufferPixelLocalStorageSizeEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glClearPixelLocalStorageuiEXT) {
    prototypeCalled = true;
    glesContext->m_glClearPixelLocalStorageuiEXT(offset, n, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexPageCommitmentEXT) {
    prototypeCalled = true;
    glesContext->m_glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPatchParameteriEXT(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPatchParameteriEXT) {
    prototypeCalled = true;
    glesContext->m_glPatchParameteriEXT(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIivEXT(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIuivEXT(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIivEXT(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIuivEXT) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIuivEXT(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBufferEXT) {
    prototypeCalled = true;
    glesContext->m_glTexBufferEXT(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBufferRangeEXT) {
    prototypeCalled = true;
    glesContext->m_glTexBufferRangeEXT(target, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage1DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorage1DEXT(target, levels, internalformat, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage2DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorage2DEXT(target, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage3DEXT) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorage1DEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorage2DEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureStorage3DEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureViewEXT) {
    prototypeCalled = true;
    glesContext->m_glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCreateSemaphoresNV(GLsizei n, GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCreateSemaphoresNV) {
    prototypeCalled = true;
    glesContext->m_glCreateSemaphoresNV(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSemaphoreParameterivNV(GLuint semaphore, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSemaphoreParameterivNV) {
    prototypeCalled = true;
    glesContext->m_glSemaphoreParameterivNV(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSemaphoreParameterivNV(GLuint semaphore, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSemaphoreParameterivNV) {
    prototypeCalled = true;
    glesContext->m_glGetSemaphoreParameterivNV(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glAcquireKeyedMutexWin32EXT) {
    prototypeCalled = true;
    result = glesContext->m_glAcquireKeyedMutexWin32EXT(memory, key, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glReleaseKeyedMutexWin32EXT) {
    prototypeCalled = true;
    result = glesContext->m_glReleaseKeyedMutexWin32EXT(memory, key);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWindowRectanglesEXT) {
    prototypeCalled = true;
    glesContext->m_glWindowRectanglesEXT(mode, count, box);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gles_glGetTextureHandleIMG(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glesContext->m_glGetTextureHandleIMG) {
    prototypeCalled = true;
    result = glesContext->m_glGetTextureHandleIMG(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gles_glGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glesContext->m_glGetTextureSamplerHandleIMG) {
    prototypeCalled = true;
    result = glesContext->m_glGetTextureSamplerHandleIMG(texture, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformHandleui64IMG(GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformHandleui64IMG) {
    prototypeCalled = true;
    glesContext->m_glUniformHandleui64IMG(location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformHandleui64vIMG) {
    prototypeCalled = true;
    glesContext->m_glUniformHandleui64vIMG(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformHandleui64IMG) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformHandleui64IMG(program, location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformHandleui64vIMG) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformHandleui64vIMG(program, location, count, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTexture2DDownsampleIMG) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureLayerDownsampleIMG) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleIMG) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTexture2DMultisampleIMG) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glApplyFramebufferAttachmentCMAAINTEL() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glApplyFramebufferAttachmentCMAAINTEL) {
    prototypeCalled = true;
    glesContext->m_glApplyFramebufferAttachmentCMAAINTEL();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginPerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginPerfQueryINTEL) {
    prototypeCalled = true;
    glesContext->m_glBeginPerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCreatePerfQueryINTEL) {
    prototypeCalled = true;
    glesContext->m_glCreatePerfQueryINTEL(queryId, queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeletePerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeletePerfQueryINTEL) {
    prototypeCalled = true;
    glesContext->m_glDeletePerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndPerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndPerfQueryINTEL) {
    prototypeCalled = true;
    glesContext->m_glEndPerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFirstPerfQueryIdINTEL(GLuint * queryId) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFirstPerfQueryIdINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetFirstPerfQueryIdINTEL(queryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetNextPerfQueryIdINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfCounterInfoINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfQueryDataINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfQueryIdByNameINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetPerfQueryIdByNameINTEL(queryName, queryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPerfQueryInfoINTEL) {
    prototypeCalled = true;
    glesContext->m_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendBarrierKHR() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendBarrierKHR) {
    prototypeCalled = true;
    glesContext->m_glBlendBarrierKHR();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageControlKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageControlKHR(source, type, severity, count, ids, enabled);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageInsertKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageInsertKHR(source, type, id, severity, length, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDebugMessageCallbackKHR) {
    prototypeCalled = true;
    glesContext->m_glDebugMessageCallbackKHR(callback, userParam);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glGetDebugMessageLogKHR) {
    prototypeCalled = true;
    result = glesContext->m_glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPushDebugGroupKHR) {
    prototypeCalled = true;
    glesContext->m_glPushDebugGroupKHR(source, id, length, message);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPopDebugGroupKHR() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPopDebugGroupKHR) {
    prototypeCalled = true;
    glesContext->m_glPopDebugGroupKHR();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glObjectLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glObjectLabelKHR(identifier, name, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetObjectLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glGetObjectLabelKHR(identifier, name, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glObjectPtrLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glObjectPtrLabelKHR(ptr, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetObjectPtrLabelKHR) {
    prototypeCalled = true;
    glesContext->m_glGetObjectPtrLabelKHR(ptr, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPointervKHR(GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPointervKHR) {
    prototypeCalled = true;
    glesContext->m_glGetPointervKHR(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glGetGraphicsResetStatusKHR() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glGetGraphicsResetStatusKHR) {
    prototypeCalled = true;
    result = glesContext->m_glGetGraphicsResetStatusKHR();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadnPixelsKHR) {
    prototypeCalled = true;
    glesContext->m_glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformfvKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformfvKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformivKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformivKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetnUniformuivKHR) {
    prototypeCalled = true;
    glesContext->m_glGetnUniformuivKHR(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMaxShaderCompilerThreadsKHR(GLuint count) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMaxShaderCompilerThreadsKHR) {
    prototypeCalled = true;
    glesContext->m_glMaxShaderCompilerThreadsKHR(count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferParameteriMESA) {
    prototypeCalled = true;
    glesContext->m_glFramebufferParameteriMESA(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFramebufferParameterivMESA) {
    prototypeCalled = true;
    glesContext->m_glGetFramebufferParameterivMESA(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gles_glGetTextureHandleNV(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glesContext->m_glGetTextureHandleNV) {
    prototypeCalled = true;
    result = glesContext->m_glGetTextureHandleNV(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gles_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glesContext->m_glGetTextureSamplerHandleNV) {
    prototypeCalled = true;
    result = glesContext->m_glGetTextureSamplerHandleNV(texture, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMakeTextureHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMakeTextureHandleResidentNV) {
    prototypeCalled = true;
    glesContext->m_glMakeTextureHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMakeTextureHandleNonResidentNV) {
    prototypeCalled = true;
    glesContext->m_glMakeTextureHandleNonResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gles_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glesContext->m_glGetImageHandleNV) {
    prototypeCalled = true;
    result = glesContext->m_glGetImageHandleNV(texture, level, layered, layer, format);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMakeImageHandleResidentNV) {
    prototypeCalled = true;
    glesContext->m_glMakeImageHandleResidentNV(handle, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMakeImageHandleNonResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMakeImageHandleNonResidentNV) {
    prototypeCalled = true;
    glesContext->m_glMakeImageHandleNonResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformHandleui64NV(GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformHandleui64NV) {
    prototypeCalled = true;
    glesContext->m_glUniformHandleui64NV(location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformHandleui64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniformHandleui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformHandleui64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformHandleui64NV(program, location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniformHandleui64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniformHandleui64vNV(program, location, count, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsTextureHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsTextureHandleResidentNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsTextureHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsImageHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsImageHandleResidentNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsImageHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendParameteriNV(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendParameteriNV) {
    prototypeCalled = true;
    glesContext->m_glBlendParameteriNV(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendBarrierNV() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendBarrierNV) {
    prototypeCalled = true;
    glesContext->m_glBlendBarrierNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportPositionWScaleNV) {
    prototypeCalled = true;
    glesContext->m_glViewportPositionWScaleNV(index, xcoeff, ycoeff);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBeginConditionalRenderNV) {
    prototypeCalled = true;
    glesContext->m_glBeginConditionalRenderNV(id, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndConditionalRenderNV() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndConditionalRenderNV) {
    prototypeCalled = true;
    glesContext->m_glEndConditionalRenderNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSubpixelPrecisionBiasNV) {
    prototypeCalled = true;
    glesContext->m_glSubpixelPrecisionBiasNV(xbits, ybits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glConservativeRasterParameteriNV(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glConservativeRasterParameteriNV) {
    prototypeCalled = true;
    glesContext->m_glConservativeRasterParameteriNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyBufferSubDataNV) {
    prototypeCalled = true;
    glesContext->m_glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverageMaskNV(GLboolean mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverageMaskNV) {
    prototypeCalled = true;
    glesContext->m_glCoverageMaskNV(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverageOperationNV(GLenum operation) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverageOperationNV) {
    prototypeCalled = true;
    glesContext->m_glCoverageOperationNV(operation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawBuffersNV(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawBuffersNV) {
    prototypeCalled = true;
    glesContext->m_glDrawBuffersNV(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawArraysInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glDrawArraysInstancedNV(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedNV(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawVkImageNV) {
    prototypeCalled = true;
    glesContext->m_glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLVULKANPROCNV _glew_gles_glGetVkProcAddrNV(const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLVULKANPROCNV result = ((GLVULKANPROCNV)0);
  if (!prototypeCalled && glesContext->m_glGetVkProcAddrNV) {
    prototypeCalled = true;
    result = glesContext->m_glGetVkProcAddrNV(name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWaitVkSemaphoreNV) {
    prototypeCalled = true;
    glesContext->m_glWaitVkSemaphoreNV(vkSemaphore);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSignalVkSemaphoreNV) {
    prototypeCalled = true;
    glesContext->m_glSignalVkSemaphoreNV(vkSemaphore);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSignalVkFenceNV(GLuint64 vkFence) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSignalVkFenceNV) {
    prototypeCalled = true;
    glesContext->m_glSignalVkFenceNV(vkFence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteFencesNV(GLsizei n, const GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteFencesNV) {
    prototypeCalled = true;
    glesContext->m_glDeleteFencesNV(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenFencesNV(GLsizei n, GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenFencesNV) {
    prototypeCalled = true;
    glesContext->m_glGenFencesNV(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsFenceNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glTestFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glTestFenceNV) {
    prototypeCalled = true;
    result = glesContext->m_glTestFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFenceivNV(GLuint fence, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFenceivNV) {
    prototypeCalled = true;
    glesContext->m_glGetFenceivNV(fence, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFinishFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFinishFenceNV) {
    prototypeCalled = true;
    glesContext->m_glFinishFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSetFenceNV(GLuint fence, GLenum condition) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSetFenceNV) {
    prototypeCalled = true;
    glesContext->m_glSetFenceNV(fence, condition);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFragmentCoverageColorNV(GLuint color) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFragmentCoverageColorNV) {
    prototypeCalled = true;
    glesContext->m_glFragmentCoverageColorNV(color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlitFramebufferNV) {
    prototypeCalled = true;
    glesContext->m_glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverageModulationTableNV(GLsizei n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverageModulationTableNV) {
    prototypeCalled = true;
    glesContext->m_glCoverageModulationTableNV(n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetCoverageModulationTableNV) {
    prototypeCalled = true;
    glesContext->m_glGetCoverageModulationTableNV(bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverageModulationNV(GLenum components) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverageModulationNV) {
    prototypeCalled = true;
    glesContext->m_glCoverageModulationNV(components);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glRenderbufferStorageMultisampleNV) {
    prototypeCalled = true;
    glesContext->m_glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1i64NV(GLint location, GLint64EXT x) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1i64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform1i64NV(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2i64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform2i64NV(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3i64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform3i64NV(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4i64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform4i64NV(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1i64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform1i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2i64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform2i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3i64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform3i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4i64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform4i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1ui64NV(GLint location, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1ui64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform1ui64NV(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2ui64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform2ui64NV(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3ui64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform3ui64NV(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4ui64NV) {
    prototypeCalled = true;
    glesContext->m_glUniform4ui64NV(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform1ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform1ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform2ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform2ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform3ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform3ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniform4ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glUniform4ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetUniformi64vNV) {
    prototypeCalled = true;
    glesContext->m_glGetUniformi64vNV(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1i64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1i64NV(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2i64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2i64NV(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3i64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3i64NV(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4i64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4i64NV(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1i64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2i64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3i64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4i64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1ui64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1ui64NV(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2ui64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2ui64NV(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3ui64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3ui64NV(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4ui64NV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4ui64NV(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform1ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform1ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform2ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform2ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform3ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform3ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramUniform4ui64vNV) {
    prototypeCalled = true;
    glesContext->m_glProgramUniform4ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glVertexAttribDivisorNV(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glVertexAttribDivisorNV) {
    prototypeCalled = true;
    glesContext->m_glVertexAttribDivisorNV(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetInternalformatSampleivNV) {
    prototypeCalled = true;
    glesContext->m_glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetMemoryObjectDetachedResourcesuivNV) {
    prototypeCalled = true;
    glesContext->m_glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glResetMemoryObjectParameterNV) {
    prototypeCalled = true;
    glesContext->m_glResetMemoryObjectParameterNV(memory, pname);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexAttachMemoryNV) {
    prototypeCalled = true;
    glesContext->m_glTexAttachMemoryNV(target, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBufferAttachMemoryNV) {
    prototypeCalled = true;
    glesContext->m_glBufferAttachMemoryNV(target, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureAttachMemoryNV) {
    prototypeCalled = true;
    glesContext->m_glTextureAttachMemoryNV(texture, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedBufferAttachMemoryNV) {
    prototypeCalled = true;
    glesContext->m_glNamedBufferAttachMemoryNV(buffer, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBufferPageCommitmentMemNV) {
    prototypeCalled = true;
    glesContext->m_glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexPageCommitmentMemNV) {
    prototypeCalled = true;
    glesContext->m_glTexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedBufferPageCommitmentMemNV) {
    prototypeCalled = true;
    glesContext->m_glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexturePageCommitmentMemNV) {
    prototypeCalled = true;
    glesContext->m_glTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawMeshTasksNV(GLuint first, GLuint count) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawMeshTasksNV) {
    prototypeCalled = true;
    glesContext->m_glDrawMeshTasksNV(first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawMeshTasksIndirectNV(GLintptr indirect) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawMeshTasksIndirectNV) {
    prototypeCalled = true;
    glesContext->m_glDrawMeshTasksIndirectNV(indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawMeshTasksIndirectNV) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMultiDrawMeshTasksIndirectCountNV) {
    prototypeCalled = true;
    glesContext->m_glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x3fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x3fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x2fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x2fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix2x4fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix2x4fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x2fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x2fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix3x4fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix3x4fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glUniformMatrix4x3fvNV) {
    prototypeCalled = true;
    glesContext->m_glUniformMatrix4x3fvNV(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gles_glGenPathsNV(GLsizei range) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glesContext->m_glGenPathsNV) {
    prototypeCalled = true;
    result = glesContext->m_glGenPathsNV(range);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeletePathsNV(GLuint path, GLsizei range) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeletePathsNV) {
    prototypeCalled = true;
    glesContext->m_glDeletePathsNV(path, range);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsPathNV(GLuint path) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsPathNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsPathNV(path);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathCommandsNV) {
    prototypeCalled = true;
    glesContext->m_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathCoordsNV) {
    prototypeCalled = true;
    glesContext->m_glPathCoordsNV(path, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathSubCommandsNV) {
    prototypeCalled = true;
    glesContext->m_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathSubCoordsNV) {
    prototypeCalled = true;
    glesContext->m_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathStringNV) {
    prototypeCalled = true;
    glesContext->m_glPathStringNV(path, format, length, pathString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathGlyphsNV) {
    prototypeCalled = true;
    glesContext->m_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathGlyphRangeNV) {
    prototypeCalled = true;
    glesContext->m_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glWeightPathsNV) {
    prototypeCalled = true;
    glesContext->m_glWeightPathsNV(resultPath, numPaths, paths, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyPathNV) {
    prototypeCalled = true;
    glesContext->m_glCopyPathNV(resultPath, srcPath);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glInterpolatePathsNV) {
    prototypeCalled = true;
    glesContext->m_glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTransformPathNV) {
    prototypeCalled = true;
    glesContext->m_glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathParameterivNV(GLuint path, GLenum pname, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathParameterivNV) {
    prototypeCalled = true;
    glesContext->m_glPathParameterivNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathParameteriNV) {
    prototypeCalled = true;
    glesContext->m_glPathParameteriNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathParameterfvNV) {
    prototypeCalled = true;
    glesContext->m_glPathParameterfvNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathParameterfNV) {
    prototypeCalled = true;
    glesContext->m_glPathParameterfNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathDashArrayNV) {
    prototypeCalled = true;
    glesContext->m_glPathDashArrayNV(path, dashCount, dashArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathStencilFuncNV) {
    prototypeCalled = true;
    glesContext->m_glPathStencilFuncNV(func, ref, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathStencilDepthOffsetNV) {
    prototypeCalled = true;
    glesContext->m_glPathStencilDepthOffsetNV(factor, units);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilFillPathNV) {
    prototypeCalled = true;
    glesContext->m_glStencilFillPathNV(path, fillMode, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilStrokePathNV) {
    prototypeCalled = true;
    glesContext->m_glStencilStrokePathNV(path, reference, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilFillPathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilStrokePathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPathCoverDepthFuncNV(GLenum func) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPathCoverDepthFuncNV) {
    prototypeCalled = true;
    glesContext->m_glPathCoverDepthFuncNV(func);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverFillPathNV(GLuint path, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverFillPathNV) {
    prototypeCalled = true;
    glesContext->m_glCoverFillPathNV(path, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverStrokePathNV(GLuint path, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverStrokePathNV) {
    prototypeCalled = true;
    glesContext->m_glCoverStrokePathNV(path, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverFillPathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCoverStrokePathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathParameterivNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathParameterivNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathParameterfvNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathParameterfvNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathCommandsNV(GLuint path, GLubyte * commands) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathCommandsNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathCommandsNV(path, commands);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathCoordsNV(GLuint path, GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathCoordsNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathCoordsNV(path, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathDashArrayNV(GLuint path, GLfloat * dashArray) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathDashArrayNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathDashArrayNV(path, dashArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathMetricsNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathMetricRangeNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetPathSpacingNV) {
    prototypeCalled = true;
    glesContext->m_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsPointInFillPathNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsPointInFillPathNV(path, mask, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsPointInStrokePathNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsPointInStrokePathNV(path, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLfloat _glew_gles_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLfloat result = ((GLfloat)0);
  if (!prototypeCalled && glesContext->m_glGetPathLengthNV) {
    prototypeCalled = true;
    result = glesContext->m_glGetPathLengthNV(path, startSegment, numSegments);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glPointAlongPathNV) {
    prototypeCalled = true;
    result = glesContext->m_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoad3x2fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoad3x2fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoad3x3fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoad3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoadTranspose3x3fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoadTranspose3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMult3x2fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixMult3x2fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMult3x3fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixMult3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMultTranspose3x3fNV) {
    prototypeCalled = true;
    glesContext->m_glMatrixMultTranspose3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilThenCoverFillPathNV) {
    prototypeCalled = true;
    glesContext->m_glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilThenCoverStrokePathNV) {
    prototypeCalled = true;
    glesContext->m_glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilThenCoverFillPathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStencilThenCoverStrokePathInstancedNV) {
    prototypeCalled = true;
    glesContext->m_glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint * baseAndCount) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glPathGlyphIndexRangeNV) {
    prototypeCalled = true;
    result = glesContext->m_glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glPathGlyphIndexArrayNV) {
    prototypeCalled = true;
    result = glesContext->m_glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gles_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glesContext->m_glPathMemoryGlyphIndexArrayNV) {
    prototypeCalled = true;
    result = glesContext->m_glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramPathFragmentInputGenNV) {
    prototypeCalled = true;
    glesContext->m_glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramResourcefvNV) {
    prototypeCalled = true;
    glesContext->m_glGetProgramResourcefvNV(program, programInterface, index, propCount, props, count, length, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixFrustumEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoadIdentityEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoadIdentityEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoadIdentityEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoadTransposefEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoadTransposefEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoadTransposedEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoadTransposedEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoadfEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoadfEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoadfEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixLoaddEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixLoaddEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixLoaddEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMultTransposefEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixMultTransposefEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMultTransposedEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixMultTransposedEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMultfEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMultfEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixMultfEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixMultdEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixMultdEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixMultdEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixOrthoEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixPopEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixPopEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixPopEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixPushEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixPushEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixPushEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixRotatefEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixRotatefEXT(mode, angle, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixRotatedEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixRotatedEXT(mode, angle, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixScalefEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixScalefEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixScaledEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixScaledEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixTranslatefEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixTranslatefEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMatrixTranslatedEXT) {
    prototypeCalled = true;
    glesContext->m_glMatrixTranslatedEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPolygonModeNV(GLenum face, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPolygonModeNV) {
    prototypeCalled = true;
    glesContext->m_glPolygonModeNV(face, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glReadBufferNV(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glReadBufferNV) {
    prototypeCalled = true;
    glesContext->m_glReadBufferNV(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferSampleLocationsfvNV) {
    prototypeCalled = true;
    glesContext->m_glFramebufferSampleLocationsfvNV(target, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glNamedFramebufferSampleLocationsfvNV) {
    prototypeCalled = true;
    glesContext->m_glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glResolveDepthValuesNV() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glResolveDepthValuesNV) {
    prototypeCalled = true;
    glesContext->m_glResolveDepthValuesNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorExclusiveNV) {
    prototypeCalled = true;
    glesContext->m_glScissorExclusiveNV(x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorExclusiveArrayvNV) {
    prototypeCalled = true;
    glesContext->m_glScissorExclusiveArrayvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindShadingRateImageNV(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindShadingRateImageNV) {
    prototypeCalled = true;
    glesContext->m_glBindShadingRateImageNV(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum * rate) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetShadingRateImagePaletteNV) {
    prototypeCalled = true;
    glesContext->m_glGetShadingRateImagePaletteNV(viewport, entry, rate);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint * location) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetShadingRateSampleLocationivNV) {
    prototypeCalled = true;
    glesContext->m_glGetShadingRateSampleLocationivNV(rate, samples, index, location);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glShadingRateImageBarrierNV(GLboolean synchronize) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glShadingRateImageBarrierNV) {
    prototypeCalled = true;
    glesContext->m_glShadingRateImageBarrierNV(synchronize);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glShadingRateImagePaletteNV) {
    prototypeCalled = true;
    glesContext->m_glShadingRateImagePaletteNV(viewport, first, count, rates);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glShadingRateSampleOrderNV(GLenum order) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glShadingRateSampleOrderNV) {
    prototypeCalled = true;
    glesContext->m_glShadingRateSampleOrderNV(order);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint * locations) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glShadingRateSampleOrderCustomNV) {
    prototypeCalled = true;
    glesContext->m_glShadingRateSampleOrderCustomNV(rate, samples, locations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportArrayvNV) {
    prototypeCalled = true;
    glesContext->m_glViewportArrayvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportIndexedfNV) {
    prototypeCalled = true;
    glesContext->m_glViewportIndexedfNV(index, x, y, w, h);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportIndexedfvNV(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportIndexedfvNV) {
    prototypeCalled = true;
    glesContext->m_glViewportIndexedfvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorArrayvNV) {
    prototypeCalled = true;
    glesContext->m_glScissorArrayvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorIndexedNV) {
    prototypeCalled = true;
    glesContext->m_glScissorIndexedNV(index, left, bottom, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorIndexedvNV(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorIndexedvNV) {
    prototypeCalled = true;
    glesContext->m_glScissorIndexedvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDepthRangeArrayfvNV) {
    prototypeCalled = true;
    glesContext->m_glDepthRangeArrayfvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDepthRangeIndexedfNV) {
    prototypeCalled = true;
    glesContext->m_glDepthRangeIndexedfNV(index, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFloati_vNV) {
    prototypeCalled = true;
    glesContext->m_glGetFloati_vNV(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEnableiNV(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEnableiNV) {
    prototypeCalled = true;
    glesContext->m_glEnableiNV(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDisableiNV(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDisableiNV) {
    prototypeCalled = true;
    glesContext->m_glDisableiNV(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsEnablediNV(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsEnablediNV) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediNV(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportSwizzleNV) {
    prototypeCalled = true;
    glesContext->m_glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEGLImageTargetTexture2DOES) {
    prototypeCalled = true;
    glesContext->m_glEGLImageTargetTexture2DOES(target, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEGLImageTargetRenderbufferStorageOES) {
    prototypeCalled = true;
    glesContext->m_glEGLImageTargetRenderbufferStorageOES(target, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyImageSubDataOES) {
    prototypeCalled = true;
    glesContext->m_glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEnableiOES(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEnableiOES) {
    prototypeCalled = true;
    glesContext->m_glEnableiOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDisableiOES(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDisableiOES) {
    prototypeCalled = true;
    glesContext->m_glDisableiOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationiOES(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationiOES(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendEquationSeparateiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFunciOES(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFunciOES) {
    prototypeCalled = true;
    glesContext->m_glBlendFunciOES(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBlendFuncSeparateiOES) {
    prototypeCalled = true;
    glesContext->m_glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glColorMaskiOES) {
    prototypeCalled = true;
    glesContext->m_glColorMaskiOES(index, r, g, b, a);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsEnablediOES(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsEnablediOES) {
    prototypeCalled = true;
    result = glesContext->m_glIsEnablediOES(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawRangeElementsBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDrawElementsInstancedBaseVertexOES) {
    prototypeCalled = true;
    glesContext->m_glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureOES) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureOES(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetProgramBinaryOES) {
    prototypeCalled = true;
    glesContext->m_glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glProgramBinaryOES) {
    prototypeCalled = true;
    glesContext->m_glProgramBinaryOES(program, binaryFormat, binary, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gles_glMapBufferOES(GLenum target, GLenum access) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glesContext->m_glMapBufferOES) {
    prototypeCalled = true;
    result = glesContext->m_glMapBufferOES(target, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glUnmapBufferOES(GLenum target) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glUnmapBufferOES) {
    prototypeCalled = true;
    result = glesContext->m_glUnmapBufferOES(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetBufferPointervOES(GLenum target, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetBufferPointervOES) {
    prototypeCalled = true;
    glesContext->m_glGetBufferPointervOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPrimitiveBoundingBoxOES) {
    prototypeCalled = true;
    glesContext->m_glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glMinSampleShadingOES(GLfloat value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glMinSampleShadingOES) {
    prototypeCalled = true;
    glesContext->m_glMinSampleShadingOES(value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glPatchParameteriOES(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glPatchParameteriOES) {
    prototypeCalled = true;
    glesContext->m_glPatchParameteriOES(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexImage3DOES) {
    prototypeCalled = true;
    glesContext->m_glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexSubImage3DOES) {
    prototypeCalled = true;
    glesContext->m_glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCopyTexSubImage3DOES) {
    prototypeCalled = true;
    glesContext->m_glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCompressedTexImage3DOES) {
    prototypeCalled = true;
    glesContext->m_glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glCompressedTexSubImage3DOES) {
    prototypeCalled = true;
    glesContext->m_glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTexture3DOES) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glTexParameterIuivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetTexParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glGetTexParameterIuivOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIivOES(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glSamplerParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glSamplerParameterIuivOES(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIivOES) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIivOES(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetSamplerParameterIuivOES) {
    prototypeCalled = true;
    glesContext->m_glGetSamplerParameterIuivOES(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBufferOES) {
    prototypeCalled = true;
    glesContext->m_glTexBufferOES(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexBufferRangeOES) {
    prototypeCalled = true;
    glesContext->m_glTexBufferRangeOES(target, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexStorage3DMultisampleOES) {
    prototypeCalled = true;
    glesContext->m_glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureViewOES) {
    prototypeCalled = true;
    glesContext->m_glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glBindVertexArrayOES(GLuint array) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glBindVertexArrayOES) {
    prototypeCalled = true;
    glesContext->m_glBindVertexArrayOES(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDeleteVertexArraysOES) {
    prototypeCalled = true;
    glesContext->m_glDeleteVertexArraysOES(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGenVertexArraysOES(GLsizei n, GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGenVertexArraysOES) {
    prototypeCalled = true;
    glesContext->m_glGenVertexArraysOES(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glIsVertexArrayOES(GLuint array) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glIsVertexArrayOES) {
    prototypeCalled = true;
    result = glesContext->m_glIsVertexArrayOES(array);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportArrayvOES) {
    prototypeCalled = true;
    glesContext->m_glViewportArrayvOES(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportIndexedfOES) {
    prototypeCalled = true;
    glesContext->m_glViewportIndexedfOES(index, x, y, w, h);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glViewportIndexedfvOES(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glViewportIndexedfvOES) {
    prototypeCalled = true;
    glesContext->m_glViewportIndexedfvOES(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorArrayvOES) {
    prototypeCalled = true;
    glesContext->m_glScissorArrayvOES(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorIndexedOES) {
    prototypeCalled = true;
    glesContext->m_glScissorIndexedOES(index, left, bottom, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glScissorIndexedvOES(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glScissorIndexedvOES) {
    prototypeCalled = true;
    glesContext->m_glScissorIndexedvOES(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDepthRangeArrayfvOES) {
    prototypeCalled = true;
    glesContext->m_glDepthRangeArrayfvOES(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDepthRangeIndexedfOES) {
    prototypeCalled = true;
    glesContext->m_glDepthRangeIndexedfOES(index, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetFloati_vOES) {
    prototypeCalled = true;
    glesContext->m_glGetFloati_vOES(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureMultiviewOVR) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferTextureMultisampleMultiviewOVR) {
    prototypeCalled = true;
    glesContext->m_glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glAlphaFuncQCOM(GLenum func, GLclampf ref) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glAlphaFuncQCOM) {
    prototypeCalled = true;
    glesContext->m_glAlphaFuncQCOM(func, ref);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetDriverControlsQCOM) {
    prototypeCalled = true;
    glesContext->m_glGetDriverControlsQCOM(num, size, driverControls);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glGetDriverControlStringQCOM) {
    prototypeCalled = true;
    glesContext->m_glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEnableDriverControlQCOM(GLuint driverControl) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEnableDriverControlQCOM) {
    prototypeCalled = true;
    glesContext->m_glEnableDriverControlQCOM(driverControl);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glDisableDriverControlQCOM(GLuint driverControl) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glDisableDriverControlQCOM) {
    prototypeCalled = true;
    glesContext->m_glDisableDriverControlQCOM(driverControl);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetTexturesQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetTexturesQCOM(textures, maxTextures, numTextures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetBuffersQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetRenderbuffersQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetFramebuffersQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetTexLevelParameterivQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtTexObjectStateOverrideiQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtTexObjectStateOverrideiQCOM(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetTexSubImageQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetBufferPointervQCOM(GLenum target, void ** params) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetBufferPointervQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetBufferPointervQCOM(target, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetShadersQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetShadersQCOM(shaders, maxShaders, numShaders);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetProgramsQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gles_glExtIsProgramBinaryQCOM(GLuint program) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glesContext->m_glExtIsProgramBinaryQCOM) {
    prototypeCalled = true;
    result = glesContext->m_glExtIsProgramBinaryQCOM(program);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtGetProgramBinarySourceQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferFoveationConfigQCOM) {
    prototypeCalled = true;
    glesContext->m_glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferFoveationParametersQCOM) {
    prototypeCalled = true;
    glesContext->m_glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexEstimateMotionQCOM(GLuint ref, GLuint target, GLuint output) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexEstimateMotionQCOM) {
    prototypeCalled = true;
    glesContext->m_glTexEstimateMotionQCOM(ref, target, output);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTexEstimateMotionRegionsQCOM(GLuint ref, GLuint target, GLuint output, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTexEstimateMotionRegionsQCOM) {
    prototypeCalled = true;
    glesContext->m_glTexEstimateMotionRegionsQCOM(ref, target, output, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glExtrapolateTex2DQCOM(GLuint src1, GLuint src2, GLuint output, GLfloat scaleFactor) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glExtrapolateTex2DQCOM) {
    prototypeCalled = true;
    glesContext->m_glExtrapolateTex2DQCOM(src1, src2, output, scaleFactor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glTextureFoveationParametersQCOM) {
    prototypeCalled = true;
    glesContext->m_glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glFramebufferFetchBarrierQCOM() {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glFramebufferFetchBarrierQCOM) {
    prototypeCalled = true;
    glesContext->m_glFramebufferFetchBarrierQCOM();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glShadingRateQCOM(GLenum rate) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glShadingRateQCOM) {
    prototypeCalled = true;
    glesContext->m_glShadingRateQCOM(rate);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glStartTilingQCOM) {
    prototypeCalled = true;
    glesContext->m_glStartTilingQCOM(x, y, width, height, preserveMask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gles_glEndTilingQCOM(GLbitfield preserveMask) {
  bool prototypeCalled = false;
  const glew::gles::Context *glesContext = glew::gles::s_glesContext;
  if (!prototypeCalled && glesContext->m_glEndTilingQCOM) {
    prototypeCalled = true;
    glesContext->m_glEndTilingQCOM(preserveMask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
