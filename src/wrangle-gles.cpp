////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include <unordered_set>

#include <wrangle.h>

#include <wrangle-gles.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveTexture (GLenum texture)
{
  // GL_ES_VERSION_2_0 - glActiveTexture
  if (s_deviceConfig.m_glActiveTexture)
  {
    s_deviceConfig.m_glActiveTexture (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glAttachShader (GLuint program, GLuint shader)
{
  // GL_ES_VERSION_2_0 - glAttachShader
  if (s_deviceConfig.m_glAttachShader)
  {
    s_deviceConfig.m_glAttachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindAttribLocation (GLuint program, GLuint index, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glBindAttribLocation
  if (s_deviceConfig.m_glBindAttribLocation)
  {
    s_deviceConfig.m_glBindAttribLocation (program, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffer (GLenum target, GLuint buffer)
{
  // GL_ES_VERSION_2_0 - glBindBuffer
  if (s_deviceConfig.m_glBindBuffer)
  {
    s_deviceConfig.m_glBindBuffer (target, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFramebuffer (GLenum target, GLuint framebuffer)
{
  // GL_ES_VERSION_2_0 - glBindFramebuffer
  if (s_deviceConfig.m_glBindFramebuffer)
  {
    s_deviceConfig.m_glBindFramebuffer (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glBindRenderbuffer
  if (s_deviceConfig.m_glBindRenderbuffer)
  {
    s_deviceConfig.m_glBindRenderbuffer (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTexture (GLenum target, GLuint texture)
{
  // GL_ES_VERSION_2_0 - glBindTexture
  if (s_deviceConfig.m_glBindTexture)
  {
    s_deviceConfig.m_glBindTexture (target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ES_VERSION_2_0 - glBlendColor
  if (s_deviceConfig.m_glBlendColor)
  {
    s_deviceConfig.m_glBlendColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquation (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glBlendEquation
  if (s_deviceConfig.m_glBlendEquation)
  {
    s_deviceConfig.m_glBlendEquation (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha)
{
  // GL_ES_VERSION_2_0 - glBlendEquationSeparate
  if (s_deviceConfig.m_glBlendEquationSeparate)
  {
    s_deviceConfig.m_glBlendEquationSeparate (modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunc (GLenum sfactor, GLenum dfactor)
{
  // GL_ES_VERSION_2_0 - glBlendFunc
  if (s_deviceConfig.m_glBlendFunc)
  {
    s_deviceConfig.m_glBlendFunc (sfactor, dfactor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  // GL_ES_VERSION_2_0 - glBlendFuncSeparate
  if (s_deviceConfig.m_glBlendFuncSeparate)
  {
    s_deviceConfig.m_glBlendFuncSeparate (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferData (GLenum target, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_ES_VERSION_2_0 - glBufferData
  if (s_deviceConfig.m_glBufferData)
  {
    s_deviceConfig.m_glBufferData (target, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_ES_VERSION_2_0 - glBufferSubData
  if (s_deviceConfig.m_glBufferSubData)
  {
    s_deviceConfig.m_glBufferSubData (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckFramebufferStatus (GLenum target)
{
  // GL_ES_VERSION_2_0 - glCheckFramebufferStatus
  if (s_deviceConfig.m_glCheckFramebufferStatus)
  {
    return s_deviceConfig.m_glCheckFramebufferStatus (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClear (GLbitfield mask)
{
  // GL_ES_VERSION_2_0 - glClear
  if (s_deviceConfig.m_glClear)
  {
    s_deviceConfig.m_glClear (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ES_VERSION_2_0 - glClearColor
  if (s_deviceConfig.m_glClearColor)
  {
    s_deviceConfig.m_glClearColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearDepthf (GLfloat d)
{
  // GL_ES_VERSION_2_0 - glClearDepthf
  if (s_deviceConfig.m_glClearDepthf)
  {
    s_deviceConfig.m_glClearDepthf (d);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearStencil (GLint s)
{
  // GL_ES_VERSION_2_0 - glClearStencil
  if (s_deviceConfig.m_glClearStencil)
  {
    s_deviceConfig.m_glClearStencil (s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  // GL_ES_VERSION_2_0 - glColorMask
  if (s_deviceConfig.m_glColorMask)
  {
    s_deviceConfig.m_glColorMask (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompileShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glCompileShader
  if (s_deviceConfig.m_glCompileShader)
  {
    s_deviceConfig.m_glCompileShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_2_0 - glCompressedTexImage2D
  if (s_deviceConfig.m_glCompressedTexImage2D)
  {
    s_deviceConfig.m_glCompressedTexImage2D (target, level, internalformat, width, height, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_2_0 - glCompressedTexSubImage2D
  if (s_deviceConfig.m_glCompressedTexSubImage2D)
  {
    s_deviceConfig.m_glCompressedTexSubImage2D (target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_ES_VERSION_2_0 - glCopyTexImage2D
  if (s_deviceConfig.m_glCopyTexImage2D)
  {
    s_deviceConfig.m_glCopyTexImage2D (target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glCopyTexSubImage2D
  if (s_deviceConfig.m_glCopyTexSubImage2D)
  {
    s_deviceConfig.m_glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateProgram ()
{
  // GL_ES_VERSION_2_0 - glCreateProgram
  if (s_deviceConfig.m_glCreateProgram)
  {
    return s_deviceConfig.m_glCreateProgram ();
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShader (GLenum type)
{
  // GL_ES_VERSION_2_0 - glCreateShader
  if (s_deviceConfig.m_glCreateShader)
  {
    return s_deviceConfig.m_glCreateShader (type);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCullFace (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glCullFace
  if (s_deviceConfig.m_glCullFace)
  {
    s_deviceConfig.m_glCullFace (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteBuffers (GLsizei n, const GLuint * buffers)
{
  // GL_ES_VERSION_2_0 - glDeleteBuffers
  if (s_deviceConfig.m_glDeleteBuffers)
  {
    s_deviceConfig.m_glDeleteBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers)
{
  // GL_ES_VERSION_2_0 - glDeleteFramebuffers
  if (s_deviceConfig.m_glDeleteFramebuffers)
  {
    s_deviceConfig.m_glDeleteFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glDeleteProgram
  if (s_deviceConfig.m_glDeleteProgram)
  {
    s_deviceConfig.m_glDeleteProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers)
{
  // GL_ES_VERSION_2_0 - glDeleteRenderbuffers
  if (s_deviceConfig.m_glDeleteRenderbuffers)
  {
    s_deviceConfig.m_glDeleteRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glDeleteShader
  if (s_deviceConfig.m_glDeleteShader)
  {
    s_deviceConfig.m_glDeleteShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTextures (GLsizei n, const GLuint * textures)
{
  // GL_ES_VERSION_2_0 - glDeleteTextures
  if (s_deviceConfig.m_glDeleteTextures)
  {
    s_deviceConfig.m_glDeleteTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthFunc (GLenum func)
{
  // GL_ES_VERSION_2_0 - glDepthFunc
  if (s_deviceConfig.m_glDepthFunc)
  {
    s_deviceConfig.m_glDepthFunc (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthMask (GLboolean flag)
{
  // GL_ES_VERSION_2_0 - glDepthMask
  if (s_deviceConfig.m_glDepthMask)
  {
    s_deviceConfig.m_glDepthMask (flag);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangef (GLfloat n, GLfloat f)
{
  // GL_ES_VERSION_2_0 - glDepthRangef
  if (s_deviceConfig.m_glDepthRangef)
  {
    s_deviceConfig.m_glDepthRangef (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDetachShader (GLuint program, GLuint shader)
{
  // GL_ES_VERSION_2_0 - glDetachShader
  if (s_deviceConfig.m_glDetachShader)
  {
    s_deviceConfig.m_glDetachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisable (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glDisable
  if (s_deviceConfig.m_glDisable)
  {
    s_deviceConfig.m_glDisable (cap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableVertexAttribArray (GLuint index)
{
  // GL_ES_VERSION_2_0 - glDisableVertexAttribArray
  if (s_deviceConfig.m_glDisableVertexAttribArray)
  {
    s_deviceConfig.m_glDisableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArrays (GLenum mode, GLint first, GLsizei count)
{
  // GL_ES_VERSION_2_0 - glDrawArrays
  if (s_deviceConfig.m_glDrawArrays)
  {
    s_deviceConfig.m_glDrawArrays (mode, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElements (GLenum mode, GLsizei count, GLenum type, const void * indices)
{
  // GL_ES_VERSION_2_0 - glDrawElements
  if (s_deviceConfig.m_glDrawElements)
  {
    s_deviceConfig.m_glDrawElements (mode, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnable (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glEnable
  if (s_deviceConfig.m_glEnable)
  {
    s_deviceConfig.m_glEnable (cap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableVertexAttribArray (GLuint index)
{
  // GL_ES_VERSION_2_0 - glEnableVertexAttribArray
  if (s_deviceConfig.m_glEnableVertexAttribArray)
  {
    s_deviceConfig.m_glEnableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFinish ()
{
  // GL_ES_VERSION_2_0 - glFinish
  if (s_deviceConfig.m_glFinish)
  {
    s_deviceConfig.m_glFinish ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlush ()
{
  // GL_ES_VERSION_2_0 - glFlush
  if (s_deviceConfig.m_glFlush)
  {
    s_deviceConfig.m_glFlush ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glFramebufferRenderbuffer
  if (s_deviceConfig.m_glFramebufferRenderbuffer)
  {
    s_deviceConfig.m_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ES_VERSION_2_0 - glFramebufferTexture2D
  if (s_deviceConfig.m_glFramebufferTexture2D)
  {
    s_deviceConfig.m_glFramebufferTexture2D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFrontFace (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glFrontFace
  if (s_deviceConfig.m_glFrontFace)
  {
    s_deviceConfig.m_glFrontFace (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenBuffers (GLsizei n, GLuint * buffers)
{
  // GL_ES_VERSION_2_0 - glGenBuffers
  if (s_deviceConfig.m_glGenBuffers)
  {
    s_deviceConfig.m_glGenBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateMipmap (GLenum target)
{
  // GL_ES_VERSION_2_0 - glGenerateMipmap
  if (s_deviceConfig.m_glGenerateMipmap)
  {
    s_deviceConfig.m_glGenerateMipmap (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ES_VERSION_2_0 - glGenFramebuffers
  if (s_deviceConfig.m_glGenFramebuffers)
  {
    s_deviceConfig.m_glGenFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ES_VERSION_2_0 - glGenRenderbuffers
  if (s_deviceConfig.m_glGenRenderbuffers)
  {
    s_deviceConfig.m_glGenRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTextures (GLsizei n, GLuint * textures)
{
  // GL_ES_VERSION_2_0 - glGenTextures
  if (s_deviceConfig.m_glGenTextures)
  {
    s_deviceConfig.m_glGenTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetActiveAttrib
  if (s_deviceConfig.m_glGetActiveAttrib)
  {
    s_deviceConfig.m_glGetActiveAttrib (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetActiveUniform
  if (s_deviceConfig.m_glGetActiveUniform)
  {
    s_deviceConfig.m_glGetActiveUniform (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders)
{
  // GL_ES_VERSION_2_0 - glGetAttachedShaders
  if (s_deviceConfig.m_glGetAttachedShaders)
  {
    s_deviceConfig.m_glGetAttachedShaders (program, maxCount, count, shaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetAttribLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetAttribLocation
  if (s_deviceConfig.m_glGetAttribLocation)
  {
    return s_deviceConfig.m_glGetAttribLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBooleanv (GLenum pname, GLboolean * data)
{
  // GL_ES_VERSION_2_0 - glGetBooleanv
  if (s_deviceConfig.m_glGetBooleanv)
  {
    s_deviceConfig.m_glGetBooleanv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetBufferParameteriv
  if (s_deviceConfig.m_glGetBufferParameteriv)
  {
    s_deviceConfig.m_glGetBufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetError ()
{
  // GL_ES_VERSION_2_0 - glGetError
  if (s_deviceConfig.m_glGetError)
  {
    return s_deviceConfig.m_glGetError ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloatv (GLenum pname, GLfloat * data)
{
  // GL_ES_VERSION_2_0 - glGetFloatv
  if (s_deviceConfig.m_glGetFloatv)
  {
    s_deviceConfig.m_glGetFloatv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetFramebufferAttachmentParameteriv
  if (s_deviceConfig.m_glGetFramebufferAttachmentParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegerv (GLenum pname, GLint * data)
{
  // GL_ES_VERSION_2_0 - glGetIntegerv
  if (s_deviceConfig.m_glGetIntegerv)
  {
    s_deviceConfig.m_glGetIntegerv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramiv (GLuint program, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetProgramiv
  if (s_deviceConfig.m_glGetProgramiv)
  {
    s_deviceConfig.m_glGetProgramiv (program, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_2_0 - glGetProgramInfoLog
  if (s_deviceConfig.m_glGetProgramInfoLog)
  {
    s_deviceConfig.m_glGetProgramInfoLog (program, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetRenderbufferParameteriv
  if (s_deviceConfig.m_glGetRenderbufferParameteriv)
  {
    s_deviceConfig.m_glGetRenderbufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderiv (GLuint shader, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetShaderiv
  if (s_deviceConfig.m_glGetShaderiv)
  {
    s_deviceConfig.m_glGetShaderiv (shader, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_2_0 - glGetShaderInfoLog
  if (s_deviceConfig.m_glGetShaderInfoLog)
  {
    s_deviceConfig.m_glGetShaderInfoLog (shader, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
  // GL_ES_VERSION_2_0 - glGetShaderPrecisionFormat
  if (s_deviceConfig.m_glGetShaderPrecisionFormat)
  {
    s_deviceConfig.m_glGetShaderPrecisionFormat (shadertype, precisiontype, range, precision);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source)
{
  // GL_ES_VERSION_2_0 - glGetShaderSource
  if (s_deviceConfig.m_glGetShaderSource)
  {
    s_deviceConfig.m_glGetShaderSource (shader, bufSize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * glGetString (GLenum name)
{
  // GL_ES_VERSION_2_0 - glGetString
  if (s_deviceConfig.m_glGetString)
  {
    return s_deviceConfig.m_glGetString (name);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetTexParameterfv
  if (s_deviceConfig.m_glGetTexParameterfv)
  {
    s_deviceConfig.m_glGetTexParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetTexParameteriv
  if (s_deviceConfig.m_glGetTexParameteriv)
  {
    s_deviceConfig.m_glGetTexParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformfv (GLuint program, GLint location, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetUniformfv
  if (s_deviceConfig.m_glGetUniformfv)
  {
    s_deviceConfig.m_glGetUniformfv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformiv (GLuint program, GLint location, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetUniformiv
  if (s_deviceConfig.m_glGetUniformiv)
  {
    s_deviceConfig.m_glGetUniformiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetUniformLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetUniformLocation
  if (s_deviceConfig.m_glGetUniformLocation)
  {
    return s_deviceConfig.m_glGetUniformLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribfv
  if (s_deviceConfig.m_glGetVertexAttribfv)
  {
    s_deviceConfig.m_glGetVertexAttribfv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribiv
  if (s_deviceConfig.m_glGetVertexAttribiv)
  {
    s_deviceConfig.m_glGetVertexAttribiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribPointerv (GLuint index, GLenum pname, void ** pointer)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribPointerv
  if (s_deviceConfig.m_glGetVertexAttribPointerv)
  {
    s_deviceConfig.m_glGetVertexAttribPointerv (index, pname, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glHint (GLenum target, GLenum mode)
{
  // GL_ES_VERSION_2_0 - glHint
  if (s_deviceConfig.m_glHint)
  {
    s_deviceConfig.m_glHint (target, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsBuffer (GLuint buffer)
{
  // GL_ES_VERSION_2_0 - glIsBuffer
  if (s_deviceConfig.m_glIsBuffer)
  {
    return s_deviceConfig.m_glIsBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnabled (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glIsEnabled
  if (s_deviceConfig.m_glIsEnabled)
  {
    return s_deviceConfig.m_glIsEnabled (cap);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFramebuffer (GLuint framebuffer)
{
  // GL_ES_VERSION_2_0 - glIsFramebuffer
  if (s_deviceConfig.m_glIsFramebuffer)
  {
    return s_deviceConfig.m_glIsFramebuffer (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glIsProgram
  if (s_deviceConfig.m_glIsProgram)
  {
    return s_deviceConfig.m_glIsProgram (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsRenderbuffer (GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glIsRenderbuffer
  if (s_deviceConfig.m_glIsRenderbuffer)
  {
    return s_deviceConfig.m_glIsRenderbuffer (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glIsShader
  if (s_deviceConfig.m_glIsShader)
  {
    return s_deviceConfig.m_glIsShader (shader);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTexture (GLuint texture)
{
  // GL_ES_VERSION_2_0 - glIsTexture
  if (s_deviceConfig.m_glIsTexture)
  {
    return s_deviceConfig.m_glIsTexture (texture);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLineWidth (GLfloat width)
{
  // GL_ES_VERSION_2_0 - glLineWidth
  if (s_deviceConfig.m_glLineWidth)
  {
    s_deviceConfig.m_glLineWidth (width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLinkProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glLinkProgram
  if (s_deviceConfig.m_glLinkProgram)
  {
    s_deviceConfig.m_glLinkProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPixelStorei (GLenum pname, GLint param)
{
  // GL_ES_VERSION_2_0 - glPixelStorei
  if (s_deviceConfig.m_glPixelStorei)
  {
    s_deviceConfig.m_glPixelStorei (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPolygonOffset (GLfloat factor, GLfloat units)
{
  // GL_ES_VERSION_2_0 - glPolygonOffset
  if (s_deviceConfig.m_glPolygonOffset)
  {
    s_deviceConfig.m_glPolygonOffset (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels)
{
  // GL_ES_VERSION_2_0 - glReadPixels
  if (s_deviceConfig.m_glReadPixels)
  {
    s_deviceConfig.m_glReadPixels (x, y, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReleaseShaderCompiler ()
{
  // GL_ES_VERSION_2_0 - glReleaseShaderCompiler
  if (s_deviceConfig.m_glReleaseShaderCompiler)
  {
    s_deviceConfig.m_glReleaseShaderCompiler ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glRenderbufferStorage
  if (s_deviceConfig.m_glRenderbufferStorage)
  {
    s_deviceConfig.m_glRenderbufferStorage (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleCoverage (GLfloat value, GLboolean invert)
{
  // GL_ES_VERSION_2_0 - glSampleCoverage
  if (s_deviceConfig.m_glSampleCoverage)
  {
    s_deviceConfig.m_glSampleCoverage (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissor (GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glScissor
  if (s_deviceConfig.m_glScissor)
  {
    s_deviceConfig.m_glScissor (x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
  // GL_ES_VERSION_2_0 - glShaderBinary
  if (s_deviceConfig.m_glShaderBinary)
  {
    s_deviceConfig.m_glShaderBinary (count, shaders, binaryformat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderSource (GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length)
{
  // GL_ES_VERSION_2_0 - glShaderSource
  if (s_deviceConfig.m_glShaderSource)
  {
    s_deviceConfig.m_glShaderSource (shader, count, string, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFunc (GLenum func, GLint ref, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilFunc
  if (s_deviceConfig.m_glStencilFunc)
  {
    s_deviceConfig.m_glStencilFunc (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilFuncSeparate
  if (s_deviceConfig.m_glStencilFuncSeparate)
  {
    s_deviceConfig.m_glStencilFuncSeparate (face, func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilMask (GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilMask
  if (s_deviceConfig.m_glStencilMask)
  {
    s_deviceConfig.m_glStencilMask (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilMaskSeparate (GLenum face, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilMaskSeparate
  if (s_deviceConfig.m_glStencilMaskSeparate)
  {
    s_deviceConfig.m_glStencilMaskSeparate (face, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass)
{
  // GL_ES_VERSION_2_0 - glStencilOp
  if (s_deviceConfig.m_glStencilOp)
  {
    s_deviceConfig.m_glStencilOp (fail, zfail, zpass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  // GL_ES_VERSION_2_0 - glStencilOpSeparate
  if (s_deviceConfig.m_glStencilOpSeparate)
  {
    s_deviceConfig.m_glStencilOpSeparate (face, sfail, dpfail, dppass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_2_0 - glTexImage2D
  if (s_deviceConfig.m_glTexImage2D)
  {
    s_deviceConfig.m_glTexImage2D (target, level, internalformat, width, height, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterf (GLenum target, GLenum pname, GLfloat param)
{
  // GL_ES_VERSION_2_0 - glTexParameterf
  if (s_deviceConfig.m_glTexParameterf)
  {
    s_deviceConfig.m_glTexParameterf (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterfv (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glTexParameterfv
  if (s_deviceConfig.m_glTexParameterfv)
  {
    s_deviceConfig.m_glTexParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ES_VERSION_2_0 - glTexParameteri
  if (s_deviceConfig.m_glTexParameteri)
  {
    s_deviceConfig.m_glTexParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameteriv (GLenum target, GLenum pname, const GLint * params)
{
  // GL_ES_VERSION_2_0 - glTexParameteriv
  if (s_deviceConfig.m_glTexParameteriv)
  {
    s_deviceConfig.m_glTexParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_2_0 - glTexSubImage2D
  if (s_deviceConfig.m_glTexSubImage2D)
  {
    s_deviceConfig.m_glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1f (GLint location, GLfloat v0)
{
  // GL_ES_VERSION_2_0 - glUniform1f
  if (s_deviceConfig.m_glUniform1f)
  {
    s_deviceConfig.m_glUniform1f (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform1fv
  if (s_deviceConfig.m_glUniform1fv)
  {
    s_deviceConfig.m_glUniform1fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1i (GLint location, GLint v0)
{
  // GL_ES_VERSION_2_0 - glUniform1i
  if (s_deviceConfig.m_glUniform1i)
  {
    s_deviceConfig.m_glUniform1i (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform1iv
  if (s_deviceConfig.m_glUniform1iv)
  {
    s_deviceConfig.m_glUniform1iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2f (GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ES_VERSION_2_0 - glUniform2f
  if (s_deviceConfig.m_glUniform2f)
  {
    s_deviceConfig.m_glUniform2f (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform2fv
  if (s_deviceConfig.m_glUniform2fv)
  {
    s_deviceConfig.m_glUniform2fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2i (GLint location, GLint v0, GLint v1)
{
  // GL_ES_VERSION_2_0 - glUniform2i
  if (s_deviceConfig.m_glUniform2i)
  {
    s_deviceConfig.m_glUniform2i (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform2iv
  if (s_deviceConfig.m_glUniform2iv)
  {
    s_deviceConfig.m_glUniform2iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ES_VERSION_2_0 - glUniform3f
  if (s_deviceConfig.m_glUniform3f)
  {
    s_deviceConfig.m_glUniform3f (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform3fv
  if (s_deviceConfig.m_glUniform3fv)
  {
    s_deviceConfig.m_glUniform3fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ES_VERSION_2_0 - glUniform3i
  if (s_deviceConfig.m_glUniform3i)
  {
    s_deviceConfig.m_glUniform3i (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform3iv
  if (s_deviceConfig.m_glUniform3iv)
  {
    s_deviceConfig.m_glUniform3iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ES_VERSION_2_0 - glUniform4f
  if (s_deviceConfig.m_glUniform4f)
  {
    s_deviceConfig.m_glUniform4f (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform4fv
  if (s_deviceConfig.m_glUniform4fv)
  {
    s_deviceConfig.m_glUniform4fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ES_VERSION_2_0 - glUniform4i
  if (s_deviceConfig.m_glUniform4i)
  {
    s_deviceConfig.m_glUniform4i (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform4iv
  if (s_deviceConfig.m_glUniform4iv)
  {
    s_deviceConfig.m_glUniform4iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix2fv
  if (s_deviceConfig.m_glUniformMatrix2fv)
  {
    s_deviceConfig.m_glUniformMatrix2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix3fv
  if (s_deviceConfig.m_glUniformMatrix3fv)
  {
    s_deviceConfig.m_glUniformMatrix3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix4fv
  if (s_deviceConfig.m_glUniformMatrix4fv)
  {
    s_deviceConfig.m_glUniformMatrix4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glUseProgram
  if (s_deviceConfig.m_glUseProgram)
  {
    s_deviceConfig.m_glUseProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glValidateProgram
  if (s_deviceConfig.m_glValidateProgram)
  {
    s_deviceConfig.m_glValidateProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib1f (GLuint index, GLfloat x)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib1f
  if (s_deviceConfig.m_glVertexAttrib1f)
  {
    s_deviceConfig.m_glVertexAttrib1f (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib1fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib1fv
  if (s_deviceConfig.m_glVertexAttrib1fv)
  {
    s_deviceConfig.m_glVertexAttrib1fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib2f
  if (s_deviceConfig.m_glVertexAttrib2f)
  {
    s_deviceConfig.m_glVertexAttrib2f (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib2fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib2fv
  if (s_deviceConfig.m_glVertexAttrib2fv)
  {
    s_deviceConfig.m_glVertexAttrib2fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib3f
  if (s_deviceConfig.m_glVertexAttrib3f)
  {
    s_deviceConfig.m_glVertexAttrib3f (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib3fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib3fv
  if (s_deviceConfig.m_glVertexAttrib3fv)
  {
    s_deviceConfig.m_glVertexAttrib3fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib4f
  if (s_deviceConfig.m_glVertexAttrib4f)
  {
    s_deviceConfig.m_glVertexAttrib4f (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib4fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib4fv
  if (s_deviceConfig.m_glVertexAttrib4fv)
  {
    s_deviceConfig.m_glVertexAttrib4fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)
{
  // GL_ES_VERSION_2_0 - glVertexAttribPointer
  if (s_deviceConfig.m_glVertexAttribPointer)
  {
    s_deviceConfig.m_glVertexAttribPointer (index, size, type, normalized, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewport (GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glViewport
  if (s_deviceConfig.m_glViewport)
  {
    s_deviceConfig.m_glViewport (x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBuffer (GLenum src)
{
  // GL_ES_VERSION_3_0 - glReadBuffer
  if (s_deviceConfig.m_glReadBuffer)
  {
    s_deviceConfig.m_glReadBuffer (src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
  // GL_ES_VERSION_3_0 - glDrawRangeElements
  if (s_deviceConfig.m_glDrawRangeElements)
  {
    s_deviceConfig.m_glDrawRangeElements (mode, start, end, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexImage3D
  if (s_deviceConfig.m_glTexImage3D)
  {
    s_deviceConfig.m_glTexImage3D (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexSubImage3D
  if (s_deviceConfig.m_glTexSubImage3D)
  {
    s_deviceConfig.m_glTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glCopyTexSubImage3D
  if (s_deviceConfig.m_glCopyTexSubImage3D)
  {
    s_deviceConfig.m_glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexImage3D
  if (s_deviceConfig.m_glCompressedTexImage3D)
  {
    s_deviceConfig.m_glCompressedTexImage3D (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexSubImage3D
  if (s_deviceConfig.m_glCompressedTexSubImage3D)
  {
    s_deviceConfig.m_glCompressedTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenQueries (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenQueries
  if (s_deviceConfig.m_glGenQueries)
  {
    s_deviceConfig.m_glGenQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteQueries (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteQueries
  if (s_deviceConfig.m_glDeleteQueries)
  {
    s_deviceConfig.m_glDeleteQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsQuery (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsQuery
  if (s_deviceConfig.m_glIsQuery)
  {
    return s_deviceConfig.m_glIsQuery (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQuery (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBeginQuery
  if (s_deviceConfig.m_glBeginQuery)
  {
    s_deviceConfig.m_glBeginQuery (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQuery (GLenum target)
{
  // GL_ES_VERSION_3_0 - glEndQuery
  if (s_deviceConfig.m_glEndQuery)
  {
    s_deviceConfig.m_glEndQuery (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryiv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryiv
  if (s_deviceConfig.m_glGetQueryiv)
  {
    s_deviceConfig.m_glGetQueryiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryObjectuiv
  if (s_deviceConfig.m_glGetQueryObjectuiv)
  {
    s_deviceConfig.m_glGetQueryObjectuiv (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapBuffer (GLenum target)
{
  // GL_ES_VERSION_3_0 - glUnmapBuffer
  if (s_deviceConfig.m_glUnmapBuffer)
  {
    return s_deviceConfig.m_glUnmapBuffer (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferPointerv (GLenum target, GLenum pname, void ** params)
{
  // GL_ES_VERSION_3_0 - glGetBufferPointerv
  if (s_deviceConfig.m_glGetBufferPointerv)
  {
    s_deviceConfig.m_glGetBufferPointerv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffers (GLsizei n, const GLenum * bufs)
{
  // GL_ES_VERSION_3_0 - glDrawBuffers
  if (s_deviceConfig.m_glDrawBuffers)
  {
    s_deviceConfig.m_glDrawBuffers (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x3fv
  if (s_deviceConfig.m_glUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glUniformMatrix2x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x2fv
  if (s_deviceConfig.m_glUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glUniformMatrix3x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x4fv
  if (s_deviceConfig.m_glUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glUniformMatrix2x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x2fv
  if (s_deviceConfig.m_glUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glUniformMatrix4x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x4fv
  if (s_deviceConfig.m_glUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glUniformMatrix3x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x3fv
  if (s_deviceConfig.m_glUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glUniformMatrix4x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ES_VERSION_3_0 - glBlitFramebuffer
  if (s_deviceConfig.m_glBlitFramebuffer)
  {
    s_deviceConfig.m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glRenderbufferStorageMultisample
  if (s_deviceConfig.m_glRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ES_VERSION_3_0 - glFramebufferTextureLayer
  if (s_deviceConfig.m_glFramebufferTextureLayer)
  {
    s_deviceConfig.m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ES_VERSION_3_0 - glMapBufferRange
  if (s_deviceConfig.m_glMapBufferRange)
  {
    return s_deviceConfig.m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_ES_VERSION_3_0 - glFlushMappedBufferRange
  if (s_deviceConfig.m_glFlushMappedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glBindVertexArray
  if (s_deviceConfig.m_glBindVertexArray)
  {
    s_deviceConfig.m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glDeleteVertexArrays
  if (s_deviceConfig.m_glDeleteVertexArrays)
  {
    s_deviceConfig.m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glGenVertexArrays
  if (s_deviceConfig.m_glGenVertexArrays)
  {
    s_deviceConfig.m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glIsVertexArray
  if (s_deviceConfig.m_glIsVertexArray)
  {
    return s_deviceConfig.m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_ES_VERSION_3_0 - glGetIntegeri_v
  if (s_deviceConfig.m_glGetIntegeri_v)
  {
    s_deviceConfig.m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginTransformFeedback (GLenum primitiveMode)
{
  // GL_ES_VERSION_3_0 - glBeginTransformFeedback
  if (s_deviceConfig.m_glBeginTransformFeedback)
  {
    s_deviceConfig.m_glBeginTransformFeedback (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glEndTransformFeedback
  if (s_deviceConfig.m_glEndTransformFeedback)
  {
    s_deviceConfig.m_glEndTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glBindBufferRange
  if (s_deviceConfig.m_glBindBufferRange)
  {
    s_deviceConfig.m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_ES_VERSION_3_0 - glBindBufferBase
  if (s_deviceConfig.m_glBindBufferBase)
  {
    s_deviceConfig.m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
  // GL_ES_VERSION_3_0 - glTransformFeedbackVaryings
  if (s_deviceConfig.m_glTransformFeedbackVaryings)
  {
    s_deviceConfig.m_glTransformFeedbackVaryings (program, count, varyings, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetTransformFeedbackVarying
  if (s_deviceConfig.m_glGetTransformFeedbackVarying)
  {
    s_deviceConfig.m_glGetTransformFeedbackVarying (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ES_VERSION_3_0 - glVertexAttribIPointer
  if (s_deviceConfig.m_glVertexAttribIPointer)
  {
    s_deviceConfig.m_glVertexAttribIPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribIiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIiv
  if (s_deviceConfig.m_glGetVertexAttribIiv)
  {
    s_deviceConfig.m_glGetVertexAttribIiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIuiv
  if (s_deviceConfig.m_glGetVertexAttribIuiv)
  {
    s_deviceConfig.m_glGetVertexAttribIuiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4i
  if (s_deviceConfig.m_glVertexAttribI4i)
  {
    s_deviceConfig.m_glVertexAttribI4i (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4ui
  if (s_deviceConfig.m_glVertexAttribI4ui)
  {
    s_deviceConfig.m_glVertexAttribI4ui (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4iv (GLuint index, const GLint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4iv
  if (s_deviceConfig.m_glVertexAttribI4iv)
  {
    s_deviceConfig.m_glVertexAttribI4iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4uiv (GLuint index, const GLuint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4uiv
  if (s_deviceConfig.m_glVertexAttribI4uiv)
  {
    s_deviceConfig.m_glVertexAttribI4uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformuiv (GLuint program, GLint location, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetUniformuiv
  if (s_deviceConfig.m_glGetUniformuiv)
  {
    s_deviceConfig.m_glGetUniformuiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetFragDataLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetFragDataLocation
  if (s_deviceConfig.m_glGetFragDataLocation)
  {
    return s_deviceConfig.m_glGetFragDataLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1ui (GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_0 - glUniform1ui
  if (s_deviceConfig.m_glUniform1ui)
  {
    s_deviceConfig.m_glUniform1ui (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2ui (GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_0 - glUniform2ui
  if (s_deviceConfig.m_glUniform2ui)
  {
    s_deviceConfig.m_glUniform2ui (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_0 - glUniform3ui
  if (s_deviceConfig.m_glUniform3ui)
  {
    s_deviceConfig.m_glUniform3ui (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_0 - glUniform4ui
  if (s_deviceConfig.m_glUniform4ui)
  {
    s_deviceConfig.m_glUniform4ui (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform1uiv
  if (s_deviceConfig.m_glUniform1uiv)
  {
    s_deviceConfig.m_glUniform1uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform2uiv
  if (s_deviceConfig.m_glUniform2uiv)
  {
    s_deviceConfig.m_glUniform2uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform3uiv
  if (s_deviceConfig.m_glUniform3uiv)
  {
    s_deviceConfig.m_glUniform3uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform4uiv
  if (s_deviceConfig.m_glUniform4uiv)
  {
    s_deviceConfig.m_glUniform4uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferiv
  if (s_deviceConfig.m_glClearBufferiv)
  {
    s_deviceConfig.m_glClearBufferiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferuiv
  if (s_deviceConfig.m_glClearBufferuiv)
  {
    s_deviceConfig.m_glClearBufferuiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferfv
  if (s_deviceConfig.m_glClearBufferfv)
  {
    s_deviceConfig.m_glClearBufferfv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  // GL_ES_VERSION_3_0 - glClearBufferfi
  if (s_deviceConfig.m_glClearBufferfi)
  {
    s_deviceConfig.m_glClearBufferfi (buffer, drawbuffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * glGetStringi (GLenum name, GLuint index)
{
  // GL_ES_VERSION_3_0 - glGetStringi
  if (s_deviceConfig.m_glGetStringi)
  {
    return s_deviceConfig.m_glGetStringi (name, index);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glCopyBufferSubData
  if (s_deviceConfig.m_glCopyBufferSubData)
  {
    s_deviceConfig.m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_ES_VERSION_3_0 - glGetUniformIndices
  if (s_deviceConfig.m_glGetUniformIndices)
  {
    s_deviceConfig.m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformsiv
  if (s_deviceConfig.m_glGetActiveUniformsiv)
  {
    s_deviceConfig.m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetUniformBlockIndex
  if (s_deviceConfig.m_glGetUniformBlockIndex)
  {
    return s_deviceConfig.m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockiv
  if (s_deviceConfig.m_glGetActiveUniformBlockiv)
  {
    s_deviceConfig.m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockName
  if (s_deviceConfig.m_glGetActiveUniformBlockName)
  {
    s_deviceConfig.m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_ES_VERSION_3_0 - glUniformBlockBinding
  if (s_deviceConfig.m_glUniformBlockBinding)
  {
    s_deviceConfig.m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawArraysInstanced
  if (s_deviceConfig.m_glDrawArraysInstanced)
  {
    s_deviceConfig.m_glDrawArraysInstanced (mode, first, count, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawElementsInstanced
  if (s_deviceConfig.m_glDrawElementsInstanced)
  {
    s_deviceConfig.m_glDrawElementsInstanced (mode, count, type, indices, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_ES_VERSION_3_0 - glFenceSync
  if (s_deviceConfig.m_glFenceSync)
  {
    return s_deviceConfig.m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glIsSync
  if (s_deviceConfig.m_glIsSync)
  {
    return s_deviceConfig.m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glDeleteSync
  if (s_deviceConfig.m_glDeleteSync)
  {
    s_deviceConfig.m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glClientWaitSync
  if (s_deviceConfig.m_glClientWaitSync)
  {
    return s_deviceConfig.m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glWaitSync
  if (s_deviceConfig.m_glWaitSync)
  {
    s_deviceConfig.m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64v
  if (s_deviceConfig.m_glGetInteger64v)
  {
    s_deviceConfig.m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_ES_VERSION_3_0 - glGetSynciv
  if (s_deviceConfig.m_glGetSynciv)
  {
    s_deviceConfig.m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64i_v (GLenum target, GLuint index, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64i_v
  if (s_deviceConfig.m_glGetInteger64i_v)
  {
    s_deviceConfig.m_glGetInteger64i_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 * params)
{
  // GL_ES_VERSION_3_0 - glGetBufferParameteri64v
  if (s_deviceConfig.m_glGetBufferParameteri64v)
  {
    s_deviceConfig.m_glGetBufferParameteri64v (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glGenSamplers
  if (s_deviceConfig.m_glGenSamplers)
  {
    s_deviceConfig.m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glDeleteSamplers
  if (s_deviceConfig.m_glDeleteSamplers)
  {
    s_deviceConfig.m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSampler (GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glIsSampler
  if (s_deviceConfig.m_glIsSampler)
  {
    return s_deviceConfig.m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glBindSampler
  if (s_deviceConfig.m_glBindSampler)
  {
    s_deviceConfig.m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteri
  if (s_deviceConfig.m_glSamplerParameteri)
  {
    s_deviceConfig.m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteriv
  if (s_deviceConfig.m_glSamplerParameteriv)
  {
    s_deviceConfig.m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterf
  if (s_deviceConfig.m_glSamplerParameterf)
  {
    s_deviceConfig.m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterfv
  if (s_deviceConfig.m_glSamplerParameterfv)
  {
    s_deviceConfig.m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameteriv
  if (s_deviceConfig.m_glGetSamplerParameteriv)
  {
    s_deviceConfig.m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameterfv
  if (s_deviceConfig.m_glGetSamplerParameterfv)
  {
    s_deviceConfig.m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisor (GLuint index, GLuint divisor)
{
  // GL_ES_VERSION_3_0 - glVertexAttribDivisor
  if (s_deviceConfig.m_glVertexAttribDivisor)
  {
    s_deviceConfig.m_glVertexAttribDivisor (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBindTransformFeedback
  if (s_deviceConfig.m_glBindTransformFeedback)
  {
    s_deviceConfig.m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteTransformFeedbacks
  if (s_deviceConfig.m_glDeleteTransformFeedbacks)
  {
    s_deviceConfig.m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenTransformFeedbacks
  if (s_deviceConfig.m_glGenTransformFeedbacks)
  {
    s_deviceConfig.m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTransformFeedback (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsTransformFeedback
  if (s_deviceConfig.m_glIsTransformFeedback)
  {
    return s_deviceConfig.m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPauseTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glPauseTransformFeedback
  if (s_deviceConfig.m_glPauseTransformFeedback)
  {
    s_deviceConfig.m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResumeTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glResumeTransformFeedback
  if (s_deviceConfig.m_glResumeTransformFeedback)
  {
    s_deviceConfig.m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_ES_VERSION_3_0 - glGetProgramBinary
  if (s_deviceConfig.m_glGetProgramBinary)
  {
    s_deviceConfig.m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_ES_VERSION_3_0 - glProgramBinary
  if (s_deviceConfig.m_glProgramBinary)
  {
    s_deviceConfig.m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_ES_VERSION_3_0 - glProgramParameteri
  if (s_deviceConfig.m_glProgramParameteri)
  {
    s_deviceConfig.m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ES_VERSION_3_0 - glInvalidateFramebuffer
  if (s_deviceConfig.m_glInvalidateFramebuffer)
  {
    s_deviceConfig.m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glInvalidateSubFramebuffer
  if (s_deviceConfig.m_glInvalidateSubFramebuffer)
  {
    s_deviceConfig.m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glTexStorage2D
  if (s_deviceConfig.m_glTexStorage2D)
  {
    s_deviceConfig.m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ES_VERSION_3_0 - glTexStorage3D
  if (s_deviceConfig.m_glTexStorage3D)
  {
    s_deviceConfig.m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetInternalformativ
  if (s_deviceConfig.m_glGetInternalformativ)
  {
    s_deviceConfig.m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_ES_VERSION_3_1 - glDispatchCompute
  if (s_deviceConfig.m_glDispatchCompute)
  {
    s_deviceConfig.m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_ES_VERSION_3_1 - glDispatchComputeIndirect
  if (s_deviceConfig.m_glDispatchComputeIndirect)
  {
    s_deviceConfig.m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawArraysIndirect
  if (s_deviceConfig.m_glDrawArraysIndirect)
  {
    s_deviceConfig.m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawElementsIndirect
  if (s_deviceConfig.m_glDrawElementsIndirect)
  {
    s_deviceConfig.m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_1 - glFramebufferParameteri
  if (s_deviceConfig.m_glFramebufferParameteri)
  {
    s_deviceConfig.m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetFramebufferParameteriv
  if (s_deviceConfig.m_glGetFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramInterfaceiv
  if (s_deviceConfig.m_glGetProgramInterfaceiv)
  {
    s_deviceConfig.m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceIndex
  if (s_deviceConfig.m_glGetProgramResourceIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceName
  if (s_deviceConfig.m_glGetProgramResourceName)
  {
    s_deviceConfig.m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceiv
  if (s_deviceConfig.m_glGetProgramResourceiv)
  {
    s_deviceConfig.m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceLocation
  if (s_deviceConfig.m_glGetProgramResourceLocation)
  {
    return s_deviceConfig.m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_ES_VERSION_3_1 - glUseProgramStages
  if (s_deviceConfig.m_glUseProgramStages)
  {
    s_deviceConfig.m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_ES_VERSION_3_1 - glActiveShaderProgram
  if (s_deviceConfig.m_glActiveShaderProgram)
  {
    s_deviceConfig.m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_ES_VERSION_3_1 - glCreateShaderProgramv
  if (s_deviceConfig.m_glCreateShaderProgramv)
  {
    return s_deviceConfig.m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glBindProgramPipeline
  if (s_deviceConfig.m_glBindProgramPipeline)
  {
    s_deviceConfig.m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glDeleteProgramPipelines
  if (s_deviceConfig.m_glDeleteProgramPipelines)
  {
    s_deviceConfig.m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glGenProgramPipelines
  if (s_deviceConfig.m_glGenProgramPipelines)
  {
    s_deviceConfig.m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glIsProgramPipeline
  if (s_deviceConfig.m_glIsProgramPipeline)
  {
    return s_deviceConfig.m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineiv
  if (s_deviceConfig.m_glGetProgramPipelineiv)
  {
    s_deviceConfig.m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1i
  if (s_deviceConfig.m_glProgramUniform1i)
  {
    s_deviceConfig.m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2i
  if (s_deviceConfig.m_glProgramUniform2i)
  {
    s_deviceConfig.m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3i
  if (s_deviceConfig.m_glProgramUniform3i)
  {
    s_deviceConfig.m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4i
  if (s_deviceConfig.m_glProgramUniform4i)
  {
    s_deviceConfig.m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1ui
  if (s_deviceConfig.m_glProgramUniform1ui)
  {
    s_deviceConfig.m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2ui
  if (s_deviceConfig.m_glProgramUniform2ui)
  {
    s_deviceConfig.m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3ui
  if (s_deviceConfig.m_glProgramUniform3ui)
  {
    s_deviceConfig.m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4ui
  if (s_deviceConfig.m_glProgramUniform4ui)
  {
    s_deviceConfig.m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1f
  if (s_deviceConfig.m_glProgramUniform1f)
  {
    s_deviceConfig.m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2f
  if (s_deviceConfig.m_glProgramUniform2f)
  {
    s_deviceConfig.m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3f
  if (s_deviceConfig.m_glProgramUniform3f)
  {
    s_deviceConfig.m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4f
  if (s_deviceConfig.m_glProgramUniform4f)
  {
    s_deviceConfig.m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1iv
  if (s_deviceConfig.m_glProgramUniform1iv)
  {
    s_deviceConfig.m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2iv
  if (s_deviceConfig.m_glProgramUniform2iv)
  {
    s_deviceConfig.m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3iv
  if (s_deviceConfig.m_glProgramUniform3iv)
  {
    s_deviceConfig.m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4iv
  if (s_deviceConfig.m_glProgramUniform4iv)
  {
    s_deviceConfig.m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1uiv
  if (s_deviceConfig.m_glProgramUniform1uiv)
  {
    s_deviceConfig.m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2uiv
  if (s_deviceConfig.m_glProgramUniform2uiv)
  {
    s_deviceConfig.m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3uiv
  if (s_deviceConfig.m_glProgramUniform3uiv)
  {
    s_deviceConfig.m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4uiv
  if (s_deviceConfig.m_glProgramUniform4uiv)
  {
    s_deviceConfig.m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1fv
  if (s_deviceConfig.m_glProgramUniform1fv)
  {
    s_deviceConfig.m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2fv
  if (s_deviceConfig.m_glProgramUniform2fv)
  {
    s_deviceConfig.m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3fv
  if (s_deviceConfig.m_glProgramUniform3fv)
  {
    s_deviceConfig.m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4fv
  if (s_deviceConfig.m_glProgramUniform4fv)
  {
    s_deviceConfig.m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2fv
  if (s_deviceConfig.m_glProgramUniformMatrix2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3fv
  if (s_deviceConfig.m_glProgramUniformMatrix3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4fv
  if (s_deviceConfig.m_glProgramUniformMatrix4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glValidateProgramPipeline
  if (s_deviceConfig.m_glValidateProgramPipeline)
  {
    s_deviceConfig.m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineInfoLog
  if (s_deviceConfig.m_glGetProgramPipelineInfoLog)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_ES_VERSION_3_1 - glBindImageTexture
  if (s_deviceConfig.m_glBindImageTexture)
  {
    s_deviceConfig.m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBooleani_v (GLenum target, GLuint index, GLboolean * data)
{
  // GL_ES_VERSION_3_1 - glGetBooleani_v
  if (s_deviceConfig.m_glGetBooleani_v)
  {
    s_deviceConfig.m_glGetBooleani_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrier (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrier
  if (s_deviceConfig.m_glMemoryBarrier)
  {
    s_deviceConfig.m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrierByRegion
  if (s_deviceConfig.m_glMemoryBarrierByRegion)
  {
    s_deviceConfig.m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ES_VERSION_3_1 - glTexStorage2DMultisample
  if (s_deviceConfig.m_glTexStorage2DMultisample)
  {
    s_deviceConfig.m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_ES_VERSION_3_1 - glGetMultisamplefv
  if (s_deviceConfig.m_glGetMultisamplefv)
  {
    s_deviceConfig.m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_ES_VERSION_3_1 - glSampleMaski
  if (s_deviceConfig.m_glSampleMaski)
  {
    s_deviceConfig.m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameteriv
  if (s_deviceConfig.m_glGetTexLevelParameteriv)
  {
    s_deviceConfig.m_glGetTexLevelParameteriv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameterfv
  if (s_deviceConfig.m_glGetTexLevelParameterfv)
  {
    s_deviceConfig.m_glGetTexLevelParameterfv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ES_VERSION_3_1 - glBindVertexBuffer
  if (s_deviceConfig.m_glBindVertexBuffer)
  {
    s_deviceConfig.m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribFormat
  if (s_deviceConfig.m_glVertexAttribFormat)
  {
    s_deviceConfig.m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribIFormat
  if (s_deviceConfig.m_glVertexAttribIFormat)
  {
    s_deviceConfig.m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_ES_VERSION_3_1 - glVertexAttribBinding
  if (s_deviceConfig.m_glVertexAttribBinding)
  {
    s_deviceConfig.m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_ES_VERSION_3_1 - glVertexBindingDivisor
  if (s_deviceConfig.m_glVertexBindingDivisor)
  {
    s_deviceConfig.m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorGroupsAMD (GLint * numGroups, GLsizei groupsSize, GLuint * groups)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupsAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupsAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD (numGroups, groupsSize, groups);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCountersAMD (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCountersAMD
  if (s_deviceConfig.m_glGetPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCountersAMD (group, numCounters, maxActiveCounters, counterSize, counters);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD (group, bufSize, length, groupString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD (group, counter, bufSize, length, counterString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void * data)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterInfoAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD (group, counter, pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenPerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glGenPerfMonitorsAMD
  if (s_deviceConfig.m_glGenPerfMonitorsAMD)
  {
    s_deviceConfig.m_glGenPerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glDeletePerfMonitorsAMD
  if (s_deviceConfig.m_glDeletePerfMonitorsAMD)
  {
    s_deviceConfig.m_glDeletePerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList)
{
  // GL_AMD_performance_monitor - glSelectPerfMonitorCountersAMD
  if (s_deviceConfig.m_glSelectPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD (monitor, enable, group, numCounters, counterList);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glBeginPerfMonitorAMD
  if (s_deviceConfig.m_glBeginPerfMonitorAMD)
  {
    s_deviceConfig.m_glBeginPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glEndPerfMonitorAMD
  if (s_deviceConfig.m_glEndPerfMonitorAMD)
  {
    s_deviceConfig.m_glEndPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterDataAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterDataAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD (monitor, pname, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebufferANGLE (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ANGLE_framebuffer_blit - glBlitFramebufferANGLE
  if (s_deviceConfig.m_glBlitFramebufferANGLE)
  {
    s_deviceConfig.m_glBlitFramebufferANGLE (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleANGLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ANGLE_framebuffer_multisample - glRenderbufferStorageMultisampleANGLE
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedANGLE (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawArraysInstancedANGLE
  if (s_deviceConfig.m_glDrawArraysInstancedANGLE)
  {
    s_deviceConfig.m_glDrawArraysInstancedANGLE (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedANGLE (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawElementsInstancedANGLE
  if (s_deviceConfig.m_glDrawElementsInstancedANGLE)
  {
    s_deviceConfig.m_glDrawElementsInstancedANGLE (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorANGLE (GLuint index, GLuint divisor)
{
  // GL_ANGLE_instanced_arrays - glVertexAttribDivisorANGLE
  if (s_deviceConfig.m_glVertexAttribDivisorANGLE)
  {
    s_deviceConfig.m_glVertexAttribDivisorANGLE (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTranslatedShaderSourceANGLE (GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source)
{
  // GL_ANGLE_translated_shader_source - glGetTranslatedShaderSourceANGLE
  if (s_deviceConfig.m_glGetTranslatedShaderSourceANGLE)
  {
    s_deviceConfig.m_glGetTranslatedShaderSourceANGLE (shader, bufsize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureLevelsAPPLE (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  // GL_APPLE_copy_texture_levels - glCopyTextureLevelsAPPLE
  if (s_deviceConfig.m_glCopyTextureLevelsAPPLE)
  {
    s_deviceConfig.m_glCopyTextureLevelsAPPLE (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleAPPLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_APPLE_framebuffer_multisample - glRenderbufferStorageMultisampleAPPLE
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResolveMultisampleFramebufferAPPLE ()
{
  // GL_APPLE_framebuffer_multisample - glResolveMultisampleFramebufferAPPLE
  if (s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE)
  {
    s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSyncAPPLE (GLenum condition, GLbitfield flags)
{
  // GL_APPLE_sync - glFenceSyncAPPLE
  if (s_deviceConfig.m_glFenceSyncAPPLE)
  {
    return s_deviceConfig.m_glFenceSyncAPPLE (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glIsSyncAPPLE
  if (s_deviceConfig.m_glIsSyncAPPLE)
  {
    return s_deviceConfig.m_glIsSyncAPPLE (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glDeleteSyncAPPLE
  if (s_deviceConfig.m_glDeleteSyncAPPLE)
  {
    s_deviceConfig.m_glDeleteSyncAPPLE (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glClientWaitSyncAPPLE
  if (s_deviceConfig.m_glClientWaitSyncAPPLE)
  {
    return s_deviceConfig.m_glClientWaitSyncAPPLE (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glWaitSyncAPPLE
  if (s_deviceConfig.m_glWaitSyncAPPLE)
  {
    s_deviceConfig.m_glWaitSyncAPPLE (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64vAPPLE (GLenum pname, GLint64 * params)
{
  // GL_APPLE_sync - glGetInteger64vAPPLE
  if (s_deviceConfig.m_glGetInteger64vAPPLE)
  {
    s_deviceConfig.m_glGetInteger64vAPPLE (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSyncivAPPLE (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_APPLE_sync - glGetSyncivAPPLE
  if (s_deviceConfig.m_glGetSyncivAPPLE)
  {
    s_deviceConfig.m_glGetSyncivAPPLE (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedBaseInstanceEXT (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawArraysInstancedBaseInstanceEXT
  if (s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseInstanceEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseVertexBaseInstanceEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferStorageEXT (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_EXT_buffer_storage - glBufferStorageEXT
  if (s_deviceConfig.m_glBufferStorageEXT)
  {
    s_deviceConfig.m_glBufferStorageEXT (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubDataEXT (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_EXT_copy_image - glCopyImageSubDataEXT
  if (s_deviceConfig.m_glCopyImageSubDataEXT)
  {
    s_deviceConfig.m_glCopyImageSubDataEXT (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar * label)
{
  // GL_EXT_debug_label - glLabelObjectEXT
  if (s_deviceConfig.m_glLabelObjectEXT)
  {
    s_deviceConfig.m_glLabelObjectEXT (type, object, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_EXT_debug_label - glGetObjectLabelEXT
  if (s_deviceConfig.m_glGetObjectLabelEXT)
  {
    s_deviceConfig.m_glGetObjectLabelEXT (type, object, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInsertEventMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glInsertEventMarkerEXT
  if (s_deviceConfig.m_glInsertEventMarkerEXT)
  {
    s_deviceConfig.m_glInsertEventMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPushGroupMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glPushGroupMarkerEXT
  if (s_deviceConfig.m_glPushGroupMarkerEXT)
  {
    s_deviceConfig.m_glPushGroupMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPopGroupMarkerEXT ()
{
  // GL_EXT_debug_marker - glPopGroupMarkerEXT
  if (s_deviceConfig.m_glPopGroupMarkerEXT)
  {
    s_deviceConfig.m_glPopGroupMarkerEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDiscardFramebufferEXT (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_EXT_discard_framebuffer - glDiscardFramebufferEXT
  if (s_deviceConfig.m_glDiscardFramebufferEXT)
  {
    s_deviceConfig.m_glDiscardFramebufferEXT (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenQueriesEXT (GLsizei n, GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glGenQueriesEXT
  if (s_deviceConfig.m_glGenQueriesEXT)
  {
    s_deviceConfig.m_glGenQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteQueriesEXT (GLsizei n, const GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glDeleteQueriesEXT
  if (s_deviceConfig.m_glDeleteQueriesEXT)
  {
    s_deviceConfig.m_glDeleteQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsQueryEXT (GLuint id)
{
  // GL_EXT_disjoint_timer_query - glIsQueryEXT
  if (s_deviceConfig.m_glIsQueryEXT)
  {
    return s_deviceConfig.m_glIsQueryEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQueryEXT (GLenum target, GLuint id)
{
  // GL_EXT_disjoint_timer_query - glBeginQueryEXT
  if (s_deviceConfig.m_glBeginQueryEXT)
  {
    s_deviceConfig.m_glBeginQueryEXT (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQueryEXT (GLenum target)
{
  // GL_EXT_disjoint_timer_query - glEndQueryEXT
  if (s_deviceConfig.m_glEndQueryEXT)
  {
    s_deviceConfig.m_glEndQueryEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glQueryCounterEXT (GLuint id, GLenum target)
{
  // GL_EXT_disjoint_timer_query - glQueryCounterEXT
  if (s_deviceConfig.m_glQueryCounterEXT)
  {
    s_deviceConfig.m_glQueryCounterEXT (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryivEXT
  if (s_deviceConfig.m_glGetQueryivEXT)
  {
    s_deviceConfig.m_glGetQueryivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectivEXT (GLuint id, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectivEXT
  if (s_deviceConfig.m_glGetQueryObjectivEXT)
  {
    s_deviceConfig.m_glGetQueryObjectivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectuivEXT (GLuint id, GLenum pname, GLuint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectuivEXT
  if (s_deviceConfig.m_glGetQueryObjectuivEXT)
  {
    s_deviceConfig.m_glGetQueryObjectuivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjecti64vEXT
  if (s_deviceConfig.m_glGetQueryObjecti64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjecti64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectui64vEXT
  if (s_deviceConfig.m_glGetQueryObjectui64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjectui64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersEXT (GLsizei n, const GLenum * bufs)
{
  // GL_EXT_draw_buffers - glDrawBuffersEXT
  if (s_deviceConfig.m_glDrawBuffersEXT)
  {
    s_deviceConfig.m_glDrawBuffersEXT (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glEnableiEXT
  if (s_deviceConfig.m_glEnableiEXT)
  {
    s_deviceConfig.m_glEnableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glDisableiEXT
  if (s_deviceConfig.m_glDisableiEXT)
  {
    s_deviceConfig.m_glDisableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiEXT (GLuint buf, GLenum mode)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationiEXT
  if (s_deviceConfig.m_glBlendEquationiEXT)
  {
    s_deviceConfig.m_glBlendEquationiEXT (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiEXT (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationSeparateiEXT
  if (s_deviceConfig.m_glBlendEquationSeparateiEXT)
  {
    s_deviceConfig.m_glBlendEquationSeparateiEXT (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciEXT (GLuint buf, GLenum src, GLenum dst)
{
  // GL_EXT_draw_buffers_indexed - glBlendFunciEXT
  if (s_deviceConfig.m_glBlendFunciEXT)
  {
    s_deviceConfig.m_glBlendFunciEXT (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiEXT (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendFuncSeparateiEXT
  if (s_deviceConfig.m_glBlendFuncSeparateiEXT)
  {
    s_deviceConfig.m_glBlendFuncSeparateiEXT (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMaskiEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_EXT_draw_buffers_indexed - glColorMaskiEXT
  if (s_deviceConfig.m_glColorMaskiEXT)
  {
    s_deviceConfig.m_glColorMaskiEXT (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glIsEnablediEXT
  if (s_deviceConfig.m_glIsEnablediEXT)
  {
    return s_deviceConfig.m_glIsEnablediEXT (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsBaseVertexEXT
  if (s_deviceConfig.m_glDrawElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawElementsBaseVertexEXT (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertexEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawRangeElementsBaseVertexEXT
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexEXT
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertexEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glMultiDrawElementsBaseVertexEXT
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawArraysInstancedEXT
  if (s_deviceConfig.m_glDrawArraysInstancedEXT)
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT (mode, start, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawElementsInstancedEXT
  if (s_deviceConfig.m_glDrawElementsInstancedEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_EXT_geometry_shader - glFramebufferTextureEXT
  if (s_deviceConfig.m_glFramebufferTextureEXT)
  {
    s_deviceConfig.m_glFramebufferTextureEXT (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorEXT (GLuint index, GLuint divisor)
{
  // GL_EXT_instanced_arrays - glVertexAttribDivisorEXT
  if (s_deviceConfig.m_glVertexAttribDivisorEXT)
  {
    s_deviceConfig.m_glVertexAttribDivisorEXT (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_EXT_map_buffer_range - glMapBufferRangeEXT
  if (s_deviceConfig.m_glMapBufferRangeEXT)
  {
    return s_deviceConfig.m_glMapBufferRangeEXT (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_EXT_map_buffer_range - glFlushMappedBufferRangeEXT
  if (s_deviceConfig.m_glFlushMappedBufferRangeEXT)
  {
    s_deviceConfig.m_glFlushMappedBufferRangeEXT (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysEXT (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawArraysEXT
  if (s_deviceConfig.m_glMultiDrawArraysEXT)
  {
    s_deviceConfig.m_glMultiDrawArraysEXT (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawElementsEXT
  if (s_deviceConfig.m_glMultiDrawElementsEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirectEXT (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawArraysIndirectEXT
  if (s_deviceConfig.m_glMultiDrawArraysIndirectEXT)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectEXT (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirectEXT (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawElementsIndirectEXT
  if (s_deviceConfig.m_glMultiDrawElementsIndirectEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectEXT (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_multisampled_render_to_texture - glRenderbufferStorageMultisampleEXT
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleEXT)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2DMultisampleEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_EXT_multisampled_render_to_texture - glFramebufferTexture2DMultisampleEXT
  if (s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT)
  {
    s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBufferIndexedEXT (GLenum src, GLint index)
{
  // GL_EXT_multiview_draw_buffers - glReadBufferIndexedEXT
  if (s_deviceConfig.m_glReadBufferIndexedEXT)
  {
    s_deviceConfig.m_glReadBufferIndexedEXT (src, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersIndexedEXT (GLint n, const GLenum * location, const GLint * indices)
{
  // GL_EXT_multiview_draw_buffers - glDrawBuffersIndexedEXT
  if (s_deviceConfig.m_glDrawBuffersIndexedEXT)
  {
    s_deviceConfig.m_glDrawBuffersIndexedEXT (n, location, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_vEXT (GLenum target, GLuint index, GLint * data)
{
  // GL_EXT_multiview_draw_buffers - glGetIntegeri_vEXT
  if (s_deviceConfig.m_glGetIntegeri_vEXT)
  {
    s_deviceConfig.m_glGetIntegeri_vEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPrimitiveBoundingBoxEXT (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_EXT_primitive_bounding_box - glPrimitiveBoundingBoxEXT
  if (s_deviceConfig.m_glPrimitiveBoundingBoxEXT)
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxEXT (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
{
  // GL_EXT_raster_multisample - glRasterSamplesEXT
  if (s_deviceConfig.m_glRasterSamplesEXT)
  {
    s_deviceConfig.m_glRasterSamplesEXT (samples, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusEXT ()
{
  // GL_EXT_robustness - glGetGraphicsResetStatusEXT
  if (s_deviceConfig.m_glGetGraphicsResetStatusEXT)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusEXT ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsEXT (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_EXT_robustness - glReadnPixelsEXT
  if (s_deviceConfig.m_glReadnPixelsEXT)
  {
    s_deviceConfig.m_glReadnPixelsEXT (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvEXT (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_EXT_robustness - glGetnUniformfvEXT
  if (s_deviceConfig.m_glGetnUniformfvEXT)
  {
    s_deviceConfig.m_glGetnUniformfvEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivEXT (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_EXT_robustness - glGetnUniformivEXT
  if (s_deviceConfig.m_glGetnUniformivEXT)
  {
    s_deviceConfig.m_glGetnUniformivEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgramEXT (GLuint pipeline, GLuint program)
{
  // GL_EXT_separate_shader_objects - glActiveShaderProgramEXT
  if (s_deviceConfig.m_glActiveShaderProgramEXT)
  {
    s_deviceConfig.m_glActiveShaderProgramEXT (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glBindProgramPipelineEXT
  if (s_deviceConfig.m_glBindProgramPipelineEXT)
  {
    s_deviceConfig.m_glBindProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramvEXT (GLenum type, GLsizei count, const GLchar ** strings)
{
  // GL_EXT_separate_shader_objects - glCreateShaderProgramvEXT
  if (s_deviceConfig.m_glCreateShaderProgramvEXT)
  {
    return s_deviceConfig.m_glCreateShaderProgramvEXT (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelinesEXT (GLsizei n, const GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glDeleteProgramPipelinesEXT
  if (s_deviceConfig.m_glDeleteProgramPipelinesEXT)
  {
    s_deviceConfig.m_glDeleteProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelinesEXT (GLsizei n, GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glGenProgramPipelinesEXT
  if (s_deviceConfig.m_glGenProgramPipelinesEXT)
  {
    s_deviceConfig.m_glGenProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLogEXT (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineInfoLogEXT
  if (s_deviceConfig.m_glGetProgramPipelineInfoLogEXT)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLogEXT (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineivEXT (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineivEXT
  if (s_deviceConfig.m_glGetProgramPipelineivEXT)
  {
    s_deviceConfig.m_glGetProgramPipelineivEXT (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glIsProgramPipelineEXT
  if (s_deviceConfig.m_glIsProgramPipelineEXT)
  {
    return s_deviceConfig.m_glIsProgramPipelineEXT (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
{
  // GL_EXT_separate_shader_objects - glProgramParameteriEXT
  if (s_deviceConfig.m_glProgramParameteriEXT)
  {
    s_deviceConfig.m_glProgramParameteriEXT (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fEXT
  if (s_deviceConfig.m_glProgramUniform1fEXT)
  {
    s_deviceConfig.m_glProgramUniform1fEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fvEXT
  if (s_deviceConfig.m_glProgramUniform1fvEXT)
  {
    s_deviceConfig.m_glProgramUniform1fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1iEXT
  if (s_deviceConfig.m_glProgramUniform1iEXT)
  {
    s_deviceConfig.m_glProgramUniform1iEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1ivEXT
  if (s_deviceConfig.m_glProgramUniform1ivEXT)
  {
    s_deviceConfig.m_glProgramUniform1ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fEXT
  if (s_deviceConfig.m_glProgramUniform2fEXT)
  {
    s_deviceConfig.m_glProgramUniform2fEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fvEXT
  if (s_deviceConfig.m_glProgramUniform2fvEXT)
  {
    s_deviceConfig.m_glProgramUniform2fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2iEXT
  if (s_deviceConfig.m_glProgramUniform2iEXT)
  {
    s_deviceConfig.m_glProgramUniform2iEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2ivEXT
  if (s_deviceConfig.m_glProgramUniform2ivEXT)
  {
    s_deviceConfig.m_glProgramUniform2ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fEXT
  if (s_deviceConfig.m_glProgramUniform3fEXT)
  {
    s_deviceConfig.m_glProgramUniform3fEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fvEXT
  if (s_deviceConfig.m_glProgramUniform3fvEXT)
  {
    s_deviceConfig.m_glProgramUniform3fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3iEXT
  if (s_deviceConfig.m_glProgramUniform3iEXT)
  {
    s_deviceConfig.m_glProgramUniform3iEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3ivEXT
  if (s_deviceConfig.m_glProgramUniform3ivEXT)
  {
    s_deviceConfig.m_glProgramUniform3ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fEXT
  if (s_deviceConfig.m_glProgramUniform4fEXT)
  {
    s_deviceConfig.m_glProgramUniform4fEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fvEXT
  if (s_deviceConfig.m_glProgramUniform4fvEXT)
  {
    s_deviceConfig.m_glProgramUniform4fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4iEXT
  if (s_deviceConfig.m_glProgramUniform4iEXT)
  {
    s_deviceConfig.m_glProgramUniform4iEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4ivEXT
  if (s_deviceConfig.m_glProgramUniform4ivEXT)
  {
    s_deviceConfig.m_glProgramUniform4ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStagesEXT (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_EXT_separate_shader_objects - glUseProgramStagesEXT
  if (s_deviceConfig.m_glUseProgramStagesEXT)
  {
    s_deviceConfig.m_glUseProgramStagesEXT (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glValidateProgramPipelineEXT
  if (s_deviceConfig.m_glValidateProgramPipelineEXT)
  {
    s_deviceConfig.m_glValidateProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uiEXT
  if (s_deviceConfig.m_glProgramUniform1uiEXT)
  {
    s_deviceConfig.m_glProgramUniform1uiEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uiEXT
  if (s_deviceConfig.m_glProgramUniform2uiEXT)
  {
    s_deviceConfig.m_glProgramUniform2uiEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uiEXT
  if (s_deviceConfig.m_glProgramUniform3uiEXT)
  {
    s_deviceConfig.m_glProgramUniform3uiEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uiEXT
  if (s_deviceConfig.m_glProgramUniform4uiEXT)
  {
    s_deviceConfig.m_glProgramUniform4uiEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uivEXT
  if (s_deviceConfig.m_glProgramUniform1uivEXT)
  {
    s_deviceConfig.m_glProgramUniform1uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uivEXT
  if (s_deviceConfig.m_glProgramUniform2uivEXT)
  {
    s_deviceConfig.m_glProgramUniform2uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uivEXT
  if (s_deviceConfig.m_glProgramUniform3uivEXT)
  {
    s_deviceConfig.m_glProgramUniform3uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uivEXT
  if (s_deviceConfig.m_glProgramUniform4uivEXT)
  {
    s_deviceConfig.m_glProgramUniform4uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_EXT_sparse_texture - glTexPageCommitmentARB
  if (s_deviceConfig.m_glTexPageCommitmentARB)
  {
    s_deviceConfig.m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteriEXT (GLenum pname, GLint value)
{
  // GL_EXT_tessellation_shader - glPatchParameteriEXT
  if (s_deviceConfig.m_glPatchParameteriEXT)
  {
    s_deviceConfig.m_glPatchParameteriEXT (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIivEXT
  if (s_deviceConfig.m_glTexParameterIivEXT)
  {
    s_deviceConfig.m_glTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIuivEXT
  if (s_deviceConfig.m_glTexParameterIuivEXT)
  {
    s_deviceConfig.m_glTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIivEXT
  if (s_deviceConfig.m_glGetTexParameterIivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIuivEXT
  if (s_deviceConfig.m_glGetTexParameterIuivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIivEXT (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIivEXT
  if (s_deviceConfig.m_glSamplerParameterIivEXT)
  {
    s_deviceConfig.m_glSamplerParameterIivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuivEXT (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIuivEXT
  if (s_deviceConfig.m_glSamplerParameterIuivEXT)
  {
    s_deviceConfig.m_glSamplerParameterIuivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIivEXT (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIivEXT
  if (s_deviceConfig.m_glGetSamplerParameterIivEXT)
  {
    s_deviceConfig.m_glGetSamplerParameterIivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuivEXT (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIuivEXT
  if (s_deviceConfig.m_glGetSamplerParameterIuivEXT)
  {
    s_deviceConfig.m_glGetSamplerParameterIuivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_texture_buffer - glTexBufferEXT
  if (s_deviceConfig.m_glTexBufferEXT)
  {
    s_deviceConfig.m_glTexBufferEXT (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRangeEXT (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_EXT_texture_buffer - glTexBufferRangeEXT
  if (s_deviceConfig.m_glTexBufferRangeEXT)
  {
    s_deviceConfig.m_glTexBufferRangeEXT (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTexStorage1DEXT
  if (s_deviceConfig.m_glTexStorage1DEXT)
  {
    s_deviceConfig.m_glTexStorage1DEXT (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTexStorage2DEXT
  if (s_deviceConfig.m_glTexStorage2DEXT)
  {
    s_deviceConfig.m_glTexStorage2DEXT (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTexStorage3DEXT
  if (s_deviceConfig.m_glTexStorage3DEXT)
  {
    s_deviceConfig.m_glTexStorage3DEXT (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTextureStorage1DEXT
  if (s_deviceConfig.m_glTextureStorage1DEXT)
  {
    s_deviceConfig.m_glTextureStorage1DEXT (texture, target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTextureStorage2DEXT
  if (s_deviceConfig.m_glTextureStorage2DEXT)
  {
    s_deviceConfig.m_glTextureStorage2DEXT (texture, target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTextureStorage3DEXT
  if (s_deviceConfig.m_glTextureStorage3DEXT)
  {
    s_deviceConfig.m_glTextureStorage3DEXT (texture, target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureViewEXT (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_EXT_texture_view - glTextureViewEXT
  if (s_deviceConfig.m_glTextureViewEXT)
  {
    s_deviceConfig.m_glTextureViewEXT (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleIMG (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_IMG_multisampled_render_to_texture - glRenderbufferStorageMultisampleIMG
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleIMG)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleIMG (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2DMultisampleIMG (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_IMG_multisampled_render_to_texture - glFramebufferTexture2DMultisampleIMG
  if (s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG)
  {
    s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glBeginPerfQueryINTEL
  if (s_deviceConfig.m_glBeginPerfQueryINTEL)
  {
    s_deviceConfig.m_glBeginPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreatePerfQueryINTEL (GLuint queryId, GLuint * queryHandle)
{
  // GL_INTEL_performance_query - glCreatePerfQueryINTEL
  if (s_deviceConfig.m_glCreatePerfQueryINTEL)
  {
    s_deviceConfig.m_glCreatePerfQueryINTEL (queryId, queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glDeletePerfQueryINTEL
  if (s_deviceConfig.m_glDeletePerfQueryINTEL)
  {
    s_deviceConfig.m_glDeletePerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glEndPerfQueryINTEL
  if (s_deviceConfig.m_glEndPerfQueryINTEL)
  {
    s_deviceConfig.m_glEndPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFirstPerfQueryIdINTEL (GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetFirstPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetFirstPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL (queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint * nextQueryId)
{
  // GL_INTEL_performance_query - glGetNextPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetNextPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL (queryId, nextQueryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue)
{
  // GL_INTEL_performance_query - glGetPerfCounterInfoINTEL
  if (s_deviceConfig.m_glGetPerfCounterInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfCounterInfoINTEL (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten)
{
  // GL_INTEL_performance_query - glGetPerfQueryDataINTEL
  if (s_deviceConfig.m_glGetPerfQueryDataINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryDataINTEL (queryHandle, flags, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryIdByNameINTEL (GLchar * queryName, GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetPerfQueryIdByNameINTEL
  if (s_deviceConfig.m_glGetPerfQueryIdByNameINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL (queryName, queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask)
{
  // GL_INTEL_performance_query - glGetPerfQueryInfoINTEL
  if (s_deviceConfig.m_glGetPerfQueryInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryInfoINTEL (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendBarrierKHR ()
{
  // GL_KHR_blend_equation_advanced - glBlendBarrierKHR
  if (s_deviceConfig.m_glBlendBarrierKHR)
  {
    s_deviceConfig.m_glBlendBarrierKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageControlKHR (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_KHR_debug - glDebugMessageControlKHR
  if (s_deviceConfig.m_glDebugMessageControlKHR)
  {
    s_deviceConfig.m_glDebugMessageControlKHR (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageInsertKHR (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_KHR_debug - glDebugMessageInsertKHR
  if (s_deviceConfig.m_glDebugMessageInsertKHR)
  {
    s_deviceConfig.m_glDebugMessageInsertKHR (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageCallbackKHR (GLDEBUGPROCKHR callback, const void * userParam)
{
  // GL_KHR_debug - glDebugMessageCallbackKHR
  if (s_deviceConfig.m_glDebugMessageCallbackKHR)
  {
    s_deviceConfig.m_glDebugMessageCallbackKHR (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetDebugMessageLogKHR (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_KHR_debug - glGetDebugMessageLogKHR
  if (s_deviceConfig.m_glGetDebugMessageLogKHR)
  {
    return s_deviceConfig.m_glGetDebugMessageLogKHR (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPushDebugGroupKHR (GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
  // GL_KHR_debug - glPushDebugGroupKHR
  if (s_deviceConfig.m_glPushDebugGroupKHR)
  {
    s_deviceConfig.m_glPushDebugGroupKHR (source, id, length, message);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPopDebugGroupKHR ()
{
  // GL_KHR_debug - glPopDebugGroupKHR
  if (s_deviceConfig.m_glPopDebugGroupKHR)
  {
    s_deviceConfig.m_glPopDebugGroupKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glObjectLabelKHR (GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectLabelKHR
  if (s_deviceConfig.m_glObjectLabelKHR)
  {
    s_deviceConfig.m_glObjectLabelKHR (identifier, name, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectLabelKHR (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectLabelKHR
  if (s_deviceConfig.m_glGetObjectLabelKHR)
  {
    s_deviceConfig.m_glGetObjectLabelKHR (identifier, name, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glObjectPtrLabelKHR (const void * ptr, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectPtrLabelKHR
  if (s_deviceConfig.m_glObjectPtrLabelKHR)
  {
    s_deviceConfig.m_glObjectPtrLabelKHR (ptr, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectPtrLabelKHR (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectPtrLabelKHR
  if (s_deviceConfig.m_glGetObjectPtrLabelKHR)
  {
    s_deviceConfig.m_glGetObjectPtrLabelKHR (ptr, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPointervKHR (GLenum pname, void ** params)
{
  // GL_KHR_debug - glGetPointervKHR
  if (s_deviceConfig.m_glGetPointervKHR)
  {
    s_deviceConfig.m_glGetPointervKHR (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusKHR ()
{
  // GL_KHR_robustness - glGetGraphicsResetStatusKHR
  if (s_deviceConfig.m_glGetGraphicsResetStatusKHR)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusKHR ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsKHR (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_KHR_robustness - glReadnPixelsKHR
  if (s_deviceConfig.m_glReadnPixelsKHR)
  {
    s_deviceConfig.m_glReadnPixelsKHR (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvKHR (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_KHR_robustness - glGetnUniformfvKHR
  if (s_deviceConfig.m_glGetnUniformfvKHR)
  {
    s_deviceConfig.m_glGetnUniformfvKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivKHR (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_KHR_robustness - glGetnUniformivKHR
  if (s_deviceConfig.m_glGetnUniformivKHR)
  {
    s_deviceConfig.m_glGetnUniformivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformuivKHR (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_KHR_robustness - glGetnUniformuivKHR
  if (s_deviceConfig.m_glGetnUniformuivKHR)
  {
    s_deviceConfig.m_glGetnUniformuivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureHandleNV (GLuint texture)
{
  // GL_NV_bindless_texture - glGetTextureHandleNV
  if (s_deviceConfig.m_glGetTextureHandleNV)
  {
    return s_deviceConfig.m_glGetTextureHandleNV (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
{
  // GL_NV_bindless_texture - glGetTextureSamplerHandleNV
  if (s_deviceConfig.m_glGetTextureSamplerHandleNV)
  {
    return s_deviceConfig.m_glGetTextureSamplerHandleNV (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleNonResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_NV_bindless_texture - glGetImageHandleNV
  if (s_deviceConfig.m_glGetImageHandleNV)
  {
    return s_deviceConfig.m_glGetImageHandleNV (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
{
  // GL_NV_bindless_texture - glMakeImageHandleResidentNV
  if (s_deviceConfig.m_glMakeImageHandleResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleResidentNV (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeImageHandleNonResidentNV
  if (s_deviceConfig.m_glMakeImageHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64NV (GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glUniformHandleui64NV
  if (s_deviceConfig.m_glUniformHandleui64NV)
  {
    s_deviceConfig.m_glUniformHandleui64NV (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_NV_bindless_texture - glUniformHandleui64vNV
  if (s_deviceConfig.m_glUniformHandleui64vNV)
  {
    s_deviceConfig.m_glUniformHandleui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64NV
  if (s_deviceConfig.m_glProgramUniformHandleui64NV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64NV (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64vNV
  if (s_deviceConfig.m_glProgramUniformHandleui64vNV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64vNV (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsTextureHandleResidentNV
  if (s_deviceConfig.m_glIsTextureHandleResidentNV)
  {
    return s_deviceConfig.m_glIsTextureHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsImageHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsImageHandleResidentNV
  if (s_deviceConfig.m_glIsImageHandleResidentNV)
  {
    return s_deviceConfig.m_glIsImageHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendParameteriNV (GLenum pname, GLint value)
{
  // GL_NV_blend_equation_advanced - glBlendParameteriNV
  if (s_deviceConfig.m_glBlendParameteriNV)
  {
    s_deviceConfig.m_glBlendParameteriNV (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendBarrierNV ()
{
  // GL_NV_blend_equation_advanced - glBlendBarrierNV
  if (s_deviceConfig.m_glBlendBarrierNV)
  {
    s_deviceConfig.m_glBlendBarrierNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginConditionalRenderNV (GLuint id, GLenum mode)
{
  // GL_NV_conditional_render - glBeginConditionalRenderNV
  if (s_deviceConfig.m_glBeginConditionalRenderNV)
  {
    s_deviceConfig.m_glBeginConditionalRenderNV (id, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndConditionalRenderNV ()
{
  // GL_NV_conditional_render - glEndConditionalRenderNV
  if (s_deviceConfig.m_glEndConditionalRenderNV)
  {
    s_deviceConfig.m_glEndConditionalRenderNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
{
  // GL_NV_conservative_raster - glSubpixelPrecisionBiasNV
  if (s_deviceConfig.m_glSubpixelPrecisionBiasNV)
  {
    s_deviceConfig.m_glSubpixelPrecisionBiasNV (xbits, ybits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubDataNV (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_NV_copy_buffer - glCopyBufferSubDataNV
  if (s_deviceConfig.m_glCopyBufferSubDataNV)
  {
    s_deviceConfig.m_glCopyBufferSubDataNV (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageMaskNV (GLboolean mask)
{
  // GL_NV_coverage_sample - glCoverageMaskNV
  if (s_deviceConfig.m_glCoverageMaskNV)
  {
    s_deviceConfig.m_glCoverageMaskNV (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageOperationNV (GLenum operation)
{
  // GL_NV_coverage_sample - glCoverageOperationNV
  if (s_deviceConfig.m_glCoverageOperationNV)
  {
    s_deviceConfig.m_glCoverageOperationNV (operation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersNV (GLsizei n, const GLenum * bufs)
{
  // GL_NV_draw_buffers - glDrawBuffersNV
  if (s_deviceConfig.m_glDrawBuffersNV)
  {
    s_deviceConfig.m_glDrawBuffersNV (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedNV (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawArraysInstancedNV
  if (s_deviceConfig.m_glDrawArraysInstancedNV)
  {
    s_deviceConfig.m_glDrawArraysInstancedNV (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedNV (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawElementsInstancedNV
  if (s_deviceConfig.m_glDrawElementsInstancedNV)
  {
    s_deviceConfig.m_glDrawElementsInstancedNV (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFencesNV (GLsizei n, const GLuint * fences)
{
  // GL_NV_fence - glDeleteFencesNV
  if (s_deviceConfig.m_glDeleteFencesNV)
  {
    s_deviceConfig.m_glDeleteFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFencesNV (GLsizei n, GLuint * fences)
{
  // GL_NV_fence - glGenFencesNV
  if (s_deviceConfig.m_glGenFencesNV)
  {
    s_deviceConfig.m_glGenFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFenceNV (GLuint fence)
{
  // GL_NV_fence - glIsFenceNV
  if (s_deviceConfig.m_glIsFenceNV)
  {
    return s_deviceConfig.m_glIsFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glTestFenceNV (GLuint fence)
{
  // GL_NV_fence - glTestFenceNV
  if (s_deviceConfig.m_glTestFenceNV)
  {
    return s_deviceConfig.m_glTestFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFenceivNV (GLuint fence, GLenum pname, GLint * params)
{
  // GL_NV_fence - glGetFenceivNV
  if (s_deviceConfig.m_glGetFenceivNV)
  {
    s_deviceConfig.m_glGetFenceivNV (fence, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFinishFenceNV (GLuint fence)
{
  // GL_NV_fence - glFinishFenceNV
  if (s_deviceConfig.m_glFinishFenceNV)
  {
    s_deviceConfig.m_glFinishFenceNV (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSetFenceNV (GLuint fence, GLenum condition)
{
  // GL_NV_fence - glSetFenceNV
  if (s_deviceConfig.m_glSetFenceNV)
  {
    s_deviceConfig.m_glSetFenceNV (fence, condition);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFragmentCoverageColorNV (GLuint color)
{
  // GL_NV_fragment_coverage_to_color - glFragmentCoverageColorNV
  if (s_deviceConfig.m_glFragmentCoverageColorNV)
  {
    s_deviceConfig.m_glFragmentCoverageColorNV (color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebufferNV (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_NV_framebuffer_blit - glBlitFramebufferNV
  if (s_deviceConfig.m_glBlitFramebufferNV)
  {
    s_deviceConfig.m_glBlitFramebufferNV (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageModulationTableNV (GLsizei n, const GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationTableNV
  if (s_deviceConfig.m_glCoverageModulationTableNV)
  {
    s_deviceConfig.m_glCoverageModulationTableNV (n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glGetCoverageModulationTableNV
  if (s_deviceConfig.m_glGetCoverageModulationTableNV)
  {
    s_deviceConfig.m_glGetCoverageModulationTableNV (bufsize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageModulationNV (GLenum components)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationNV
  if (s_deviceConfig.m_glCoverageModulationNV)
  {
    s_deviceConfig.m_glCoverageModulationNV (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleNV (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_NV_framebuffer_multisample - glRenderbufferStorageMultisampleNV
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleNV)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleNV (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorNV (GLuint index, GLuint divisor)
{
  // GL_NV_instanced_arrays - glVertexAttribDivisorNV
  if (s_deviceConfig.m_glVertexAttribDivisorNV)
  {
    s_deviceConfig.m_glVertexAttribDivisorNV (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_NV_internalformat_sample_query - glGetInternalformatSampleivNV
  if (s_deviceConfig.m_glGetInternalformatSampleivNV)
  {
    s_deviceConfig.m_glGetInternalformatSampleivNV (target, internalformat, samples, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x3fvNV
  if (s_deviceConfig.m_glUniformMatrix2x3fvNV)
  {
    s_deviceConfig.m_glUniformMatrix2x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x2fvNV
  if (s_deviceConfig.m_glUniformMatrix3x2fvNV)
  {
    s_deviceConfig.m_glUniformMatrix3x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x4fvNV
  if (s_deviceConfig.m_glUniformMatrix2x4fvNV)
  {
    s_deviceConfig.m_glUniformMatrix2x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x2fvNV
  if (s_deviceConfig.m_glUniformMatrix4x2fvNV)
  {
    s_deviceConfig.m_glUniformMatrix4x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x4fvNV
  if (s_deviceConfig.m_glUniformMatrix3x4fvNV)
  {
    s_deviceConfig.m_glUniformMatrix3x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x3fvNV
  if (s_deviceConfig.m_glUniformMatrix4x3fvNV)
  {
    s_deviceConfig.m_glUniformMatrix4x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGenPathsNV (GLsizei range)
{
  // GL_NV_path_rendering - glGenPathsNV
  if (s_deviceConfig.m_glGenPathsNV)
  {
    return s_deviceConfig.m_glGenPathsNV (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePathsNV (GLuint path, GLsizei range)
{
  // GL_NV_path_rendering - glDeletePathsNV
  if (s_deviceConfig.m_glDeletePathsNV)
  {
    s_deviceConfig.m_glDeletePathsNV (path, range);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPathNV (GLuint path)
{
  // GL_NV_path_rendering - glIsPathNV
  if (s_deviceConfig.m_glIsPathNV)
  {
    return s_deviceConfig.m_glIsPathNV (path);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCommandsNV
  if (s_deviceConfig.m_glPathCommandsNV)
  {
    s_deviceConfig.m_glPathCommandsNV (path, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCoordsNV
  if (s_deviceConfig.m_glPathCoordsNV)
  {
    s_deviceConfig.m_glPathCoordsNV (path, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCommandsNV
  if (s_deviceConfig.m_glPathSubCommandsNV)
  {
    s_deviceConfig.m_glPathSubCommandsNV (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCoordsNV
  if (s_deviceConfig.m_glPathSubCoordsNV)
  {
    s_deviceConfig.m_glPathSubCoordsNV (path, coordStart, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStringNV (GLuint path, GLenum format, GLsizei length, const void * pathString)
{
  // GL_NV_path_rendering - glPathStringNV
  if (s_deviceConfig.m_glPathStringNV)
  {
    s_deviceConfig.m_glPathStringNV (path, format, length, pathString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphsNV
  if (s_deviceConfig.m_glPathGlyphsNV)
  {
    s_deviceConfig.m_glPathGlyphsNV (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphRangeNV
  if (s_deviceConfig.m_glPathGlyphRangeNV)
  {
    s_deviceConfig.m_glPathGlyphRangeNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights)
{
  // GL_NV_path_rendering - glWeightPathsNV
  if (s_deviceConfig.m_glWeightPathsNV)
  {
    s_deviceConfig.m_glWeightPathsNV (resultPath, numPaths, paths, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyPathNV (GLuint resultPath, GLuint srcPath)
{
  // GL_NV_path_rendering - glCopyPathNV
  if (s_deviceConfig.m_glCopyPathNV)
  {
    s_deviceConfig.m_glCopyPathNV (resultPath, srcPath);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  // GL_NV_path_rendering - glInterpolatePathsNV
  if (s_deviceConfig.m_glInterpolatePathsNV)
  {
    s_deviceConfig.m_glInterpolatePathsNV (resultPath, pathA, pathB, weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glTransformPathNV
  if (s_deviceConfig.m_glTransformPathNV)
  {
    s_deviceConfig.m_glTransformPathNV (resultPath, srcPath, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterivNV (GLuint path, GLenum pname, const GLint * value)
{
  // GL_NV_path_rendering - glPathParameterivNV
  if (s_deviceConfig.m_glPathParameterivNV)
  {
    s_deviceConfig.m_glPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameteriNV (GLuint path, GLenum pname, GLint value)
{
  // GL_NV_path_rendering - glPathParameteriNV
  if (s_deviceConfig.m_glPathParameteriNV)
  {
    s_deviceConfig.m_glPathParameteriNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat * value)
{
  // GL_NV_path_rendering - glPathParameterfvNV
  if (s_deviceConfig.m_glPathParameterfvNV)
  {
    s_deviceConfig.m_glPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
{
  // GL_NV_path_rendering - glPathParameterfNV
  if (s_deviceConfig.m_glPathParameterfNV)
  {
    s_deviceConfig.m_glPathParameterfNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat * dashArray)
{
  // GL_NV_path_rendering - glPathDashArrayNV
  if (s_deviceConfig.m_glPathDashArrayNV)
  {
    s_deviceConfig.m_glPathDashArrayNV (path, dashCount, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
{
  // GL_NV_path_rendering - glPathStencilFuncNV
  if (s_deviceConfig.m_glPathStencilFuncNV)
  {
    s_deviceConfig.m_glPathStencilFuncNV (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
{
  // GL_NV_path_rendering - glPathStencilDepthOffsetNV
  if (s_deviceConfig.m_glPathStencilDepthOffsetNV)
  {
    s_deviceConfig.m_glPathStencilDepthOffsetNV (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
{
  // GL_NV_path_rendering - glStencilFillPathNV
  if (s_deviceConfig.m_glStencilFillPathNV)
  {
    s_deviceConfig.m_glStencilFillPathNV (path, fillMode, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
{
  // GL_NV_path_rendering - glStencilStrokePathNV
  if (s_deviceConfig.m_glStencilStrokePathNV)
  {
    s_deviceConfig.m_glStencilStrokePathNV (path, reference, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilFillPathInstancedNV
  if (s_deviceConfig.m_glStencilFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCoverDepthFuncNV (GLenum func)
{
  // GL_NV_path_rendering - glPathCoverDepthFuncNV
  if (s_deviceConfig.m_glPathCoverDepthFuncNV)
  {
    s_deviceConfig.m_glPathCoverDepthFuncNV (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverFillPathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverFillPathNV
  if (s_deviceConfig.m_glCoverFillPathNV)
  {
    s_deviceConfig.m_glCoverFillPathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverStrokePathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverStrokePathNV
  if (s_deviceConfig.m_glCoverStrokePathNV)
  {
    s_deviceConfig.m_glCoverStrokePathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverFillPathInstancedNV
  if (s_deviceConfig.m_glCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathParameterivNV (GLuint path, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathParameterivNV
  if (s_deviceConfig.m_glGetPathParameterivNV)
  {
    s_deviceConfig.m_glGetPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathParameterfvNV
  if (s_deviceConfig.m_glGetPathParameterfvNV)
  {
    s_deviceConfig.m_glGetPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathCommandsNV (GLuint path, GLubyte * commands)
{
  // GL_NV_path_rendering - glGetPathCommandsNV
  if (s_deviceConfig.m_glGetPathCommandsNV)
  {
    s_deviceConfig.m_glGetPathCommandsNV (path, commands);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathCoordsNV (GLuint path, GLfloat * coords)
{
  // GL_NV_path_rendering - glGetPathCoordsNV
  if (s_deviceConfig.m_glGetPathCoordsNV)
  {
    s_deviceConfig.m_glGetPathCoordsNV (path, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathDashArrayNV (GLuint path, GLfloat * dashArray)
{
  // GL_NV_path_rendering - glGetPathDashArrayNV
  if (s_deviceConfig.m_glGetPathDashArrayNV)
  {
    s_deviceConfig.m_glGetPathDashArrayNV (path, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricsNV
  if (s_deviceConfig.m_glGetPathMetricsNV)
  {
    s_deviceConfig.m_glGetPathMetricsNV (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricRangeNV
  if (s_deviceConfig.m_glGetPathMetricRangeNV)
  {
    s_deviceConfig.m_glGetPathMetricRangeNV (metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing)
{
  // GL_NV_path_rendering - glGetPathSpacingNV
  if (s_deviceConfig.m_glGetPathSpacingNV)
  {
    s_deviceConfig.m_glGetPathSpacingNV (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInFillPathNV
  if (s_deviceConfig.m_glIsPointInFillPathNV)
  {
    return s_deviceConfig.m_glIsPointInFillPathNV (path, mask, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInStrokePathNV
  if (s_deviceConfig.m_glIsPointInStrokePathNV)
  {
    return s_deviceConfig.m_glIsPointInStrokePathNV (path, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLfloat glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  // GL_NV_path_rendering - glGetPathLengthNV
  if (s_deviceConfig.m_glGetPathLengthNV)
  {
    return s_deviceConfig.m_glGetPathLengthNV (path, startSegment, numSegments);
  }
  return ((GLfloat)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY)
{
  // GL_NV_path_rendering - glPointAlongPathNV
  if (s_deviceConfig.m_glPointAlongPathNV)
  {
    return s_deviceConfig.m_glPointAlongPathNV (path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x2fNV
  if (s_deviceConfig.m_glMatrixLoad3x2fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x3fNV
  if (s_deviceConfig.m_glMatrixLoad3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoadTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixLoadTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x2fNV
  if (s_deviceConfig.m_glMatrixMult3x2fNV)
  {
    s_deviceConfig.m_glMatrixMult3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x3fNV
  if (s_deviceConfig.m_glMatrixMult3x3fNV)
  {
    s_deviceConfig.m_glMatrixMult3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMultTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixMultTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathNV (path, fillMode, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathNV (path, reference, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathGlyphIndexRangeNV (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
{
  // GL_NV_path_rendering - glPathGlyphIndexRangeNV
  if (s_deviceConfig.m_glPathGlyphIndexRangeNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexRangeNV (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexArrayNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathMemoryGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glProgramPathFragmentInputGenNV
  if (s_deviceConfig.m_glProgramPathFragmentInputGenNV)
  {
    s_deviceConfig.m_glProgramPathFragmentInputGenNV (program, location, genMode, components, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params)
{
  // GL_NV_path_rendering - glGetProgramResourcefvNV
  if (s_deviceConfig.m_glGetProgramResourcefvNV)
  {
    s_deviceConfig.m_glGetProgramResourcefvNV (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPolygonModeNV (GLenum face, GLenum mode)
{
  // GL_NV_polygon_mode - glPolygonModeNV
  if (s_deviceConfig.m_glPolygonModeNV)
  {
    s_deviceConfig.m_glPolygonModeNV (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBufferNV (GLenum mode)
{
  // GL_NV_read_buffer - glReadBufferNV
  if (s_deviceConfig.m_glReadBufferNV)
  {
    s_deviceConfig.m_glReadBufferNV (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV (target, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glNamedFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV (framebuffer, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResolveDepthValuesNV ()
{
  // GL_NV_sample_locations - glResolveDepthValuesNV
  if (s_deviceConfig.m_glResolveDepthValuesNV)
  {
    s_deviceConfig.m_glResolveDepthValuesNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportArrayvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportArrayvNV
  if (s_deviceConfig.m_glViewportArrayvNV)
  {
    s_deviceConfig.m_glViewportArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfNV (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_NV_viewport_array - glViewportIndexedfNV
  if (s_deviceConfig.m_glViewportIndexedfNV)
  {
    s_deviceConfig.m_glViewportIndexedfNV (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportIndexedfvNV
  if (s_deviceConfig.m_glViewportIndexedfvNV)
  {
    s_deviceConfig.m_glViewportIndexedfvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorArrayvNV (GLuint first, GLsizei count, const GLint * v)
{
  // GL_NV_viewport_array - glScissorArrayvNV
  if (s_deviceConfig.m_glScissorArrayvNV)
  {
    s_deviceConfig.m_glScissorArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedNV (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_NV_viewport_array - glScissorIndexedNV
  if (s_deviceConfig.m_glScissorIndexedNV)
  {
    s_deviceConfig.m_glScissorIndexedNV (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedvNV (GLuint index, const GLint * v)
{
  // GL_NV_viewport_array - glScissorIndexedvNV
  if (s_deviceConfig.m_glScissorIndexedvNV)
  {
    s_deviceConfig.m_glScissorIndexedvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeArrayfvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glDepthRangeArrayfvNV
  if (s_deviceConfig.m_glDepthRangeArrayfvNV)
  {
    s_deviceConfig.m_glDepthRangeArrayfvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeIndexedfNV (GLuint index, GLfloat n, GLfloat f)
{
  // GL_NV_viewport_array - glDepthRangeIndexedfNV
  if (s_deviceConfig.m_glDepthRangeIndexedfNV)
  {
    s_deviceConfig.m_glDepthRangeIndexedfNV (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloati_vNV (GLenum target, GLuint index, GLfloat * data)
{
  // GL_NV_viewport_array - glGetFloati_vNV
  if (s_deviceConfig.m_glGetFloati_vNV)
  {
    s_deviceConfig.m_glGetFloati_vNV (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glEnableiNV
  if (s_deviceConfig.m_glEnableiNV)
  {
    s_deviceConfig.m_glEnableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glDisableiNV
  if (s_deviceConfig.m_glDisableiNV)
  {
    s_deviceConfig.m_glDisableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glIsEnablediNV
  if (s_deviceConfig.m_glIsEnablediNV)
  {
    return s_deviceConfig.m_glIsEnablediNV (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEGLImageTargetTexture2DOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetTexture2DOES
  if (s_deviceConfig.m_glEGLImageTargetTexture2DOES)
  {
    s_deviceConfig.m_glEGLImageTargetTexture2DOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEGLImageTargetRenderbufferStorageOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetRenderbufferStorageOES
  if (s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES)
  {
    s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubDataOES (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_OES_copy_image - glCopyImageSubDataOES
  if (s_deviceConfig.m_glCopyImageSubDataOES)
  {
    s_deviceConfig.m_glCopyImageSubDataOES (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glEnableiOES
  if (s_deviceConfig.m_glEnableiOES)
  {
    s_deviceConfig.m_glEnableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glDisableiOES
  if (s_deviceConfig.m_glDisableiOES)
  {
    s_deviceConfig.m_glDisableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiOES (GLuint buf, GLenum mode)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationiOES
  if (s_deviceConfig.m_glBlendEquationiOES)
  {
    s_deviceConfig.m_glBlendEquationiOES (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiOES (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationSeparateiOES
  if (s_deviceConfig.m_glBlendEquationSeparateiOES)
  {
    s_deviceConfig.m_glBlendEquationSeparateiOES (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciOES (GLuint buf, GLenum src, GLenum dst)
{
  // GL_OES_draw_buffers_indexed - glBlendFunciOES
  if (s_deviceConfig.m_glBlendFunciOES)
  {
    s_deviceConfig.m_glBlendFunciOES (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiOES (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendFuncSeparateiOES
  if (s_deviceConfig.m_glBlendFuncSeparateiOES)
  {
    s_deviceConfig.m_glBlendFuncSeparateiOES (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMaskiOES (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_OES_draw_buffers_indexed - glColorMaskiOES
  if (s_deviceConfig.m_glColorMaskiOES)
  {
    s_deviceConfig.m_glColorMaskiOES (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glIsEnablediOES
  if (s_deviceConfig.m_glIsEnablediOES)
  {
    return s_deviceConfig.m_glIsEnablediOES (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsBaseVertexOES
  if (s_deviceConfig.m_glDrawElementsBaseVertexOES)
  {
    s_deviceConfig.m_glDrawElementsBaseVertexOES (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertexOES (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawRangeElementsBaseVertexOES
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertexOES)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertexOES (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexOES
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertexOES (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_OES_draw_elements_base_vertex - glMultiDrawElementsBaseVertexOES
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertexOES)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertexOES (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureOES (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_OES_geometry_shader - glFramebufferTextureOES
  if (s_deviceConfig.m_glFramebufferTextureOES)
  {
    s_deviceConfig.m_glFramebufferTextureOES (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinaryOES (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_OES_get_program_binary - glGetProgramBinaryOES
  if (s_deviceConfig.m_glGetProgramBinaryOES)
  {
    s_deviceConfig.m_glGetProgramBinaryOES (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinaryOES (GLuint program, GLenum binaryFormat, const void * binary, GLint length)
{
  // GL_OES_get_program_binary - glProgramBinaryOES
  if (s_deviceConfig.m_glProgramBinaryOES)
  {
    s_deviceConfig.m_glProgramBinaryOES (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferOES (GLenum target, GLenum access)
{
  // GL_OES_mapbuffer - glMapBufferOES
  if (s_deviceConfig.m_glMapBufferOES)
  {
    return s_deviceConfig.m_glMapBufferOES (target, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapBufferOES (GLenum target)
{
  // GL_OES_mapbuffer - glUnmapBufferOES
  if (s_deviceConfig.m_glUnmapBufferOES)
  {
    return s_deviceConfig.m_glUnmapBufferOES (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferPointervOES (GLenum target, GLenum pname, void ** params)
{
  // GL_OES_mapbuffer - glGetBufferPointervOES
  if (s_deviceConfig.m_glGetBufferPointervOES)
  {
    s_deviceConfig.m_glGetBufferPointervOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPrimitiveBoundingBoxOES (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_OES_primitive_bounding_box - glPrimitiveBoundingBoxOES
  if (s_deviceConfig.m_glPrimitiveBoundingBoxOES)
  {
    s_deviceConfig.m_glPrimitiveBoundingBoxOES (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMinSampleShadingOES (GLfloat value)
{
  // GL_OES_sample_shading - glMinSampleShadingOES
  if (s_deviceConfig.m_glMinSampleShadingOES)
  {
    s_deviceConfig.m_glMinSampleShadingOES (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteriOES (GLenum pname, GLint value)
{
  // GL_OES_tessellation_shader - glPatchParameteriOES
  if (s_deviceConfig.m_glPatchParameteriOES)
  {
    s_deviceConfig.m_glPatchParameteriOES (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexImage3DOES
  if (s_deviceConfig.m_glTexImage3DOES)
  {
    s_deviceConfig.m_glTexImage3DOES (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexSubImage3DOES
  if (s_deviceConfig.m_glTexSubImage3DOES)
  {
    s_deviceConfig.m_glTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_OES_texture_3D - glCopyTexSubImage3DOES
  if (s_deviceConfig.m_glCopyTexSubImage3DOES)
  {
    s_deviceConfig.m_glCopyTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexImage3DOES
  if (s_deviceConfig.m_glCompressedTexImage3DOES)
  {
    s_deviceConfig.m_glCompressedTexImage3DOES (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexSubImage3DOES
  if (s_deviceConfig.m_glCompressedTexSubImage3DOES)
  {
    s_deviceConfig.m_glCompressedTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture3DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_OES_texture_3D - glFramebufferTexture3DOES
  if (s_deviceConfig.m_glFramebufferTexture3DOES)
  {
    s_deviceConfig.m_glFramebufferTexture3DOES (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIivOES (GLenum target, GLenum pname, const GLint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIivOES
  if (s_deviceConfig.m_glTexParameterIivOES)
  {
    s_deviceConfig.m_glTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIuivOES (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIuivOES
  if (s_deviceConfig.m_glTexParameterIuivOES)
  {
    s_deviceConfig.m_glTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIivOES (GLenum target, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIivOES
  if (s_deviceConfig.m_glGetTexParameterIivOES)
  {
    s_deviceConfig.m_glGetTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIuivOES (GLenum target, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIuivOES
  if (s_deviceConfig.m_glGetTexParameterIuivOES)
  {
    s_deviceConfig.m_glGetTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIivOES (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIivOES
  if (s_deviceConfig.m_glSamplerParameterIivOES)
  {
    s_deviceConfig.m_glSamplerParameterIivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuivOES (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIuivOES
  if (s_deviceConfig.m_glSamplerParameterIuivOES)
  {
    s_deviceConfig.m_glSamplerParameterIuivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIivOES (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIivOES
  if (s_deviceConfig.m_glGetSamplerParameterIivOES)
  {
    s_deviceConfig.m_glGetSamplerParameterIivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuivOES (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIuivOES
  if (s_deviceConfig.m_glGetSamplerParameterIuivOES)
  {
    s_deviceConfig.m_glGetSamplerParameterIuivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferOES (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_OES_texture_buffer - glTexBufferOES
  if (s_deviceConfig.m_glTexBufferOES)
  {
    s_deviceConfig.m_glTexBufferOES (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRangeOES (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_OES_texture_buffer - glTexBufferRangeOES
  if (s_deviceConfig.m_glTexBufferRangeOES)
  {
    s_deviceConfig.m_glTexBufferRangeOES (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DMultisampleOES (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_OES_texture_storage_multisample_2d_array - glTexStorage3DMultisampleOES
  if (s_deviceConfig.m_glTexStorage3DMultisampleOES)
  {
    s_deviceConfig.m_glTexStorage3DMultisampleOES (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureViewOES (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_OES_texture_view - glTextureViewOES
  if (s_deviceConfig.m_glTextureViewOES)
  {
    s_deviceConfig.m_glTextureViewOES (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glBindVertexArrayOES
  if (s_deviceConfig.m_glBindVertexArrayOES)
  {
    s_deviceConfig.m_glBindVertexArrayOES (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArraysOES (GLsizei n, const GLuint * arrays)
{
  // GL_OES_vertex_array_object - glDeleteVertexArraysOES
  if (s_deviceConfig.m_glDeleteVertexArraysOES)
  {
    s_deviceConfig.m_glDeleteVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArraysOES (GLsizei n, GLuint * arrays)
{
  // GL_OES_vertex_array_object - glGenVertexArraysOES
  if (s_deviceConfig.m_glGenVertexArraysOES)
  {
    s_deviceConfig.m_glGenVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glIsVertexArrayOES
  if (s_deviceConfig.m_glIsVertexArrayOES)
  {
    return s_deviceConfig.m_glIsVertexArrayOES (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
{
  // GL_OVR_multiview - glFramebufferTextureMultiviewOVR
  if (s_deviceConfig.m_glFramebufferTextureMultiviewOVR)
  {
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR (target, attachment, texture, level, baseViewIndex, numViews);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glAlphaFuncQCOM (GLenum func, GLclampf ref)
{
  // GL_QCOM_alpha_test - glAlphaFuncQCOM
  if (s_deviceConfig.m_glAlphaFuncQCOM)
  {
    s_deviceConfig.m_glAlphaFuncQCOM (func, ref);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDriverControlsQCOM (GLint * num, GLsizei size, GLuint * driverControls)
{
  // GL_QCOM_driver_control - glGetDriverControlsQCOM
  if (s_deviceConfig.m_glGetDriverControlsQCOM)
  {
    s_deviceConfig.m_glGetDriverControlsQCOM (num, size, driverControls);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDriverControlStringQCOM (GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString)
{
  // GL_QCOM_driver_control - glGetDriverControlStringQCOM
  if (s_deviceConfig.m_glGetDriverControlStringQCOM)
  {
    s_deviceConfig.m_glGetDriverControlStringQCOM (driverControl, bufSize, length, driverControlString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glEnableDriverControlQCOM
  if (s_deviceConfig.m_glEnableDriverControlQCOM)
  {
    s_deviceConfig.m_glEnableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glDisableDriverControlQCOM
  if (s_deviceConfig.m_glDisableDriverControlQCOM)
  {
    s_deviceConfig.m_glDisableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexturesQCOM (GLuint * textures, GLint maxTextures, GLint * numTextures)
{
  // GL_QCOM_extended_get - glExtGetTexturesQCOM
  if (s_deviceConfig.m_glExtGetTexturesQCOM)
  {
    s_deviceConfig.m_glExtGetTexturesQCOM (textures, maxTextures, numTextures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetBuffersQCOM (GLuint * buffers, GLint maxBuffers, GLint * numBuffers)
{
  // GL_QCOM_extended_get - glExtGetBuffersQCOM
  if (s_deviceConfig.m_glExtGetBuffersQCOM)
  {
    s_deviceConfig.m_glExtGetBuffersQCOM (buffers, maxBuffers, numBuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetRenderbuffersQCOM (GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers)
{
  // GL_QCOM_extended_get - glExtGetRenderbuffersQCOM
  if (s_deviceConfig.m_glExtGetRenderbuffersQCOM)
  {
    s_deviceConfig.m_glExtGetRenderbuffersQCOM (renderbuffers, maxRenderbuffers, numRenderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetFramebuffersQCOM (GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers)
{
  // GL_QCOM_extended_get - glExtGetFramebuffersQCOM
  if (s_deviceConfig.m_glExtGetFramebuffersQCOM)
  {
    s_deviceConfig.m_glExtGetFramebuffersQCOM (framebuffers, maxFramebuffers, numFramebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexLevelParameterivQCOM (GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params)
{
  // GL_QCOM_extended_get - glExtGetTexLevelParameterivQCOM
  if (s_deviceConfig.m_glExtGetTexLevelParameterivQCOM)
  {
    s_deviceConfig.m_glExtGetTexLevelParameterivQCOM (texture, face, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtTexObjectStateOverrideiQCOM (GLenum target, GLenum pname, GLint param)
{
  // GL_QCOM_extended_get - glExtTexObjectStateOverrideiQCOM
  if (s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM)
  {
    s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexSubImageQCOM (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels)
{
  // GL_QCOM_extended_get - glExtGetTexSubImageQCOM
  if (s_deviceConfig.m_glExtGetTexSubImageQCOM)
  {
    s_deviceConfig.m_glExtGetTexSubImageQCOM (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetBufferPointervQCOM (GLenum target, void ** params)
{
  // GL_QCOM_extended_get - glExtGetBufferPointervQCOM
  if (s_deviceConfig.m_glExtGetBufferPointervQCOM)
  {
    s_deviceConfig.m_glExtGetBufferPointervQCOM (target, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetShadersQCOM (GLuint * shaders, GLint maxShaders, GLint * numShaders)
{
  // GL_QCOM_extended_get2 - glExtGetShadersQCOM
  if (s_deviceConfig.m_glExtGetShadersQCOM)
  {
    s_deviceConfig.m_glExtGetShadersQCOM (shaders, maxShaders, numShaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetProgramsQCOM (GLuint * programs, GLint maxPrograms, GLint * numPrograms)
{
  // GL_QCOM_extended_get2 - glExtGetProgramsQCOM
  if (s_deviceConfig.m_glExtGetProgramsQCOM)
  {
    s_deviceConfig.m_glExtGetProgramsQCOM (programs, maxPrograms, numPrograms);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glExtIsProgramBinaryQCOM (GLuint program)
{
  // GL_QCOM_extended_get2 - glExtIsProgramBinaryQCOM
  if (s_deviceConfig.m_glExtIsProgramBinaryQCOM)
  {
    return s_deviceConfig.m_glExtIsProgramBinaryQCOM (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetProgramBinarySourceQCOM (GLuint program, GLenum shadertype, GLchar * source, GLint * length)
{
  // GL_QCOM_extended_get2 - glExtGetProgramBinarySourceQCOM
  if (s_deviceConfig.m_glExtGetProgramBinarySourceQCOM)
  {
    s_deviceConfig.m_glExtGetProgramBinarySourceQCOM (program, shadertype, source, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStartTilingQCOM (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glStartTilingQCOM
  if (s_deviceConfig.m_glStartTilingQCOM)
  {
    s_deviceConfig.m_glStartTilingQCOM (x, y, width, height, preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndTilingQCOM (GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glEndTilingQCOM
  if (s_deviceConfig.m_glEndTilingQCOM)
  {
    s_deviceConfig.m_glEndTilingQCOM (preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

glew::gles::DeviceConfig glew::gles::s_deviceConfig;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gles::Initialise ()
{
  memset (&s_deviceConfig, 0, sizeof (s_deviceConfig));

  // 
  // Determine current driver's feature reporting.
  // 

  #undef glGetString

  PFNGLGETSTRINGPROC _glGetString = (PFNGLGETSTRINGPROC) glew::GetProcAddress ("glGetString");

  const GLubyte *glVersion = _glGetString (GL_VERSION);

  const bool es20Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 2", 11) == 0);
  const bool es30Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 3", 11) == 0);
  const bool es31Supported = (strncasecmp ((const char *) glVersion, "OpenGL ES 3.1", 13) == 0);

  s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_2_0] = es20Supported;
  s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_0] = es30Supported;
  s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1] = es31Supported;

  // 
  // Evaluate extension support.
  // 

  std::unordered_set <std::string> supportedExtensions;

  const GLubyte *glExtensions = _glGetString (GL_EXTENSIONS);

  const size_t glExtensionsLen = glExtensions ? strlen ((const char *) glExtensions) : 0;

  if (glExtensionsLen)
  {
    GLubyte *thisExtStart = (GLubyte *) glExtensions;

    GLubyte *thisExtEnd = NULL;

    char thisExtBuffer [128];

    memset (thisExtBuffer, 0, sizeof (thisExtBuffer));

    do 
    {
      const char * seperator = strchr ((const char *) thisExtStart, ' ');

      if (seperator)
      {
        const size_t len = (((uintptr_t) seperator - (uintptr_t) thisExtStart) / sizeof (GLubyte));

        strncpy (thisExtBuffer, (const char *)thisExtStart, len);

        thisExtBuffer [min (len, 127)] = '\0';

        thisExtEnd = (GLubyte *) seperator + 1; // skip tab character
      }
      else
      {
        const size_t len = strlen ((const char *) thisExtStart);

        strncpy (thisExtBuffer, (const char *) thisExtStart, len);

        thisExtBuffer [min (len + 1, 127)] = '\0';

        thisExtEnd = NULL;
      }

      std::string thisExt (thisExtBuffer);

      if (supportedExtensions.find (thisExt) == supportedExtensions.end ())
      {
        supportedExtensions.insert (thisExt);
      }

      thisExtStart = thisExtEnd;
    }
    while ((thisExtStart && *thisExtStart != '\0') && (thisExtEnd && *thisExtEnd != '\0'));
  }

  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_compressed_3DC_texture] = (supportedExtensions.find ("GL_AMD_compressed_3DC_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_compressed_ATC_texture] = (supportedExtensions.find ("GL_AMD_compressed_ATC_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor] = (supportedExtensions.find ("GL_AMD_performance_monitor") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_program_binary_Z400] = (supportedExtensions.find ("GL_AMD_program_binary_Z400") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANDROID_extension_pack_es31a] = (supportedExtensions.find ("GL_ANDROID_extension_pack_es31a") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_depth_texture] = (supportedExtensions.find ("GL_ANGLE_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_blit] = (supportedExtensions.find ("GL_ANGLE_framebuffer_blit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_multisample] = (supportedExtensions.find ("GL_ANGLE_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_instanced_arrays] = (supportedExtensions.find ("GL_ANGLE_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_pack_reverse_row_order] = (supportedExtensions.find ("GL_ANGLE_pack_reverse_row_order") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_program_binary] = (supportedExtensions.find ("GL_ANGLE_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_compression_dxt3] = (supportedExtensions.find ("GL_ANGLE_texture_compression_dxt3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_compression_dxt5] = (supportedExtensions.find ("GL_ANGLE_texture_compression_dxt5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_texture_usage] = (supportedExtensions.find ("GL_ANGLE_texture_usage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_translated_shader_source] = (supportedExtensions.find ("GL_ANGLE_translated_shader_source") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_clip_distance] = (supportedExtensions.find ("GL_APPLE_clip_distance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_color_buffer_packed_float] = (supportedExtensions.find ("GL_APPLE_color_buffer_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_copy_texture_levels] = (supportedExtensions.find ("GL_APPLE_copy_texture_levels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_framebuffer_multisample] = (supportedExtensions.find ("GL_APPLE_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_rgb_422] = (supportedExtensions.find ("GL_APPLE_rgb_422") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_sync] = (supportedExtensions.find ("GL_APPLE_sync") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_format_BGRA8888] = (supportedExtensions.find ("GL_APPLE_texture_format_BGRA8888") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_max_level] = (supportedExtensions.find ("GL_APPLE_texture_max_level") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_packed_float] = (supportedExtensions.find ("GL_APPLE_texture_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_mali_program_binary] = (supportedExtensions.find ("GL_ARM_mali_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_mali_shader_binary] = (supportedExtensions.find ("GL_ARM_mali_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_rgba8] = (supportedExtensions.find ("GL_ARM_rgba8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_shader_framebuffer_fetch] = (supportedExtensions.find ("GL_ARM_shader_framebuffer_fetch") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARM_shader_framebuffer_fetch_depth_stencil] = (supportedExtensions.find ("GL_ARM_shader_framebuffer_fetch_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_DMP_program_binary] = (supportedExtensions.find ("GL_DMP_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_DMP_shader_binary] = (supportedExtensions.find ("GL_DMP_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_base_instance] = (supportedExtensions.find ("GL_EXT_base_instance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_minmax] = (supportedExtensions.find ("GL_EXT_blend_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_buffer_storage] = (supportedExtensions.find ("GL_EXT_buffer_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_color_buffer_half_float] = (supportedExtensions.find ("GL_EXT_color_buffer_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_image] = (supportedExtensions.find ("GL_EXT_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label] = (supportedExtensions.find ("GL_EXT_debug_label") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker] = (supportedExtensions.find ("GL_EXT_debug_marker") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_discard_framebuffer] = (supportedExtensions.find ("GL_EXT_discard_framebuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_disjoint_timer_query] = (supportedExtensions.find ("GL_EXT_disjoint_timer_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers] = (supportedExtensions.find ("GL_EXT_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers_indexed] = (supportedExtensions.find ("GL_EXT_draw_buffers_indexed") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_elements_base_vertex] = (supportedExtensions.find ("GL_EXT_draw_elements_base_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced] = (supportedExtensions.find ("GL_EXT_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_float_blend] = (supportedExtensions.find ("GL_EXT_float_blend") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_point_size] = (supportedExtensions.find ("GL_EXT_geometry_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader] = (supportedExtensions.find ("GL_EXT_geometry_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_shader5] = (supportedExtensions.find ("GL_EXT_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_instanced_arrays] = (supportedExtensions.find ("GL_EXT_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_map_buffer_range] = (supportedExtensions.find ("GL_EXT_map_buffer_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays] = (supportedExtensions.find ("GL_EXT_multi_draw_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_indirect] = (supportedExtensions.find ("GL_EXT_multi_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisampled_render_to_texture] = (supportedExtensions.find ("GL_EXT_multisampled_render_to_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multiview_draw_buffers] = (supportedExtensions.find ("GL_EXT_multiview_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_occlusion_query_boolean] = (supportedExtensions.find ("GL_EXT_occlusion_query_boolean") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_post_depth_coverage] = (supportedExtensions.find ("GL_EXT_post_depth_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_primitive_bounding_box] = (supportedExtensions.find ("GL_EXT_primitive_bounding_box") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pvrtc_sRGB] = (supportedExtensions.find ("GL_EXT_pvrtc_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample] = (supportedExtensions.find ("GL_EXT_raster_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_read_format_bgra] = (supportedExtensions.find ("GL_EXT_read_format_bgra") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_render_snorm] = (supportedExtensions.find ("GL_EXT_render_snorm") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_robustness] = (supportedExtensions.find ("GL_EXT_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sRGB] = (supportedExtensions.find ("GL_EXT_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sRGB_write_control] = (supportedExtensions.find ("GL_EXT_sRGB_write_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects] = (supportedExtensions.find ("GL_EXT_separate_shader_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_framebuffer_fetch] = (supportedExtensions.find ("GL_EXT_shader_framebuffer_fetch") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_implicit_conversions] = (supportedExtensions.find ("GL_EXT_shader_implicit_conversions") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_integer_mix] = (supportedExtensions.find ("GL_EXT_shader_integer_mix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_io_blocks] = (supportedExtensions.find ("GL_EXT_shader_io_blocks") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_pixel_local_storage] = (supportedExtensions.find ("GL_EXT_shader_pixel_local_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_texture_lod] = (supportedExtensions.find ("GL_EXT_shader_texture_lod") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shadow_samplers] = (supportedExtensions.find ("GL_EXT_shadow_samplers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sparse_texture] = (supportedExtensions.find ("GL_EXT_sparse_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_point_size] = (supportedExtensions.find ("GL_EXT_tessellation_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_shader] = (supportedExtensions.find ("GL_EXT_tessellation_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_border_clamp] = (supportedExtensions.find ("GL_EXT_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer] = (supportedExtensions.find ("GL_EXT_texture_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_dxt1] = (supportedExtensions.find ("GL_EXT_texture_compression_dxt1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_s3tc] = (supportedExtensions.find ("GL_EXT_texture_compression_s3tc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_cube_map_array] = (supportedExtensions.find ("GL_EXT_texture_cube_map_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_anisotropic] = (supportedExtensions.find ("GL_EXT_texture_filter_anisotropic") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax] = (supportedExtensions.find ("GL_EXT_texture_filter_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_format_BGRA8888] = (supportedExtensions.find ("GL_EXT_texture_format_BGRA8888") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_norm16] = (supportedExtensions.find ("GL_EXT_texture_norm16") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_rg] = (supportedExtensions.find ("GL_EXT_texture_rg") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_decode] = (supportedExtensions.find ("GL_EXT_texture_sRGB_decode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_R8] = (supportedExtensions.find ("GL_EXT_texture_sRGB_R8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_RG8] = (supportedExtensions.find ("GL_EXT_texture_sRGB_RG8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage] = (supportedExtensions.find ("GL_EXT_texture_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_type_2_10_10_10_REV] = (supportedExtensions.find ("GL_EXT_texture_type_2_10_10_10_REV") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_view] = (supportedExtensions.find ("GL_EXT_texture_view") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_unpack_subimage] = (supportedExtensions.find ("GL_EXT_unpack_subimage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_YUV_target] = (supportedExtensions.find ("GL_EXT_YUV_target") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_FJ_shader_binary_GCCSO] = (supportedExtensions.find ("GL_FJ_shader_binary_GCCSO") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_multisampled_render_to_texture] = (supportedExtensions.find ("GL_IMG_multisampled_render_to_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_program_binary] = (supportedExtensions.find ("GL_IMG_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_read_format] = (supportedExtensions.find ("GL_IMG_read_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_shader_binary] = (supportedExtensions.find ("GL_IMG_shader_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_texture_compression_pvrtc] = (supportedExtensions.find ("GL_IMG_texture_compression_pvrtc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IMG_texture_compression_pvrtc2] = (supportedExtensions.find ("GL_IMG_texture_compression_pvrtc2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query] = (supportedExtensions.find ("GL_INTEL_performance_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_context_flush_control] = (supportedExtensions.find ("GL_KHR_context_flush_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug] = (supportedExtensions.find ("GL_KHR_debug") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_no_error] = (supportedExtensions.find ("GL_KHR_no_error") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robust_buffer_access_behavior] = (supportedExtensions.find ("GL_KHR_robust_buffer_access_behavior") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness] = (supportedExtensions.find ("GL_KHR_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_hdr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_hdr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_ldr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_ldr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture] = (supportedExtensions.find ("GL_NV_bindless_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced] = (supportedExtensions.find ("GL_NV_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_NV_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render] = (supportedExtensions.find ("GL_NV_conditional_render") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster] = (supportedExtensions.find ("GL_NV_conservative_raster") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_buffer] = (supportedExtensions.find ("GL_NV_copy_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_coverage_sample] = (supportedExtensions.find ("GL_NV_coverage_sample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_depth_nonlinear] = (supportedExtensions.find ("GL_NV_depth_nonlinear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_buffers] = (supportedExtensions.find ("GL_NV_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_instanced] = (supportedExtensions.find ("GL_NV_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_explicit_attrib_location] = (supportedExtensions.find ("GL_NV_explicit_attrib_location") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fbo_color_attachments] = (supportedExtensions.find ("GL_NV_fbo_color_attachments") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence] = (supportedExtensions.find ("GL_NV_fence") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fill_rectangle] = (supportedExtensions.find ("GL_NV_fill_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color] = (supportedExtensions.find ("GL_NV_fragment_coverage_to_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_shader_interlock] = (supportedExtensions.find ("GL_NV_fragment_shader_interlock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_blit] = (supportedExtensions.find ("GL_NV_framebuffer_blit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples] = (supportedExtensions.find ("GL_NV_framebuffer_mixed_samples") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample] = (supportedExtensions.find ("GL_NV_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_generate_mipmap_sRGB] = (supportedExtensions.find ("GL_NV_generate_mipmap_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_shader_passthrough] = (supportedExtensions.find ("GL_NV_geometry_shader_passthrough") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_image_formats] = (supportedExtensions.find ("GL_NV_image_formats") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_instanced_arrays] = (supportedExtensions.find ("GL_NV_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query] = (supportedExtensions.find ("GL_NV_internalformat_sample_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_non_square_matrices] = (supportedExtensions.find ("GL_NV_non_square_matrices") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering] = (supportedExtensions.find ("GL_NV_path_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_polygon_mode] = (supportedExtensions.find ("GL_NV_polygon_mode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer] = (supportedExtensions.find ("GL_NV_read_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer_front] = (supportedExtensions.find ("GL_NV_read_buffer_front") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_depth] = (supportedExtensions.find ("GL_NV_read_depth") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_depth_stencil] = (supportedExtensions.find ("GL_NV_read_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_stencil] = (supportedExtensions.find ("GL_NV_read_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering_shared_edge] = (supportedExtensions.find ("GL_NV_path_rendering_shared_edge") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sRGB_formats] = (supportedExtensions.find ("GL_NV_sRGB_formats") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations] = (supportedExtensions.find ("GL_NV_sample_locations") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_mask_override_coverage] = (supportedExtensions.find ("GL_NV_sample_mask_override_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_noperspective_interpolation] = (supportedExtensions.find ("GL_NV_shader_noperspective_interpolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shadow_samplers_array] = (supportedExtensions.find ("GL_NV_shadow_samplers_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shadow_samplers_cube] = (supportedExtensions.find ("GL_NV_shadow_samplers_cube") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_border_clamp] = (supportedExtensions.find ("GL_NV_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_compression_s3tc_update] = (supportedExtensions.find ("GL_NV_texture_compression_s3tc_update") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_npot_2D_mipmap] = (supportedExtensions.find ("GL_NV_texture_npot_2D_mipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array] = (supportedExtensions.find ("GL_NV_viewport_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array2] = (supportedExtensions.find ("GL_NV_viewport_array2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image] = (supportedExtensions.find ("GL_OES_EGL_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image_external] = (supportedExtensions.find ("GL_OES_EGL_image_external") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image_external_essl3] = (supportedExtensions.find ("GL_OES_EGL_image_external_essl3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_ETC1_RGB8_sub_texture] = (supportedExtensions.find ("GL_OES_compressed_ETC1_RGB8_sub_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_ETC1_RGB8_texture] = (supportedExtensions.find ("GL_OES_compressed_ETC1_RGB8_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_paletted_texture] = (supportedExtensions.find ("GL_OES_compressed_paletted_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_copy_image] = (supportedExtensions.find ("GL_OES_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth24] = (supportedExtensions.find ("GL_OES_depth24") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth32] = (supportedExtensions.find ("GL_OES_depth32") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_depth_texture] = (supportedExtensions.find ("GL_OES_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_buffers_indexed] = (supportedExtensions.find ("GL_OES_draw_buffers_indexed") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_elements_base_vertex] = (supportedExtensions.find ("GL_OES_draw_elements_base_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_element_index_uint] = (supportedExtensions.find ("GL_OES_element_index_uint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_fbo_render_mipmap] = (supportedExtensions.find ("GL_OES_fbo_render_mipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_fragment_precision_high] = (supportedExtensions.find ("GL_OES_fragment_precision_high") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_shader] = (supportedExtensions.find ("GL_OES_geometry_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_point_size] = (supportedExtensions.find ("GL_OES_geometry_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_get_program_binary] = (supportedExtensions.find ("GL_OES_get_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_gpu_shader5] = (supportedExtensions.find ("GL_OES_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_mapbuffer] = (supportedExtensions.find ("GL_OES_mapbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_packed_depth_stencil] = (supportedExtensions.find ("GL_OES_packed_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_primitive_bounding_box] = (supportedExtensions.find ("GL_OES_primitive_bounding_box") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_required_internalformat] = (supportedExtensions.find ("GL_OES_required_internalformat") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_rgb8_rgba8] = (supportedExtensions.find ("GL_OES_rgb8_rgba8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_shading] = (supportedExtensions.find ("GL_OES_sample_shading") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_variables] = (supportedExtensions.find ("GL_OES_sample_variables") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_image_atomic] = (supportedExtensions.find ("GL_OES_shader_image_atomic") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_io_blocks] = (supportedExtensions.find ("GL_OES_shader_io_blocks") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_shader_multisample_interpolation] = (supportedExtensions.find ("GL_OES_shader_multisample_interpolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_standard_derivatives] = (supportedExtensions.find ("GL_OES_standard_derivatives") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_stencil1] = (supportedExtensions.find ("GL_OES_stencil1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_stencil4] = (supportedExtensions.find ("GL_OES_stencil4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_surfaceless_context] = (supportedExtensions.find ("GL_OES_surfaceless_context") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_shader] = (supportedExtensions.find ("GL_OES_tessellation_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_point_size] = (supportedExtensions.find ("GL_OES_tessellation_point_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_3D] = (supportedExtensions.find ("GL_OES_texture_3D") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_border_clamp] = (supportedExtensions.find ("GL_OES_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_buffer] = (supportedExtensions.find ("GL_OES_texture_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_compression_astc] = (supportedExtensions.find ("GL_OES_texture_compression_astc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_cube_map_array] = (supportedExtensions.find ("GL_OES_texture_cube_map_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_float] = (supportedExtensions.find ("GL_OES_texture_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_float_linear] = (supportedExtensions.find ("GL_OES_texture_float_linear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_half_float] = (supportedExtensions.find ("GL_OES_texture_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_half_float_linear] = (supportedExtensions.find ("GL_OES_texture_half_float_linear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_npot] = (supportedExtensions.find ("GL_OES_texture_npot") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_stencil8] = (supportedExtensions.find ("GL_OES_texture_stencil8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_storage_multisample_2d_array] = (supportedExtensions.find ("GL_OES_texture_storage_multisample_2d_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_view] = (supportedExtensions.find ("GL_OES_texture_view") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_array_object] = (supportedExtensions.find ("GL_OES_vertex_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_half_float] = (supportedExtensions.find ("GL_OES_vertex_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_type_10_10_10_2] = (supportedExtensions.find ("GL_OES_vertex_type_10_10_10_2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview] = (supportedExtensions.find ("GL_OVR_multiview") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview2] = (supportedExtensions.find ("GL_OVR_multiview2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_alpha_test] = (supportedExtensions.find ("GL_QCOM_alpha_test") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_binning_control] = (supportedExtensions.find ("GL_QCOM_binning_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_driver_control] = (supportedExtensions.find ("GL_QCOM_driver_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get] = (supportedExtensions.find ("GL_QCOM_extended_get") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get2] = (supportedExtensions.find ("GL_QCOM_extended_get2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_perfmon_global_mode] = (supportedExtensions.find ("GL_QCOM_perfmon_global_mode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_tiled_rendering] = (supportedExtensions.find ("GL_QCOM_tiled_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_writeonly_rendering] = (supportedExtensions.find ("GL_QCOM_writeonly_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_VIV_shader_binary] = (supportedExtensions.find ("GL_VIV_shader_binary") != supportedExtensions.end ());

  // GL_ES_VERSION_2_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_2_0])
  {
    #undef glActiveTexture
    #undef glAttachShader
    #undef glBindAttribLocation
    #undef glBindBuffer
    #undef glBindFramebuffer
    #undef glBindRenderbuffer
    #undef glBindTexture
    #undef glBlendColor
    #undef glBlendEquation
    #undef glBlendEquationSeparate
    #undef glBlendFunc
    #undef glBlendFuncSeparate
    #undef glBufferData
    #undef glBufferSubData
    #undef glCheckFramebufferStatus
    #undef glClear
    #undef glClearColor
    #undef glClearDepthf
    #undef glClearStencil
    #undef glColorMask
    #undef glCompileShader
    #undef glCompressedTexImage2D
    #undef glCompressedTexSubImage2D
    #undef glCopyTexImage2D
    #undef glCopyTexSubImage2D
    #undef glCreateProgram
    #undef glCreateShader
    #undef glCullFace
    #undef glDeleteBuffers
    #undef glDeleteFramebuffers
    #undef glDeleteProgram
    #undef glDeleteRenderbuffers
    #undef glDeleteShader
    #undef glDeleteTextures
    #undef glDepthFunc
    #undef glDepthMask
    #undef glDepthRangef
    #undef glDetachShader
    #undef glDisable
    #undef glDisableVertexAttribArray
    #undef glDrawArrays
    #undef glDrawElements
    #undef glEnable
    #undef glEnableVertexAttribArray
    #undef glFinish
    #undef glFlush
    #undef glFramebufferRenderbuffer
    #undef glFramebufferTexture2D
    #undef glFrontFace
    #undef glGenBuffers
    #undef glGenerateMipmap
    #undef glGenFramebuffers
    #undef glGenRenderbuffers
    #undef glGenTextures
    #undef glGetActiveAttrib
    #undef glGetActiveUniform
    #undef glGetAttachedShaders
    #undef glGetAttribLocation
    #undef glGetBooleanv
    #undef glGetBufferParameteriv
    #undef glGetError
    #undef glGetFloatv
    #undef glGetFramebufferAttachmentParameteriv
    #undef glGetIntegerv
    #undef glGetProgramiv
    #undef glGetProgramInfoLog
    #undef glGetRenderbufferParameteriv
    #undef glGetShaderiv
    #undef glGetShaderInfoLog
    #undef glGetShaderPrecisionFormat
    #undef glGetShaderSource
    #undef glGetString
    #undef glGetTexParameterfv
    #undef glGetTexParameteriv
    #undef glGetUniformfv
    #undef glGetUniformiv
    #undef glGetUniformLocation
    #undef glGetVertexAttribfv
    #undef glGetVertexAttribiv
    #undef glGetVertexAttribPointerv
    #undef glHint
    #undef glIsBuffer
    #undef glIsEnabled
    #undef glIsFramebuffer
    #undef glIsProgram
    #undef glIsRenderbuffer
    #undef glIsShader
    #undef glIsTexture
    #undef glLineWidth
    #undef glLinkProgram
    #undef glPixelStorei
    #undef glPolygonOffset
    #undef glReadPixels
    #undef glReleaseShaderCompiler
    #undef glRenderbufferStorage
    #undef glSampleCoverage
    #undef glScissor
    #undef glShaderBinary
    #undef glShaderSource
    #undef glStencilFunc
    #undef glStencilFuncSeparate
    #undef glStencilMask
    #undef glStencilMaskSeparate
    #undef glStencilOp
    #undef glStencilOpSeparate
    #undef glTexImage2D
    #undef glTexParameterf
    #undef glTexParameterfv
    #undef glTexParameteri
    #undef glTexParameteriv
    #undef glTexSubImage2D
    #undef glUniform1f
    #undef glUniform1fv
    #undef glUniform1i
    #undef glUniform1iv
    #undef glUniform2f
    #undef glUniform2fv
    #undef glUniform2i
    #undef glUniform2iv
    #undef glUniform3f
    #undef glUniform3fv
    #undef glUniform3i
    #undef glUniform3iv
    #undef glUniform4f
    #undef glUniform4fv
    #undef glUniform4i
    #undef glUniform4iv
    #undef glUniformMatrix2fv
    #undef glUniformMatrix3fv
    #undef glUniformMatrix4fv
    #undef glUseProgram
    #undef glValidateProgram
    #undef glVertexAttrib1f
    #undef glVertexAttrib1fv
    #undef glVertexAttrib2f
    #undef glVertexAttrib2fv
    #undef glVertexAttrib3f
    #undef glVertexAttrib3fv
    #undef glVertexAttrib4f
    #undef glVertexAttrib4fv
    #undef glVertexAttribPointer
    #undef glViewport
    s_deviceConfig.m_glActiveTexture = (PFNGLACTIVETEXTUREPROC) glew::GetProcAddress ("glActiveTexture");
    s_deviceConfig.m_glAttachShader = (PFNGLATTACHSHADERPROC) glew::GetProcAddress ("glAttachShader");
    s_deviceConfig.m_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) glew::GetProcAddress ("glBindAttribLocation");
    s_deviceConfig.m_glBindBuffer = (PFNGLBINDBUFFERPROC) glew::GetProcAddress ("glBindBuffer");
    s_deviceConfig.m_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) glew::GetProcAddress ("glBindFramebuffer");
    s_deviceConfig.m_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) glew::GetProcAddress ("glBindRenderbuffer");
    s_deviceConfig.m_glBindTexture = (PFNGLBINDTEXTUREPROC) glew::GetProcAddress ("glBindTexture");
    s_deviceConfig.m_glBlendColor = (PFNGLBLENDCOLORPROC) glew::GetProcAddress ("glBlendColor");
    s_deviceConfig.m_glBlendEquation = (PFNGLBLENDEQUATIONPROC) glew::GetProcAddress ("glBlendEquation");
    s_deviceConfig.m_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) glew::GetProcAddress ("glBlendEquationSeparate");
    s_deviceConfig.m_glBlendFunc = (PFNGLBLENDFUNCPROC) glew::GetProcAddress ("glBlendFunc");
    s_deviceConfig.m_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) glew::GetProcAddress ("glBlendFuncSeparate");
    s_deviceConfig.m_glBufferData = (PFNGLBUFFERDATAPROC) glew::GetProcAddress ("glBufferData");
    s_deviceConfig.m_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) glew::GetProcAddress ("glBufferSubData");
    s_deviceConfig.m_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) glew::GetProcAddress ("glCheckFramebufferStatus");
    s_deviceConfig.m_glClear = (PFNGLCLEARPROC) glew::GetProcAddress ("glClear");
    s_deviceConfig.m_glClearColor = (PFNGLCLEARCOLORPROC) glew::GetProcAddress ("glClearColor");
    s_deviceConfig.m_glClearDepthf = (PFNGLCLEARDEPTHFPROC) glew::GetProcAddress ("glClearDepthf");
    s_deviceConfig.m_glClearStencil = (PFNGLCLEARSTENCILPROC) glew::GetProcAddress ("glClearStencil");
    s_deviceConfig.m_glColorMask = (PFNGLCOLORMASKPROC) glew::GetProcAddress ("glColorMask");
    s_deviceConfig.m_glCompileShader = (PFNGLCOMPILESHADERPROC) glew::GetProcAddress ("glCompileShader");
    s_deviceConfig.m_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) glew::GetProcAddress ("glCompressedTexImage2D");
    s_deviceConfig.m_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) glew::GetProcAddress ("glCompressedTexSubImage2D");
    s_deviceConfig.m_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) glew::GetProcAddress ("glCopyTexImage2D");
    s_deviceConfig.m_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) glew::GetProcAddress ("glCopyTexSubImage2D");
    s_deviceConfig.m_glCreateProgram = (PFNGLCREATEPROGRAMPROC) glew::GetProcAddress ("glCreateProgram");
    s_deviceConfig.m_glCreateShader = (PFNGLCREATESHADERPROC) glew::GetProcAddress ("glCreateShader");
    s_deviceConfig.m_glCullFace = (PFNGLCULLFACEPROC) glew::GetProcAddress ("glCullFace");
    s_deviceConfig.m_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) glew::GetProcAddress ("glDeleteBuffers");
    s_deviceConfig.m_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) glew::GetProcAddress ("glDeleteFramebuffers");
    s_deviceConfig.m_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) glew::GetProcAddress ("glDeleteProgram");
    s_deviceConfig.m_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) glew::GetProcAddress ("glDeleteRenderbuffers");
    s_deviceConfig.m_glDeleteShader = (PFNGLDELETESHADERPROC) glew::GetProcAddress ("glDeleteShader");
    s_deviceConfig.m_glDeleteTextures = (PFNGLDELETETEXTURESPROC) glew::GetProcAddress ("glDeleteTextures");
    s_deviceConfig.m_glDepthFunc = (PFNGLDEPTHFUNCPROC) glew::GetProcAddress ("glDepthFunc");
    s_deviceConfig.m_glDepthMask = (PFNGLDEPTHMASKPROC) glew::GetProcAddress ("glDepthMask");
    s_deviceConfig.m_glDepthRangef = (PFNGLDEPTHRANGEFPROC) glew::GetProcAddress ("glDepthRangef");
    s_deviceConfig.m_glDetachShader = (PFNGLDETACHSHADERPROC) glew::GetProcAddress ("glDetachShader");
    s_deviceConfig.m_glDisable = (PFNGLDISABLEPROC) glew::GetProcAddress ("glDisable");
    s_deviceConfig.m_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) glew::GetProcAddress ("glDisableVertexAttribArray");
    s_deviceConfig.m_glDrawArrays = (PFNGLDRAWARRAYSPROC) glew::GetProcAddress ("glDrawArrays");
    s_deviceConfig.m_glDrawElements = (PFNGLDRAWELEMENTSPROC) glew::GetProcAddress ("glDrawElements");
    s_deviceConfig.m_glEnable = (PFNGLENABLEPROC) glew::GetProcAddress ("glEnable");
    s_deviceConfig.m_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) glew::GetProcAddress ("glEnableVertexAttribArray");
    s_deviceConfig.m_glFinish = (PFNGLFINISHPROC) glew::GetProcAddress ("glFinish");
    s_deviceConfig.m_glFlush = (PFNGLFLUSHPROC) glew::GetProcAddress ("glFlush");
    s_deviceConfig.m_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) glew::GetProcAddress ("glFramebufferRenderbuffer");
    s_deviceConfig.m_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) glew::GetProcAddress ("glFramebufferTexture2D");
    s_deviceConfig.m_glFrontFace = (PFNGLFRONTFACEPROC) glew::GetProcAddress ("glFrontFace");
    s_deviceConfig.m_glGenBuffers = (PFNGLGENBUFFERSPROC) glew::GetProcAddress ("glGenBuffers");
    s_deviceConfig.m_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) glew::GetProcAddress ("glGenerateMipmap");
    s_deviceConfig.m_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) glew::GetProcAddress ("glGenFramebuffers");
    s_deviceConfig.m_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) glew::GetProcAddress ("glGenRenderbuffers");
    s_deviceConfig.m_glGenTextures = (PFNGLGENTEXTURESPROC) glew::GetProcAddress ("glGenTextures");
    s_deviceConfig.m_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) glew::GetProcAddress ("glGetActiveAttrib");
    s_deviceConfig.m_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) glew::GetProcAddress ("glGetActiveUniform");
    s_deviceConfig.m_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) glew::GetProcAddress ("glGetAttachedShaders");
    s_deviceConfig.m_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) glew::GetProcAddress ("glGetAttribLocation");
    s_deviceConfig.m_glGetBooleanv = (PFNGLGETBOOLEANVPROC) glew::GetProcAddress ("glGetBooleanv");
    s_deviceConfig.m_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) glew::GetProcAddress ("glGetBufferParameteriv");
    s_deviceConfig.m_glGetError = (PFNGLGETERRORPROC) glew::GetProcAddress ("glGetError");
    s_deviceConfig.m_glGetFloatv = (PFNGLGETFLOATVPROC) glew::GetProcAddress ("glGetFloatv");
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glew::GetProcAddress ("glGetFramebufferAttachmentParameteriv");
    s_deviceConfig.m_glGetIntegerv = (PFNGLGETINTEGERVPROC) glew::GetProcAddress ("glGetIntegerv");
    s_deviceConfig.m_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) glew::GetProcAddress ("glGetProgramiv");
    s_deviceConfig.m_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) glew::GetProcAddress ("glGetProgramInfoLog");
    s_deviceConfig.m_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) glew::GetProcAddress ("glGetRenderbufferParameteriv");
    s_deviceConfig.m_glGetShaderiv = (PFNGLGETSHADERIVPROC) glew::GetProcAddress ("glGetShaderiv");
    s_deviceConfig.m_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) glew::GetProcAddress ("glGetShaderInfoLog");
    s_deviceConfig.m_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) glew::GetProcAddress ("glGetShaderPrecisionFormat");
    s_deviceConfig.m_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) glew::GetProcAddress ("glGetShaderSource");
    s_deviceConfig.m_glGetString = (PFNGLGETSTRINGPROC) glew::GetProcAddress ("glGetString");
    s_deviceConfig.m_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) glew::GetProcAddress ("glGetTexParameterfv");
    s_deviceConfig.m_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) glew::GetProcAddress ("glGetTexParameteriv");
    s_deviceConfig.m_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) glew::GetProcAddress ("glGetUniformfv");
    s_deviceConfig.m_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) glew::GetProcAddress ("glGetUniformiv");
    s_deviceConfig.m_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) glew::GetProcAddress ("glGetUniformLocation");
    s_deviceConfig.m_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) glew::GetProcAddress ("glGetVertexAttribfv");
    s_deviceConfig.m_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) glew::GetProcAddress ("glGetVertexAttribiv");
    s_deviceConfig.m_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) glew::GetProcAddress ("glGetVertexAttribPointerv");
    s_deviceConfig.m_glHint = (PFNGLHINTPROC) glew::GetProcAddress ("glHint");
    s_deviceConfig.m_glIsBuffer = (PFNGLISBUFFERPROC) glew::GetProcAddress ("glIsBuffer");
    s_deviceConfig.m_glIsEnabled = (PFNGLISENABLEDPROC) glew::GetProcAddress ("glIsEnabled");
    s_deviceConfig.m_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) glew::GetProcAddress ("glIsFramebuffer");
    s_deviceConfig.m_glIsProgram = (PFNGLISPROGRAMPROC) glew::GetProcAddress ("glIsProgram");
    s_deviceConfig.m_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) glew::GetProcAddress ("glIsRenderbuffer");
    s_deviceConfig.m_glIsShader = (PFNGLISSHADERPROC) glew::GetProcAddress ("glIsShader");
    s_deviceConfig.m_glIsTexture = (PFNGLISTEXTUREPROC) glew::GetProcAddress ("glIsTexture");
    s_deviceConfig.m_glLineWidth = (PFNGLLINEWIDTHPROC) glew::GetProcAddress ("glLineWidth");
    s_deviceConfig.m_glLinkProgram = (PFNGLLINKPROGRAMPROC) glew::GetProcAddress ("glLinkProgram");
    s_deviceConfig.m_glPixelStorei = (PFNGLPIXELSTOREIPROC) glew::GetProcAddress ("glPixelStorei");
    s_deviceConfig.m_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) glew::GetProcAddress ("glPolygonOffset");
    s_deviceConfig.m_glReadPixels = (PFNGLREADPIXELSPROC) glew::GetProcAddress ("glReadPixels");
    s_deviceConfig.m_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) glew::GetProcAddress ("glReleaseShaderCompiler");
    s_deviceConfig.m_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) glew::GetProcAddress ("glRenderbufferStorage");
    s_deviceConfig.m_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) glew::GetProcAddress ("glSampleCoverage");
    s_deviceConfig.m_glScissor = (PFNGLSCISSORPROC) glew::GetProcAddress ("glScissor");
    s_deviceConfig.m_glShaderBinary = (PFNGLSHADERBINARYPROC) glew::GetProcAddress ("glShaderBinary");
    s_deviceConfig.m_glShaderSource = (PFNGLSHADERSOURCEPROC) glew::GetProcAddress ("glShaderSource");
    s_deviceConfig.m_glStencilFunc = (PFNGLSTENCILFUNCPROC) glew::GetProcAddress ("glStencilFunc");
    s_deviceConfig.m_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) glew::GetProcAddress ("glStencilFuncSeparate");
    s_deviceConfig.m_glStencilMask = (PFNGLSTENCILMASKPROC) glew::GetProcAddress ("glStencilMask");
    s_deviceConfig.m_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) glew::GetProcAddress ("glStencilMaskSeparate");
    s_deviceConfig.m_glStencilOp = (PFNGLSTENCILOPPROC) glew::GetProcAddress ("glStencilOp");
    s_deviceConfig.m_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) glew::GetProcAddress ("glStencilOpSeparate");
    s_deviceConfig.m_glTexImage2D = (PFNGLTEXIMAGE2DPROC) glew::GetProcAddress ("glTexImage2D");
    s_deviceConfig.m_glTexParameterf = (PFNGLTEXPARAMETERFPROC) glew::GetProcAddress ("glTexParameterf");
    s_deviceConfig.m_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) glew::GetProcAddress ("glTexParameterfv");
    s_deviceConfig.m_glTexParameteri = (PFNGLTEXPARAMETERIPROC) glew::GetProcAddress ("glTexParameteri");
    s_deviceConfig.m_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) glew::GetProcAddress ("glTexParameteriv");
    s_deviceConfig.m_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) glew::GetProcAddress ("glTexSubImage2D");
    s_deviceConfig.m_glUniform1f = (PFNGLUNIFORM1FPROC) glew::GetProcAddress ("glUniform1f");
    s_deviceConfig.m_glUniform1fv = (PFNGLUNIFORM1FVPROC) glew::GetProcAddress ("glUniform1fv");
    s_deviceConfig.m_glUniform1i = (PFNGLUNIFORM1IPROC) glew::GetProcAddress ("glUniform1i");
    s_deviceConfig.m_glUniform1iv = (PFNGLUNIFORM1IVPROC) glew::GetProcAddress ("glUniform1iv");
    s_deviceConfig.m_glUniform2f = (PFNGLUNIFORM2FPROC) glew::GetProcAddress ("glUniform2f");
    s_deviceConfig.m_glUniform2fv = (PFNGLUNIFORM2FVPROC) glew::GetProcAddress ("glUniform2fv");
    s_deviceConfig.m_glUniform2i = (PFNGLUNIFORM2IPROC) glew::GetProcAddress ("glUniform2i");
    s_deviceConfig.m_glUniform2iv = (PFNGLUNIFORM2IVPROC) glew::GetProcAddress ("glUniform2iv");
    s_deviceConfig.m_glUniform3f = (PFNGLUNIFORM3FPROC) glew::GetProcAddress ("glUniform3f");
    s_deviceConfig.m_glUniform3fv = (PFNGLUNIFORM3FVPROC) glew::GetProcAddress ("glUniform3fv");
    s_deviceConfig.m_glUniform3i = (PFNGLUNIFORM3IPROC) glew::GetProcAddress ("glUniform3i");
    s_deviceConfig.m_glUniform3iv = (PFNGLUNIFORM3IVPROC) glew::GetProcAddress ("glUniform3iv");
    s_deviceConfig.m_glUniform4f = (PFNGLUNIFORM4FPROC) glew::GetProcAddress ("glUniform4f");
    s_deviceConfig.m_glUniform4fv = (PFNGLUNIFORM4FVPROC) glew::GetProcAddress ("glUniform4fv");
    s_deviceConfig.m_glUniform4i = (PFNGLUNIFORM4IPROC) glew::GetProcAddress ("glUniform4i");
    s_deviceConfig.m_glUniform4iv = (PFNGLUNIFORM4IVPROC) glew::GetProcAddress ("glUniform4iv");
    s_deviceConfig.m_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) glew::GetProcAddress ("glUniformMatrix2fv");
    s_deviceConfig.m_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) glew::GetProcAddress ("glUniformMatrix3fv");
    s_deviceConfig.m_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) glew::GetProcAddress ("glUniformMatrix4fv");
    s_deviceConfig.m_glUseProgram = (PFNGLUSEPROGRAMPROC) glew::GetProcAddress ("glUseProgram");
    s_deviceConfig.m_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) glew::GetProcAddress ("glValidateProgram");
    s_deviceConfig.m_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) glew::GetProcAddress ("glVertexAttrib1f");
    s_deviceConfig.m_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) glew::GetProcAddress ("glVertexAttrib1fv");
    s_deviceConfig.m_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) glew::GetProcAddress ("glVertexAttrib2f");
    s_deviceConfig.m_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) glew::GetProcAddress ("glVertexAttrib2fv");
    s_deviceConfig.m_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) glew::GetProcAddress ("glVertexAttrib3f");
    s_deviceConfig.m_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) glew::GetProcAddress ("glVertexAttrib3fv");
    s_deviceConfig.m_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) glew::GetProcAddress ("glVertexAttrib4f");
    s_deviceConfig.m_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) glew::GetProcAddress ("glVertexAttrib4fv");
    s_deviceConfig.m_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) glew::GetProcAddress ("glVertexAttribPointer");
    s_deviceConfig.m_glViewport = (PFNGLVIEWPORTPROC) glew::GetProcAddress ("glViewport");
  }

  // GL_ES_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_0])
  {
    #undef glReadBuffer
    #undef glDrawRangeElements
    #undef glTexImage3D
    #undef glTexSubImage3D
    #undef glCopyTexSubImage3D
    #undef glCompressedTexImage3D
    #undef glCompressedTexSubImage3D
    #undef glGenQueries
    #undef glDeleteQueries
    #undef glIsQuery
    #undef glBeginQuery
    #undef glEndQuery
    #undef glGetQueryiv
    #undef glGetQueryObjectuiv
    #undef glUnmapBuffer
    #undef glGetBufferPointerv
    #undef glDrawBuffers
    #undef glUniformMatrix2x3fv
    #undef glUniformMatrix3x2fv
    #undef glUniformMatrix2x4fv
    #undef glUniformMatrix4x2fv
    #undef glUniformMatrix3x4fv
    #undef glUniformMatrix4x3fv
    #undef glBlitFramebuffer
    #undef glRenderbufferStorageMultisample
    #undef glFramebufferTextureLayer
    #undef glMapBufferRange
    #undef glFlushMappedBufferRange
    #undef glBindVertexArray
    #undef glDeleteVertexArrays
    #undef glGenVertexArrays
    #undef glIsVertexArray
    #undef glGetIntegeri_v
    #undef glBeginTransformFeedback
    #undef glEndTransformFeedback
    #undef glBindBufferRange
    #undef glBindBufferBase
    #undef glTransformFeedbackVaryings
    #undef glGetTransformFeedbackVarying
    #undef glVertexAttribIPointer
    #undef glGetVertexAttribIiv
    #undef glGetVertexAttribIuiv
    #undef glVertexAttribI4i
    #undef glVertexAttribI4ui
    #undef glVertexAttribI4iv
    #undef glVertexAttribI4uiv
    #undef glGetUniformuiv
    #undef glGetFragDataLocation
    #undef glUniform1ui
    #undef glUniform2ui
    #undef glUniform3ui
    #undef glUniform4ui
    #undef glUniform1uiv
    #undef glUniform2uiv
    #undef glUniform3uiv
    #undef glUniform4uiv
    #undef glClearBufferiv
    #undef glClearBufferuiv
    #undef glClearBufferfv
    #undef glClearBufferfi
    #undef glGetStringi
    #undef glCopyBufferSubData
    #undef glGetUniformIndices
    #undef glGetActiveUniformsiv
    #undef glGetUniformBlockIndex
    #undef glGetActiveUniformBlockiv
    #undef glGetActiveUniformBlockName
    #undef glUniformBlockBinding
    #undef glDrawArraysInstanced
    #undef glDrawElementsInstanced
    #undef glFenceSync
    #undef glIsSync
    #undef glDeleteSync
    #undef glClientWaitSync
    #undef glWaitSync
    #undef glGetInteger64v
    #undef glGetSynciv
    #undef glGetInteger64i_v
    #undef glGetBufferParameteri64v
    #undef glGenSamplers
    #undef glDeleteSamplers
    #undef glIsSampler
    #undef glBindSampler
    #undef glSamplerParameteri
    #undef glSamplerParameteriv
    #undef glSamplerParameterf
    #undef glSamplerParameterfv
    #undef glGetSamplerParameteriv
    #undef glGetSamplerParameterfv
    #undef glVertexAttribDivisor
    #undef glBindTransformFeedback
    #undef glDeleteTransformFeedbacks
    #undef glGenTransformFeedbacks
    #undef glIsTransformFeedback
    #undef glPauseTransformFeedback
    #undef glResumeTransformFeedback
    #undef glGetProgramBinary
    #undef glProgramBinary
    #undef glProgramParameteri
    #undef glInvalidateFramebuffer
    #undef glInvalidateSubFramebuffer
    #undef glTexStorage2D
    #undef glTexStorage3D
    #undef glGetInternalformativ
    s_deviceConfig.m_glReadBuffer = (PFNGLREADBUFFERPROC) glew::GetProcAddress ("glReadBuffer");
    s_deviceConfig.m_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) glew::GetProcAddress ("glDrawRangeElements");
    s_deviceConfig.m_glTexImage3D = (PFNGLTEXIMAGE3DPROC) glew::GetProcAddress ("glTexImage3D");
    s_deviceConfig.m_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) glew::GetProcAddress ("glTexSubImage3D");
    s_deviceConfig.m_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) glew::GetProcAddress ("glCopyTexSubImage3D");
    s_deviceConfig.m_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) glew::GetProcAddress ("glCompressedTexImage3D");
    s_deviceConfig.m_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) glew::GetProcAddress ("glCompressedTexSubImage3D");
    s_deviceConfig.m_glGenQueries = (PFNGLGENQUERIESPROC) glew::GetProcAddress ("glGenQueries");
    s_deviceConfig.m_glDeleteQueries = (PFNGLDELETEQUERIESPROC) glew::GetProcAddress ("glDeleteQueries");
    s_deviceConfig.m_glIsQuery = (PFNGLISQUERYPROC) glew::GetProcAddress ("glIsQuery");
    s_deviceConfig.m_glBeginQuery = (PFNGLBEGINQUERYPROC) glew::GetProcAddress ("glBeginQuery");
    s_deviceConfig.m_glEndQuery = (PFNGLENDQUERYPROC) glew::GetProcAddress ("glEndQuery");
    s_deviceConfig.m_glGetQueryiv = (PFNGLGETQUERYIVPROC) glew::GetProcAddress ("glGetQueryiv");
    s_deviceConfig.m_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) glew::GetProcAddress ("glGetQueryObjectuiv");
    s_deviceConfig.m_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) glew::GetProcAddress ("glUnmapBuffer");
    s_deviceConfig.m_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) glew::GetProcAddress ("glGetBufferPointerv");
    s_deviceConfig.m_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) glew::GetProcAddress ("glDrawBuffers");
    s_deviceConfig.m_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) glew::GetProcAddress ("glUniformMatrix2x3fv");
    s_deviceConfig.m_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) glew::GetProcAddress ("glUniformMatrix3x2fv");
    s_deviceConfig.m_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) glew::GetProcAddress ("glUniformMatrix2x4fv");
    s_deviceConfig.m_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) glew::GetProcAddress ("glUniformMatrix4x2fv");
    s_deviceConfig.m_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) glew::GetProcAddress ("glUniformMatrix3x4fv");
    s_deviceConfig.m_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) glew::GetProcAddress ("glUniformMatrix4x3fv");
    s_deviceConfig.m_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) glew::GetProcAddress ("glBlitFramebuffer");
    s_deviceConfig.m_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) glew::GetProcAddress ("glRenderbufferStorageMultisample");
    s_deviceConfig.m_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) glew::GetProcAddress ("glFramebufferTextureLayer");
    s_deviceConfig.m_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) glew::GetProcAddress ("glMapBufferRange");
    s_deviceConfig.m_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) glew::GetProcAddress ("glFlushMappedBufferRange");
    s_deviceConfig.m_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) glew::GetProcAddress ("glBindVertexArray");
    s_deviceConfig.m_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) glew::GetProcAddress ("glDeleteVertexArrays");
    s_deviceConfig.m_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) glew::GetProcAddress ("glGenVertexArrays");
    s_deviceConfig.m_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) glew::GetProcAddress ("glIsVertexArray");
    s_deviceConfig.m_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glew::GetProcAddress ("glGetIntegeri_v");
    s_deviceConfig.m_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glBeginTransformFeedback");
    s_deviceConfig.m_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glEndTransformFeedback");
    s_deviceConfig.m_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glew::GetProcAddress ("glBindBufferRange");
    s_deviceConfig.m_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glew::GetProcAddress ("glBindBufferBase");
    s_deviceConfig.m_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) glew::GetProcAddress ("glTransformFeedbackVaryings");
    s_deviceConfig.m_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) glew::GetProcAddress ("glGetTransformFeedbackVarying");
    s_deviceConfig.m_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) glew::GetProcAddress ("glVertexAttribIPointer");
    s_deviceConfig.m_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) glew::GetProcAddress ("glGetVertexAttribIiv");
    s_deviceConfig.m_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) glew::GetProcAddress ("glGetVertexAttribIuiv");
    s_deviceConfig.m_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) glew::GetProcAddress ("glVertexAttribI4i");
    s_deviceConfig.m_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) glew::GetProcAddress ("glVertexAttribI4ui");
    s_deviceConfig.m_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) glew::GetProcAddress ("glVertexAttribI4iv");
    s_deviceConfig.m_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) glew::GetProcAddress ("glVertexAttribI4uiv");
    s_deviceConfig.m_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) glew::GetProcAddress ("glGetUniformuiv");
    s_deviceConfig.m_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) glew::GetProcAddress ("glGetFragDataLocation");
    s_deviceConfig.m_glUniform1ui = (PFNGLUNIFORM1UIPROC) glew::GetProcAddress ("glUniform1ui");
    s_deviceConfig.m_glUniform2ui = (PFNGLUNIFORM2UIPROC) glew::GetProcAddress ("glUniform2ui");
    s_deviceConfig.m_glUniform3ui = (PFNGLUNIFORM3UIPROC) glew::GetProcAddress ("glUniform3ui");
    s_deviceConfig.m_glUniform4ui = (PFNGLUNIFORM4UIPROC) glew::GetProcAddress ("glUniform4ui");
    s_deviceConfig.m_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) glew::GetProcAddress ("glUniform1uiv");
    s_deviceConfig.m_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) glew::GetProcAddress ("glUniform2uiv");
    s_deviceConfig.m_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) glew::GetProcAddress ("glUniform3uiv");
    s_deviceConfig.m_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) glew::GetProcAddress ("glUniform4uiv");
    s_deviceConfig.m_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) glew::GetProcAddress ("glClearBufferiv");
    s_deviceConfig.m_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) glew::GetProcAddress ("glClearBufferuiv");
    s_deviceConfig.m_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) glew::GetProcAddress ("glClearBufferfv");
    s_deviceConfig.m_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) glew::GetProcAddress ("glClearBufferfi");
    s_deviceConfig.m_glGetStringi = (PFNGLGETSTRINGIPROC) glew::GetProcAddress ("glGetStringi");
    s_deviceConfig.m_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) glew::GetProcAddress ("glCopyBufferSubData");
    s_deviceConfig.m_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) glew::GetProcAddress ("glGetUniformIndices");
    s_deviceConfig.m_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) glew::GetProcAddress ("glGetActiveUniformsiv");
    s_deviceConfig.m_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) glew::GetProcAddress ("glGetUniformBlockIndex");
    s_deviceConfig.m_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) glew::GetProcAddress ("glGetActiveUniformBlockiv");
    s_deviceConfig.m_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) glew::GetProcAddress ("glGetActiveUniformBlockName");
    s_deviceConfig.m_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) glew::GetProcAddress ("glUniformBlockBinding");
    s_deviceConfig.m_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) glew::GetProcAddress ("glDrawArraysInstanced");
    s_deviceConfig.m_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) glew::GetProcAddress ("glDrawElementsInstanced");
    s_deviceConfig.m_glFenceSync = (PFNGLFENCESYNCPROC) glew::GetProcAddress ("glFenceSync");
    s_deviceConfig.m_glIsSync = (PFNGLISSYNCPROC) glew::GetProcAddress ("glIsSync");
    s_deviceConfig.m_glDeleteSync = (PFNGLDELETESYNCPROC) glew::GetProcAddress ("glDeleteSync");
    s_deviceConfig.m_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) glew::GetProcAddress ("glClientWaitSync");
    s_deviceConfig.m_glWaitSync = (PFNGLWAITSYNCPROC) glew::GetProcAddress ("glWaitSync");
    s_deviceConfig.m_glGetInteger64v = (PFNGLGETINTEGER64VPROC) glew::GetProcAddress ("glGetInteger64v");
    s_deviceConfig.m_glGetSynciv = (PFNGLGETSYNCIVPROC) glew::GetProcAddress ("glGetSynciv");
    s_deviceConfig.m_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) glew::GetProcAddress ("glGetInteger64i_v");
    s_deviceConfig.m_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) glew::GetProcAddress ("glGetBufferParameteri64v");
    s_deviceConfig.m_glGenSamplers = (PFNGLGENSAMPLERSPROC) glew::GetProcAddress ("glGenSamplers");
    s_deviceConfig.m_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) glew::GetProcAddress ("glDeleteSamplers");
    s_deviceConfig.m_glIsSampler = (PFNGLISSAMPLERPROC) glew::GetProcAddress ("glIsSampler");
    s_deviceConfig.m_glBindSampler = (PFNGLBINDSAMPLERPROC) glew::GetProcAddress ("glBindSampler");
    s_deviceConfig.m_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) glew::GetProcAddress ("glSamplerParameteri");
    s_deviceConfig.m_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) glew::GetProcAddress ("glSamplerParameteriv");
    s_deviceConfig.m_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) glew::GetProcAddress ("glSamplerParameterf");
    s_deviceConfig.m_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) glew::GetProcAddress ("glSamplerParameterfv");
    s_deviceConfig.m_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) glew::GetProcAddress ("glGetSamplerParameteriv");
    s_deviceConfig.m_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) glew::GetProcAddress ("glGetSamplerParameterfv");
    s_deviceConfig.m_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) glew::GetProcAddress ("glVertexAttribDivisor");
    s_deviceConfig.m_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glBindTransformFeedback");
    s_deviceConfig.m_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) glew::GetProcAddress ("glDeleteTransformFeedbacks");
    s_deviceConfig.m_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) glew::GetProcAddress ("glGenTransformFeedbacks");
    s_deviceConfig.m_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glIsTransformFeedback");
    s_deviceConfig.m_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glPauseTransformFeedback");
    s_deviceConfig.m_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) glew::GetProcAddress ("glResumeTransformFeedback");
    s_deviceConfig.m_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) glew::GetProcAddress ("glGetProgramBinary");
    s_deviceConfig.m_glProgramBinary = (PFNGLPROGRAMBINARYPROC) glew::GetProcAddress ("glProgramBinary");
    s_deviceConfig.m_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) glew::GetProcAddress ("glProgramParameteri");
    s_deviceConfig.m_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) glew::GetProcAddress ("glInvalidateFramebuffer");
    s_deviceConfig.m_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) glew::GetProcAddress ("glInvalidateSubFramebuffer");
    s_deviceConfig.m_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) glew::GetProcAddress ("glTexStorage2D");
    s_deviceConfig.m_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) glew::GetProcAddress ("glTexStorage3D");
    s_deviceConfig.m_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) glew::GetProcAddress ("glGetInternalformativ");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glDispatchCompute
    #undef glDispatchComputeIndirect
    s_deviceConfig.m_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) glew::GetProcAddress ("glDispatchCompute");
    s_deviceConfig.m_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) glew::GetProcAddress ("glDispatchComputeIndirect");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glDrawArraysIndirect
    #undef glDrawElementsIndirect
    s_deviceConfig.m_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) glew::GetProcAddress ("glDrawArraysIndirect");
    s_deviceConfig.m_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) glew::GetProcAddress ("glDrawElementsIndirect");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glFramebufferParameteri
    #undef glGetFramebufferParameteriv
    s_deviceConfig.m_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) glew::GetProcAddress ("glFramebufferParameteri");
    s_deviceConfig.m_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) glew::GetProcAddress ("glGetFramebufferParameteriv");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glGetProgramInterfaceiv
    #undef glGetProgramResourceIndex
    #undef glGetProgramResourceName
    #undef glGetProgramResourceiv
    #undef glGetProgramResourceLocation
    s_deviceConfig.m_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) glew::GetProcAddress ("glGetProgramInterfaceiv");
    s_deviceConfig.m_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) glew::GetProcAddress ("glGetProgramResourceIndex");
    s_deviceConfig.m_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) glew::GetProcAddress ("glGetProgramResourceName");
    s_deviceConfig.m_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) glew::GetProcAddress ("glGetProgramResourceiv");
    s_deviceConfig.m_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) glew::GetProcAddress ("glGetProgramResourceLocation");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glUseProgramStages
    #undef glActiveShaderProgram
    #undef glCreateShaderProgramv
    #undef glBindProgramPipeline
    #undef glDeleteProgramPipelines
    #undef glGenProgramPipelines
    #undef glIsProgramPipeline
    #undef glGetProgramPipelineiv
    #undef glProgramUniform1i
    #undef glProgramUniform2i
    #undef glProgramUniform3i
    #undef glProgramUniform4i
    #undef glProgramUniform1ui
    #undef glProgramUniform2ui
    #undef glProgramUniform3ui
    #undef glProgramUniform4ui
    #undef glProgramUniform1f
    #undef glProgramUniform2f
    #undef glProgramUniform3f
    #undef glProgramUniform4f
    #undef glProgramUniform1iv
    #undef glProgramUniform2iv
    #undef glProgramUniform3iv
    #undef glProgramUniform4iv
    #undef glProgramUniform1uiv
    #undef glProgramUniform2uiv
    #undef glProgramUniform3uiv
    #undef glProgramUniform4uiv
    #undef glProgramUniform1fv
    #undef glProgramUniform2fv
    #undef glProgramUniform3fv
    #undef glProgramUniform4fv
    #undef glProgramUniformMatrix2fv
    #undef glProgramUniformMatrix3fv
    #undef glProgramUniformMatrix4fv
    #undef glProgramUniformMatrix2x3fv
    #undef glProgramUniformMatrix3x2fv
    #undef glProgramUniformMatrix2x4fv
    #undef glProgramUniformMatrix4x2fv
    #undef glProgramUniformMatrix3x4fv
    #undef glProgramUniformMatrix4x3fv
    #undef glValidateProgramPipeline
    #undef glGetProgramPipelineInfoLog
    s_deviceConfig.m_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) glew::GetProcAddress ("glUseProgramStages");
    s_deviceConfig.m_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) glew::GetProcAddress ("glActiveShaderProgram");
    s_deviceConfig.m_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) glew::GetProcAddress ("glCreateShaderProgramv");
    s_deviceConfig.m_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) glew::GetProcAddress ("glBindProgramPipeline");
    s_deviceConfig.m_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) glew::GetProcAddress ("glDeleteProgramPipelines");
    s_deviceConfig.m_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) glew::GetProcAddress ("glGenProgramPipelines");
    s_deviceConfig.m_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) glew::GetProcAddress ("glIsProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) glew::GetProcAddress ("glGetProgramPipelineiv");
    s_deviceConfig.m_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) glew::GetProcAddress ("glProgramUniform1i");
    s_deviceConfig.m_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) glew::GetProcAddress ("glProgramUniform2i");
    s_deviceConfig.m_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) glew::GetProcAddress ("glProgramUniform3i");
    s_deviceConfig.m_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) glew::GetProcAddress ("glProgramUniform4i");
    s_deviceConfig.m_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) glew::GetProcAddress ("glProgramUniform1ui");
    s_deviceConfig.m_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) glew::GetProcAddress ("glProgramUniform2ui");
    s_deviceConfig.m_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) glew::GetProcAddress ("glProgramUniform3ui");
    s_deviceConfig.m_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) glew::GetProcAddress ("glProgramUniform4ui");
    s_deviceConfig.m_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) glew::GetProcAddress ("glProgramUniform1f");
    s_deviceConfig.m_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) glew::GetProcAddress ("glProgramUniform2f");
    s_deviceConfig.m_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) glew::GetProcAddress ("glProgramUniform3f");
    s_deviceConfig.m_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) glew::GetProcAddress ("glProgramUniform4f");
    s_deviceConfig.m_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) glew::GetProcAddress ("glProgramUniform1iv");
    s_deviceConfig.m_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) glew::GetProcAddress ("glProgramUniform2iv");
    s_deviceConfig.m_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) glew::GetProcAddress ("glProgramUniform3iv");
    s_deviceConfig.m_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) glew::GetProcAddress ("glProgramUniform4iv");
    s_deviceConfig.m_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) glew::GetProcAddress ("glProgramUniform1uiv");
    s_deviceConfig.m_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) glew::GetProcAddress ("glProgramUniform2uiv");
    s_deviceConfig.m_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) glew::GetProcAddress ("glProgramUniform3uiv");
    s_deviceConfig.m_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) glew::GetProcAddress ("glProgramUniform4uiv");
    s_deviceConfig.m_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) glew::GetProcAddress ("glProgramUniform1fv");
    s_deviceConfig.m_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) glew::GetProcAddress ("glProgramUniform2fv");
    s_deviceConfig.m_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) glew::GetProcAddress ("glProgramUniform3fv");
    s_deviceConfig.m_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) glew::GetProcAddress ("glProgramUniform4fv");
    s_deviceConfig.m_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) glew::GetProcAddress ("glProgramUniformMatrix2fv");
    s_deviceConfig.m_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) glew::GetProcAddress ("glProgramUniformMatrix3fv");
    s_deviceConfig.m_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) glew::GetProcAddress ("glProgramUniformMatrix4fv");
    s_deviceConfig.m_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) glew::GetProcAddress ("glProgramUniformMatrix2x3fv");
    s_deviceConfig.m_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) glew::GetProcAddress ("glProgramUniformMatrix3x2fv");
    s_deviceConfig.m_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) glew::GetProcAddress ("glProgramUniformMatrix2x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) glew::GetProcAddress ("glProgramUniformMatrix4x2fv");
    s_deviceConfig.m_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) glew::GetProcAddress ("glProgramUniformMatrix3x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) glew::GetProcAddress ("glProgramUniformMatrix4x3fv");
    s_deviceConfig.m_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) glew::GetProcAddress ("glValidateProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) glew::GetProcAddress ("glGetProgramPipelineInfoLog");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glBindImageTexture
    #undef glGetBooleani_v
    #undef glMemoryBarrier
    #undef glMemoryBarrierByRegion
    s_deviceConfig.m_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) glew::GetProcAddress ("glBindImageTexture");
    s_deviceConfig.m_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) glew::GetProcAddress ("glGetBooleani_v");
    s_deviceConfig.m_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) glew::GetProcAddress ("glMemoryBarrier");
    s_deviceConfig.m_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) glew::GetProcAddress ("glMemoryBarrierByRegion");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glTexStorage2DMultisample
    #undef glGetMultisamplefv
    #undef glSampleMaski
    #undef glGetTexLevelParameteriv
    #undef glGetTexLevelParameterfv
    s_deviceConfig.m_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) glew::GetProcAddress ("glTexStorage2DMultisample");
    s_deviceConfig.m_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) glew::GetProcAddress ("glGetMultisamplefv");
    s_deviceConfig.m_glSampleMaski = (PFNGLSAMPLEMASKIPROC) glew::GetProcAddress ("glSampleMaski");
    s_deviceConfig.m_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) glew::GetProcAddress ("glGetTexLevelParameteriv");
    s_deviceConfig.m_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) glew::GetProcAddress ("glGetTexLevelParameterfv");
  }

  // GL_ES_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ES_VERSION_3_1])
  {
    #undef glBindVertexBuffer
    #undef glVertexAttribFormat
    #undef glVertexAttribIFormat
    #undef glVertexAttribBinding
    #undef glVertexBindingDivisor
    s_deviceConfig.m_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) glew::GetProcAddress ("glBindVertexBuffer");
    s_deviceConfig.m_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) glew::GetProcAddress ("glVertexAttribFormat");
    s_deviceConfig.m_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) glew::GetProcAddress ("glVertexAttribIFormat");
    s_deviceConfig.m_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) glew::GetProcAddress ("glVertexAttribBinding");
    s_deviceConfig.m_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) glew::GetProcAddress ("glVertexBindingDivisor");
  }

  // GL_AMD_performance_monitor
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor])
  {
    #undef glGetPerfMonitorGroupsAMD
    #undef glGetPerfMonitorCountersAMD
    #undef glGetPerfMonitorGroupStringAMD
    #undef glGetPerfMonitorCounterStringAMD
    #undef glGetPerfMonitorCounterInfoAMD
    #undef glGenPerfMonitorsAMD
    #undef glDeletePerfMonitorsAMD
    #undef glSelectPerfMonitorCountersAMD
    #undef glBeginPerfMonitorAMD
    #undef glEndPerfMonitorAMD
    #undef glGetPerfMonitorCounterDataAMD
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC) glew::GetProcAddress ("glGetPerfMonitorGroupsAMD");
    s_deviceConfig.m_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC) glew::GetProcAddress ("glGetPerfMonitorCountersAMD");
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) glew::GetProcAddress ("glGetPerfMonitorGroupStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) glew::GetProcAddress ("glGetPerfMonitorCounterStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) glew::GetProcAddress ("glGetPerfMonitorCounterInfoAMD");
    s_deviceConfig.m_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC) glew::GetProcAddress ("glGenPerfMonitorsAMD");
    s_deviceConfig.m_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC) glew::GetProcAddress ("glDeletePerfMonitorsAMD");
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) glew::GetProcAddress ("glSelectPerfMonitorCountersAMD");
    s_deviceConfig.m_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC) glew::GetProcAddress ("glBeginPerfMonitorAMD");
    s_deviceConfig.m_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC) glew::GetProcAddress ("glEndPerfMonitorAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) glew::GetProcAddress ("glGetPerfMonitorCounterDataAMD");
  }

  // GL_ANGLE_framebuffer_blit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_blit])
  {
    #undef glBlitFramebufferANGLE
    s_deviceConfig.m_glBlitFramebufferANGLE = (PFNGLBLITFRAMEBUFFERANGLEPROC) glew::GetProcAddress ("glBlitFramebufferANGLE");
  }

  // GL_ANGLE_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_framebuffer_multisample])
  {
    #undef glRenderbufferStorageMultisampleANGLE
    s_deviceConfig.m_glRenderbufferStorageMultisampleANGLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) glew::GetProcAddress ("glRenderbufferStorageMultisampleANGLE");
  }

  // GL_ANGLE_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_instanced_arrays])
  {
    #undef glDrawArraysInstancedANGLE
    #undef glDrawElementsInstancedANGLE
    #undef glVertexAttribDivisorANGLE
    s_deviceConfig.m_glDrawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC) glew::GetProcAddress ("glDrawArraysInstancedANGLE");
    s_deviceConfig.m_glDrawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) glew::GetProcAddress ("glDrawElementsInstancedANGLE");
    s_deviceConfig.m_glVertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC) glew::GetProcAddress ("glVertexAttribDivisorANGLE");
  }

  // GL_ANGLE_translated_shader_source
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ANGLE_translated_shader_source])
  {
    #undef glGetTranslatedShaderSourceANGLE
    s_deviceConfig.m_glGetTranslatedShaderSourceANGLE = (PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) glew::GetProcAddress ("glGetTranslatedShaderSourceANGLE");
  }

  // GL_APPLE_copy_texture_levels
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_copy_texture_levels])
  {
    #undef glCopyTextureLevelsAPPLE
    s_deviceConfig.m_glCopyTextureLevelsAPPLE = (PFNGLCOPYTEXTURELEVELSAPPLEPROC) glew::GetProcAddress ("glCopyTextureLevelsAPPLE");
  }

  // GL_APPLE_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_framebuffer_multisample])
  {
    #undef glRenderbufferStorageMultisampleAPPLE
    #undef glResolveMultisampleFramebufferAPPLE
    s_deviceConfig.m_glRenderbufferStorageMultisampleAPPLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) glew::GetProcAddress ("glRenderbufferStorageMultisampleAPPLE");
    s_deviceConfig.m_glResolveMultisampleFramebufferAPPLE = (PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) glew::GetProcAddress ("glResolveMultisampleFramebufferAPPLE");
  }

  // GL_APPLE_sync
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_sync])
  {
    #undef glFenceSyncAPPLE
    #undef glIsSyncAPPLE
    #undef glDeleteSyncAPPLE
    #undef glClientWaitSyncAPPLE
    #undef glWaitSyncAPPLE
    #undef glGetInteger64vAPPLE
    #undef glGetSyncivAPPLE
    s_deviceConfig.m_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC) glew::GetProcAddress ("glFenceSyncAPPLE");
    s_deviceConfig.m_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC) glew::GetProcAddress ("glIsSyncAPPLE");
    s_deviceConfig.m_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC) glew::GetProcAddress ("glDeleteSyncAPPLE");
    s_deviceConfig.m_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC) glew::GetProcAddress ("glClientWaitSyncAPPLE");
    s_deviceConfig.m_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC) glew::GetProcAddress ("glWaitSyncAPPLE");
    s_deviceConfig.m_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC) glew::GetProcAddress ("glGetInteger64vAPPLE");
    s_deviceConfig.m_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC) glew::GetProcAddress ("glGetSyncivAPPLE");
  }

  // GL_EXT_base_instance
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_base_instance])
  {
    #undef glDrawArraysInstancedBaseInstanceEXT
    #undef glDrawElementsInstancedBaseInstanceEXT
    #undef glDrawElementsInstancedBaseVertexBaseInstanceEXT
    s_deviceConfig.m_glDrawArraysInstancedBaseInstanceEXT = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC) glew::GetProcAddress ("glDrawArraysInstancedBaseInstanceEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseInstanceEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC) glew::GetProcAddress ("glDrawElementsInstancedBaseInstanceEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstanceEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC) glew::GetProcAddress ("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
  }

  // GL_EXT_buffer_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_buffer_storage])
  {
    #undef glBufferStorageEXT
    s_deviceConfig.m_glBufferStorageEXT = (PFNGLBUFFERSTORAGEEXTPROC) glew::GetProcAddress ("glBufferStorageEXT");
  }

  // GL_EXT_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_image])
  {
    #undef glCopyImageSubDataEXT
    s_deviceConfig.m_glCopyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC) glew::GetProcAddress ("glCopyImageSubDataEXT");
  }

  // GL_EXT_debug_label
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label])
  {
    #undef glLabelObjectEXT
    #undef glGetObjectLabelEXT
    s_deviceConfig.m_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC) glew::GetProcAddress ("glLabelObjectEXT");
    s_deviceConfig.m_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC) glew::GetProcAddress ("glGetObjectLabelEXT");
  }

  // GL_EXT_debug_marker
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker])
  {
    #undef glInsertEventMarkerEXT
    #undef glPushGroupMarkerEXT
    #undef glPopGroupMarkerEXT
    s_deviceConfig.m_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC) glew::GetProcAddress ("glInsertEventMarkerEXT");
    s_deviceConfig.m_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC) glew::GetProcAddress ("glPushGroupMarkerEXT");
    s_deviceConfig.m_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC) glew::GetProcAddress ("glPopGroupMarkerEXT");
  }

  // GL_EXT_discard_framebuffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_discard_framebuffer])
  {
    #undef glDiscardFramebufferEXT
    s_deviceConfig.m_glDiscardFramebufferEXT = (PFNGLDISCARDFRAMEBUFFEREXTPROC) glew::GetProcAddress ("glDiscardFramebufferEXT");
  }

  // GL_EXT_disjoint_timer_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_disjoint_timer_query])
  {
    #undef glGenQueriesEXT
    #undef glDeleteQueriesEXT
    #undef glIsQueryEXT
    #undef glBeginQueryEXT
    #undef glEndQueryEXT
    #undef glQueryCounterEXT
    #undef glGetQueryivEXT
    #undef glGetQueryObjectivEXT
    #undef glGetQueryObjectuivEXT
    #undef glGetQueryObjecti64vEXT
    #undef glGetQueryObjectui64vEXT
    s_deviceConfig.m_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC) glew::GetProcAddress ("glGenQueriesEXT");
    s_deviceConfig.m_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC) glew::GetProcAddress ("glDeleteQueriesEXT");
    s_deviceConfig.m_glIsQueryEXT = (PFNGLISQUERYEXTPROC) glew::GetProcAddress ("glIsQueryEXT");
    s_deviceConfig.m_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC) glew::GetProcAddress ("glBeginQueryEXT");
    s_deviceConfig.m_glEndQueryEXT = (PFNGLENDQUERYEXTPROC) glew::GetProcAddress ("glEndQueryEXT");
    s_deviceConfig.m_glQueryCounterEXT = (PFNGLQUERYCOUNTEREXTPROC) glew::GetProcAddress ("glQueryCounterEXT");
    s_deviceConfig.m_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC) glew::GetProcAddress ("glGetQueryivEXT");
    s_deviceConfig.m_glGetQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC) glew::GetProcAddress ("glGetQueryObjectivEXT");
    s_deviceConfig.m_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC) glew::GetProcAddress ("glGetQueryObjectuivEXT");
    s_deviceConfig.m_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) glew::GetProcAddress ("glGetQueryObjecti64vEXT");
    s_deviceConfig.m_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) glew::GetProcAddress ("glGetQueryObjectui64vEXT");
  }

  // GL_EXT_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers])
  {
    #undef glDrawBuffersEXT
    s_deviceConfig.m_glDrawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC) glew::GetProcAddress ("glDrawBuffersEXT");
  }

  // GL_EXT_draw_buffers_indexed
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers_indexed])
  {
    #undef glEnableiEXT
    #undef glDisableiEXT
    #undef glBlendEquationiEXT
    #undef glBlendEquationSeparateiEXT
    #undef glBlendFunciEXT
    #undef glBlendFuncSeparateiEXT
    #undef glColorMaskiEXT
    #undef glIsEnablediEXT
    s_deviceConfig.m_glEnableiEXT = (PFNGLENABLEIEXTPROC) glew::GetProcAddress ("glEnableiEXT");
    s_deviceConfig.m_glDisableiEXT = (PFNGLDISABLEIEXTPROC) glew::GetProcAddress ("glDisableiEXT");
    s_deviceConfig.m_glBlendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC) glew::GetProcAddress ("glBlendEquationiEXT");
    s_deviceConfig.m_glBlendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC) glew::GetProcAddress ("glBlendEquationSeparateiEXT");
    s_deviceConfig.m_glBlendFunciEXT = (PFNGLBLENDFUNCIEXTPROC) glew::GetProcAddress ("glBlendFunciEXT");
    s_deviceConfig.m_glBlendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC) glew::GetProcAddress ("glBlendFuncSeparateiEXT");
    s_deviceConfig.m_glColorMaskiEXT = (PFNGLCOLORMASKIEXTPROC) glew::GetProcAddress ("glColorMaskiEXT");
    s_deviceConfig.m_glIsEnablediEXT = (PFNGLISENABLEDIEXTPROC) glew::GetProcAddress ("glIsEnablediEXT");
  }

  // GL_EXT_draw_elements_base_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_elements_base_vertex])
  {
    #undef glDrawElementsBaseVertexEXT
    #undef glDrawRangeElementsBaseVertexEXT
    #undef glDrawElementsInstancedBaseVertexEXT
    #undef glMultiDrawElementsBaseVertexEXT
    s_deviceConfig.m_glDrawElementsBaseVertexEXT = (PFNGLDRAWELEMENTSBASEVERTEXEXTPROC) glew::GetProcAddress ("glDrawElementsBaseVertexEXT");
    s_deviceConfig.m_glDrawRangeElementsBaseVertexEXT = (PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC) glew::GetProcAddress ("glDrawRangeElementsBaseVertexEXT");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexEXT = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC) glew::GetProcAddress ("glDrawElementsInstancedBaseVertexEXT");
    s_deviceConfig.m_glMultiDrawElementsBaseVertexEXT = (PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC) glew::GetProcAddress ("glMultiDrawElementsBaseVertexEXT");
  }

  // GL_EXT_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced])
  {
    #undef glDrawArraysInstancedEXT
    #undef glDrawElementsInstancedEXT
    s_deviceConfig.m_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glew::GetProcAddress ("glDrawArraysInstancedEXT");
    s_deviceConfig.m_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glew::GetProcAddress ("glDrawElementsInstancedEXT");
  }

  // GL_EXT_geometry_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader])
  {
    #undef glFramebufferTextureEXT
    s_deviceConfig.m_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) glew::GetProcAddress ("glFramebufferTextureEXT");
  }

  // GL_EXT_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_instanced_arrays])
  {
    #undef glDrawArraysInstancedEXT
    #undef glDrawElementsInstancedEXT
    #undef glVertexAttribDivisorEXT
    s_deviceConfig.m_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glew::GetProcAddress ("glDrawArraysInstancedEXT");
    s_deviceConfig.m_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glew::GetProcAddress ("glDrawElementsInstancedEXT");
    s_deviceConfig.m_glVertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC) glew::GetProcAddress ("glVertexAttribDivisorEXT");
  }

  // GL_EXT_map_buffer_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_map_buffer_range])
  {
    #undef glMapBufferRangeEXT
    #undef glFlushMappedBufferRangeEXT
    s_deviceConfig.m_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC) glew::GetProcAddress ("glMapBufferRangeEXT");
    s_deviceConfig.m_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) glew::GetProcAddress ("glFlushMappedBufferRangeEXT");
  }

  // GL_EXT_multi_draw_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays])
  {
    #undef glMultiDrawArraysEXT
    #undef glMultiDrawElementsEXT
    s_deviceConfig.m_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) glew::GetProcAddress ("glMultiDrawArraysEXT");
    s_deviceConfig.m_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) glew::GetProcAddress ("glMultiDrawElementsEXT");
  }

  // GL_EXT_multi_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_indirect])
  {
    #undef glMultiDrawArraysIndirectEXT
    #undef glMultiDrawElementsIndirectEXT
    s_deviceConfig.m_glMultiDrawArraysIndirectEXT = (PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC) glew::GetProcAddress ("glMultiDrawArraysIndirectEXT");
    s_deviceConfig.m_glMultiDrawElementsIndirectEXT = (PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC) glew::GetProcAddress ("glMultiDrawElementsIndirectEXT");
  }

  // GL_EXT_multisampled_render_to_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisampled_render_to_texture])
  {
    #undef glRenderbufferStorageMultisampleEXT
    #undef glFramebufferTexture2DMultisampleEXT
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glew::GetProcAddress ("glRenderbufferStorageMultisampleEXT");
    s_deviceConfig.m_glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) glew::GetProcAddress ("glFramebufferTexture2DMultisampleEXT");
  }

  // GL_EXT_multiview_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multiview_draw_buffers])
  {
    #undef glReadBufferIndexedEXT
    #undef glDrawBuffersIndexedEXT
    #undef glGetIntegeri_vEXT
    s_deviceConfig.m_glReadBufferIndexedEXT = (PFNGLREADBUFFERINDEXEDEXTPROC) glew::GetProcAddress ("glReadBufferIndexedEXT");
    s_deviceConfig.m_glDrawBuffersIndexedEXT = (PFNGLDRAWBUFFERSINDEXEDEXTPROC) glew::GetProcAddress ("glDrawBuffersIndexedEXT");
    s_deviceConfig.m_glGetIntegeri_vEXT = (PFNGLGETINTEGERI_VEXTPROC) glew::GetProcAddress ("glGetIntegeri_vEXT");
  }

  // GL_EXT_occlusion_query_boolean
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_occlusion_query_boolean])
  {
    #undef glGenQueriesEXT
    #undef glDeleteQueriesEXT
    #undef glIsQueryEXT
    #undef glBeginQueryEXT
    #undef glEndQueryEXT
    #undef glGetQueryivEXT
    #undef glGetQueryObjectuivEXT
    s_deviceConfig.m_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC) glew::GetProcAddress ("glGenQueriesEXT");
    s_deviceConfig.m_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC) glew::GetProcAddress ("glDeleteQueriesEXT");
    s_deviceConfig.m_glIsQueryEXT = (PFNGLISQUERYEXTPROC) glew::GetProcAddress ("glIsQueryEXT");
    s_deviceConfig.m_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC) glew::GetProcAddress ("glBeginQueryEXT");
    s_deviceConfig.m_glEndQueryEXT = (PFNGLENDQUERYEXTPROC) glew::GetProcAddress ("glEndQueryEXT");
    s_deviceConfig.m_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC) glew::GetProcAddress ("glGetQueryivEXT");
    s_deviceConfig.m_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC) glew::GetProcAddress ("glGetQueryObjectuivEXT");
  }

  // GL_EXT_primitive_bounding_box
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_primitive_bounding_box])
  {
    #undef glPrimitiveBoundingBoxEXT
    s_deviceConfig.m_glPrimitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC) glew::GetProcAddress ("glPrimitiveBoundingBoxEXT");
  }

  // GL_EXT_raster_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample])
  {
    #undef glRasterSamplesEXT
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glew::GetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_robustness])
  {
    #undef glGetGraphicsResetStatusEXT
    #undef glReadnPixelsEXT
    #undef glGetnUniformfvEXT
    #undef glGetnUniformivEXT
    s_deviceConfig.m_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC) glew::GetProcAddress ("glGetGraphicsResetStatusEXT");
    s_deviceConfig.m_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC) glew::GetProcAddress ("glReadnPixelsEXT");
    s_deviceConfig.m_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC) glew::GetProcAddress ("glGetnUniformfvEXT");
    s_deviceConfig.m_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC) glew::GetProcAddress ("glGetnUniformivEXT");
  }

  // GL_EXT_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects])
  {
    #undef glActiveShaderProgramEXT
    #undef glBindProgramPipelineEXT
    #undef glCreateShaderProgramvEXT
    #undef glDeleteProgramPipelinesEXT
    #undef glGenProgramPipelinesEXT
    #undef glGetProgramPipelineInfoLogEXT
    #undef glGetProgramPipelineivEXT
    #undef glIsProgramPipelineEXT
    #undef glProgramParameteriEXT
    #undef glProgramUniform1fEXT
    #undef glProgramUniform1fvEXT
    #undef glProgramUniform1iEXT
    #undef glProgramUniform1ivEXT
    #undef glProgramUniform2fEXT
    #undef glProgramUniform2fvEXT
    #undef glProgramUniform2iEXT
    #undef glProgramUniform2ivEXT
    #undef glProgramUniform3fEXT
    #undef glProgramUniform3fvEXT
    #undef glProgramUniform3iEXT
    #undef glProgramUniform3ivEXT
    #undef glProgramUniform4fEXT
    #undef glProgramUniform4fvEXT
    #undef glProgramUniform4iEXT
    #undef glProgramUniform4ivEXT
    #undef glProgramUniformMatrix2fvEXT
    #undef glProgramUniformMatrix3fvEXT
    #undef glProgramUniformMatrix4fvEXT
    #undef glUseProgramStagesEXT
    #undef glValidateProgramPipelineEXT
    s_deviceConfig.m_glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC) glew::GetProcAddress ("glActiveShaderProgramEXT");
    s_deviceConfig.m_glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC) glew::GetProcAddress ("glBindProgramPipelineEXT");
    s_deviceConfig.m_glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC) glew::GetProcAddress ("glCreateShaderProgramvEXT");
    s_deviceConfig.m_glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC) glew::GetProcAddress ("glDeleteProgramPipelinesEXT");
    s_deviceConfig.m_glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC) glew::GetProcAddress ("glGenProgramPipelinesEXT");
    s_deviceConfig.m_glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) glew::GetProcAddress ("glGetProgramPipelineInfoLogEXT");
    s_deviceConfig.m_glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC) glew::GetProcAddress ("glGetProgramPipelineivEXT");
    s_deviceConfig.m_glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC) glew::GetProcAddress ("glIsProgramPipelineEXT");
    s_deviceConfig.m_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) glew::GetProcAddress ("glProgramParameteriEXT");
    s_deviceConfig.m_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) glew::GetProcAddress ("glProgramUniform1fEXT");
    s_deviceConfig.m_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) glew::GetProcAddress ("glProgramUniform1fvEXT");
    s_deviceConfig.m_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) glew::GetProcAddress ("glProgramUniform1iEXT");
    s_deviceConfig.m_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) glew::GetProcAddress ("glProgramUniform1ivEXT");
    s_deviceConfig.m_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) glew::GetProcAddress ("glProgramUniform2fEXT");
    s_deviceConfig.m_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) glew::GetProcAddress ("glProgramUniform2fvEXT");
    s_deviceConfig.m_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) glew::GetProcAddress ("glProgramUniform2iEXT");
    s_deviceConfig.m_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) glew::GetProcAddress ("glProgramUniform2ivEXT");
    s_deviceConfig.m_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) glew::GetProcAddress ("glProgramUniform3fEXT");
    s_deviceConfig.m_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) glew::GetProcAddress ("glProgramUniform3fvEXT");
    s_deviceConfig.m_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) glew::GetProcAddress ("glProgramUniform3iEXT");
    s_deviceConfig.m_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) glew::GetProcAddress ("glProgramUniform3ivEXT");
    s_deviceConfig.m_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) glew::GetProcAddress ("glProgramUniform4fEXT");
    s_deviceConfig.m_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) glew::GetProcAddress ("glProgramUniform4fvEXT");
    s_deviceConfig.m_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) glew::GetProcAddress ("glProgramUniform4iEXT");
    s_deviceConfig.m_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) glew::GetProcAddress ("glProgramUniform4ivEXT");
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix4fvEXT");
    s_deviceConfig.m_glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC) glew::GetProcAddress ("glUseProgramStagesEXT");
    s_deviceConfig.m_glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) glew::GetProcAddress ("glValidateProgramPipelineEXT");
  }

  // GL_EXT_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects])
  {
    #undef glProgramUniform1uiEXT
    #undef glProgramUniform2uiEXT
    #undef glProgramUniform3uiEXT
    #undef glProgramUniform4uiEXT
    #undef glProgramUniform1uivEXT
    #undef glProgramUniform2uivEXT
    #undef glProgramUniform3uivEXT
    #undef glProgramUniform4uivEXT
    #undef glProgramUniformMatrix4fvEXT
    #undef glProgramUniformMatrix2x3fvEXT
    #undef glProgramUniformMatrix3x2fvEXT
    #undef glProgramUniformMatrix2x4fvEXT
    #undef glProgramUniformMatrix4x2fvEXT
    #undef glProgramUniformMatrix3x4fvEXT
    #undef glProgramUniformMatrix4x3fvEXT
    s_deviceConfig.m_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) glew::GetProcAddress ("glProgramUniform1uiEXT");
    s_deviceConfig.m_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) glew::GetProcAddress ("glProgramUniform2uiEXT");
    s_deviceConfig.m_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) glew::GetProcAddress ("glProgramUniform3uiEXT");
    s_deviceConfig.m_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) glew::GetProcAddress ("glProgramUniform4uiEXT");
    s_deviceConfig.m_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) glew::GetProcAddress ("glProgramUniform1uivEXT");
    s_deviceConfig.m_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) glew::GetProcAddress ("glProgramUniform2uivEXT");
    s_deviceConfig.m_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) glew::GetProcAddress ("glProgramUniform3uivEXT");
    s_deviceConfig.m_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) glew::GetProcAddress ("glProgramUniform4uivEXT");
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix2x3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix3x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix2x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix4x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix3x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) glew::GetProcAddress ("glProgramUniformMatrix4x3fvEXT");
  }

  // GL_EXT_sparse_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sparse_texture])
  {
    #undef glTexPageCommitmentARB
    s_deviceConfig.m_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC) glew::GetProcAddress ("glTexPageCommitmentARB");
  }

  // GL_EXT_tessellation_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_tessellation_shader])
  {
    #undef glPatchParameteriEXT
    s_deviceConfig.m_glPatchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC) glew::GetProcAddress ("glPatchParameteriEXT");
  }

  // GL_EXT_texture_border_clamp
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_border_clamp])
  {
    #undef glTexParameterIivEXT
    #undef glTexParameterIuivEXT
    #undef glGetTexParameterIivEXT
    #undef glGetTexParameterIuivEXT
    #undef glSamplerParameterIivEXT
    #undef glSamplerParameterIuivEXT
    #undef glGetSamplerParameterIivEXT
    #undef glGetSamplerParameterIuivEXT
    s_deviceConfig.m_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) glew::GetProcAddress ("glTexParameterIivEXT");
    s_deviceConfig.m_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) glew::GetProcAddress ("glTexParameterIuivEXT");
    s_deviceConfig.m_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) glew::GetProcAddress ("glGetTexParameterIivEXT");
    s_deviceConfig.m_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) glew::GetProcAddress ("glGetTexParameterIuivEXT");
    s_deviceConfig.m_glSamplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC) glew::GetProcAddress ("glSamplerParameterIivEXT");
    s_deviceConfig.m_glSamplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC) glew::GetProcAddress ("glSamplerParameterIuivEXT");
    s_deviceConfig.m_glGetSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC) glew::GetProcAddress ("glGetSamplerParameterIivEXT");
    s_deviceConfig.m_glGetSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC) glew::GetProcAddress ("glGetSamplerParameterIuivEXT");
  }

  // GL_EXT_texture_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer])
  {
    #undef glTexBufferEXT
    #undef glTexBufferRangeEXT
    s_deviceConfig.m_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) glew::GetProcAddress ("glTexBufferEXT");
    s_deviceConfig.m_glTexBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC) glew::GetProcAddress ("glTexBufferRangeEXT");
  }

  // GL_EXT_texture_filter_minmax
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax])
  {
    #undef glRasterSamplesEXT
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glew::GetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_texture_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage])
  {
    #undef glTexStorage1DEXT
    #undef glTexStorage2DEXT
    #undef glTexStorage3DEXT
    s_deviceConfig.m_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC) glew::GetProcAddress ("glTexStorage1DEXT");
    s_deviceConfig.m_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC) glew::GetProcAddress ("glTexStorage2DEXT");
    s_deviceConfig.m_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC) glew::GetProcAddress ("glTexStorage3DEXT");
  }

  // GL_EXT_texture_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_storage])
  {
    #undef glTextureStorage1DEXT
    #undef glTextureStorage2DEXT
    #undef glTextureStorage3DEXT
    s_deviceConfig.m_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) glew::GetProcAddress ("glTextureStorage1DEXT");
    s_deviceConfig.m_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) glew::GetProcAddress ("glTextureStorage2DEXT");
    s_deviceConfig.m_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) glew::GetProcAddress ("glTextureStorage3DEXT");
  }

  // GL_EXT_texture_view
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_view])
  {
    #undef glTextureViewEXT
    s_deviceConfig.m_glTextureViewEXT = (PFNGLTEXTUREVIEWEXTPROC) glew::GetProcAddress ("glTextureViewEXT");
  }

  // GL_IMG_multisampled_render_to_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_IMG_multisampled_render_to_texture])
  {
    #undef glRenderbufferStorageMultisampleIMG
    #undef glFramebufferTexture2DMultisampleIMG
    s_deviceConfig.m_glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) glew::GetProcAddress ("glRenderbufferStorageMultisampleIMG");
    s_deviceConfig.m_glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) glew::GetProcAddress ("glFramebufferTexture2DMultisampleIMG");
  }

  // GL_INTEL_performance_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query])
  {
    #undef glBeginPerfQueryINTEL
    #undef glCreatePerfQueryINTEL
    #undef glDeletePerfQueryINTEL
    #undef glEndPerfQueryINTEL
    #undef glGetFirstPerfQueryIdINTEL
    #undef glGetNextPerfQueryIdINTEL
    #undef glGetPerfCounterInfoINTEL
    #undef glGetPerfQueryDataINTEL
    #undef glGetPerfQueryIdByNameINTEL
    #undef glGetPerfQueryInfoINTEL
    s_deviceConfig.m_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC) glew::GetProcAddress ("glBeginPerfQueryINTEL");
    s_deviceConfig.m_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC) glew::GetProcAddress ("glCreatePerfQueryINTEL");
    s_deviceConfig.m_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC) glew::GetProcAddress ("glDeletePerfQueryINTEL");
    s_deviceConfig.m_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC) glew::GetProcAddress ("glEndPerfQueryINTEL");
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC) glew::GetProcAddress ("glGetFirstPerfQueryIdINTEL");
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC) glew::GetProcAddress ("glGetNextPerfQueryIdINTEL");
    s_deviceConfig.m_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC) glew::GetProcAddress ("glGetPerfCounterInfoINTEL");
    s_deviceConfig.m_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC) glew::GetProcAddress ("glGetPerfQueryDataINTEL");
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC) glew::GetProcAddress ("glGetPerfQueryIdByNameINTEL");
    s_deviceConfig.m_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC) glew::GetProcAddress ("glGetPerfQueryInfoINTEL");
  }

  // GL_KHR_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced])
  {
    #undef glBlendBarrierKHR
    s_deviceConfig.m_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC) glew::GetProcAddress ("glBlendBarrierKHR");
  }

  // GL_KHR_debug
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug])
  {
    #undef glDebugMessageControlKHR
    #undef glDebugMessageInsertKHR
    #undef glDebugMessageCallbackKHR
    #undef glGetDebugMessageLogKHR
    #undef glPushDebugGroupKHR
    #undef glPopDebugGroupKHR
    #undef glObjectLabelKHR
    #undef glGetObjectLabelKHR
    #undef glObjectPtrLabelKHR
    #undef glGetObjectPtrLabelKHR
    #undef glGetPointervKHR
    s_deviceConfig.m_glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC) glew::GetProcAddress ("glDebugMessageControlKHR");
    s_deviceConfig.m_glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC) glew::GetProcAddress ("glDebugMessageInsertKHR");
    s_deviceConfig.m_glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC) glew::GetProcAddress ("glDebugMessageCallbackKHR");
    s_deviceConfig.m_glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC) glew::GetProcAddress ("glGetDebugMessageLogKHR");
    s_deviceConfig.m_glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC) glew::GetProcAddress ("glPushDebugGroupKHR");
    s_deviceConfig.m_glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC) glew::GetProcAddress ("glPopDebugGroupKHR");
    s_deviceConfig.m_glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC) glew::GetProcAddress ("glObjectLabelKHR");
    s_deviceConfig.m_glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC) glew::GetProcAddress ("glGetObjectLabelKHR");
    s_deviceConfig.m_glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC) glew::GetProcAddress ("glObjectPtrLabelKHR");
    s_deviceConfig.m_glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC) glew::GetProcAddress ("glGetObjectPtrLabelKHR");
    s_deviceConfig.m_glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC) glew::GetProcAddress ("glGetPointervKHR");
  }

  // GL_KHR_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness])
  {
    #undef glGetGraphicsResetStatusKHR
    #undef glReadnPixelsKHR
    #undef glGetnUniformfvKHR
    #undef glGetnUniformivKHR
    #undef glGetnUniformuivKHR
    s_deviceConfig.m_glGetGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC) glew::GetProcAddress ("glGetGraphicsResetStatusKHR");
    s_deviceConfig.m_glReadnPixelsKHR = (PFNGLREADNPIXELSKHRPROC) glew::GetProcAddress ("glReadnPixelsKHR");
    s_deviceConfig.m_glGetnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC) glew::GetProcAddress ("glGetnUniformfvKHR");
    s_deviceConfig.m_glGetnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC) glew::GetProcAddress ("glGetnUniformivKHR");
    s_deviceConfig.m_glGetnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC) glew::GetProcAddress ("glGetnUniformuivKHR");
  }

  // GL_NV_bindless_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture])
  {
    #undef glGetTextureHandleNV
    #undef glGetTextureSamplerHandleNV
    #undef glMakeTextureHandleResidentNV
    #undef glMakeTextureHandleNonResidentNV
    #undef glGetImageHandleNV
    #undef glMakeImageHandleResidentNV
    #undef glMakeImageHandleNonResidentNV
    #undef glUniformHandleui64NV
    #undef glUniformHandleui64vNV
    #undef glProgramUniformHandleui64NV
    #undef glProgramUniformHandleui64vNV
    #undef glIsTextureHandleResidentNV
    #undef glIsImageHandleResidentNV
    s_deviceConfig.m_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC) glew::GetProcAddress ("glGetTextureHandleNV");
    s_deviceConfig.m_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC) glew::GetProcAddress ("glGetTextureSamplerHandleNV");
    s_deviceConfig.m_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) glew::GetProcAddress ("glMakeTextureHandleResidentNV");
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) glew::GetProcAddress ("glMakeTextureHandleNonResidentNV");
    s_deviceConfig.m_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC) glew::GetProcAddress ("glGetImageHandleNV");
    s_deviceConfig.m_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) glew::GetProcAddress ("glMakeImageHandleResidentNV");
    s_deviceConfig.m_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) glew::GetProcAddress ("glMakeImageHandleNonResidentNV");
    s_deviceConfig.m_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC) glew::GetProcAddress ("glUniformHandleui64NV");
    s_deviceConfig.m_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC) glew::GetProcAddress ("glUniformHandleui64vNV");
    s_deviceConfig.m_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) glew::GetProcAddress ("glProgramUniformHandleui64NV");
    s_deviceConfig.m_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) glew::GetProcAddress ("glProgramUniformHandleui64vNV");
    s_deviceConfig.m_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC) glew::GetProcAddress ("glIsTextureHandleResidentNV");
    s_deviceConfig.m_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC) glew::GetProcAddress ("glIsImageHandleResidentNV");
  }

  // GL_NV_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced])
  {
    #undef glBlendParameteriNV
    #undef glBlendBarrierNV
    s_deviceConfig.m_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC) glew::GetProcAddress ("glBlendParameteriNV");
    s_deviceConfig.m_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC) glew::GetProcAddress ("glBlendBarrierNV");
  }

  // GL_NV_conditional_render
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render])
  {
    #undef glBeginConditionalRenderNV
    #undef glEndConditionalRenderNV
    s_deviceConfig.m_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) glew::GetProcAddress ("glBeginConditionalRenderNV");
    s_deviceConfig.m_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) glew::GetProcAddress ("glEndConditionalRenderNV");
  }

  // GL_NV_conservative_raster
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster])
  {
    #undef glSubpixelPrecisionBiasNV
    s_deviceConfig.m_glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC) glew::GetProcAddress ("glSubpixelPrecisionBiasNV");
  }

  // GL_NV_copy_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_buffer])
  {
    #undef glCopyBufferSubDataNV
    s_deviceConfig.m_glCopyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC) glew::GetProcAddress ("glCopyBufferSubDataNV");
  }

  // GL_NV_coverage_sample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_coverage_sample])
  {
    #undef glCoverageMaskNV
    #undef glCoverageOperationNV
    s_deviceConfig.m_glCoverageMaskNV = (PFNGLCOVERAGEMASKNVPROC) glew::GetProcAddress ("glCoverageMaskNV");
    s_deviceConfig.m_glCoverageOperationNV = (PFNGLCOVERAGEOPERATIONNVPROC) glew::GetProcAddress ("glCoverageOperationNV");
  }

  // GL_NV_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_buffers])
  {
    #undef glDrawBuffersNV
    s_deviceConfig.m_glDrawBuffersNV = (PFNGLDRAWBUFFERSNVPROC) glew::GetProcAddress ("glDrawBuffersNV");
  }

  // GL_NV_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_instanced])
  {
    #undef glDrawArraysInstancedNV
    #undef glDrawElementsInstancedNV
    s_deviceConfig.m_glDrawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC) glew::GetProcAddress ("glDrawArraysInstancedNV");
    s_deviceConfig.m_glDrawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC) glew::GetProcAddress ("glDrawElementsInstancedNV");
  }

  // GL_NV_fence
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence])
  {
    #undef glDeleteFencesNV
    #undef glGenFencesNV
    #undef glIsFenceNV
    #undef glTestFenceNV
    #undef glGetFenceivNV
    #undef glFinishFenceNV
    #undef glSetFenceNV
    s_deviceConfig.m_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC) glew::GetProcAddress ("glDeleteFencesNV");
    s_deviceConfig.m_glGenFencesNV = (PFNGLGENFENCESNVPROC) glew::GetProcAddress ("glGenFencesNV");
    s_deviceConfig.m_glIsFenceNV = (PFNGLISFENCENVPROC) glew::GetProcAddress ("glIsFenceNV");
    s_deviceConfig.m_glTestFenceNV = (PFNGLTESTFENCENVPROC) glew::GetProcAddress ("glTestFenceNV");
    s_deviceConfig.m_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC) glew::GetProcAddress ("glGetFenceivNV");
    s_deviceConfig.m_glFinishFenceNV = (PFNGLFINISHFENCENVPROC) glew::GetProcAddress ("glFinishFenceNV");
    s_deviceConfig.m_glSetFenceNV = (PFNGLSETFENCENVPROC) glew::GetProcAddress ("glSetFenceNV");
  }

  // GL_NV_fragment_coverage_to_color
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color])
  {
    #undef glFragmentCoverageColorNV
    s_deviceConfig.m_glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC) glew::GetProcAddress ("glFragmentCoverageColorNV");
  }

  // GL_NV_framebuffer_blit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_blit])
  {
    #undef glBlitFramebufferNV
    s_deviceConfig.m_glBlitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC) glew::GetProcAddress ("glBlitFramebufferNV");
  }

  // GL_NV_framebuffer_mixed_samples
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples])
  {
    #undef glRasterSamplesEXT
    #undef glCoverageModulationTableNV
    #undef glGetCoverageModulationTableNV
    #undef glCoverageModulationNV
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glew::GetProcAddress ("glRasterSamplesEXT");
    s_deviceConfig.m_glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC) glew::GetProcAddress ("glCoverageModulationTableNV");
    s_deviceConfig.m_glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC) glew::GetProcAddress ("glGetCoverageModulationTableNV");
    s_deviceConfig.m_glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC) glew::GetProcAddress ("glCoverageModulationNV");
  }

  // GL_NV_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample])
  {
    #undef glRenderbufferStorageMultisampleNV
    s_deviceConfig.m_glRenderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) glew::GetProcAddress ("glRenderbufferStorageMultisampleNV");
  }

  // GL_NV_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_instanced_arrays])
  {
    #undef glVertexAttribDivisorNV
    s_deviceConfig.m_glVertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC) glew::GetProcAddress ("glVertexAttribDivisorNV");
  }

  // GL_NV_internalformat_sample_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query])
  {
    #undef glGetInternalformatSampleivNV
    s_deviceConfig.m_glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) glew::GetProcAddress ("glGetInternalformatSampleivNV");
  }

  // GL_NV_non_square_matrices
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_non_square_matrices])
  {
    #undef glUniformMatrix2x3fvNV
    #undef glUniformMatrix3x2fvNV
    #undef glUniformMatrix2x4fvNV
    #undef glUniformMatrix4x2fvNV
    #undef glUniformMatrix3x4fvNV
    #undef glUniformMatrix4x3fvNV
    s_deviceConfig.m_glUniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC) glew::GetProcAddress ("glUniformMatrix2x3fvNV");
    s_deviceConfig.m_glUniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC) glew::GetProcAddress ("glUniformMatrix3x2fvNV");
    s_deviceConfig.m_glUniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC) glew::GetProcAddress ("glUniformMatrix2x4fvNV");
    s_deviceConfig.m_glUniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC) glew::GetProcAddress ("glUniformMatrix4x2fvNV");
    s_deviceConfig.m_glUniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC) glew::GetProcAddress ("glUniformMatrix3x4fvNV");
    s_deviceConfig.m_glUniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC) glew::GetProcAddress ("glUniformMatrix4x3fvNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    #undef glGenPathsNV
    #undef glDeletePathsNV
    #undef glIsPathNV
    #undef glPathCommandsNV
    #undef glPathCoordsNV
    #undef glPathSubCommandsNV
    #undef glPathSubCoordsNV
    #undef glPathStringNV
    #undef glPathGlyphsNV
    #undef glPathGlyphRangeNV
    #undef glWeightPathsNV
    #undef glCopyPathNV
    #undef glInterpolatePathsNV
    #undef glTransformPathNV
    #undef glPathParameterivNV
    #undef glPathParameteriNV
    #undef glPathParameterfvNV
    #undef glPathParameterfNV
    #undef glPathDashArrayNV
    #undef glPathStencilFuncNV
    #undef glPathStencilDepthOffsetNV
    #undef glStencilFillPathNV
    #undef glStencilStrokePathNV
    #undef glStencilFillPathInstancedNV
    #undef glStencilStrokePathInstancedNV
    #undef glPathCoverDepthFuncNV
    #undef glCoverFillPathNV
    #undef glCoverStrokePathNV
    #undef glCoverFillPathInstancedNV
    #undef glCoverStrokePathInstancedNV
    #undef glGetPathParameterivNV
    #undef glGetPathParameterfvNV
    #undef glGetPathCommandsNV
    #undef glGetPathCoordsNV
    #undef glGetPathDashArrayNV
    #undef glGetPathMetricsNV
    #undef glGetPathMetricRangeNV
    #undef glGetPathSpacingNV
    #undef glIsPointInFillPathNV
    #undef glIsPointInStrokePathNV
    #undef glGetPathLengthNV
    #undef glPointAlongPathNV
    s_deviceConfig.m_glGenPathsNV = (PFNGLGENPATHSNVPROC) glew::GetProcAddress ("glGenPathsNV");
    s_deviceConfig.m_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC) glew::GetProcAddress ("glDeletePathsNV");
    s_deviceConfig.m_glIsPathNV = (PFNGLISPATHNVPROC) glew::GetProcAddress ("glIsPathNV");
    s_deviceConfig.m_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC) glew::GetProcAddress ("glPathCommandsNV");
    s_deviceConfig.m_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC) glew::GetProcAddress ("glPathCoordsNV");
    s_deviceConfig.m_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC) glew::GetProcAddress ("glPathSubCommandsNV");
    s_deviceConfig.m_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC) glew::GetProcAddress ("glPathSubCoordsNV");
    s_deviceConfig.m_glPathStringNV = (PFNGLPATHSTRINGNVPROC) glew::GetProcAddress ("glPathStringNV");
    s_deviceConfig.m_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC) glew::GetProcAddress ("glPathGlyphsNV");
    s_deviceConfig.m_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC) glew::GetProcAddress ("glPathGlyphRangeNV");
    s_deviceConfig.m_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC) glew::GetProcAddress ("glWeightPathsNV");
    s_deviceConfig.m_glCopyPathNV = (PFNGLCOPYPATHNVPROC) glew::GetProcAddress ("glCopyPathNV");
    s_deviceConfig.m_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC) glew::GetProcAddress ("glInterpolatePathsNV");
    s_deviceConfig.m_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC) glew::GetProcAddress ("glTransformPathNV");
    s_deviceConfig.m_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC) glew::GetProcAddress ("glPathParameterivNV");
    s_deviceConfig.m_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC) glew::GetProcAddress ("glPathParameteriNV");
    s_deviceConfig.m_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC) glew::GetProcAddress ("glPathParameterfvNV");
    s_deviceConfig.m_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC) glew::GetProcAddress ("glPathParameterfNV");
    s_deviceConfig.m_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC) glew::GetProcAddress ("glPathDashArrayNV");
    s_deviceConfig.m_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC) glew::GetProcAddress ("glPathStencilFuncNV");
    s_deviceConfig.m_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC) glew::GetProcAddress ("glPathStencilDepthOffsetNV");
    s_deviceConfig.m_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC) glew::GetProcAddress ("glStencilFillPathNV");
    s_deviceConfig.m_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC) glew::GetProcAddress ("glStencilStrokePathNV");
    s_deviceConfig.m_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC) glew::GetProcAddress ("glStencilFillPathInstancedNV");
    s_deviceConfig.m_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) glew::GetProcAddress ("glStencilStrokePathInstancedNV");
    s_deviceConfig.m_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC) glew::GetProcAddress ("glPathCoverDepthFuncNV");
    s_deviceConfig.m_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC) glew::GetProcAddress ("glCoverFillPathNV");
    s_deviceConfig.m_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC) glew::GetProcAddress ("glCoverStrokePathNV");
    s_deviceConfig.m_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC) glew::GetProcAddress ("glCoverFillPathInstancedNV");
    s_deviceConfig.m_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) glew::GetProcAddress ("glCoverStrokePathInstancedNV");
    s_deviceConfig.m_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC) glew::GetProcAddress ("glGetPathParameterivNV");
    s_deviceConfig.m_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC) glew::GetProcAddress ("glGetPathParameterfvNV");
    s_deviceConfig.m_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC) glew::GetProcAddress ("glGetPathCommandsNV");
    s_deviceConfig.m_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC) glew::GetProcAddress ("glGetPathCoordsNV");
    s_deviceConfig.m_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC) glew::GetProcAddress ("glGetPathDashArrayNV");
    s_deviceConfig.m_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC) glew::GetProcAddress ("glGetPathMetricsNV");
    s_deviceConfig.m_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC) glew::GetProcAddress ("glGetPathMetricRangeNV");
    s_deviceConfig.m_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC) glew::GetProcAddress ("glGetPathSpacingNV");
    s_deviceConfig.m_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC) glew::GetProcAddress ("glIsPointInFillPathNV");
    s_deviceConfig.m_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC) glew::GetProcAddress ("glIsPointInStrokePathNV");
    s_deviceConfig.m_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC) glew::GetProcAddress ("glGetPathLengthNV");
    s_deviceConfig.m_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC) glew::GetProcAddress ("glPointAlongPathNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    #undef glMatrixLoad3x2fNV
    #undef glMatrixLoad3x3fNV
    #undef glMatrixLoadTranspose3x3fNV
    #undef glMatrixMult3x2fNV
    #undef glMatrixMult3x3fNV
    #undef glMatrixMultTranspose3x3fNV
    #undef glStencilThenCoverFillPathNV
    #undef glStencilThenCoverStrokePathNV
    #undef glStencilThenCoverFillPathInstancedNV
    #undef glStencilThenCoverStrokePathInstancedNV
    #undef glPathGlyphIndexRangeNV
    s_deviceConfig.m_glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC) glew::GetProcAddress ("glMatrixLoad3x2fNV");
    s_deviceConfig.m_glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC) glew::GetProcAddress ("glMatrixLoad3x3fNV");
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) glew::GetProcAddress ("glMatrixLoadTranspose3x3fNV");
    s_deviceConfig.m_glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC) glew::GetProcAddress ("glMatrixMult3x2fNV");
    s_deviceConfig.m_glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC) glew::GetProcAddress ("glMatrixMult3x3fNV");
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) glew::GetProcAddress ("glMatrixMultTranspose3x3fNV");
    s_deviceConfig.m_glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC) glew::GetProcAddress ("glStencilThenCoverFillPathNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) glew::GetProcAddress ("glStencilThenCoverStrokePathNV");
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) glew::GetProcAddress ("glStencilThenCoverFillPathInstancedNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) glew::GetProcAddress ("glStencilThenCoverStrokePathInstancedNV");
    s_deviceConfig.m_glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC) glew::GetProcAddress ("glPathGlyphIndexRangeNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    #undef glPathGlyphIndexArrayNV
    #undef glPathMemoryGlyphIndexArrayNV
    #undef glProgramPathFragmentInputGenNV
    #undef glGetProgramResourcefvNV
    s_deviceConfig.m_glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC) glew::GetProcAddress ("glPathGlyphIndexArrayNV");
    s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) glew::GetProcAddress ("glPathMemoryGlyphIndexArrayNV");
    s_deviceConfig.m_glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) glew::GetProcAddress ("glProgramPathFragmentInputGenNV");
    s_deviceConfig.m_glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC) glew::GetProcAddress ("glGetProgramResourcefvNV");
  }

  // GL_NV_polygon_mode
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_polygon_mode])
  {
    #undef glPolygonModeNV
    s_deviceConfig.m_glPolygonModeNV = (PFNGLPOLYGONMODENVPROC) glew::GetProcAddress ("glPolygonModeNV");
  }

  // GL_NV_read_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_read_buffer])
  {
    #undef glReadBufferNV
    s_deviceConfig.m_glReadBufferNV = (PFNGLREADBUFFERNVPROC) glew::GetProcAddress ("glReadBufferNV");
  }

  // GL_NV_sample_locations
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations])
  {
    #undef glFramebufferSampleLocationsfvNV
    #undef glNamedFramebufferSampleLocationsfvNV
    #undef glResolveDepthValuesNV
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glew::GetProcAddress ("glFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glew::GetProcAddress ("glNamedFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC) glew::GetProcAddress ("glResolveDepthValuesNV");
  }

  // GL_NV_viewport_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array])
  {
    #undef glViewportArrayvNV
    #undef glViewportIndexedfNV
    #undef glViewportIndexedfvNV
    #undef glScissorArrayvNV
    #undef glScissorIndexedNV
    #undef glScissorIndexedvNV
    #undef glDepthRangeArrayfvNV
    #undef glDepthRangeIndexedfNV
    #undef glGetFloati_vNV
    #undef glEnableiNV
    #undef glDisableiNV
    #undef glIsEnablediNV
    s_deviceConfig.m_glViewportArrayvNV = (PFNGLVIEWPORTARRAYVNVPROC) glew::GetProcAddress ("glViewportArrayvNV");
    s_deviceConfig.m_glViewportIndexedfNV = (PFNGLVIEWPORTINDEXEDFNVPROC) glew::GetProcAddress ("glViewportIndexedfNV");
    s_deviceConfig.m_glViewportIndexedfvNV = (PFNGLVIEWPORTINDEXEDFVNVPROC) glew::GetProcAddress ("glViewportIndexedfvNV");
    s_deviceConfig.m_glScissorArrayvNV = (PFNGLSCISSORARRAYVNVPROC) glew::GetProcAddress ("glScissorArrayvNV");
    s_deviceConfig.m_glScissorIndexedNV = (PFNGLSCISSORINDEXEDNVPROC) glew::GetProcAddress ("glScissorIndexedNV");
    s_deviceConfig.m_glScissorIndexedvNV = (PFNGLSCISSORINDEXEDVNVPROC) glew::GetProcAddress ("glScissorIndexedvNV");
    s_deviceConfig.m_glDepthRangeArrayfvNV = (PFNGLDEPTHRANGEARRAYFVNVPROC) glew::GetProcAddress ("glDepthRangeArrayfvNV");
    s_deviceConfig.m_glDepthRangeIndexedfNV = (PFNGLDEPTHRANGEINDEXEDFNVPROC) glew::GetProcAddress ("glDepthRangeIndexedfNV");
    s_deviceConfig.m_glGetFloati_vNV = (PFNGLGETFLOATI_VNVPROC) glew::GetProcAddress ("glGetFloati_vNV");
    s_deviceConfig.m_glEnableiNV = (PFNGLENABLEINVPROC) glew::GetProcAddress ("glEnableiNV");
    s_deviceConfig.m_glDisableiNV = (PFNGLDISABLEINVPROC) glew::GetProcAddress ("glDisableiNV");
    s_deviceConfig.m_glIsEnablediNV = (PFNGLISENABLEDINVPROC) glew::GetProcAddress ("glIsEnablediNV");
  }

  // GL_OES_EGL_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_EGL_image])
  {
    #undef glEGLImageTargetTexture2DOES
    #undef glEGLImageTargetRenderbufferStorageOES
    s_deviceConfig.m_glEGLImageTargetTexture2DOES = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) glew::GetProcAddress ("glEGLImageTargetTexture2DOES");
    s_deviceConfig.m_glEGLImageTargetRenderbufferStorageOES = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) glew::GetProcAddress ("glEGLImageTargetRenderbufferStorageOES");
  }

  // GL_OES_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_copy_image])
  {
    #undef glCopyImageSubDataOES
    s_deviceConfig.m_glCopyImageSubDataOES = (PFNGLCOPYIMAGESUBDATAOESPROC) glew::GetProcAddress ("glCopyImageSubDataOES");
  }

  // GL_OES_draw_buffers_indexed
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_buffers_indexed])
  {
    #undef glEnableiOES
    #undef glDisableiOES
    #undef glBlendEquationiOES
    #undef glBlendEquationSeparateiOES
    #undef glBlendFunciOES
    #undef glBlendFuncSeparateiOES
    #undef glColorMaskiOES
    #undef glIsEnablediOES
    s_deviceConfig.m_glEnableiOES = (PFNGLENABLEIOESPROC) glew::GetProcAddress ("glEnableiOES");
    s_deviceConfig.m_glDisableiOES = (PFNGLDISABLEIOESPROC) glew::GetProcAddress ("glDisableiOES");
    s_deviceConfig.m_glBlendEquationiOES = (PFNGLBLENDEQUATIONIOESPROC) glew::GetProcAddress ("glBlendEquationiOES");
    s_deviceConfig.m_glBlendEquationSeparateiOES = (PFNGLBLENDEQUATIONSEPARATEIOESPROC) glew::GetProcAddress ("glBlendEquationSeparateiOES");
    s_deviceConfig.m_glBlendFunciOES = (PFNGLBLENDFUNCIOESPROC) glew::GetProcAddress ("glBlendFunciOES");
    s_deviceConfig.m_glBlendFuncSeparateiOES = (PFNGLBLENDFUNCSEPARATEIOESPROC) glew::GetProcAddress ("glBlendFuncSeparateiOES");
    s_deviceConfig.m_glColorMaskiOES = (PFNGLCOLORMASKIOESPROC) glew::GetProcAddress ("glColorMaskiOES");
    s_deviceConfig.m_glIsEnablediOES = (PFNGLISENABLEDIOESPROC) glew::GetProcAddress ("glIsEnablediOES");
  }

  // GL_OES_draw_elements_base_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_draw_elements_base_vertex])
  {
    #undef glDrawElementsBaseVertexOES
    #undef glDrawRangeElementsBaseVertexOES
    #undef glDrawElementsInstancedBaseVertexOES
    #undef glMultiDrawElementsBaseVertexOES
    s_deviceConfig.m_glDrawElementsBaseVertexOES = (PFNGLDRAWELEMENTSBASEVERTEXOESPROC) glew::GetProcAddress ("glDrawElementsBaseVertexOES");
    s_deviceConfig.m_glDrawRangeElementsBaseVertexOES = (PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC) glew::GetProcAddress ("glDrawRangeElementsBaseVertexOES");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexOES = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC) glew::GetProcAddress ("glDrawElementsInstancedBaseVertexOES");
    s_deviceConfig.m_glMultiDrawElementsBaseVertexOES = (PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC) glew::GetProcAddress ("glMultiDrawElementsBaseVertexOES");
  }

  // GL_OES_geometry_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_geometry_shader])
  {
    #undef glFramebufferTextureOES
    s_deviceConfig.m_glFramebufferTextureOES = (PFNGLFRAMEBUFFERTEXTUREOESPROC) glew::GetProcAddress ("glFramebufferTextureOES");
  }

  // GL_OES_get_program_binary
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_get_program_binary])
  {
    #undef glGetProgramBinaryOES
    #undef glProgramBinaryOES
    s_deviceConfig.m_glGetProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC) glew::GetProcAddress ("glGetProgramBinaryOES");
    s_deviceConfig.m_glProgramBinaryOES = (PFNGLPROGRAMBINARYOESPROC) glew::GetProcAddress ("glProgramBinaryOES");
  }

  // GL_OES_mapbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_mapbuffer])
  {
    #undef glMapBufferOES
    #undef glUnmapBufferOES
    #undef glGetBufferPointervOES
    s_deviceConfig.m_glMapBufferOES = (PFNGLMAPBUFFEROESPROC) glew::GetProcAddress ("glMapBufferOES");
    s_deviceConfig.m_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC) glew::GetProcAddress ("glUnmapBufferOES");
    s_deviceConfig.m_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC) glew::GetProcAddress ("glGetBufferPointervOES");
  }

  // GL_OES_primitive_bounding_box
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_primitive_bounding_box])
  {
    #undef glPrimitiveBoundingBoxOES
    s_deviceConfig.m_glPrimitiveBoundingBoxOES = (PFNGLPRIMITIVEBOUNDINGBOXOESPROC) glew::GetProcAddress ("glPrimitiveBoundingBoxOES");
  }

  // GL_OES_sample_shading
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_sample_shading])
  {
    #undef glMinSampleShadingOES
    s_deviceConfig.m_glMinSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC) glew::GetProcAddress ("glMinSampleShadingOES");
  }

  // GL_OES_tessellation_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_tessellation_shader])
  {
    #undef glPatchParameteriOES
    s_deviceConfig.m_glPatchParameteriOES = (PFNGLPATCHPARAMETERIOESPROC) glew::GetProcAddress ("glPatchParameteriOES");
  }

  // GL_OES_texture_3D
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_3D])
  {
    #undef glTexImage3DOES
    #undef glTexSubImage3DOES
    #undef glCopyTexSubImage3DOES
    #undef glCompressedTexImage3DOES
    #undef glCompressedTexSubImage3DOES
    #undef glFramebufferTexture3DOES
    s_deviceConfig.m_glTexImage3DOES = (PFNGLTEXIMAGE3DOESPROC) glew::GetProcAddress ("glTexImage3DOES");
    s_deviceConfig.m_glTexSubImage3DOES = (PFNGLTEXSUBIMAGE3DOESPROC) glew::GetProcAddress ("glTexSubImage3DOES");
    s_deviceConfig.m_glCopyTexSubImage3DOES = (PFNGLCOPYTEXSUBIMAGE3DOESPROC) glew::GetProcAddress ("glCopyTexSubImage3DOES");
    s_deviceConfig.m_glCompressedTexImage3DOES = (PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) glew::GetProcAddress ("glCompressedTexImage3DOES");
    s_deviceConfig.m_glCompressedTexSubImage3DOES = (PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) glew::GetProcAddress ("glCompressedTexSubImage3DOES");
    s_deviceConfig.m_glFramebufferTexture3DOES = (PFNGLFRAMEBUFFERTEXTURE3DOESPROC) glew::GetProcAddress ("glFramebufferTexture3DOES");
  }

  // GL_OES_texture_border_clamp
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_border_clamp])
  {
    #undef glTexParameterIivOES
    #undef glTexParameterIuivOES
    #undef glGetTexParameterIivOES
    #undef glGetTexParameterIuivOES
    #undef glSamplerParameterIivOES
    #undef glSamplerParameterIuivOES
    #undef glGetSamplerParameterIivOES
    #undef glGetSamplerParameterIuivOES
    s_deviceConfig.m_glTexParameterIivOES = (PFNGLTEXPARAMETERIIVOESPROC) glew::GetProcAddress ("glTexParameterIivOES");
    s_deviceConfig.m_glTexParameterIuivOES = (PFNGLTEXPARAMETERIUIVOESPROC) glew::GetProcAddress ("glTexParameterIuivOES");
    s_deviceConfig.m_glGetTexParameterIivOES = (PFNGLGETTEXPARAMETERIIVOESPROC) glew::GetProcAddress ("glGetTexParameterIivOES");
    s_deviceConfig.m_glGetTexParameterIuivOES = (PFNGLGETTEXPARAMETERIUIVOESPROC) glew::GetProcAddress ("glGetTexParameterIuivOES");
    s_deviceConfig.m_glSamplerParameterIivOES = (PFNGLSAMPLERPARAMETERIIVOESPROC) glew::GetProcAddress ("glSamplerParameterIivOES");
    s_deviceConfig.m_glSamplerParameterIuivOES = (PFNGLSAMPLERPARAMETERIUIVOESPROC) glew::GetProcAddress ("glSamplerParameterIuivOES");
    s_deviceConfig.m_glGetSamplerParameterIivOES = (PFNGLGETSAMPLERPARAMETERIIVOESPROC) glew::GetProcAddress ("glGetSamplerParameterIivOES");
    s_deviceConfig.m_glGetSamplerParameterIuivOES = (PFNGLGETSAMPLERPARAMETERIUIVOESPROC) glew::GetProcAddress ("glGetSamplerParameterIuivOES");
  }

  // GL_OES_texture_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_buffer])
  {
    #undef glTexBufferOES
    #undef glTexBufferRangeOES
    s_deviceConfig.m_glTexBufferOES = (PFNGLTEXBUFFEROESPROC) glew::GetProcAddress ("glTexBufferOES");
    s_deviceConfig.m_glTexBufferRangeOES = (PFNGLTEXBUFFERRANGEOESPROC) glew::GetProcAddress ("glTexBufferRangeOES");
  }

  // GL_OES_texture_storage_multisample_2d_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_storage_multisample_2d_array])
  {
    #undef glTexStorage3DMultisampleOES
    s_deviceConfig.m_glTexStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC) glew::GetProcAddress ("glTexStorage3DMultisampleOES");
  }

  // GL_OES_texture_view
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_texture_view])
  {
    #undef glTextureViewOES
    s_deviceConfig.m_glTextureViewOES = (PFNGLTEXTUREVIEWOESPROC) glew::GetProcAddress ("glTextureViewOES");
  }

  // GL_OES_vertex_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_vertex_array_object])
  {
    #undef glBindVertexArrayOES
    #undef glDeleteVertexArraysOES
    #undef glGenVertexArraysOES
    #undef glIsVertexArrayOES
    s_deviceConfig.m_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC) glew::GetProcAddress ("glBindVertexArrayOES");
    s_deviceConfig.m_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC) glew::GetProcAddress ("glDeleteVertexArraysOES");
    s_deviceConfig.m_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC) glew::GetProcAddress ("glGenVertexArraysOES");
    s_deviceConfig.m_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC) glew::GetProcAddress ("glIsVertexArrayOES");
  }

  // GL_OVR_multiview
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview])
  {
    #undef glFramebufferTextureMultiviewOVR
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) glew::GetProcAddress ("glFramebufferTextureMultiviewOVR");
  }

  // GL_QCOM_alpha_test
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_alpha_test])
  {
    #undef glAlphaFuncQCOM
    s_deviceConfig.m_glAlphaFuncQCOM = (PFNGLALPHAFUNCQCOMPROC) glew::GetProcAddress ("glAlphaFuncQCOM");
  }

  // GL_QCOM_driver_control
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_driver_control])
  {
    #undef glGetDriverControlsQCOM
    #undef glGetDriverControlStringQCOM
    #undef glEnableDriverControlQCOM
    #undef glDisableDriverControlQCOM
    s_deviceConfig.m_glGetDriverControlsQCOM = (PFNGLGETDRIVERCONTROLSQCOMPROC) glew::GetProcAddress ("glGetDriverControlsQCOM");
    s_deviceConfig.m_glGetDriverControlStringQCOM = (PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) glew::GetProcAddress ("glGetDriverControlStringQCOM");
    s_deviceConfig.m_glEnableDriverControlQCOM = (PFNGLENABLEDRIVERCONTROLQCOMPROC) glew::GetProcAddress ("glEnableDriverControlQCOM");
    s_deviceConfig.m_glDisableDriverControlQCOM = (PFNGLDISABLEDRIVERCONTROLQCOMPROC) glew::GetProcAddress ("glDisableDriverControlQCOM");
  }

  // GL_QCOM_extended_get
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get])
  {
    #undef glExtGetTexturesQCOM
    #undef glExtGetBuffersQCOM
    #undef glExtGetRenderbuffersQCOM
    #undef glExtGetFramebuffersQCOM
    #undef glExtGetTexLevelParameterivQCOM
    #undef glExtTexObjectStateOverrideiQCOM
    #undef glExtGetTexSubImageQCOM
    #undef glExtGetBufferPointervQCOM
    s_deviceConfig.m_glExtGetTexturesQCOM = (PFNGLEXTGETTEXTURESQCOMPROC) glew::GetProcAddress ("glExtGetTexturesQCOM");
    s_deviceConfig.m_glExtGetBuffersQCOM = (PFNGLEXTGETBUFFERSQCOMPROC) glew::GetProcAddress ("glExtGetBuffersQCOM");
    s_deviceConfig.m_glExtGetRenderbuffersQCOM = (PFNGLEXTGETRENDERBUFFERSQCOMPROC) glew::GetProcAddress ("glExtGetRenderbuffersQCOM");
    s_deviceConfig.m_glExtGetFramebuffersQCOM = (PFNGLEXTGETFRAMEBUFFERSQCOMPROC) glew::GetProcAddress ("glExtGetFramebuffersQCOM");
    s_deviceConfig.m_glExtGetTexLevelParameterivQCOM = (PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) glew::GetProcAddress ("glExtGetTexLevelParameterivQCOM");
    s_deviceConfig.m_glExtTexObjectStateOverrideiQCOM = (PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) glew::GetProcAddress ("glExtTexObjectStateOverrideiQCOM");
    s_deviceConfig.m_glExtGetTexSubImageQCOM = (PFNGLEXTGETTEXSUBIMAGEQCOMPROC) glew::GetProcAddress ("glExtGetTexSubImageQCOM");
    s_deviceConfig.m_glExtGetBufferPointervQCOM = (PFNGLEXTGETBUFFERPOINTERVQCOMPROC) glew::GetProcAddress ("glExtGetBufferPointervQCOM");
  }

  // GL_QCOM_extended_get2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_extended_get2])
  {
    #undef glExtGetShadersQCOM
    #undef glExtGetProgramsQCOM
    #undef glExtIsProgramBinaryQCOM
    #undef glExtGetProgramBinarySourceQCOM
    s_deviceConfig.m_glExtGetShadersQCOM = (PFNGLEXTGETSHADERSQCOMPROC) glew::GetProcAddress ("glExtGetShadersQCOM");
    s_deviceConfig.m_glExtGetProgramsQCOM = (PFNGLEXTGETPROGRAMSQCOMPROC) glew::GetProcAddress ("glExtGetProgramsQCOM");
    s_deviceConfig.m_glExtIsProgramBinaryQCOM = (PFNGLEXTISPROGRAMBINARYQCOMPROC) glew::GetProcAddress ("glExtIsProgramBinaryQCOM");
    s_deviceConfig.m_glExtGetProgramBinarySourceQCOM = (PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) glew::GetProcAddress ("glExtGetProgramBinarySourceQCOM");
  }

  // GL_QCOM_tiled_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_QCOM_tiled_rendering])
  {
    #undef glStartTilingQCOM
    #undef glEndTilingQCOM
    s_deviceConfig.m_glStartTilingQCOM = (PFNGLSTARTTILINGQCOMPROC) glew::GetProcAddress ("glStartTilingQCOM");
    s_deviceConfig.m_glEndTilingQCOM = (PFNGLENDTILINGQCOMPROC) glew::GetProcAddress ("glEndTilingQCOM");
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gles::Deinitialise ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
