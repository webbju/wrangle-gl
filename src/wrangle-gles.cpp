////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-gles.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveTexture (GLenum texture)
{
  // GL_ES_VERSION_2_0 - glActiveTexture
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glActiveTexture)
  {
    deviceState->m_glActiveTexture (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glAttachShader (GLuint program, GLuint shader)
{
  // GL_ES_VERSION_2_0 - glAttachShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glAttachShader)
  {
    deviceState->m_glAttachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindAttribLocation (GLuint program, GLuint index, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glBindAttribLocation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindAttribLocation)
  {
    deviceState->m_glBindAttribLocation (program, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffer (GLenum target, GLuint buffer)
{
  // GL_ES_VERSION_2_0 - glBindBuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBuffer)
  {
    deviceState->m_glBindBuffer (target, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFramebuffer (GLenum target, GLuint framebuffer)
{
  // GL_ES_VERSION_2_0 - glBindFramebuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindFramebuffer)
  {
    deviceState->m_glBindFramebuffer (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glBindRenderbuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindRenderbuffer)
  {
    deviceState->m_glBindRenderbuffer (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTexture (GLenum target, GLuint texture)
{
  // GL_ES_VERSION_2_0 - glBindTexture
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindTexture)
  {
    deviceState->m_glBindTexture (target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ES_VERSION_2_0 - glBlendColor
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendColor)
  {
    deviceState->m_glBlendColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquation (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glBlendEquation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquation)
  {
    deviceState->m_glBlendEquation (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha)
{
  // GL_ES_VERSION_2_0 - glBlendEquationSeparate
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationSeparate)
  {
    deviceState->m_glBlendEquationSeparate (modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunc (GLenum sfactor, GLenum dfactor)
{
  // GL_ES_VERSION_2_0 - glBlendFunc
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFunc)
  {
    deviceState->m_glBlendFunc (sfactor, dfactor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  // GL_ES_VERSION_2_0 - glBlendFuncSeparate
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFuncSeparate)
  {
    deviceState->m_glBlendFuncSeparate (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferData (GLenum target, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_ES_VERSION_2_0 - glBufferData
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBufferData)
  {
    deviceState->m_glBufferData (target, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_ES_VERSION_2_0 - glBufferSubData
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBufferSubData)
  {
    deviceState->m_glBufferSubData (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckFramebufferStatus (GLenum target)
{
  // GL_ES_VERSION_2_0 - glCheckFramebufferStatus
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCheckFramebufferStatus)
  {
    return deviceState->m_glCheckFramebufferStatus (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClear (GLbitfield mask)
{
  // GL_ES_VERSION_2_0 - glClear
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClear)
  {
    deviceState->m_glClear (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ES_VERSION_2_0 - glClearColor
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearColor)
  {
    deviceState->m_glClearColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearDepthf (GLfloat d)
{
  // GL_ES_VERSION_2_0 - glClearDepthf
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearDepthf)
  {
    deviceState->m_glClearDepthf (d);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearStencil (GLint s)
{
  // GL_ES_VERSION_2_0 - glClearStencil
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearStencil)
  {
    deviceState->m_glClearStencil (s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  // GL_ES_VERSION_2_0 - glColorMask
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glColorMask)
  {
    deviceState->m_glColorMask (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompileShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glCompileShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompileShader)
  {
    deviceState->m_glCompileShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_2_0 - glCompressedTexImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexImage2D)
  {
    deviceState->m_glCompressedTexImage2D (target, level, internalformat, width, height, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_2_0 - glCompressedTexSubImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexSubImage2D)
  {
    deviceState->m_glCompressedTexSubImage2D (target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_ES_VERSION_2_0 - glCopyTexImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTexImage2D)
  {
    deviceState->m_glCopyTexImage2D (target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glCopyTexSubImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTexSubImage2D)
  {
    deviceState->m_glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateProgram ()
{
  // GL_ES_VERSION_2_0 - glCreateProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateProgram)
  {
    return deviceState->m_glCreateProgram ();
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShader (GLenum type)
{
  // GL_ES_VERSION_2_0 - glCreateShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateShader)
  {
    return deviceState->m_glCreateShader (type);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCullFace (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glCullFace
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCullFace)
  {
    deviceState->m_glCullFace (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteBuffers (GLsizei n, const GLuint * buffers)
{
  // GL_ES_VERSION_2_0 - glDeleteBuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteBuffers)
  {
    deviceState->m_glDeleteBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers)
{
  // GL_ES_VERSION_2_0 - glDeleteFramebuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteFramebuffers)
  {
    deviceState->m_glDeleteFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glDeleteProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteProgram)
  {
    deviceState->m_glDeleteProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers)
{
  // GL_ES_VERSION_2_0 - glDeleteRenderbuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteRenderbuffers)
  {
    deviceState->m_glDeleteRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glDeleteShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteShader)
  {
    deviceState->m_glDeleteShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTextures (GLsizei n, const GLuint * textures)
{
  // GL_ES_VERSION_2_0 - glDeleteTextures
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteTextures)
  {
    deviceState->m_glDeleteTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthFunc (GLenum func)
{
  // GL_ES_VERSION_2_0 - glDepthFunc
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthFunc)
  {
    deviceState->m_glDepthFunc (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthMask (GLboolean flag)
{
  // GL_ES_VERSION_2_0 - glDepthMask
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthMask)
  {
    deviceState->m_glDepthMask (flag);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangef (GLfloat n, GLfloat f)
{
  // GL_ES_VERSION_2_0 - glDepthRangef
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangef)
  {
    deviceState->m_glDepthRangef (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDetachShader (GLuint program, GLuint shader)
{
  // GL_ES_VERSION_2_0 - glDetachShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDetachShader)
  {
    deviceState->m_glDetachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisable (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glDisable
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisable)
  {
    deviceState->m_glDisable (cap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableVertexAttribArray (GLuint index)
{
  // GL_ES_VERSION_2_0 - glDisableVertexAttribArray
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableVertexAttribArray)
  {
    deviceState->m_glDisableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArrays (GLenum mode, GLint first, GLsizei count)
{
  // GL_ES_VERSION_2_0 - glDrawArrays
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArrays)
  {
    deviceState->m_glDrawArrays (mode, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElements (GLenum mode, GLsizei count, GLenum type, const void * indices)
{
  // GL_ES_VERSION_2_0 - glDrawElements
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElements)
  {
    deviceState->m_glDrawElements (mode, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnable (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glEnable
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnable)
  {
    deviceState->m_glEnable (cap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableVertexAttribArray (GLuint index)
{
  // GL_ES_VERSION_2_0 - glEnableVertexAttribArray
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableVertexAttribArray)
  {
    deviceState->m_glEnableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFinish ()
{
  // GL_ES_VERSION_2_0 - glFinish
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFinish)
  {
    deviceState->m_glFinish ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlush ()
{
  // GL_ES_VERSION_2_0 - glFlush
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFlush)
  {
    deviceState->m_glFlush ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glFramebufferRenderbuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferRenderbuffer)
  {
    deviceState->m_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ES_VERSION_2_0 - glFramebufferTexture2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture2D)
  {
    deviceState->m_glFramebufferTexture2D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFrontFace (GLenum mode)
{
  // GL_ES_VERSION_2_0 - glFrontFace
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFrontFace)
  {
    deviceState->m_glFrontFace (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenBuffers (GLsizei n, GLuint * buffers)
{
  // GL_ES_VERSION_2_0 - glGenBuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenBuffers)
  {
    deviceState->m_glGenBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateMipmap (GLenum target)
{
  // GL_ES_VERSION_2_0 - glGenerateMipmap
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenerateMipmap)
  {
    deviceState->m_glGenerateMipmap (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ES_VERSION_2_0 - glGenFramebuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenFramebuffers)
  {
    deviceState->m_glGenFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ES_VERSION_2_0 - glGenRenderbuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenRenderbuffers)
  {
    deviceState->m_glGenRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTextures (GLsizei n, GLuint * textures)
{
  // GL_ES_VERSION_2_0 - glGenTextures
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenTextures)
  {
    deviceState->m_glGenTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetActiveAttrib
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveAttrib)
  {
    deviceState->m_glGetActiveAttrib (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetActiveUniform
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniform)
  {
    deviceState->m_glGetActiveUniform (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders)
{
  // GL_ES_VERSION_2_0 - glGetAttachedShaders
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetAttachedShaders)
  {
    deviceState->m_glGetAttachedShaders (program, maxCount, count, shaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetAttribLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetAttribLocation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetAttribLocation)
  {
    return deviceState->m_glGetAttribLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBooleanv (GLenum pname, GLboolean * data)
{
  // GL_ES_VERSION_2_0 - glGetBooleanv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBooleanv)
  {
    deviceState->m_glGetBooleanv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetBufferParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBufferParameteriv)
  {
    deviceState->m_glGetBufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetError ()
{
  // GL_ES_VERSION_2_0 - glGetError
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetError)
  {
    return deviceState->m_glGetError ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloatv (GLenum pname, GLfloat * data)
{
  // GL_ES_VERSION_2_0 - glGetFloatv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFloatv)
  {
    deviceState->m_glGetFloatv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetFramebufferAttachmentParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFramebufferAttachmentParameteriv)
  {
    deviceState->m_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegerv (GLenum pname, GLint * data)
{
  // GL_ES_VERSION_2_0 - glGetIntegerv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetIntegerv)
  {
    deviceState->m_glGetIntegerv (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramiv (GLuint program, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetProgramiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramiv)
  {
    deviceState->m_glGetProgramiv (program, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_2_0 - glGetProgramInfoLog
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramInfoLog)
  {
    deviceState->m_glGetProgramInfoLog (program, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetRenderbufferParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetRenderbufferParameteriv)
  {
    deviceState->m_glGetRenderbufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderiv (GLuint shader, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetShaderiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetShaderiv)
  {
    deviceState->m_glGetShaderiv (shader, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_2_0 - glGetShaderInfoLog
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetShaderInfoLog)
  {
    deviceState->m_glGetShaderInfoLog (shader, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
  // GL_ES_VERSION_2_0 - glGetShaderPrecisionFormat
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetShaderPrecisionFormat)
  {
    deviceState->m_glGetShaderPrecisionFormat (shadertype, precisiontype, range, precision);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source)
{
  // GL_ES_VERSION_2_0 - glGetShaderSource
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetShaderSource)
  {
    deviceState->m_glGetShaderSource (shader, bufSize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * glGetString (GLenum name)
{
  // GL_ES_VERSION_2_0 - glGetString
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetString)
  {
    return deviceState->m_glGetString (name);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetTexParameterfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameterfv)
  {
    deviceState->m_glGetTexParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetTexParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameteriv)
  {
    deviceState->m_glGetTexParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformfv (GLuint program, GLint location, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetUniformfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformfv)
  {
    deviceState->m_glGetUniformfv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformiv (GLuint program, GLint location, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetUniformiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformiv)
  {
    deviceState->m_glGetUniformiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetUniformLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_2_0 - glGetUniformLocation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformLocation)
  {
    return deviceState->m_glGetUniformLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribfv)
  {
    deviceState->m_glGetVertexAttribfv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribiv)
  {
    deviceState->m_glGetVertexAttribiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribPointerv (GLuint index, GLenum pname, void ** pointer)
{
  // GL_ES_VERSION_2_0 - glGetVertexAttribPointerv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribPointerv)
  {
    deviceState->m_glGetVertexAttribPointerv (index, pname, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glHint (GLenum target, GLenum mode)
{
  // GL_ES_VERSION_2_0 - glHint
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glHint)
  {
    deviceState->m_glHint (target, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsBuffer (GLuint buffer)
{
  // GL_ES_VERSION_2_0 - glIsBuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsBuffer)
  {
    return deviceState->m_glIsBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnabled (GLenum cap)
{
  // GL_ES_VERSION_2_0 - glIsEnabled
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsEnabled)
  {
    return deviceState->m_glIsEnabled (cap);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFramebuffer (GLuint framebuffer)
{
  // GL_ES_VERSION_2_0 - glIsFramebuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsFramebuffer)
  {
    return deviceState->m_glIsFramebuffer (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glIsProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsProgram)
  {
    return deviceState->m_glIsProgram (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsRenderbuffer (GLuint renderbuffer)
{
  // GL_ES_VERSION_2_0 - glIsRenderbuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsRenderbuffer)
  {
    return deviceState->m_glIsRenderbuffer (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsShader (GLuint shader)
{
  // GL_ES_VERSION_2_0 - glIsShader
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsShader)
  {
    return deviceState->m_glIsShader (shader);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTexture (GLuint texture)
{
  // GL_ES_VERSION_2_0 - glIsTexture
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsTexture)
  {
    return deviceState->m_glIsTexture (texture);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLineWidth (GLfloat width)
{
  // GL_ES_VERSION_2_0 - glLineWidth
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glLineWidth)
  {
    deviceState->m_glLineWidth (width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLinkProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glLinkProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glLinkProgram)
  {
    deviceState->m_glLinkProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPixelStorei (GLenum pname, GLint param)
{
  // GL_ES_VERSION_2_0 - glPixelStorei
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPixelStorei)
  {
    deviceState->m_glPixelStorei (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPolygonOffset (GLfloat factor, GLfloat units)
{
  // GL_ES_VERSION_2_0 - glPolygonOffset
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPolygonOffset)
  {
    deviceState->m_glPolygonOffset (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels)
{
  // GL_ES_VERSION_2_0 - glReadPixels
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadPixels)
  {
    deviceState->m_glReadPixels (x, y, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReleaseShaderCompiler ()
{
  // GL_ES_VERSION_2_0 - glReleaseShaderCompiler
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReleaseShaderCompiler)
  {
    deviceState->m_glReleaseShaderCompiler ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glRenderbufferStorage
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorage)
  {
    deviceState->m_glRenderbufferStorage (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleCoverage (GLfloat value, GLboolean invert)
{
  // GL_ES_VERSION_2_0 - glSampleCoverage
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSampleCoverage)
  {
    deviceState->m_glSampleCoverage (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissor (GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glScissor
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glScissor)
  {
    deviceState->m_glScissor (x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
  // GL_ES_VERSION_2_0 - glShaderBinary
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glShaderBinary)
  {
    deviceState->m_glShaderBinary (count, shaders, binaryformat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderSource (GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length)
{
  // GL_ES_VERSION_2_0 - glShaderSource
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glShaderSource)
  {
    deviceState->m_glShaderSource (shader, count, string, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFunc (GLenum func, GLint ref, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilFunc
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilFunc)
  {
    deviceState->m_glStencilFunc (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilFuncSeparate
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilFuncSeparate)
  {
    deviceState->m_glStencilFuncSeparate (face, func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilMask (GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilMask
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilMask)
  {
    deviceState->m_glStencilMask (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilMaskSeparate (GLenum face, GLuint mask)
{
  // GL_ES_VERSION_2_0 - glStencilMaskSeparate
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilMaskSeparate)
  {
    deviceState->m_glStencilMaskSeparate (face, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass)
{
  // GL_ES_VERSION_2_0 - glStencilOp
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilOp)
  {
    deviceState->m_glStencilOp (fail, zfail, zpass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  // GL_ES_VERSION_2_0 - glStencilOpSeparate
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilOpSeparate)
  {
    deviceState->m_glStencilOpSeparate (face, sfail, dpfail, dppass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_2_0 - glTexImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexImage2D)
  {
    deviceState->m_glTexImage2D (target, level, internalformat, width, height, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterf (GLenum target, GLenum pname, GLfloat param)
{
  // GL_ES_VERSION_2_0 - glTexParameterf
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterf)
  {
    deviceState->m_glTexParameterf (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterfv (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_ES_VERSION_2_0 - glTexParameterfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterfv)
  {
    deviceState->m_glTexParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ES_VERSION_2_0 - glTexParameteri
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameteri)
  {
    deviceState->m_glTexParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameteriv (GLenum target, GLenum pname, const GLint * params)
{
  // GL_ES_VERSION_2_0 - glTexParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameteriv)
  {
    deviceState->m_glTexParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_2_0 - glTexSubImage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexSubImage2D)
  {
    deviceState->m_glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1f (GLint location, GLfloat v0)
{
  // GL_ES_VERSION_2_0 - glUniform1f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1f)
  {
    deviceState->m_glUniform1f (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform1fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1fv)
  {
    deviceState->m_glUniform1fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1i (GLint location, GLint v0)
{
  // GL_ES_VERSION_2_0 - glUniform1i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1i)
  {
    deviceState->m_glUniform1i (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform1iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1iv)
  {
    deviceState->m_glUniform1iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2f (GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ES_VERSION_2_0 - glUniform2f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2f)
  {
    deviceState->m_glUniform2f (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2fv)
  {
    deviceState->m_glUniform2fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2i (GLint location, GLint v0, GLint v1)
{
  // GL_ES_VERSION_2_0 - glUniform2i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2i)
  {
    deviceState->m_glUniform2i (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform2iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2iv)
  {
    deviceState->m_glUniform2iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ES_VERSION_2_0 - glUniform3f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3f)
  {
    deviceState->m_glUniform3f (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3fv)
  {
    deviceState->m_glUniform3fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ES_VERSION_2_0 - glUniform3i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3i)
  {
    deviceState->m_glUniform3i (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform3iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3iv)
  {
    deviceState->m_glUniform3iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ES_VERSION_2_0 - glUniform4f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4f)
  {
    deviceState->m_glUniform4f (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniform4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4fv)
  {
    deviceState->m_glUniform4fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ES_VERSION_2_0 - glUniform4i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4i)
  {
    deviceState->m_glUniform4i (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_2_0 - glUniform4iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4iv)
  {
    deviceState->m_glUniform4iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2fv)
  {
    deviceState->m_glUniformMatrix2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3fv)
  {
    deviceState->m_glUniformMatrix3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_2_0 - glUniformMatrix4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4fv)
  {
    deviceState->m_glUniformMatrix4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glUseProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUseProgram)
  {
    deviceState->m_glUseProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgram (GLuint program)
{
  // GL_ES_VERSION_2_0 - glValidateProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glValidateProgram)
  {
    deviceState->m_glValidateProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib1f (GLuint index, GLfloat x)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib1f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib1f)
  {
    deviceState->m_glVertexAttrib1f (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib1fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib1fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib1fv)
  {
    deviceState->m_glVertexAttrib1fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib2f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib2f)
  {
    deviceState->m_glVertexAttrib2f (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib2fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib2fv)
  {
    deviceState->m_glVertexAttrib2fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib3f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib3f)
  {
    deviceState->m_glVertexAttrib3f (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib3fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib3fv)
  {
    deviceState->m_glVertexAttrib3fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib4f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib4f)
  {
    deviceState->m_glVertexAttrib4f (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttrib4fv (GLuint index, const GLfloat * v)
{
  // GL_ES_VERSION_2_0 - glVertexAttrib4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttrib4fv)
  {
    deviceState->m_glVertexAttrib4fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)
{
  // GL_ES_VERSION_2_0 - glVertexAttribPointer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribPointer)
  {
    deviceState->m_glVertexAttribPointer (index, size, type, normalized, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewport (GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_2_0 - glViewport
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glViewport)
  {
    deviceState->m_glViewport (x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBuffer (GLenum src)
{
  // GL_ES_VERSION_3_0 - glReadBuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadBuffer)
  {
    deviceState->m_glReadBuffer (src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
  // GL_ES_VERSION_3_0 - glDrawRangeElements
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawRangeElements)
  {
    deviceState->m_glDrawRangeElements (mode, start, end, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexImage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexImage3D)
  {
    deviceState->m_glTexImage3D (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_ES_VERSION_3_0 - glTexSubImage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexSubImage3D)
  {
    deviceState->m_glTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glCopyTexSubImage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTexSubImage3D)
  {
    deviceState->m_glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexImage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexImage3D)
  {
    deviceState->m_glCompressedTexImage3D (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ES_VERSION_3_0 - glCompressedTexSubImage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexSubImage3D)
  {
    deviceState->m_glCompressedTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenQueries (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenQueries
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenQueries)
  {
    deviceState->m_glGenQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteQueries (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteQueries
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteQueries)
  {
    deviceState->m_glDeleteQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsQuery (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsQuery
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsQuery)
  {
    return deviceState->m_glIsQuery (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQuery (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBeginQuery
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginQuery)
  {
    deviceState->m_glBeginQuery (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQuery (GLenum target)
{
  // GL_ES_VERSION_3_0 - glEndQuery
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndQuery)
  {
    deviceState->m_glEndQuery (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryiv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryiv)
  {
    deviceState->m_glGetQueryiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetQueryObjectuiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjectuiv)
  {
    deviceState->m_glGetQueryObjectuiv (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapBuffer (GLenum target)
{
  // GL_ES_VERSION_3_0 - glUnmapBuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUnmapBuffer)
  {
    return deviceState->m_glUnmapBuffer (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferPointerv (GLenum target, GLenum pname, void ** params)
{
  // GL_ES_VERSION_3_0 - glGetBufferPointerv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBufferPointerv)
  {
    deviceState->m_glGetBufferPointerv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffers (GLsizei n, const GLenum * bufs)
{
  // GL_ES_VERSION_3_0 - glDrawBuffers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawBuffers)
  {
    deviceState->m_glDrawBuffers (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x3fv)
  {
    deviceState->m_glUniformMatrix2x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x2fv)
  {
    deviceState->m_glUniformMatrix3x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix2x4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x4fv)
  {
    deviceState->m_glUniformMatrix2x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x2fv)
  {
    deviceState->m_glUniformMatrix4x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix3x4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x4fv)
  {
    deviceState->m_glUniformMatrix3x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glUniformMatrix4x3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x3fv)
  {
    deviceState->m_glUniformMatrix4x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ES_VERSION_3_0 - glBlitFramebuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlitFramebuffer)
  {
    deviceState->m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glRenderbufferStorageMultisample
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisample)
  {
    deviceState->m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ES_VERSION_3_0 - glFramebufferTextureLayer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTextureLayer)
  {
    deviceState->m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ES_VERSION_3_0 - glMapBufferRange
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMapBufferRange)
  {
    return deviceState->m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_ES_VERSION_3_0 - glFlushMappedBufferRange
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFlushMappedBufferRange)
  {
    deviceState->m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glBindVertexArray
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexArray)
  {
    deviceState->m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glDeleteVertexArrays
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteVertexArrays)
  {
    deviceState->m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ES_VERSION_3_0 - glGenVertexArrays
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenVertexArrays)
  {
    deviceState->m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArray (GLuint array)
{
  // GL_ES_VERSION_3_0 - glIsVertexArray
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsVertexArray)
  {
    return deviceState->m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_ES_VERSION_3_0 - glGetIntegeri_v
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetIntegeri_v)
  {
    deviceState->m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginTransformFeedback (GLenum primitiveMode)
{
  // GL_ES_VERSION_3_0 - glBeginTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginTransformFeedback)
  {
    deviceState->m_glBeginTransformFeedback (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glEndTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndTransformFeedback)
  {
    deviceState->m_glEndTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glBindBufferRange
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBufferRange)
  {
    deviceState->m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_ES_VERSION_3_0 - glBindBufferBase
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBufferBase)
  {
    deviceState->m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
  // GL_ES_VERSION_3_0 - glTransformFeedbackVaryings
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTransformFeedbackVaryings)
  {
    deviceState->m_glTransformFeedbackVaryings (program, count, varyings, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetTransformFeedbackVarying
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTransformFeedbackVarying)
  {
    deviceState->m_glGetTransformFeedbackVarying (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ES_VERSION_3_0 - glVertexAttribIPointer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribIPointer)
  {
    deviceState->m_glVertexAttribIPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribIiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribIiv)
  {
    deviceState->m_glGetVertexAttribIiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetVertexAttribIuiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribIuiv)
  {
    deviceState->m_glGetVertexAttribIuiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribI4i)
  {
    deviceState->m_glVertexAttribI4i (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribI4ui)
  {
    deviceState->m_glVertexAttribI4ui (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4iv (GLuint index, const GLint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribI4iv)
  {
    deviceState->m_glVertexAttribI4iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribI4uiv (GLuint index, const GLuint * v)
{
  // GL_ES_VERSION_3_0 - glVertexAttribI4uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribI4uiv)
  {
    deviceState->m_glVertexAttribI4uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformuiv (GLuint program, GLint location, GLuint * params)
{
  // GL_ES_VERSION_3_0 - glGetUniformuiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformuiv)
  {
    deviceState->m_glGetUniformuiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetFragDataLocation (GLuint program, const GLchar * name)
{
  // GL_ES_VERSION_3_0 - glGetFragDataLocation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFragDataLocation)
  {
    return deviceState->m_glGetFragDataLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1ui (GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_0 - glUniform1ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1ui)
  {
    deviceState->m_glUniform1ui (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2ui (GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_0 - glUniform2ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2ui)
  {
    deviceState->m_glUniform2ui (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_0 - glUniform3ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3ui)
  {
    deviceState->m_glUniform3ui (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_0 - glUniform4ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4ui)
  {
    deviceState->m_glUniform4ui (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform1uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1uiv)
  {
    deviceState->m_glUniform1uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform2uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2uiv)
  {
    deviceState->m_glUniform2uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform3uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3uiv)
  {
    deviceState->m_glUniform3uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glUniform4uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4uiv)
  {
    deviceState->m_glUniform4uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferiv)
  {
    deviceState->m_glClearBufferiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferuiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferuiv)
  {
    deviceState->m_glClearBufferuiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_ES_VERSION_3_0 - glClearBufferfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferfv)
  {
    deviceState->m_glClearBufferfv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  // GL_ES_VERSION_3_0 - glClearBufferfi
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferfi)
  {
    deviceState->m_glClearBufferfi (buffer, drawbuffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * glGetStringi (GLenum name, GLuint index)
{
  // GL_ES_VERSION_3_0 - glGetStringi
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetStringi)
  {
    return deviceState->m_glGetStringi (name, index);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ES_VERSION_3_0 - glCopyBufferSubData
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyBufferSubData)
  {
    deviceState->m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_ES_VERSION_3_0 - glGetUniformIndices
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformIndices)
  {
    deviceState->m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformsiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformsiv)
  {
    deviceState->m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetUniformBlockIndex
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformBlockIndex)
  {
    return deviceState->m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformBlockiv)
  {
    deviceState->m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_ES_VERSION_3_0 - glGetActiveUniformBlockName
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformBlockName)
  {
    deviceState->m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_ES_VERSION_3_0 - glUniformBlockBinding
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformBlockBinding)
  {
    deviceState->m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawArraysInstanced
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstanced)
  {
    deviceState->m_glDrawArraysInstanced (mode, first, count, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)
{
  // GL_ES_VERSION_3_0 - glDrawElementsInstanced
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstanced)
  {
    deviceState->m_glDrawElementsInstanced (mode, count, type, indices, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_ES_VERSION_3_0 - glFenceSync
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFenceSync)
  {
    return deviceState->m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glIsSync
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsSync)
  {
    return deviceState->m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSync (GLsync sync)
{
  // GL_ES_VERSION_3_0 - glDeleteSync
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteSync)
  {
    deviceState->m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glClientWaitSync
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClientWaitSync)
  {
    return deviceState->m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ES_VERSION_3_0 - glWaitSync
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glWaitSync)
  {
    deviceState->m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64v
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInteger64v)
  {
    deviceState->m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_ES_VERSION_3_0 - glGetSynciv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSynciv)
  {
    deviceState->m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64i_v (GLenum target, GLuint index, GLint64 * data)
{
  // GL_ES_VERSION_3_0 - glGetInteger64i_v
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInteger64i_v)
  {
    deviceState->m_glGetInteger64i_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 * params)
{
  // GL_ES_VERSION_3_0 - glGetBufferParameteri64v
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBufferParameteri64v)
  {
    deviceState->m_glGetBufferParameteri64v (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glGenSamplers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenSamplers)
  {
    deviceState->m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_ES_VERSION_3_0 - glDeleteSamplers
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteSamplers)
  {
    deviceState->m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSampler (GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glIsSampler
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsSampler)
  {
    return deviceState->m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_ES_VERSION_3_0 - glBindSampler
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindSampler)
  {
    deviceState->m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteri
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameteri)
  {
    deviceState->m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameteriv)
  {
    deviceState->m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterf
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterf)
  {
    deviceState->m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_ES_VERSION_3_0 - glSamplerParameterfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterfv)
  {
    deviceState->m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameteriv)
  {
    deviceState->m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_0 - glGetSamplerParameterfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterfv)
  {
    deviceState->m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisor (GLuint index, GLuint divisor)
{
  // GL_ES_VERSION_3_0 - glVertexAttribDivisor
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribDivisor)
  {
    deviceState->m_glVertexAttribDivisor (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_ES_VERSION_3_0 - glBindTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindTransformFeedback)
  {
    deviceState->m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glDeleteTransformFeedbacks
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteTransformFeedbacks)
  {
    deviceState->m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ES_VERSION_3_0 - glGenTransformFeedbacks
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenTransformFeedbacks)
  {
    deviceState->m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTransformFeedback (GLuint id)
{
  // GL_ES_VERSION_3_0 - glIsTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsTransformFeedback)
  {
    return deviceState->m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPauseTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glPauseTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPauseTransformFeedback)
  {
    deviceState->m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResumeTransformFeedback ()
{
  // GL_ES_VERSION_3_0 - glResumeTransformFeedback
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glResumeTransformFeedback)
  {
    deviceState->m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_ES_VERSION_3_0 - glGetProgramBinary
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramBinary)
  {
    deviceState->m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_ES_VERSION_3_0 - glProgramBinary
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramBinary)
  {
    deviceState->m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_ES_VERSION_3_0 - glProgramParameteri
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramParameteri)
  {
    deviceState->m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ES_VERSION_3_0 - glInvalidateFramebuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateFramebuffer)
  {
    deviceState->m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glInvalidateSubFramebuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateSubFramebuffer)
  {
    deviceState->m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ES_VERSION_3_0 - glTexStorage2D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage2D)
  {
    deviceState->m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ES_VERSION_3_0 - glTexStorage3D
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage3D)
  {
    deviceState->m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_ES_VERSION_3_0 - glGetInternalformativ
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInternalformativ)
  {
    deviceState->m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_ES_VERSION_3_1 - glDispatchCompute
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDispatchCompute)
  {
    deviceState->m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_ES_VERSION_3_1 - glDispatchComputeIndirect
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDispatchComputeIndirect)
  {
    deviceState->m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawArraysIndirect
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysIndirect)
  {
    deviceState->m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_ES_VERSION_3_1 - glDrawElementsIndirect
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsIndirect)
  {
    deviceState->m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ES_VERSION_3_1 - glFramebufferParameteri
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferParameteri)
  {
    deviceState->m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetFramebufferParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFramebufferParameteriv)
  {
    deviceState->m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramInterfaceiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramInterfaceiv)
  {
    deviceState->m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceIndex
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceIndex)
  {
    return deviceState->m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceName
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceName)
  {
    deviceState->m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceiv)
  {
    deviceState->m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ES_VERSION_3_1 - glGetProgramResourceLocation
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceLocation)
  {
    return deviceState->m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_ES_VERSION_3_1 - glUseProgramStages
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUseProgramStages)
  {
    deviceState->m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_ES_VERSION_3_1 - glActiveShaderProgram
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glActiveShaderProgram)
  {
    deviceState->m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_ES_VERSION_3_1 - glCreateShaderProgramv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateShaderProgramv)
  {
    return deviceState->m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glBindProgramPipeline
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindProgramPipeline)
  {
    deviceState->m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glDeleteProgramPipelines
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteProgramPipelines)
  {
    deviceState->m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ES_VERSION_3_1 - glGenProgramPipelines
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenProgramPipelines)
  {
    deviceState->m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glIsProgramPipeline
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsProgramPipeline)
  {
    return deviceState->m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineiv)
  {
    deviceState->m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1i)
  {
    deviceState->m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2i)
  {
    deviceState->m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3i)
  {
    deviceState->m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4i
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4i)
  {
    deviceState->m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1ui)
  {
    deviceState->m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2ui)
  {
    deviceState->m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3ui)
  {
    deviceState->m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4ui
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4ui)
  {
    deviceState->m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1f)
  {
    deviceState->m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2f)
  {
    deviceState->m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3f)
  {
    deviceState->m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4f
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4f)
  {
    deviceState->m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1iv)
  {
    deviceState->m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2iv)
  {
    deviceState->m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3iv)
  {
    deviceState->m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4iv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4iv)
  {
    deviceState->m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1uiv)
  {
    deviceState->m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2uiv)
  {
    deviceState->m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3uiv)
  {
    deviceState->m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4uiv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4uiv)
  {
    deviceState->m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform1fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1fv)
  {
    deviceState->m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2fv)
  {
    deviceState->m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3fv)
  {
    deviceState->m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniform4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4fv)
  {
    deviceState->m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2fv)
  {
    deviceState->m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3fv)
  {
    deviceState->m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4fv)
  {
    deviceState->m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x3fv)
  {
    deviceState->m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x2fv)
  {
    deviceState->m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix2x4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x4fv)
  {
    deviceState->m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x2fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x2fv)
  {
    deviceState->m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix3x4fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x4fv)
  {
    deviceState->m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ES_VERSION_3_1 - glProgramUniformMatrix4x3fv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x3fv)
  {
    deviceState->m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipeline (GLuint pipeline)
{
  // GL_ES_VERSION_3_1 - glValidateProgramPipeline
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glValidateProgramPipeline)
  {
    deviceState->m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ES_VERSION_3_1 - glGetProgramPipelineInfoLog
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineInfoLog)
  {
    deviceState->m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_ES_VERSION_3_1 - glBindImageTexture
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindImageTexture)
  {
    deviceState->m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBooleani_v (GLenum target, GLuint index, GLboolean * data)
{
  // GL_ES_VERSION_3_1 - glGetBooleani_v
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBooleani_v)
  {
    deviceState->m_glGetBooleani_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrier (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrier
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMemoryBarrier)
  {
    deviceState->m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_ES_VERSION_3_1 - glMemoryBarrierByRegion
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMemoryBarrierByRegion)
  {
    deviceState->m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ES_VERSION_3_1 - glTexStorage2DMultisample
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage2DMultisample)
  {
    deviceState->m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_ES_VERSION_3_1 - glGetMultisamplefv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetMultisamplefv)
  {
    deviceState->m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_ES_VERSION_3_1 - glSampleMaski
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSampleMaski)
  {
    deviceState->m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameteriv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexLevelParameteriv)
  {
    deviceState->m_glGetTexLevelParameteriv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat * params)
{
  // GL_ES_VERSION_3_1 - glGetTexLevelParameterfv
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexLevelParameterfv)
  {
    deviceState->m_glGetTexLevelParameterfv (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ES_VERSION_3_1 - glBindVertexBuffer
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexBuffer)
  {
    deviceState->m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribFormat
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribFormat)
  {
    deviceState->m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ES_VERSION_3_1 - glVertexAttribIFormat
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribIFormat)
  {
    deviceState->m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_ES_VERSION_3_1 - glVertexAttribBinding
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribBinding)
  {
    deviceState->m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_ES_VERSION_3_1 - glVertexBindingDivisor
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexBindingDivisor)
  {
    deviceState->m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorGroupsAMD (GLint * numGroups, GLsizei groupsSize, GLuint * groups)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupsAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorGroupsAMD)
  {
    deviceState->m_glGetPerfMonitorGroupsAMD (numGroups, groupsSize, groups);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCountersAMD (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCountersAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorCountersAMD)
  {
    deviceState->m_glGetPerfMonitorCountersAMD (group, numCounters, maxActiveCounters, counterSize, counters);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupStringAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorGroupStringAMD)
  {
    deviceState->m_glGetPerfMonitorGroupStringAMD (group, bufSize, length, groupString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterStringAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorCounterStringAMD)
  {
    deviceState->m_glGetPerfMonitorCounterStringAMD (group, counter, bufSize, length, counterString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void * data)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterInfoAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorCounterInfoAMD)
  {
    deviceState->m_glGetPerfMonitorCounterInfoAMD (group, counter, pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenPerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glGenPerfMonitorsAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenPerfMonitorsAMD)
  {
    deviceState->m_glGenPerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glDeletePerfMonitorsAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeletePerfMonitorsAMD)
  {
    deviceState->m_glDeletePerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList)
{
  // GL_AMD_performance_monitor - glSelectPerfMonitorCountersAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSelectPerfMonitorCountersAMD)
  {
    deviceState->m_glSelectPerfMonitorCountersAMD (monitor, enable, group, numCounters, counterList);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glBeginPerfMonitorAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginPerfMonitorAMD)
  {
    deviceState->m_glBeginPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glEndPerfMonitorAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndPerfMonitorAMD)
  {
    deviceState->m_glEndPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterDataAMD
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfMonitorCounterDataAMD)
  {
    deviceState->m_glGetPerfMonitorCounterDataAMD (monitor, pname, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebufferANGLE (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ANGLE_framebuffer_blit - glBlitFramebufferANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlitFramebufferANGLE)
  {
    deviceState->m_glBlitFramebufferANGLE (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleANGLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ANGLE_framebuffer_multisample - glRenderbufferStorageMultisampleANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisampleANGLE)
  {
    deviceState->m_glRenderbufferStorageMultisampleANGLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedANGLE (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawArraysInstancedANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstancedANGLE)
  {
    deviceState->m_glDrawArraysInstancedANGLE (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedANGLE (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_ANGLE_instanced_arrays - glDrawElementsInstancedANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedANGLE)
  {
    deviceState->m_glDrawElementsInstancedANGLE (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorANGLE (GLuint index, GLuint divisor)
{
  // GL_ANGLE_instanced_arrays - glVertexAttribDivisorANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribDivisorANGLE)
  {
    deviceState->m_glVertexAttribDivisorANGLE (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTranslatedShaderSourceANGLE (GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source)
{
  // GL_ANGLE_translated_shader_source - glGetTranslatedShaderSourceANGLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTranslatedShaderSourceANGLE)
  {
    deviceState->m_glGetTranslatedShaderSourceANGLE (shader, bufsize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureLevelsAPPLE (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  // GL_APPLE_copy_texture_levels - glCopyTextureLevelsAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTextureLevelsAPPLE)
  {
    deviceState->m_glCopyTextureLevelsAPPLE (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleAPPLE (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_APPLE_framebuffer_multisample - glRenderbufferStorageMultisampleAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisampleAPPLE)
  {
    deviceState->m_glRenderbufferStorageMultisampleAPPLE (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResolveMultisampleFramebufferAPPLE ()
{
  // GL_APPLE_framebuffer_multisample - glResolveMultisampleFramebufferAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glResolveMultisampleFramebufferAPPLE)
  {
    deviceState->m_glResolveMultisampleFramebufferAPPLE ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSyncAPPLE (GLenum condition, GLbitfield flags)
{
  // GL_APPLE_sync - glFenceSyncAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFenceSyncAPPLE)
  {
    return deviceState->m_glFenceSyncAPPLE (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glIsSyncAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsSyncAPPLE)
  {
    return deviceState->m_glIsSyncAPPLE (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSyncAPPLE (GLsync sync)
{
  // GL_APPLE_sync - glDeleteSyncAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteSyncAPPLE)
  {
    deviceState->m_glDeleteSyncAPPLE (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glClientWaitSyncAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glClientWaitSyncAPPLE)
  {
    return deviceState->m_glClientWaitSyncAPPLE (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSyncAPPLE (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_APPLE_sync - glWaitSyncAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glWaitSyncAPPLE)
  {
    deviceState->m_glWaitSyncAPPLE (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64vAPPLE (GLenum pname, GLint64 * params)
{
  // GL_APPLE_sync - glGetInteger64vAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInteger64vAPPLE)
  {
    deviceState->m_glGetInteger64vAPPLE (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSyncivAPPLE (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_APPLE_sync - glGetSyncivAPPLE
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSyncivAPPLE)
  {
    deviceState->m_glGetSyncivAPPLE (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedBaseInstanceEXT (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawArraysInstancedBaseInstanceEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstancedBaseInstanceEXT)
  {
    deviceState->m_glDrawArraysInstancedBaseInstanceEXT (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseInstanceEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseInstanceEXT)
  {
    deviceState->m_glDrawElementsInstancedBaseInstanceEXT (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexBaseInstanceEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_EXT_base_instance - glDrawElementsInstancedBaseVertexBaseInstanceEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseVertexBaseInstanceEXT)
  {
    deviceState->m_glDrawElementsInstancedBaseVertexBaseInstanceEXT (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferStorageEXT (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_EXT_buffer_storage - glBufferStorageEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBufferStorageEXT)
  {
    deviceState->m_glBufferStorageEXT (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubDataEXT (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_EXT_copy_image - glCopyImageSubDataEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyImageSubDataEXT)
  {
    deviceState->m_glCopyImageSubDataEXT (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar * label)
{
  // GL_EXT_debug_label - glLabelObjectEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glLabelObjectEXT)
  {
    deviceState->m_glLabelObjectEXT (type, object, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_EXT_debug_label - glGetObjectLabelEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetObjectLabelEXT)
  {
    deviceState->m_glGetObjectLabelEXT (type, object, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInsertEventMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glInsertEventMarkerEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glInsertEventMarkerEXT)
  {
    deviceState->m_glInsertEventMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPushGroupMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glPushGroupMarkerEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPushGroupMarkerEXT)
  {
    deviceState->m_glPushGroupMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPopGroupMarkerEXT ()
{
  // GL_EXT_debug_marker - glPopGroupMarkerEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPopGroupMarkerEXT)
  {
    deviceState->m_glPopGroupMarkerEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDiscardFramebufferEXT (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_EXT_discard_framebuffer - glDiscardFramebufferEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDiscardFramebufferEXT)
  {
    deviceState->m_glDiscardFramebufferEXT (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenQueriesEXT (GLsizei n, GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glGenQueriesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenQueriesEXT)
  {
    deviceState->m_glGenQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteQueriesEXT (GLsizei n, const GLuint * ids)
{
  // GL_EXT_disjoint_timer_query - glDeleteQueriesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteQueriesEXT)
  {
    deviceState->m_glDeleteQueriesEXT (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsQueryEXT (GLuint id)
{
  // GL_EXT_disjoint_timer_query - glIsQueryEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsQueryEXT)
  {
    return deviceState->m_glIsQueryEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQueryEXT (GLenum target, GLuint id)
{
  // GL_EXT_disjoint_timer_query - glBeginQueryEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginQueryEXT)
  {
    deviceState->m_glBeginQueryEXT (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQueryEXT (GLenum target)
{
  // GL_EXT_disjoint_timer_query - glEndQueryEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndQueryEXT)
  {
    deviceState->m_glEndQueryEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glQueryCounterEXT (GLuint id, GLenum target)
{
  // GL_EXT_disjoint_timer_query - glQueryCounterEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glQueryCounterEXT)
  {
    deviceState->m_glQueryCounterEXT (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryivEXT)
  {
    deviceState->m_glGetQueryivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectivEXT (GLuint id, GLenum pname, GLint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjectivEXT)
  {
    deviceState->m_glGetQueryObjectivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectuivEXT (GLuint id, GLenum pname, GLuint * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectuivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjectuivEXT)
  {
    deviceState->m_glGetQueryObjectuivEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjecti64vEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjecti64vEXT)
  {
    deviceState->m_glGetQueryObjecti64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_EXT_disjoint_timer_query - glGetQueryObjectui64vEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjectui64vEXT)
  {
    deviceState->m_glGetQueryObjectui64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersEXT (GLsizei n, const GLenum * bufs)
{
  // GL_EXT_draw_buffers - glDrawBuffersEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawBuffersEXT)
  {
    deviceState->m_glDrawBuffersEXT (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glEnableiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableiEXT)
  {
    deviceState->m_glEnableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glDisableiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableiEXT)
  {
    deviceState->m_glDisableiEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiEXT (GLuint buf, GLenum mode)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationiEXT)
  {
    deviceState->m_glBlendEquationiEXT (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiEXT (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendEquationSeparateiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationSeparateiEXT)
  {
    deviceState->m_glBlendEquationSeparateiEXT (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciEXT (GLuint buf, GLenum src, GLenum dst)
{
  // GL_EXT_draw_buffers_indexed - glBlendFunciEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFunciEXT)
  {
    deviceState->m_glBlendFunciEXT (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiEXT (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_EXT_draw_buffers_indexed - glBlendFuncSeparateiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFuncSeparateiEXT)
  {
    deviceState->m_glBlendFuncSeparateiEXT (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMaskiEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_EXT_draw_buffers_indexed - glColorMaskiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glColorMaskiEXT)
  {
    deviceState->m_glColorMaskiEXT (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediEXT (GLenum target, GLuint index)
{
  // GL_EXT_draw_buffers_indexed - glIsEnablediEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsEnablediEXT)
  {
    return deviceState->m_glIsEnablediEXT (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsBaseVertexEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsBaseVertexEXT)
  {
    deviceState->m_glDrawElementsBaseVertexEXT (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertexEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawRangeElementsBaseVertexEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawRangeElementsBaseVertexEXT)
  {
    deviceState->m_glDrawRangeElementsBaseVertexEXT (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseVertexEXT)
  {
    deviceState->m_glDrawElementsInstancedBaseVertexEXT (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertexEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_EXT_draw_elements_base_vertex - glMultiDrawElementsBaseVertexEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsBaseVertexEXT)
  {
    deviceState->m_glMultiDrawElementsBaseVertexEXT (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawArraysInstancedEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstancedEXT)
  {
    deviceState->m_glDrawArraysInstancedEXT (mode, start, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawElementsInstancedEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedEXT)
  {
    deviceState->m_glDrawElementsInstancedEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_EXT_geometry_shader - glFramebufferTextureEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTextureEXT)
  {
    deviceState->m_glFramebufferTextureEXT (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorEXT (GLuint index, GLuint divisor)
{
  // GL_EXT_instanced_arrays - glVertexAttribDivisorEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribDivisorEXT)
  {
    deviceState->m_glVertexAttribDivisorEXT (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_EXT_map_buffer_range - glMapBufferRangeEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMapBufferRangeEXT)
  {
    return deviceState->m_glMapBufferRangeEXT (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRangeEXT (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_EXT_map_buffer_range - glFlushMappedBufferRangeEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFlushMappedBufferRangeEXT)
  {
    deviceState->m_glFlushMappedBufferRangeEXT (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysEXT (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawArraysEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawArraysEXT)
  {
    deviceState->m_glMultiDrawArraysEXT (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawElementsEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsEXT)
  {
    deviceState->m_glMultiDrawElementsEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirectEXT (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawArraysIndirectEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawArraysIndirectEXT)
  {
    deviceState->m_glMultiDrawArraysIndirectEXT (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirectEXT (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_EXT_multi_draw_indirect - glMultiDrawElementsIndirectEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsIndirectEXT)
  {
    deviceState->m_glMultiDrawElementsIndirectEXT (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_multisampled_render_to_texture - glRenderbufferStorageMultisampleEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisampleEXT)
  {
    deviceState->m_glRenderbufferStorageMultisampleEXT (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2DMultisampleEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_EXT_multisampled_render_to_texture - glFramebufferTexture2DMultisampleEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture2DMultisampleEXT)
  {
    deviceState->m_glFramebufferTexture2DMultisampleEXT (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBufferIndexedEXT (GLenum src, GLint index)
{
  // GL_EXT_multiview_draw_buffers - glReadBufferIndexedEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadBufferIndexedEXT)
  {
    deviceState->m_glReadBufferIndexedEXT (src, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersIndexedEXT (GLint n, const GLenum * location, const GLint * indices)
{
  // GL_EXT_multiview_draw_buffers - glDrawBuffersIndexedEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawBuffersIndexedEXT)
  {
    deviceState->m_glDrawBuffersIndexedEXT (n, location, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_vEXT (GLenum target, GLuint index, GLint * data)
{
  // GL_EXT_multiview_draw_buffers - glGetIntegeri_vEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetIntegeri_vEXT)
  {
    deviceState->m_glGetIntegeri_vEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPrimitiveBoundingBoxEXT (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_EXT_primitive_bounding_box - glPrimitiveBoundingBoxEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPrimitiveBoundingBoxEXT)
  {
    deviceState->m_glPrimitiveBoundingBoxEXT (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
{
  // GL_EXT_raster_multisample - glRasterSamplesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRasterSamplesEXT)
  {
    deviceState->m_glRasterSamplesEXT (samples, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusEXT ()
{
  // GL_EXT_robustness - glGetGraphicsResetStatusEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetGraphicsResetStatusEXT)
  {
    return deviceState->m_glGetGraphicsResetStatusEXT ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsEXT (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_EXT_robustness - glReadnPixelsEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadnPixelsEXT)
  {
    deviceState->m_glReadnPixelsEXT (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvEXT (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_EXT_robustness - glGetnUniformfvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformfvEXT)
  {
    deviceState->m_glGetnUniformfvEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivEXT (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_EXT_robustness - glGetnUniformivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformivEXT)
  {
    deviceState->m_glGetnUniformivEXT (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgramEXT (GLuint pipeline, GLuint program)
{
  // GL_EXT_separate_shader_objects - glActiveShaderProgramEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glActiveShaderProgramEXT)
  {
    deviceState->m_glActiveShaderProgramEXT (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glBindProgramPipelineEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindProgramPipelineEXT)
  {
    deviceState->m_glBindProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramvEXT (GLenum type, GLsizei count, const GLchar ** strings)
{
  // GL_EXT_separate_shader_objects - glCreateShaderProgramvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateShaderProgramvEXT)
  {
    return deviceState->m_glCreateShaderProgramvEXT (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelinesEXT (GLsizei n, const GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glDeleteProgramPipelinesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteProgramPipelinesEXT)
  {
    deviceState->m_glDeleteProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelinesEXT (GLsizei n, GLuint * pipelines)
{
  // GL_EXT_separate_shader_objects - glGenProgramPipelinesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenProgramPipelinesEXT)
  {
    deviceState->m_glGenProgramPipelinesEXT (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLogEXT (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineInfoLogEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineInfoLogEXT)
  {
    deviceState->m_glGetProgramPipelineInfoLogEXT (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineivEXT (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_EXT_separate_shader_objects - glGetProgramPipelineivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineivEXT)
  {
    deviceState->m_glGetProgramPipelineivEXT (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glIsProgramPipelineEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsProgramPipelineEXT)
  {
    return deviceState->m_glIsProgramPipelineEXT (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
{
  // GL_EXT_separate_shader_objects - glProgramParameteriEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramParameteriEXT)
  {
    deviceState->m_glProgramParameteriEXT (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1fEXT)
  {
    deviceState->m_glProgramUniform1fEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1fvEXT)
  {
    deviceState->m_glProgramUniform1fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1iEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1iEXT)
  {
    deviceState->m_glProgramUniform1iEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1ivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1ivEXT)
  {
    deviceState->m_glProgramUniform1ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2fEXT)
  {
    deviceState->m_glProgramUniform2fEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2fvEXT)
  {
    deviceState->m_glProgramUniform2fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2iEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2iEXT)
  {
    deviceState->m_glProgramUniform2iEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2ivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2ivEXT)
  {
    deviceState->m_glProgramUniform2ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3fEXT)
  {
    deviceState->m_glProgramUniform3fEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3fvEXT)
  {
    deviceState->m_glProgramUniform3fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3iEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3iEXT)
  {
    deviceState->m_glProgramUniform3iEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3ivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3ivEXT)
  {
    deviceState->m_glProgramUniform3ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4fEXT)
  {
    deviceState->m_glProgramUniform4fEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4fvEXT)
  {
    deviceState->m_glProgramUniform4fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4iEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4iEXT)
  {
    deviceState->m_glProgramUniform4iEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4ivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4ivEXT)
  {
    deviceState->m_glProgramUniform4ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2fvEXT)
  {
    deviceState->m_glProgramUniformMatrix2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3fvEXT)
  {
    deviceState->m_glProgramUniformMatrix3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4fvEXT)
  {
    deviceState->m_glProgramUniformMatrix4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStagesEXT (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_EXT_separate_shader_objects - glUseProgramStagesEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUseProgramStagesEXT)
  {
    deviceState->m_glUseProgramStagesEXT (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipelineEXT (GLuint pipeline)
{
  // GL_EXT_separate_shader_objects - glValidateProgramPipelineEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glValidateProgramPipelineEXT)
  {
    deviceState->m_glValidateProgramPipelineEXT (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1uiEXT)
  {
    deviceState->m_glProgramUniform1uiEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2uiEXT)
  {
    deviceState->m_glProgramUniform2uiEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3uiEXT)
  {
    deviceState->m_glProgramUniform3uiEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uiEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4uiEXT)
  {
    deviceState->m_glProgramUniform4uiEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform1uivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1uivEXT)
  {
    deviceState->m_glProgramUniform1uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform2uivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2uivEXT)
  {
    deviceState->m_glProgramUniform2uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform3uivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3uivEXT)
  {
    deviceState->m_glProgramUniform3uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniform4uivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4uivEXT)
  {
    deviceState->m_glProgramUniform4uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x3fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x3fvEXT)
  {
    deviceState->m_glProgramUniformMatrix2x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x2fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x2fvEXT)
  {
    deviceState->m_glProgramUniformMatrix3x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix2x4fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x4fvEXT)
  {
    deviceState->m_glProgramUniformMatrix2x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x2fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x2fvEXT)
  {
    deviceState->m_glProgramUniformMatrix4x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix3x4fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x4fvEXT)
  {
    deviceState->m_glProgramUniformMatrix3x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_separate_shader_objects - glProgramUniformMatrix4x3fvEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x3fvEXT)
  {
    deviceState->m_glProgramUniformMatrix4x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_EXT_sparse_texture - glTexPageCommitmentARB
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexPageCommitmentARB)
  {
    deviceState->m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteriEXT (GLenum pname, GLint value)
{
  // GL_EXT_tessellation_shader - glPatchParameteriEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPatchParameteriEXT)
  {
    deviceState->m_glPatchParameteriEXT (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterIivEXT)
  {
    deviceState->m_glTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_texture_border_clamp - glTexParameterIuivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterIuivEXT)
  {
    deviceState->m_glTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameterIivEXT)
  {
    deviceState->m_glGetTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetTexParameterIuivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameterIuivEXT)
  {
    deviceState->m_glGetTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIivEXT (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIivEXT)
  {
    deviceState->m_glSamplerParameterIivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuivEXT (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_EXT_texture_border_clamp - glSamplerParameterIuivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIuivEXT)
  {
    deviceState->m_glSamplerParameterIuivEXT (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIivEXT (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIivEXT)
  {
    deviceState->m_glGetSamplerParameterIivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuivEXT (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_border_clamp - glGetSamplerParameterIuivEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIuivEXT)
  {
    deviceState->m_glGetSamplerParameterIuivEXT (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_texture_buffer - glTexBufferEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexBufferEXT)
  {
    deviceState->m_glTexBufferEXT (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRangeEXT (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_EXT_texture_buffer - glTexBufferRangeEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexBufferRangeEXT)
  {
    deviceState->m_glTexBufferRangeEXT (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTexStorage1DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage1DEXT)
  {
    deviceState->m_glTexStorage1DEXT (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTexStorage2DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage2DEXT)
  {
    deviceState->m_glTexStorage2DEXT (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTexStorage3DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage3DEXT)
  {
    deviceState->m_glTexStorage3DEXT (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_texture_storage - glTextureStorage1DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage1DEXT)
  {
    deviceState->m_glTextureStorage1DEXT (texture, target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_texture_storage - glTextureStorage2DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage2DEXT)
  {
    deviceState->m_glTextureStorage2DEXT (texture, target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_texture_storage - glTextureStorage3DEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage3DEXT)
  {
    deviceState->m_glTextureStorage3DEXT (texture, target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureViewEXT (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_EXT_texture_view - glTextureViewEXT
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureViewEXT)
  {
    deviceState->m_glTextureViewEXT (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleIMG (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_IMG_multisampled_render_to_texture - glRenderbufferStorageMultisampleIMG
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisampleIMG)
  {
    deviceState->m_glRenderbufferStorageMultisampleIMG (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2DMultisampleIMG (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  // GL_IMG_multisampled_render_to_texture - glFramebufferTexture2DMultisampleIMG
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture2DMultisampleIMG)
  {
    deviceState->m_glFramebufferTexture2DMultisampleIMG (target, attachment, textarget, texture, level, samples);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glBeginPerfQueryINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginPerfQueryINTEL)
  {
    deviceState->m_glBeginPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreatePerfQueryINTEL (GLuint queryId, GLuint * queryHandle)
{
  // GL_INTEL_performance_query - glCreatePerfQueryINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCreatePerfQueryINTEL)
  {
    deviceState->m_glCreatePerfQueryINTEL (queryId, queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glDeletePerfQueryINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeletePerfQueryINTEL)
  {
    deviceState->m_glDeletePerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glEndPerfQueryINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndPerfQueryINTEL)
  {
    deviceState->m_glEndPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFirstPerfQueryIdINTEL (GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetFirstPerfQueryIdINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFirstPerfQueryIdINTEL)
  {
    deviceState->m_glGetFirstPerfQueryIdINTEL (queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint * nextQueryId)
{
  // GL_INTEL_performance_query - glGetNextPerfQueryIdINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNextPerfQueryIdINTEL)
  {
    deviceState->m_glGetNextPerfQueryIdINTEL (queryId, nextQueryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue)
{
  // GL_INTEL_performance_query - glGetPerfCounterInfoINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfCounterInfoINTEL)
  {
    deviceState->m_glGetPerfCounterInfoINTEL (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten)
{
  // GL_INTEL_performance_query - glGetPerfQueryDataINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfQueryDataINTEL)
  {
    deviceState->m_glGetPerfQueryDataINTEL (queryHandle, flags, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryIdByNameINTEL (GLchar * queryName, GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetPerfQueryIdByNameINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfQueryIdByNameINTEL)
  {
    deviceState->m_glGetPerfQueryIdByNameINTEL (queryName, queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask)
{
  // GL_INTEL_performance_query - glGetPerfQueryInfoINTEL
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPerfQueryInfoINTEL)
  {
    deviceState->m_glGetPerfQueryInfoINTEL (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendBarrierKHR ()
{
  // GL_KHR_blend_equation_advanced - glBlendBarrierKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendBarrierKHR)
  {
    deviceState->m_glBlendBarrierKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageControlKHR (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_KHR_debug - glDebugMessageControlKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageControlKHR)
  {
    deviceState->m_glDebugMessageControlKHR (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageInsertKHR (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_KHR_debug - glDebugMessageInsertKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageInsertKHR)
  {
    deviceState->m_glDebugMessageInsertKHR (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageCallbackKHR (GLDEBUGPROCKHR callback, const void * userParam)
{
  // GL_KHR_debug - glDebugMessageCallbackKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageCallbackKHR)
  {
    deviceState->m_glDebugMessageCallbackKHR (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetDebugMessageLogKHR (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_KHR_debug - glGetDebugMessageLogKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetDebugMessageLogKHR)
  {
    return deviceState->m_glGetDebugMessageLogKHR (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPushDebugGroupKHR (GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
  // GL_KHR_debug - glPushDebugGroupKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPushDebugGroupKHR)
  {
    deviceState->m_glPushDebugGroupKHR (source, id, length, message);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPopDebugGroupKHR ()
{
  // GL_KHR_debug - glPopDebugGroupKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPopDebugGroupKHR)
  {
    deviceState->m_glPopDebugGroupKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glObjectLabelKHR (GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectLabelKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glObjectLabelKHR)
  {
    deviceState->m_glObjectLabelKHR (identifier, name, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectLabelKHR (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectLabelKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetObjectLabelKHR)
  {
    deviceState->m_glGetObjectLabelKHR (identifier, name, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glObjectPtrLabelKHR (const void * ptr, GLsizei length, const GLchar * label)
{
  // GL_KHR_debug - glObjectPtrLabelKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glObjectPtrLabelKHR)
  {
    deviceState->m_glObjectPtrLabelKHR (ptr, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetObjectPtrLabelKHR (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_KHR_debug - glGetObjectPtrLabelKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetObjectPtrLabelKHR)
  {
    deviceState->m_glGetObjectPtrLabelKHR (ptr, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPointervKHR (GLenum pname, void ** params)
{
  // GL_KHR_debug - glGetPointervKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPointervKHR)
  {
    deviceState->m_glGetPointervKHR (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusKHR ()
{
  // GL_KHR_robustness - glGetGraphicsResetStatusKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetGraphicsResetStatusKHR)
  {
    return deviceState->m_glGetGraphicsResetStatusKHR ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsKHR (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_KHR_robustness - glReadnPixelsKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadnPixelsKHR)
  {
    deviceState->m_glReadnPixelsKHR (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvKHR (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_KHR_robustness - glGetnUniformfvKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformfvKHR)
  {
    deviceState->m_glGetnUniformfvKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivKHR (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_KHR_robustness - glGetnUniformivKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformivKHR)
  {
    deviceState->m_glGetnUniformivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformuivKHR (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_KHR_robustness - glGetnUniformuivKHR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformuivKHR)
  {
    deviceState->m_glGetnUniformuivKHR (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureHandleNV (GLuint texture)
{
  // GL_NV_bindless_texture - glGetTextureHandleNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureHandleNV)
  {
    return deviceState->m_glGetTextureHandleNV (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
{
  // GL_NV_bindless_texture - glGetTextureSamplerHandleNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureSamplerHandleNV)
  {
    return deviceState->m_glGetTextureSamplerHandleNV (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeTextureHandleResidentNV)
  {
    deviceState->m_glMakeTextureHandleResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleNonResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeTextureHandleNonResidentNV)
  {
    deviceState->m_glMakeTextureHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_NV_bindless_texture - glGetImageHandleNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetImageHandleNV)
  {
    return deviceState->m_glGetImageHandleNV (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
{
  // GL_NV_bindless_texture - glMakeImageHandleResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeImageHandleResidentNV)
  {
    deviceState->m_glMakeImageHandleResidentNV (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeImageHandleNonResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeImageHandleNonResidentNV)
  {
    deviceState->m_glMakeImageHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64NV (GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glUniformHandleui64NV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformHandleui64NV)
  {
    deviceState->m_glUniformHandleui64NV (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_NV_bindless_texture - glUniformHandleui64vNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformHandleui64vNV)
  {
    deviceState->m_glUniformHandleui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64NV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformHandleui64NV)
  {
    deviceState->m_glProgramUniformHandleui64NV (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64vNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformHandleui64vNV)
  {
    deviceState->m_glProgramUniformHandleui64vNV (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsTextureHandleResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsTextureHandleResidentNV)
  {
    return deviceState->m_glIsTextureHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsImageHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsImageHandleResidentNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsImageHandleResidentNV)
  {
    return deviceState->m_glIsImageHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendParameteriNV (GLenum pname, GLint value)
{
  // GL_NV_blend_equation_advanced - glBlendParameteriNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendParameteriNV)
  {
    deviceState->m_glBlendParameteriNV (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendBarrierNV ()
{
  // GL_NV_blend_equation_advanced - glBlendBarrierNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendBarrierNV)
  {
    deviceState->m_glBlendBarrierNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginConditionalRenderNV (GLuint id, GLenum mode)
{
  // GL_NV_conditional_render - glBeginConditionalRenderNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginConditionalRenderNV)
  {
    deviceState->m_glBeginConditionalRenderNV (id, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndConditionalRenderNV ()
{
  // GL_NV_conditional_render - glEndConditionalRenderNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndConditionalRenderNV)
  {
    deviceState->m_glEndConditionalRenderNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
{
  // GL_NV_conservative_raster - glSubpixelPrecisionBiasNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSubpixelPrecisionBiasNV)
  {
    deviceState->m_glSubpixelPrecisionBiasNV (xbits, ybits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubDataNV (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_NV_copy_buffer - glCopyBufferSubDataNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyBufferSubDataNV)
  {
    deviceState->m_glCopyBufferSubDataNV (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageMaskNV (GLboolean mask)
{
  // GL_NV_coverage_sample - glCoverageMaskNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverageMaskNV)
  {
    deviceState->m_glCoverageMaskNV (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageOperationNV (GLenum operation)
{
  // GL_NV_coverage_sample - glCoverageOperationNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverageOperationNV)
  {
    deviceState->m_glCoverageOperationNV (operation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawBuffersNV (GLsizei n, const GLenum * bufs)
{
  // GL_NV_draw_buffers - glDrawBuffersNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawBuffersNV)
  {
    deviceState->m_glDrawBuffersNV (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedNV (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawArraysInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstancedNV)
  {
    deviceState->m_glDrawArraysInstancedNV (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedNV (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_NV_draw_instanced - glDrawElementsInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedNV)
  {
    deviceState->m_glDrawElementsInstancedNV (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFencesNV (GLsizei n, const GLuint * fences)
{
  // GL_NV_fence - glDeleteFencesNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteFencesNV)
  {
    deviceState->m_glDeleteFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFencesNV (GLsizei n, GLuint * fences)
{
  // GL_NV_fence - glGenFencesNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenFencesNV)
  {
    deviceState->m_glGenFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFenceNV (GLuint fence)
{
  // GL_NV_fence - glIsFenceNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsFenceNV)
  {
    return deviceState->m_glIsFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glTestFenceNV (GLuint fence)
{
  // GL_NV_fence - glTestFenceNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTestFenceNV)
  {
    return deviceState->m_glTestFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFenceivNV (GLuint fence, GLenum pname, GLint * params)
{
  // GL_NV_fence - glGetFenceivNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFenceivNV)
  {
    deviceState->m_glGetFenceivNV (fence, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFinishFenceNV (GLuint fence)
{
  // GL_NV_fence - glFinishFenceNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFinishFenceNV)
  {
    deviceState->m_glFinishFenceNV (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSetFenceNV (GLuint fence, GLenum condition)
{
  // GL_NV_fence - glSetFenceNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSetFenceNV)
  {
    deviceState->m_glSetFenceNV (fence, condition);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFragmentCoverageColorNV (GLuint color)
{
  // GL_NV_fragment_coverage_to_color - glFragmentCoverageColorNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFragmentCoverageColorNV)
  {
    deviceState->m_glFragmentCoverageColorNV (color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebufferNV (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_NV_framebuffer_blit - glBlitFramebufferNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlitFramebufferNV)
  {
    deviceState->m_glBlitFramebufferNV (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageModulationTableNV (GLsizei n, const GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationTableNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverageModulationTableNV)
  {
    deviceState->m_glCoverageModulationTableNV (n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glGetCoverageModulationTableNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetCoverageModulationTableNV)
  {
    deviceState->m_glGetCoverageModulationTableNV (bufsize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverageModulationNV (GLenum components)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverageModulationNV)
  {
    deviceState->m_glCoverageModulationNV (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisampleNV (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_NV_framebuffer_multisample - glRenderbufferStorageMultisampleNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisampleNV)
  {
    deviceState->m_glRenderbufferStorageMultisampleNV (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribDivisorNV (GLuint index, GLuint divisor)
{
  // GL_NV_instanced_arrays - glVertexAttribDivisorNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribDivisorNV)
  {
    deviceState->m_glVertexAttribDivisorNV (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_NV_internalformat_sample_query - glGetInternalformatSampleivNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInternalformatSampleivNV)
  {
    deviceState->m_glGetInternalformatSampleivNV (target, internalformat, samples, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x3fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x3fvNV)
  {
    deviceState->m_glUniformMatrix2x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x2fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x2fvNV)
  {
    deviceState->m_glUniformMatrix3x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix2x4fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x4fvNV)
  {
    deviceState->m_glUniformMatrix2x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x2fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x2fvNV)
  {
    deviceState->m_glUniformMatrix4x2fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix3x4fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x4fvNV)
  {
    deviceState->m_glUniformMatrix3x4fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3fvNV (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_NV_non_square_matrices - glUniformMatrix4x3fvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x3fvNV)
  {
    deviceState->m_glUniformMatrix4x3fvNV (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGenPathsNV (GLsizei range)
{
  // GL_NV_path_rendering - glGenPathsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenPathsNV)
  {
    return deviceState->m_glGenPathsNV (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeletePathsNV (GLuint path, GLsizei range)
{
  // GL_NV_path_rendering - glDeletePathsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeletePathsNV)
  {
    deviceState->m_glDeletePathsNV (path, range);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPathNV (GLuint path)
{
  // GL_NV_path_rendering - glIsPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsPathNV)
  {
    return deviceState->m_glIsPathNV (path);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCommandsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathCommandsNV)
  {
    deviceState->m_glPathCommandsNV (path, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCoordsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathCoordsNV)
  {
    deviceState->m_glPathCoordsNV (path, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCommandsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathSubCommandsNV)
  {
    deviceState->m_glPathSubCommandsNV (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCoordsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathSubCoordsNV)
  {
    deviceState->m_glPathSubCoordsNV (path, coordStart, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStringNV (GLuint path, GLenum format, GLsizei length, const void * pathString)
{
  // GL_NV_path_rendering - glPathStringNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathStringNV)
  {
    deviceState->m_glPathStringNV (path, format, length, pathString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathGlyphsNV)
  {
    deviceState->m_glPathGlyphsNV (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphRangeNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathGlyphRangeNV)
  {
    deviceState->m_glPathGlyphRangeNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights)
{
  // GL_NV_path_rendering - glWeightPathsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glWeightPathsNV)
  {
    deviceState->m_glWeightPathsNV (resultPath, numPaths, paths, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyPathNV (GLuint resultPath, GLuint srcPath)
{
  // GL_NV_path_rendering - glCopyPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyPathNV)
  {
    deviceState->m_glCopyPathNV (resultPath, srcPath);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  // GL_NV_path_rendering - glInterpolatePathsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glInterpolatePathsNV)
  {
    deviceState->m_glInterpolatePathsNV (resultPath, pathA, pathB, weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glTransformPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTransformPathNV)
  {
    deviceState->m_glTransformPathNV (resultPath, srcPath, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterivNV (GLuint path, GLenum pname, const GLint * value)
{
  // GL_NV_path_rendering - glPathParameterivNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathParameterivNV)
  {
    deviceState->m_glPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameteriNV (GLuint path, GLenum pname, GLint value)
{
  // GL_NV_path_rendering - glPathParameteriNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathParameteriNV)
  {
    deviceState->m_glPathParameteriNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat * value)
{
  // GL_NV_path_rendering - glPathParameterfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathParameterfvNV)
  {
    deviceState->m_glPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
{
  // GL_NV_path_rendering - glPathParameterfNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathParameterfNV)
  {
    deviceState->m_glPathParameterfNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat * dashArray)
{
  // GL_NV_path_rendering - glPathDashArrayNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathDashArrayNV)
  {
    deviceState->m_glPathDashArrayNV (path, dashCount, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
{
  // GL_NV_path_rendering - glPathStencilFuncNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathStencilFuncNV)
  {
    deviceState->m_glPathStencilFuncNV (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
{
  // GL_NV_path_rendering - glPathStencilDepthOffsetNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathStencilDepthOffsetNV)
  {
    deviceState->m_glPathStencilDepthOffsetNV (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
{
  // GL_NV_path_rendering - glStencilFillPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilFillPathNV)
  {
    deviceState->m_glStencilFillPathNV (path, fillMode, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
{
  // GL_NV_path_rendering - glStencilStrokePathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilStrokePathNV)
  {
    deviceState->m_glStencilStrokePathNV (path, reference, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilFillPathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilFillPathInstancedNV)
  {
    deviceState->m_glStencilFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilStrokePathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilStrokePathInstancedNV)
  {
    deviceState->m_glStencilStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPathCoverDepthFuncNV (GLenum func)
{
  // GL_NV_path_rendering - glPathCoverDepthFuncNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathCoverDepthFuncNV)
  {
    deviceState->m_glPathCoverDepthFuncNV (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverFillPathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverFillPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverFillPathNV)
  {
    deviceState->m_glCoverFillPathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverStrokePathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverStrokePathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverStrokePathNV)
  {
    deviceState->m_glCoverStrokePathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverFillPathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverFillPathInstancedNV)
  {
    deviceState->m_glCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverStrokePathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCoverStrokePathInstancedNV)
  {
    deviceState->m_glCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathParameterivNV (GLuint path, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathParameterivNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathParameterivNV)
  {
    deviceState->m_glGetPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathParameterfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathParameterfvNV)
  {
    deviceState->m_glGetPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathCommandsNV (GLuint path, GLubyte * commands)
{
  // GL_NV_path_rendering - glGetPathCommandsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathCommandsNV)
  {
    deviceState->m_glGetPathCommandsNV (path, commands);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathCoordsNV (GLuint path, GLfloat * coords)
{
  // GL_NV_path_rendering - glGetPathCoordsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathCoordsNV)
  {
    deviceState->m_glGetPathCoordsNV (path, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathDashArrayNV (GLuint path, GLfloat * dashArray)
{
  // GL_NV_path_rendering - glGetPathDashArrayNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathDashArrayNV)
  {
    deviceState->m_glGetPathDashArrayNV (path, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricsNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathMetricsNV)
  {
    deviceState->m_glGetPathMetricsNV (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricRangeNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathMetricRangeNV)
  {
    deviceState->m_glGetPathMetricRangeNV (metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing)
{
  // GL_NV_path_rendering - glGetPathSpacingNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathSpacingNV)
  {
    deviceState->m_glGetPathSpacingNV (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInFillPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsPointInFillPathNV)
  {
    return deviceState->m_glIsPointInFillPathNV (path, mask, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInStrokePathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsPointInStrokePathNV)
  {
    return deviceState->m_glIsPointInStrokePathNV (path, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLfloat glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  // GL_NV_path_rendering - glGetPathLengthNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetPathLengthNV)
  {
    return deviceState->m_glGetPathLengthNV (path, startSegment, numSegments);
  }
  return ((GLfloat)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY)
{
  // GL_NV_path_rendering - glPointAlongPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPointAlongPathNV)
  {
    return deviceState->m_glPointAlongPathNV (path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x2fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixLoad3x2fNV)
  {
    deviceState->m_glMatrixLoad3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x3fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixLoad3x3fNV)
  {
    deviceState->m_glMatrixLoad3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoadTranspose3x3fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixLoadTranspose3x3fNV)
  {
    deviceState->m_glMatrixLoadTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x2fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixMult3x2fNV)
  {
    deviceState->m_glMatrixMult3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x3fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixMult3x3fNV)
  {
    deviceState->m_glMatrixMult3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMultTranspose3x3fNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMatrixMultTranspose3x3fNV)
  {
    deviceState->m_glMatrixMultTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilThenCoverFillPathNV)
  {
    deviceState->m_glStencilThenCoverFillPathNV (path, fillMode, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilThenCoverStrokePathNV)
  {
    deviceState->m_glStencilThenCoverStrokePathNV (path, reference, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilThenCoverFillPathInstancedNV)
  {
    deviceState->m_glStencilThenCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathInstancedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStencilThenCoverStrokePathInstancedNV)
  {
    deviceState->m_glStencilThenCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathGlyphIndexRangeNV (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
{
  // GL_NV_path_rendering - glPathGlyphIndexRangeNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathGlyphIndexRangeNV)
  {
    return deviceState->m_glPathGlyphIndexRangeNV (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphIndexArrayNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathGlyphIndexArrayNV)
  {
    return deviceState->m_glPathGlyphIndexArrayNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathMemoryGlyphIndexArrayNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPathMemoryGlyphIndexArrayNV)
  {
    return deviceState->m_glPathMemoryGlyphIndexArrayNV (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glProgramPathFragmentInputGenNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramPathFragmentInputGenNV)
  {
    deviceState->m_glProgramPathFragmentInputGenNV (program, location, genMode, components, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params)
{
  // GL_NV_path_rendering - glGetProgramResourcefvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourcefvNV)
  {
    deviceState->m_glGetProgramResourcefvNV (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPolygonModeNV (GLenum face, GLenum mode)
{
  // GL_NV_polygon_mode - glPolygonModeNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPolygonModeNV)
  {
    deviceState->m_glPolygonModeNV (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadBufferNV (GLenum mode)
{
  // GL_NV_read_buffer - glReadBufferNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glReadBufferNV)
  {
    deviceState->m_glReadBufferNV (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glFramebufferSampleLocationsfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferSampleLocationsfvNV)
  {
    deviceState->m_glFramebufferSampleLocationsfvNV (target, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glNamedFramebufferSampleLocationsfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferSampleLocationsfvNV)
  {
    deviceState->m_glNamedFramebufferSampleLocationsfvNV (framebuffer, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResolveDepthValuesNV ()
{
  // GL_NV_sample_locations - glResolveDepthValuesNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glResolveDepthValuesNV)
  {
    deviceState->m_glResolveDepthValuesNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportArrayvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportArrayvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportArrayvNV)
  {
    deviceState->m_glViewportArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfNV (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_NV_viewport_array - glViewportIndexedfNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportIndexedfNV)
  {
    deviceState->m_glViewportIndexedfNV (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_viewport_array - glViewportIndexedfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportIndexedfvNV)
  {
    deviceState->m_glViewportIndexedfvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorArrayvNV (GLuint first, GLsizei count, const GLint * v)
{
  // GL_NV_viewport_array - glScissorArrayvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorArrayvNV)
  {
    deviceState->m_glScissorArrayvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedNV (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_NV_viewport_array - glScissorIndexedNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorIndexedNV)
  {
    deviceState->m_glScissorIndexedNV (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedvNV (GLuint index, const GLint * v)
{
  // GL_NV_viewport_array - glScissorIndexedvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorIndexedvNV)
  {
    deviceState->m_glScissorIndexedvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeArrayfvNV (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_NV_viewport_array - glDepthRangeArrayfvNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangeArrayfvNV)
  {
    deviceState->m_glDepthRangeArrayfvNV (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeIndexedfNV (GLuint index, GLfloat n, GLfloat f)
{
  // GL_NV_viewport_array - glDepthRangeIndexedfNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangeIndexedfNV)
  {
    deviceState->m_glDepthRangeIndexedfNV (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloati_vNV (GLenum target, GLuint index, GLfloat * data)
{
  // GL_NV_viewport_array - glGetFloati_vNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFloati_vNV)
  {
    deviceState->m_glGetFloati_vNV (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glEnableiNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableiNV)
  {
    deviceState->m_glEnableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glDisableiNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableiNV)
  {
    deviceState->m_glDisableiNV (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediNV (GLenum target, GLuint index)
{
  // GL_NV_viewport_array - glIsEnablediNV
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsEnablediNV)
  {
    return deviceState->m_glIsEnablediNV (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEGLImageTargetTexture2DOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetTexture2DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEGLImageTargetTexture2DOES)
  {
    deviceState->m_glEGLImageTargetTexture2DOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEGLImageTargetRenderbufferStorageOES (GLenum target, GLeglImageOES image)
{
  // GL_OES_EGL_image - glEGLImageTargetRenderbufferStorageOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEGLImageTargetRenderbufferStorageOES)
  {
    deviceState->m_glEGLImageTargetRenderbufferStorageOES (target, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubDataOES (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_OES_copy_image - glCopyImageSubDataOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyImageSubDataOES)
  {
    deviceState->m_glCopyImageSubDataOES (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glEnableiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableiOES)
  {
    deviceState->m_glEnableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableiOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glDisableiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableiOES)
  {
    deviceState->m_glDisableiOES (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiOES (GLuint buf, GLenum mode)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationiOES)
  {
    deviceState->m_glBlendEquationiOES (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiOES (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendEquationSeparateiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationSeparateiOES)
  {
    deviceState->m_glBlendEquationSeparateiOES (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciOES (GLuint buf, GLenum src, GLenum dst)
{
  // GL_OES_draw_buffers_indexed - glBlendFunciOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFunciOES)
  {
    deviceState->m_glBlendFunciOES (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiOES (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_OES_draw_buffers_indexed - glBlendFuncSeparateiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFuncSeparateiOES)
  {
    deviceState->m_glBlendFuncSeparateiOES (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glColorMaskiOES (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_OES_draw_buffers_indexed - glColorMaskiOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glColorMaskiOES)
  {
    deviceState->m_glColorMaskiOES (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsEnablediOES (GLenum target, GLuint index)
{
  // GL_OES_draw_buffers_indexed - glIsEnablediOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsEnablediOES)
  {
    return deviceState->m_glIsEnablediOES (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsBaseVertexOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsBaseVertexOES)
  {
    deviceState->m_glDrawElementsBaseVertexOES (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertexOES (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawRangeElementsBaseVertexOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawRangeElementsBaseVertexOES)
  {
    deviceState->m_glDrawRangeElementsBaseVertexOES (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexOES (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_OES_draw_elements_base_vertex - glDrawElementsInstancedBaseVertexOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseVertexOES)
  {
    deviceState->m_glDrawElementsInstancedBaseVertexOES (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertexOES (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex)
{
  // GL_OES_draw_elements_base_vertex - glMultiDrawElementsBaseVertexOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsBaseVertexOES)
  {
    deviceState->m_glMultiDrawElementsBaseVertexOES (mode, count, type, indices, primcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureOES (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_OES_geometry_shader - glFramebufferTextureOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTextureOES)
  {
    deviceState->m_glFramebufferTextureOES (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinaryOES (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_OES_get_program_binary - glGetProgramBinaryOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramBinaryOES)
  {
    deviceState->m_glGetProgramBinaryOES (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinaryOES (GLuint program, GLenum binaryFormat, const void * binary, GLint length)
{
  // GL_OES_get_program_binary - glProgramBinaryOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramBinaryOES)
  {
    deviceState->m_glProgramBinaryOES (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferOES (GLenum target, GLenum access)
{
  // GL_OES_mapbuffer - glMapBufferOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMapBufferOES)
  {
    return deviceState->m_glMapBufferOES (target, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapBufferOES (GLenum target)
{
  // GL_OES_mapbuffer - glUnmapBufferOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glUnmapBufferOES)
  {
    return deviceState->m_glUnmapBufferOES (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetBufferPointervOES (GLenum target, GLenum pname, void ** params)
{
  // GL_OES_mapbuffer - glGetBufferPointervOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetBufferPointervOES)
  {
    deviceState->m_glGetBufferPointervOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPrimitiveBoundingBoxOES (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
  // GL_OES_primitive_bounding_box - glPrimitiveBoundingBoxOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPrimitiveBoundingBoxOES)
  {
    deviceState->m_glPrimitiveBoundingBoxOES (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMinSampleShadingOES (GLfloat value)
{
  // GL_OES_sample_shading - glMinSampleShadingOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glMinSampleShadingOES)
  {
    deviceState->m_glMinSampleShadingOES (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteriOES (GLenum pname, GLint value)
{
  // GL_OES_tessellation_shader - glPatchParameteriOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glPatchParameteriOES)
  {
    deviceState->m_glPatchParameteriOES (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexImage3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexImage3DOES)
  {
    deviceState->m_glTexImage3DOES (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_OES_texture_3D - glTexSubImage3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexSubImage3DOES)
  {
    deviceState->m_glTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_OES_texture_3D - glCopyTexSubImage3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTexSubImage3DOES)
  {
    deviceState->m_glCopyTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexImage3DOES (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexImage3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexImage3DOES)
  {
    deviceState->m_glCompressedTexImage3DOES (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTexSubImage3DOES (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_OES_texture_3D - glCompressedTexSubImage3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTexSubImage3DOES)
  {
    deviceState->m_glCompressedTexSubImage3DOES (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture3DOES (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_OES_texture_3D - glFramebufferTexture3DOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture3DOES)
  {
    deviceState->m_glFramebufferTexture3DOES (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIivOES (GLenum target, GLenum pname, const GLint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterIivOES)
  {
    deviceState->m_glTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexParameterIuivOES (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_OES_texture_border_clamp - glTexParameterIuivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexParameterIuivOES)
  {
    deviceState->m_glTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIivOES (GLenum target, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameterIivOES)
  {
    deviceState->m_glGetTexParameterIivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTexParameterIuivOES (GLenum target, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetTexParameterIuivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTexParameterIuivOES)
  {
    deviceState->m_glGetTexParameterIuivOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIivOES (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIivOES)
  {
    deviceState->m_glSamplerParameterIivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuivOES (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_OES_texture_border_clamp - glSamplerParameterIuivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIuivOES)
  {
    deviceState->m_glSamplerParameterIuivOES (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIivOES (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIivOES)
  {
    deviceState->m_glGetSamplerParameterIivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuivOES (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_OES_texture_border_clamp - glGetSamplerParameterIuivOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIuivOES)
  {
    deviceState->m_glGetSamplerParameterIuivOES (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferOES (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_OES_texture_buffer - glTexBufferOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexBufferOES)
  {
    deviceState->m_glTexBufferOES (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRangeOES (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_OES_texture_buffer - glTexBufferRangeOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexBufferRangeOES)
  {
    deviceState->m_glTexBufferRangeOES (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DMultisampleOES (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_OES_texture_storage_multisample_2d_array - glTexStorage3DMultisampleOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage3DMultisampleOES)
  {
    deviceState->m_glTexStorage3DMultisampleOES (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureViewOES (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_OES_texture_view - glTextureViewOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureViewOES)
  {
    deviceState->m_glTextureViewOES (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glBindVertexArrayOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexArrayOES)
  {
    deviceState->m_glBindVertexArrayOES (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArraysOES (GLsizei n, const GLuint * arrays)
{
  // GL_OES_vertex_array_object - glDeleteVertexArraysOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteVertexArraysOES)
  {
    deviceState->m_glDeleteVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArraysOES (GLsizei n, GLuint * arrays)
{
  // GL_OES_vertex_array_object - glGenVertexArraysOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGenVertexArraysOES)
  {
    deviceState->m_glGenVertexArraysOES (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArrayOES (GLuint array)
{
  // GL_OES_vertex_array_object - glIsVertexArrayOES
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glIsVertexArrayOES)
  {
    return deviceState->m_glIsVertexArrayOES (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
{
  // GL_OVR_multiview - glFramebufferTextureMultiviewOVR
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTextureMultiviewOVR)
  {
    deviceState->m_glFramebufferTextureMultiviewOVR (target, attachment, texture, level, baseViewIndex, numViews);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glAlphaFuncQCOM (GLenum func, GLclampf ref)
{
  // GL_QCOM_alpha_test - glAlphaFuncQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glAlphaFuncQCOM)
  {
    deviceState->m_glAlphaFuncQCOM (func, ref);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDriverControlsQCOM (GLint * num, GLsizei size, GLuint * driverControls)
{
  // GL_QCOM_driver_control - glGetDriverControlsQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetDriverControlsQCOM)
  {
    deviceState->m_glGetDriverControlsQCOM (num, size, driverControls);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDriverControlStringQCOM (GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString)
{
  // GL_QCOM_driver_control - glGetDriverControlStringQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glGetDriverControlStringQCOM)
  {
    deviceState->m_glGetDriverControlStringQCOM (driverControl, bufSize, length, driverControlString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glEnableDriverControlQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableDriverControlQCOM)
  {
    deviceState->m_glEnableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableDriverControlQCOM (GLuint driverControl)
{
  // GL_QCOM_driver_control - glDisableDriverControlQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableDriverControlQCOM)
  {
    deviceState->m_glDisableDriverControlQCOM (driverControl);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexturesQCOM (GLuint * textures, GLint maxTextures, GLint * numTextures)
{
  // GL_QCOM_extended_get - glExtGetTexturesQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetTexturesQCOM)
  {
    deviceState->m_glExtGetTexturesQCOM (textures, maxTextures, numTextures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetBuffersQCOM (GLuint * buffers, GLint maxBuffers, GLint * numBuffers)
{
  // GL_QCOM_extended_get - glExtGetBuffersQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetBuffersQCOM)
  {
    deviceState->m_glExtGetBuffersQCOM (buffers, maxBuffers, numBuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetRenderbuffersQCOM (GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers)
{
  // GL_QCOM_extended_get - glExtGetRenderbuffersQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetRenderbuffersQCOM)
  {
    deviceState->m_glExtGetRenderbuffersQCOM (renderbuffers, maxRenderbuffers, numRenderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetFramebuffersQCOM (GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers)
{
  // GL_QCOM_extended_get - glExtGetFramebuffersQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetFramebuffersQCOM)
  {
    deviceState->m_glExtGetFramebuffersQCOM (framebuffers, maxFramebuffers, numFramebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexLevelParameterivQCOM (GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params)
{
  // GL_QCOM_extended_get - glExtGetTexLevelParameterivQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetTexLevelParameterivQCOM)
  {
    deviceState->m_glExtGetTexLevelParameterivQCOM (texture, face, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtTexObjectStateOverrideiQCOM (GLenum target, GLenum pname, GLint param)
{
  // GL_QCOM_extended_get - glExtTexObjectStateOverrideiQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtTexObjectStateOverrideiQCOM)
  {
    deviceState->m_glExtTexObjectStateOverrideiQCOM (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetTexSubImageQCOM (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels)
{
  // GL_QCOM_extended_get - glExtGetTexSubImageQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetTexSubImageQCOM)
  {
    deviceState->m_glExtGetTexSubImageQCOM (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetBufferPointervQCOM (GLenum target, void ** params)
{
  // GL_QCOM_extended_get - glExtGetBufferPointervQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetBufferPointervQCOM)
  {
    deviceState->m_glExtGetBufferPointervQCOM (target, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetShadersQCOM (GLuint * shaders, GLint maxShaders, GLint * numShaders)
{
  // GL_QCOM_extended_get2 - glExtGetShadersQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetShadersQCOM)
  {
    deviceState->m_glExtGetShadersQCOM (shaders, maxShaders, numShaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetProgramsQCOM (GLuint * programs, GLint maxPrograms, GLint * numPrograms)
{
  // GL_QCOM_extended_get2 - glExtGetProgramsQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetProgramsQCOM)
  {
    deviceState->m_glExtGetProgramsQCOM (programs, maxPrograms, numPrograms);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glExtIsProgramBinaryQCOM (GLuint program)
{
  // GL_QCOM_extended_get2 - glExtIsProgramBinaryQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtIsProgramBinaryQCOM)
  {
    return deviceState->m_glExtIsProgramBinaryQCOM (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glExtGetProgramBinarySourceQCOM (GLuint program, GLenum shadertype, GLchar * source, GLint * length)
{
  // GL_QCOM_extended_get2 - glExtGetProgramBinarySourceQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glExtGetProgramBinarySourceQCOM)
  {
    deviceState->m_glExtGetProgramBinarySourceQCOM (program, shadertype, source, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glStartTilingQCOM (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glStartTilingQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glStartTilingQCOM)
  {
    deviceState->m_glStartTilingQCOM (x, y, width, height, preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndTilingQCOM (GLbitfield preserveMask)
{
  // GL_QCOM_tiled_rendering - glEndTilingQCOM
  const glew::gles::DeviceState *deviceState = glew::gles::GetDeviceState ();
  if (deviceState && deviceState->m_glEndTilingQCOM)
  {
    deviceState->m_glEndTilingQCOM (preserveMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
