////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace wrangle_gl_generator
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  class GeneratorEGL : XmlDocument
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly XmlNodeList m_typeNodes;

    private readonly XmlNodeList m_enumNodes;

    private readonly XmlNodeList m_commandNodes;

    private readonly XmlNodeList m_featureNodes;

    private readonly XmlNodeList m_extensionNodes;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public GeneratorEGL (string filename)
      : base ()
    {
      Load (filename);

      m_typeNodes = SelectNodes ("//registry/types");

      m_enumNodes = SelectNodes ("//registry/enums");

      m_commandNodes = SelectNodes ("//registry/commands");

      m_featureNodes = SelectNodes ("//registry/features");

      m_extensionNodes = SelectNodes ("//registry/extensions");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ExportHpp (string filename)
    {
      StreamWriter writer;

      using (writer = new StreamWriter (filename, false))
      {
        WriteCommentDivider (ref writer);

        writer.Write ("\n#include <EGL/egl.h>\n\n");

        WriteCommentDivider (ref writer);

        if (m_enumNodes.Count > 0)
        {
          foreach (XmlNode enumNode in m_enumNodes)
          {
            XmlNodeList childEnumNodes = enumNode.SelectNodes ("enum");

            if (childEnumNodes.Count == 0)
            {
              continue; // Skip any 'enums' declarations without 'enum' children.
            }

            string enumName = enumNode.Attributes ["namespace"].Value;

            if (enumName.Equals ("EGL"))
            {
              continue; // Skip any 'enums' declarations that are part of the base spec.
            }

            XmlNode commentNode = enumNode.Attributes ["comment"];

            if (commentNode != null)
            {
              writer.Write (string.Format ("\n// {0}\n", commentNode.Value));
            }

            writer.Write ("#if __cplusplus >= 201103L\n");

            writer.Write (string.Format ("enum class {0}\n", enumName));

            writer.Write ("#else\n");

            writer.Write (string.Format ("enum {0}\n", enumName));

            writer.Write ("#endif\n{{\n");

            for (int i = 0; i < childEnumNodes.Count; ++i)
            {
              XmlNode childNode = childEnumNodes.Item (i);

              string childEnumName = childNode.Attributes ["name"].Value;

              string childEnumValue = childNode.Attributes ["value"].Value;

              XmlNode aliasNode = childNode.Attributes ["alias"];

              if (aliasNode != null)
              {
                writer.Write (string.Format ("  {0} = {1}{2}\n", childEnumName, aliasNode.Value, ((i + 1) < childEnumNodes.Count) ? "," : ""));
              }
              else
              {
                writer.Write (string.Format ("  {0} = {1}{2}\n", childEnumName, childEnumValue, ((i + 1) < childEnumNodes.Count) ? "," : ""));
              }
            }

            writer.Write ("};\n\n");

            WriteCommentDivider (ref writer);
          }
        }

        writer.Close ();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ExportCpp (string filename)
    {
      StreamWriter writer;

      using (writer = new StreamWriter (filename, false))
      {
        WriteCommentDivider (ref writer);

        WriteCommentDivider (ref writer);

        writer.Close ();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void WriteCommentDivider (ref StreamWriter writer)
    {
      writer.WriteLine ("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
      writer.WriteLine ("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
      writer.WriteLine ("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
