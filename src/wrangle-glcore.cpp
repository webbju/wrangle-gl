////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-glcore.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReleaseShaderCompiler ()
{
  // GL_ARB_ES2_compatibility - glReleaseShaderCompiler
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glReleaseShaderCompiler)
  {
    deviceState->m_glReleaseShaderCompiler ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
  // GL_ARB_ES2_compatibility - glShaderBinary
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glShaderBinary)
  {
    deviceState->m_glShaderBinary (count, shaders, binaryformat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
  // GL_ARB_ES2_compatibility - glGetShaderPrecisionFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetShaderPrecisionFormat)
  {
    deviceState->m_glGetShaderPrecisionFormat (shadertype, precisiontype, range, precision);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangef (GLfloat n, GLfloat f)
{
  // GL_ARB_ES2_compatibility - glDepthRangef
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangef)
  {
    deviceState->m_glDepthRangef (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearDepthf (GLfloat d)
{
  // GL_ARB_ES2_compatibility - glClearDepthf
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearDepthf)
  {
    deviceState->m_glClearDepthf (d);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_ARB_ES3_1_compatibility - glMemoryBarrierByRegion
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMemoryBarrierByRegion)
  {
    deviceState->m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawArraysInstancedBaseInstance
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysInstancedBaseInstance)
  {
    deviceState->m_glDrawArraysInstancedBaseInstance (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawElementsInstancedBaseInstance
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseInstance)
  {
    deviceState->m_glDrawElementsInstancedBaseInstance (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawElementsInstancedBaseVertexBaseInstance
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseVertexBaseInstance)
  {
    deviceState->m_glDrawElementsInstancedBaseVertexBaseInstance (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureHandleARB (GLuint texture)
{
  // GL_ARB_bindless_texture - glGetTextureHandleARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureHandleARB)
  {
    return deviceState->m_glGetTextureHandleARB (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler)
{
  // GL_ARB_bindless_texture - glGetTextureSamplerHandleARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureSamplerHandleARB)
  {
    return deviceState->m_glGetTextureSamplerHandleARB (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeTextureHandleResidentARB)
  {
    deviceState->m_glMakeTextureHandleResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleNonResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeTextureHandleNonResidentARB)
  {
    deviceState->m_glMakeTextureHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_ARB_bindless_texture - glGetImageHandleARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetImageHandleARB)
  {
    return deviceState->m_glGetImageHandleARB (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleResidentARB (GLuint64 handle, GLenum access)
{
  // GL_ARB_bindless_texture - glMakeImageHandleResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeImageHandleResidentARB)
  {
    deviceState->m_glMakeImageHandleResidentARB (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeImageHandleNonResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMakeImageHandleNonResidentARB)
  {
    deviceState->m_glMakeImageHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64ARB (GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64ARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformHandleui64ARB)
  {
    deviceState->m_glUniformHandleui64ARB (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64vARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformHandleui64vARB)
  {
    deviceState->m_glUniformHandleui64vARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64ARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformHandleui64ARB)
  {
    deviceState->m_glProgramUniformHandleui64ARB (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64vARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformHandleui64vARB)
  {
    deviceState->m_glProgramUniformHandleui64vARB (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsTextureHandleResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsTextureHandleResidentARB)
  {
    return deviceState->m_glIsTextureHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsImageHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsImageHandleResidentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsImageHandleResidentARB)
  {
    return deviceState->m_glIsImageHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64ARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL1ui64ARB)
  {
    deviceState->m_glVertexAttribL1ui64ARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT * v)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64vARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL1ui64vARB)
  {
    deviceState->m_glVertexAttribL1ui64vARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT * params)
{
  // GL_ARB_bindless_texture - glGetVertexAttribLui64vARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribLui64vARB)
  {
    deviceState->m_glGetVertexAttribLui64vARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
{
  // GL_ARB_blend_func_extended - glBindFragDataLocationIndexed
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindFragDataLocationIndexed)
  {
    deviceState->m_glBindFragDataLocationIndexed (program, colorNumber, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetFragDataIndex (GLuint program, const GLchar * name)
{
  // GL_ARB_blend_func_extended - glGetFragDataIndex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFragDataIndex)
  {
    return deviceState->m_glGetFragDataIndex (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferStorage (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_ARB_buffer_storage - glBufferStorage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBufferStorage)
  {
    deviceState->m_glBufferStorage (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags)
{
  // GL_ARB_cl_event - glCreateSyncFromCLeventARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateSyncFromCLeventARB)
  {
    return deviceState->m_glCreateSyncFromCLeventARB (context, event, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_buffer_object - glClearBufferData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferData)
  {
    deviceState->m_glClearBufferData (target, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_buffer_object - glClearBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearBufferSubData)
  {
    deviceState->m_glClearBufferSubData (target, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_texture - glClearTexImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearTexImage)
  {
    deviceState->m_glClearTexImage (texture, level, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_texture - glClearTexSubImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearTexSubImage)
  {
    deviceState->m_glClearTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClipControl (GLenum origin, GLenum depth)
{
  // GL_ARB_clip_control - glClipControl
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClipControl)
  {
    deviceState->m_glClipControl (origin, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_ARB_compute_shader - glDispatchCompute
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDispatchCompute)
  {
    deviceState->m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_ARB_compute_shader - glDispatchComputeIndirect
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDispatchComputeIndirect)
  {
    deviceState->m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  // GL_ARB_compute_variable_group_size - glDispatchComputeGroupSizeARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDispatchComputeGroupSizeARB)
  {
    deviceState->m_glDispatchComputeGroupSizeARB (num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ARB_copy_buffer - glCopyBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyBufferSubData)
  {
    deviceState->m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_ARB_copy_image - glCopyImageSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyImageSubData)
  {
    deviceState->m_glCopyImageSubData (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_ARB_debug_output - glDebugMessageControlARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageControlARB)
  {
    deviceState->m_glDebugMessageControlARB (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_ARB_debug_output - glDebugMessageInsertARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageInsertARB)
  {
    deviceState->m_glDebugMessageInsertARB (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void * userParam)
{
  // GL_ARB_debug_output - glDebugMessageCallbackARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDebugMessageCallbackARB)
  {
    deviceState->m_glDebugMessageCallbackARB (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_ARB_debug_output - glGetDebugMessageLogARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetDebugMessageLogARB)
  {
    return deviceState->m_glGetDebugMessageLogARB (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ARB_direct_state_access - glCreateTransformFeedbacks
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateTransformFeedbacks)
  {
    deviceState->m_glCreateTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer)
{
  // GL_ARB_direct_state_access - glTransformFeedbackBufferBase
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTransformFeedbackBufferBase)
  {
    deviceState->m_glTransformFeedbackBufferBase (xfb, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glTransformFeedbackBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTransformFeedbackBufferRange)
  {
    deviceState->m_glTransformFeedbackBufferRange (xfb, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbackiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTransformFeedbackiv)
  {
    deviceState->m_glGetTransformFeedbackiv (xfb, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbacki_v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTransformFeedbacki_v)
  {
    deviceState->m_glGetTransformFeedbacki_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbacki64_v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTransformFeedbacki64_v)
  {
    deviceState->m_glGetTransformFeedbacki64_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateBuffers (GLsizei n, GLuint * buffers)
{
  // GL_ARB_direct_state_access - glCreateBuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateBuffers)
  {
    deviceState->m_glCreateBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_ARB_direct_state_access - glNamedBufferStorage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedBufferStorage)
  {
    deviceState->m_glNamedBufferStorage (buffer, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferData (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_ARB_direct_state_access - glNamedBufferData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedBufferData)
  {
    deviceState->m_glNamedBufferData (buffer, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_ARB_direct_state_access - glNamedBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedBufferSubData)
  {
    deviceState->m_glNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glCopyNamedBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyNamedBufferSubData)
  {
    deviceState->m_glCopyNamedBufferSubData (readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_direct_state_access - glClearNamedBufferData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedBufferData)
  {
    deviceState->m_glClearNamedBufferData (buffer, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_direct_state_access - glClearNamedBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedBufferSubData)
  {
    deviceState->m_glClearNamedBufferSubData (buffer, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapNamedBuffer (GLuint buffer, GLenum access)
{
  // GL_ARB_direct_state_access - glMapNamedBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMapNamedBuffer)
  {
    return deviceState->m_glMapNamedBuffer (buffer, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ARB_direct_state_access - glMapNamedBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMapNamedBufferRange)
  {
    return deviceState->m_glMapNamedBufferRange (buffer, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapNamedBuffer (GLuint buffer)
{
  // GL_ARB_direct_state_access - glUnmapNamedBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUnmapNamedBuffer)
  {
    return deviceState->m_glUnmapNamedBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_direct_state_access - glFlushMappedNamedBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFlushMappedNamedBufferRange)
  {
    deviceState->m_glFlushMappedNamedBufferRange (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedBufferParameteriv)
  {
    deviceState->m_glGetNamedBufferParameteriv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 * params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferParameteri64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedBufferParameteri64v)
  {
    deviceState->m_glGetNamedBufferParameteri64v (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void ** params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferPointerv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedBufferPointerv)
  {
    deviceState->m_glGetNamedBufferPointerv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
  // GL_ARB_direct_state_access - glGetNamedBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedBufferSubData)
  {
    deviceState->m_glGetNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ARB_direct_state_access - glCreateFramebuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateFramebuffers)
  {
    deviceState->m_glCreateFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ARB_direct_state_access - glNamedFramebufferRenderbuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferRenderbuffer)
  {
    deviceState->m_glNamedFramebufferRenderbuffer (framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param)
{
  // GL_ARB_direct_state_access - glNamedFramebufferParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferParameteri)
  {
    deviceState->m_glNamedFramebufferParameteri (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  // GL_ARB_direct_state_access - glNamedFramebufferTexture
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferTexture)
  {
    deviceState->m_glNamedFramebufferTexture (framebuffer, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ARB_direct_state_access - glNamedFramebufferTextureLayer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferTextureLayer)
  {
    deviceState->m_glNamedFramebufferTextureLayer (framebuffer, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf)
{
  // GL_ARB_direct_state_access - glNamedFramebufferDrawBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferDrawBuffer)
  {
    deviceState->m_glNamedFramebufferDrawBuffer (framebuffer, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
  // GL_ARB_direct_state_access - glNamedFramebufferDrawBuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferDrawBuffers)
  {
    deviceState->m_glNamedFramebufferDrawBuffers (framebuffer, n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src)
{
  // GL_ARB_direct_state_access - glNamedFramebufferReadBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedFramebufferReadBuffer)
  {
    deviceState->m_glNamedFramebufferReadBuffer (framebuffer, src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ARB_direct_state_access - glInvalidateNamedFramebufferData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateNamedFramebufferData)
  {
    deviceState->m_glInvalidateNamedFramebufferData (framebuffer, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glInvalidateNamedFramebufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateNamedFramebufferSubData)
  {
    deviceState->m_glInvalidateNamedFramebufferSubData (framebuffer, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedFramebufferiv)
  {
    deviceState->m_glClearNamedFramebufferiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedFramebufferuiv)
  {
    deviceState->m_glClearNamedFramebufferuiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedFramebufferfv)
  {
    deviceState->m_glClearNamedFramebufferfv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferfi
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClearNamedFramebufferfi)
  {
    deviceState->m_glClearNamedFramebufferfi (framebuffer, buffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ARB_direct_state_access - glBlitNamedFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlitNamedFramebuffer)
  {
    deviceState->m_glBlitNamedFramebuffer (readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target)
{
  // GL_ARB_direct_state_access - glCheckNamedFramebufferStatus
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCheckNamedFramebufferStatus)
  {
    return deviceState->m_glCheckNamedFramebufferStatus (framebuffer, target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetNamedFramebufferParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedFramebufferParameteriv)
  {
    deviceState->m_glGetNamedFramebufferParameteriv (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedFramebufferAttachmentParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedFramebufferAttachmentParameteriv)
  {
    deviceState->m_glGetNamedFramebufferAttachmentParameteriv (framebuffer, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ARB_direct_state_access - glCreateRenderbuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateRenderbuffers)
  {
    deviceState->m_glCreateRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glNamedRenderbufferStorage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedRenderbufferStorage)
  {
    deviceState->m_glNamedRenderbufferStorage (renderbuffer, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glNamedRenderbufferStorageMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedRenderbufferStorageMultisample)
  {
    deviceState->m_glNamedRenderbufferStorageMultisample (renderbuffer, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedRenderbufferParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedRenderbufferParameteriv)
  {
    deviceState->m_glGetNamedRenderbufferParameteriv (renderbuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateTextures (GLenum target, GLsizei n, GLuint * textures)
{
  // GL_ARB_direct_state_access - glCreateTextures
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateTextures)
  {
    deviceState->m_glCreateTextures (target, n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer)
{
  // GL_ARB_direct_state_access - glTextureBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureBuffer)
  {
    deviceState->m_glTextureBuffer (texture, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glTextureBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureBufferRange)
  {
    deviceState->m_glTextureBufferRange (texture, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_ARB_direct_state_access - glTextureStorage1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage1D)
  {
    deviceState->m_glTextureStorage1D (texture, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glTextureStorage2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage2D)
  {
    deviceState->m_glTextureStorage2D (texture, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_direct_state_access - glTextureStorage3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage3D)
  {
    deviceState->m_glTextureStorage3D (texture, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_direct_state_access - glTextureStorage2DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage2DMultisample)
  {
    deviceState->m_glTextureStorage2DMultisample (texture, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_direct_state_access - glTextureStorage3DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureStorage3DMultisample)
  {
    deviceState->m_glTextureStorage3DMultisample (texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureSubImage1D)
  {
    deviceState->m_glTextureSubImage1D (texture, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureSubImage2D)
  {
    deviceState->m_glTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureSubImage3D)
  {
    deviceState->m_glTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTextureSubImage1D)
  {
    deviceState->m_glCompressedTextureSubImage1D (texture, level, xoffset, width, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTextureSubImage2D)
  {
    deviceState->m_glCompressedTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCompressedTextureSubImage3D)
  {
    deviceState->m_glCompressedTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTextureSubImage1D)
  {
    deviceState->m_glCopyTextureSubImage1D (texture, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTextureSubImage2D)
  {
    deviceState->m_glCopyTextureSubImage2D (texture, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCopyTextureSubImage3D)
  {
    deviceState->m_glCopyTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterf (GLuint texture, GLenum pname, GLfloat param)
{
  // GL_ARB_direct_state_access - glTextureParameterf
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameterf)
  {
    deviceState->m_glTextureParameterf (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat * param)
{
  // GL_ARB_direct_state_access - glTextureParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameterfv)
  {
    deviceState->m_glTextureParameterfv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameteri (GLuint texture, GLenum pname, GLint param)
{
  // GL_ARB_direct_state_access - glTextureParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameteri)
  {
    deviceState->m_glTextureParameteri (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterIiv (GLuint texture, GLenum pname, const GLint * params)
{
  // GL_ARB_direct_state_access - glTextureParameterIiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameterIiv)
  {
    deviceState->m_glTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint * params)
{
  // GL_ARB_direct_state_access - glTextureParameterIuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameterIuiv)
  {
    deviceState->m_glTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameteriv (GLuint texture, GLenum pname, const GLint * param)
{
  // GL_ARB_direct_state_access - glTextureParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureParameteriv)
  {
    deviceState->m_glTextureParameteriv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateTextureMipmap (GLuint texture)
{
  // GL_ARB_direct_state_access - glGenerateTextureMipmap
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenerateTextureMipmap)
  {
    deviceState->m_glGenerateTextureMipmap (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTextureUnit (GLuint unit, GLuint texture)
{
  // GL_ARB_direct_state_access - glBindTextureUnit
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindTextureUnit)
  {
    deviceState->m_glBindTextureUnit (unit, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_ARB_direct_state_access - glGetTextureImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureImage)
  {
    deviceState->m_glGetTextureImage (texture, level, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void * pixels)
{
  // GL_ARB_direct_state_access - glGetCompressedTextureImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetCompressedTextureImage)
  {
    deviceState->m_glGetCompressedTextureImage (texture, level, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat * params)
{
  // GL_ARB_direct_state_access - glGetTextureLevelParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureLevelParameterfv)
  {
    deviceState->m_glGetTextureLevelParameterfv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureLevelParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureLevelParameteriv)
  {
    deviceState->m_glGetTextureLevelParameteriv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureParameterfv)
  {
    deviceState->m_glGetTextureParameterfv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterIiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureParameterIiv)
  {
    deviceState->m_glGetTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterIuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureParameterIuiv)
  {
    deviceState->m_glGetTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameteriv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureParameteriv)
  {
    deviceState->m_glGetTextureParameteriv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ARB_direct_state_access - glCreateVertexArrays
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateVertexArrays)
  {
    deviceState->m_glCreateVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_ARB_direct_state_access - glDisableVertexArrayAttrib
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDisableVertexArrayAttrib)
  {
    deviceState->m_glDisableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_ARB_direct_state_access - glEnableVertexArrayAttrib
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glEnableVertexArrayAttrib)
  {
    deviceState->m_glEnableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer)
{
  // GL_ARB_direct_state_access - glVertexArrayElementBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayElementBuffer)
  {
    deviceState->m_glVertexArrayElementBuffer (vaobj, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ARB_direct_state_access - glVertexArrayVertexBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayVertexBuffer)
  {
    deviceState->m_glVertexArrayVertexBuffer (vaobj, bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_ARB_direct_state_access - glVertexArrayVertexBuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayVertexBuffers)
  {
    deviceState->m_glVertexArrayVertexBuffers (vaobj, first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribBinding
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayAttribBinding)
  {
    deviceState->m_glVertexArrayAttribBinding (vaobj, attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayAttribFormat)
  {
    deviceState->m_glVertexArrayAttribFormat (vaobj, attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribIFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayAttribIFormat)
  {
    deviceState->m_glVertexArrayAttribIFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribLFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayAttribLFormat)
  {
    deviceState->m_glVertexArrayAttribLFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  // GL_ARB_direct_state_access - glVertexArrayBindingDivisor
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexArrayBindingDivisor)
  {
    deviceState->m_glVertexArrayBindingDivisor (vaobj, bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexArrayiv)
  {
    deviceState->m_glGetVertexArrayiv (vaobj, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayIndexediv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexArrayIndexediv)
  {
    deviceState->m_glGetVertexArrayIndexediv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayIndexed64iv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexArrayIndexed64iv)
  {
    deviceState->m_glGetVertexArrayIndexed64iv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateSamplers (GLsizei n, GLuint * samplers)
{
  // GL_ARB_direct_state_access - glCreateSamplers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateSamplers)
  {
    deviceState->m_glCreateSamplers (n, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ARB_direct_state_access - glCreateProgramPipelines
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateProgramPipelines)
  {
    deviceState->m_glCreateProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateQueries (GLenum target, GLsizei n, GLuint * ids)
{
  // GL_ARB_direct_state_access - glCreateQueries
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateQueries)
  {
    deviceState->m_glCreateQueries (target, n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjecti64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryBufferObjecti64v)
  {
    deviceState->m_glGetQueryBufferObjecti64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryBufferObjectiv)
  {
    deviceState->m_glGetQueryBufferObjectiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectui64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryBufferObjectui64v)
  {
    deviceState->m_glGetQueryBufferObjectui64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryBufferObjectuiv)
  {
    deviceState->m_glGetQueryBufferObjectuiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiARB (GLuint buf, GLenum mode)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationiARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationiARB)
  {
    deviceState->m_glBlendEquationiARB (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationSeparateiARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquationSeparateiARB)
  {
    deviceState->m_glBlendEquationSeparateiARB (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciARB (GLuint buf, GLenum src, GLenum dst)
{
  // GL_ARB_draw_buffers_blend - glBlendFunciARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFunciARB)
  {
    deviceState->m_glBlendFunciARB (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendFuncSeparateiARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendFuncSeparateiARB)
  {
    deviceState->m_glBlendFuncSeparateiARB (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawElementsBaseVertex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsBaseVertex)
  {
    deviceState->m_glDrawElementsBaseVertex (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawRangeElementsBaseVertex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawRangeElementsBaseVertex)
  {
    deviceState->m_glDrawRangeElementsBaseVertex (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawElementsInstancedBaseVertex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsInstancedBaseVertex)
  {
    deviceState->m_glDrawElementsInstancedBaseVertex (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glMultiDrawElementsBaseVertex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsBaseVertex)
  {
    deviceState->m_glMultiDrawElementsBaseVertex (mode, count, type, indices, drawcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_ARB_draw_indirect - glDrawArraysIndirect
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawArraysIndirect)
  {
    deviceState->m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_ARB_draw_indirect - glDrawElementsIndirect
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawElementsIndirect)
  {
    deviceState->m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ARB_framebuffer_no_attachments - glFramebufferParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferParameteri)
  {
    deviceState->m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_no_attachments - glGetFramebufferParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFramebufferParameteriv)
  {
    deviceState->m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsRenderbuffer (GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glIsRenderbuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsRenderbuffer)
  {
    return deviceState->m_glIsRenderbuffer (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glBindRenderbuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindRenderbuffer)
  {
    deviceState->m_glBindRenderbuffer (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers)
{
  // GL_ARB_framebuffer_object - glDeleteRenderbuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteRenderbuffers)
  {
    deviceState->m_glDeleteRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ARB_framebuffer_object - glGenRenderbuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenRenderbuffers)
  {
    deviceState->m_glGenRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_framebuffer_object - glRenderbufferStorage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorage)
  {
    deviceState->m_glRenderbufferStorage (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_object - glGetRenderbufferParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetRenderbufferParameteriv)
  {
    deviceState->m_glGetRenderbufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFramebuffer (GLuint framebuffer)
{
  // GL_ARB_framebuffer_object - glIsFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsFramebuffer)
  {
    return deviceState->m_glIsFramebuffer (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFramebuffer (GLenum target, GLuint framebuffer)
{
  // GL_ARB_framebuffer_object - glBindFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindFramebuffer)
  {
    deviceState->m_glBindFramebuffer (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers)
{
  // GL_ARB_framebuffer_object - glDeleteFramebuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteFramebuffers)
  {
    deviceState->m_glDeleteFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ARB_framebuffer_object - glGenFramebuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenFramebuffers)
  {
    deviceState->m_glGenFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckFramebufferStatus (GLenum target)
{
  // GL_ARB_framebuffer_object - glCheckFramebufferStatus
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCheckFramebufferStatus)
  {
    return deviceState->m_glCheckFramebufferStatus (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture1D)
  {
    deviceState->m_glFramebufferTexture1D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture2D)
  {
    deviceState->m_glFramebufferTexture2D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTexture3D)
  {
    deviceState->m_glFramebufferTexture3D (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glFramebufferRenderbuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferRenderbuffer)
  {
    deviceState->m_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_object - glGetFramebufferAttachmentParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFramebufferAttachmentParameteriv)
  {
    deviceState->m_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateMipmap (GLenum target)
{
  // GL_ARB_framebuffer_object - glGenerateMipmap
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenerateMipmap)
  {
    deviceState->m_glGenerateMipmap (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ARB_framebuffer_object - glBlitFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlitFramebuffer)
  {
    deviceState->m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_framebuffer_object - glRenderbufferStorageMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glRenderbufferStorageMultisample)
  {
    deviceState->m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ARB_framebuffer_object - glFramebufferTextureLayer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFramebufferTextureLayer)
  {
    deviceState->m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_ARB_get_program_binary - glGetProgramBinary
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramBinary)
  {
    deviceState->m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_ARB_get_program_binary - glProgramBinary
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramBinary)
  {
    deviceState->m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_ARB_get_program_binary - glProgramParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramParameteri)
  {
    deviceState->m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_ARB_get_texture_sub_image - glGetTextureSubImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetTextureSubImage)
  {
    deviceState->m_glGetTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels)
{
  // GL_ARB_get_texture_sub_image - glGetCompressedTextureSubImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetCompressedTextureSubImage)
  {
    deviceState->m_glGetCompressedTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1d (GLint location, GLdouble x)
{
  // GL_ARB_gpu_shader_fp64 - glUniform1d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1d)
  {
    deviceState->m_glUniform1d (location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2d (GLint location, GLdouble x, GLdouble y)
{
  // GL_ARB_gpu_shader_fp64 - glUniform2d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2d)
  {
    deviceState->m_glUniform2d (location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_gpu_shader_fp64 - glUniform3d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3d)
  {
    deviceState->m_glUniform3d (location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_gpu_shader_fp64 - glUniform4d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4d)
  {
    deviceState->m_glUniform4d (location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform1dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform1dv)
  {
    deviceState->m_glUniform1dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform2dv)
  {
    deviceState->m_glUniform2dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform3dv)
  {
    deviceState->m_glUniform3dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniform4dv)
  {
    deviceState->m_glUniform4dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2dv)
  {
    deviceState->m_glUniformMatrix2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3dv)
  {
    deviceState->m_glUniformMatrix3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4dv)
  {
    deviceState->m_glUniformMatrix4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2x3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x3dv)
  {
    deviceState->m_glUniformMatrix2x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2x4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix2x4dv)
  {
    deviceState->m_glUniformMatrix2x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3x2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x2dv)
  {
    deviceState->m_glUniformMatrix3x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3x4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix3x4dv)
  {
    deviceState->m_glUniformMatrix3x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4x2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x2dv)
  {
    deviceState->m_glUniformMatrix4x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4x3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformMatrix4x3dv)
  {
    deviceState->m_glUniformMatrix4x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformdv (GLuint program, GLint location, GLdouble * params)
{
  // GL_ARB_gpu_shader_fp64 - glGetUniformdv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformdv)
  {
    deviceState->m_glGetUniformdv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ARB_imaging - glBlendColor
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendColor)
  {
    deviceState->m_glBlendColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquation (GLenum mode)
{
  // GL_ARB_imaging - glBlendEquation
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBlendEquation)
  {
    deviceState->m_glBlendEquation (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawArraysIndirectCountARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawArraysIndirectCountARB)
  {
    deviceState->m_glMultiDrawArraysIndirectCountARB (mode, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawElementsIndirectCountARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsIndirectCountARB)
  {
    deviceState->m_glMultiDrawElementsIndirectCountARB (mode, type, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_ARB_internalformat_query - glGetInternalformativ
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInternalformativ)
  {
    deviceState->m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
  // GL_ARB_internalformat_query2 - glGetInternalformati64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInternalformati64v)
  {
    deviceState->m_glGetInternalformati64v (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_invalidate_subdata - glInvalidateTexSubImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateTexSubImage)
  {
    deviceState->m_glInvalidateTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateTexImage (GLuint texture, GLint level)
{
  // GL_ARB_invalidate_subdata - glInvalidateTexImage
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateTexImage)
  {
    deviceState->m_glInvalidateTexImage (texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_invalidate_subdata - glInvalidateBufferSubData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateBufferSubData)
  {
    deviceState->m_glInvalidateBufferSubData (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateBufferData (GLuint buffer)
{
  // GL_ARB_invalidate_subdata - glInvalidateBufferData
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateBufferData)
  {
    deviceState->m_glInvalidateBufferData (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ARB_invalidate_subdata - glInvalidateFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateFramebuffer)
  {
    deviceState->m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_invalidate_subdata - glInvalidateSubFramebuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glInvalidateSubFramebuffer)
  {
    deviceState->m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ARB_map_buffer_range - glMapBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMapBufferRange)
  {
    return deviceState->m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_map_buffer_range - glFlushMappedBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFlushMappedBufferRange)
  {
    deviceState->m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
  // GL_ARB_multi_bind - glBindBuffersBase
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBuffersBase)
  {
    deviceState->m_glBindBuffersBase (target, first, count, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
  // GL_ARB_multi_bind - glBindBuffersRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBuffersRange)
  {
    deviceState->m_glBindBuffersRange (target, first, count, buffers, offsets, sizes);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_ARB_multi_bind - glBindTextures
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindTextures)
  {
    deviceState->m_glBindTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSamplers (GLuint first, GLsizei count, const GLuint * samplers)
{
  // GL_ARB_multi_bind - glBindSamplers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindSamplers)
  {
    deviceState->m_glBindSamplers (first, count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_ARB_multi_bind - glBindImageTextures
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindImageTextures)
  {
    deviceState->m_glBindImageTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffers (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_ARB_multi_bind - glBindVertexBuffers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexBuffers)
  {
    deviceState->m_glBindVertexBuffers (first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirect (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_ARB_multi_draw_indirect - glMultiDrawArraysIndirect
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawArraysIndirect)
  {
    deviceState->m_glMultiDrawArraysIndirect (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_ARB_multi_draw_indirect - glMultiDrawElementsIndirect
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMultiDrawElementsIndirect)
  {
    deviceState->m_glMultiDrawElementsIndirect (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_ARB_program_interface_query - glGetProgramInterfaceiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramInterfaceiv)
  {
    deviceState->m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceIndex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceIndex)
  {
    return deviceState->m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceName
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceName)
  {
    deviceState->m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_ARB_program_interface_query - glGetProgramResourceiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceiv)
  {
    deviceState->m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceLocation
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceLocation)
  {
    return deviceState->m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceLocationIndex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramResourceLocationIndex)
  {
    return deviceState->m_glGetProgramResourceLocationIndex (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProvokingVertex (GLenum mode)
{
  // GL_ARB_provoking_vertex - glProvokingVertex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProvokingVertex)
  {
    deviceState->m_glProvokingVertex (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusARB ()
{
  // GL_ARB_robustness - glGetGraphicsResetStatusARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetGraphicsResetStatusARB)
  {
    return deviceState->m_glGetGraphicsResetStatusARB ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnTexImageARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnTexImageARB)
  {
    deviceState->m_glGetnTexImageARB (target, level, format, type, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_ARB_robustness - glReadnPixelsARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glReadnPixelsARB)
  {
    deviceState->m_glReadnPixelsARB (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnCompressedTexImageARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnCompressedTexImageARB)
  {
    deviceState->m_glGetnCompressedTexImageARB (target, lod, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_ARB_robustness - glGetnUniformfvARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformfvARB)
  {
    deviceState->m_glGetnUniformfvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_ARB_robustness - glGetnUniformivARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformivARB)
  {
    deviceState->m_glGetnUniformivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_ARB_robustness - glGetnUniformuivARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformuivARB)
  {
    deviceState->m_glGetnUniformuivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
  // GL_ARB_robustness - glGetnUniformdvARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetnUniformdvARB)
  {
    deviceState->m_glGetnUniformdvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMinSampleShadingARB (GLfloat value)
{
  // GL_ARB_sample_shading - glMinSampleShadingARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMinSampleShadingARB)
  {
    deviceState->m_glMinSampleShadingARB (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_ARB_sampler_objects - glGenSamplers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenSamplers)
  {
    deviceState->m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_ARB_sampler_objects - glDeleteSamplers
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteSamplers)
  {
    deviceState->m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSampler (GLuint sampler)
{
  // GL_ARB_sampler_objects - glIsSampler
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsSampler)
  {
    return deviceState->m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_ARB_sampler_objects - glBindSampler
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindSampler)
  {
    deviceState->m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_ARB_sampler_objects - glSamplerParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameteri)
  {
    deviceState->m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameteriv)
  {
    deviceState->m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_ARB_sampler_objects - glSamplerParameterf
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterf)
  {
    deviceState->m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterfv)
  {
    deviceState->m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterIiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIiv)
  {
    deviceState->m_glSamplerParameterIiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterIuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSamplerParameterIuiv)
  {
    deviceState->m_glSamplerParameterIuiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameteriv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameteriv)
  {
    deviceState->m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterIiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIiv)
  {
    deviceState->m_glGetSamplerParameterIiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterfv)
  {
    deviceState->m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterIuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSamplerParameterIuiv)
  {
    deviceState->m_glGetSamplerParameterIuiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_ARB_separate_shader_objects - glUseProgramStages
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUseProgramStages)
  {
    deviceState->m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_ARB_separate_shader_objects - glActiveShaderProgram
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glActiveShaderProgram)
  {
    deviceState->m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_ARB_separate_shader_objects - glCreateShaderProgramv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCreateShaderProgramv)
  {
    return deviceState->m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glBindProgramPipeline
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindProgramPipeline)
  {
    deviceState->m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_ARB_separate_shader_objects - glDeleteProgramPipelines
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteProgramPipelines)
  {
    deviceState->m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ARB_separate_shader_objects - glGenProgramPipelines
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenProgramPipelines)
  {
    deviceState->m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glIsProgramPipeline
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsProgramPipeline)
  {
    return deviceState->m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_ARB_separate_shader_objects - glGetProgramPipelineiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineiv)
  {
    deviceState->m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1i
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1i)
  {
    deviceState->m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1iv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1iv)
  {
    deviceState->m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1f
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1f)
  {
    deviceState->m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1fv)
  {
    deviceState->m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1d (GLuint program, GLint location, GLdouble v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1d)
  {
    deviceState->m_glProgramUniform1d (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1dv)
  {
    deviceState->m_glProgramUniform1dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1ui)
  {
    deviceState->m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform1uiv)
  {
    deviceState->m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2i
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2i)
  {
    deviceState->m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2iv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2iv)
  {
    deviceState->m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2f
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2f)
  {
    deviceState->m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2fv)
  {
    deviceState->m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2d)
  {
    deviceState->m_glProgramUniform2d (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2dv)
  {
    deviceState->m_glProgramUniform2dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2ui)
  {
    deviceState->m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform2uiv)
  {
    deviceState->m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3i
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3i)
  {
    deviceState->m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3iv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3iv)
  {
    deviceState->m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3f
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3f)
  {
    deviceState->m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3fv)
  {
    deviceState->m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3d)
  {
    deviceState->m_glProgramUniform3d (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3dv)
  {
    deviceState->m_glProgramUniform3dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3ui)
  {
    deviceState->m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform3uiv)
  {
    deviceState->m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4i
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4i)
  {
    deviceState->m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4iv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4iv)
  {
    deviceState->m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4f
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4f)
  {
    deviceState->m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4fv)
  {
    deviceState->m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4d)
  {
    deviceState->m_glProgramUniform4d (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4dv)
  {
    deviceState->m_glProgramUniform4dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4ui)
  {
    deviceState->m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniform4uiv)
  {
    deviceState->m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2fv)
  {
    deviceState->m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3fv)
  {
    deviceState->m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4fv)
  {
    deviceState->m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2dv)
  {
    deviceState->m_glProgramUniformMatrix2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3dv)
  {
    deviceState->m_glProgramUniformMatrix3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4dv)
  {
    deviceState->m_glProgramUniformMatrix4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x3fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x3fv)
  {
    deviceState->m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x2fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x2fv)
  {
    deviceState->m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x4fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x4fv)
  {
    deviceState->m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x2fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x2fv)
  {
    deviceState->m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x4fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x4fv)
  {
    deviceState->m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x3fv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x3fv)
  {
    deviceState->m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x3dv)
  {
    deviceState->m_glProgramUniformMatrix2x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x2dv)
  {
    deviceState->m_glProgramUniformMatrix3x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix2x4dv)
  {
    deviceState->m_glProgramUniformMatrix2x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x2dv)
  {
    deviceState->m_glProgramUniformMatrix4x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix3x4dv)
  {
    deviceState->m_glProgramUniformMatrix3x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glProgramUniformMatrix4x3dv)
  {
    deviceState->m_glProgramUniformMatrix4x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glValidateProgramPipeline
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glValidateProgramPipeline)
  {
    deviceState->m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ARB_separate_shader_objects - glGetProgramPipelineInfoLog
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramPipelineInfoLog)
  {
    deviceState->m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
  // GL_ARB_shader_atomic_counters - glGetActiveAtomicCounterBufferiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveAtomicCounterBufferiv)
  {
    deviceState->m_glGetActiveAtomicCounterBufferiv (program, bufferIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_ARB_shader_image_load_store - glBindImageTexture
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindImageTexture)
  {
    deviceState->m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrier (GLbitfield barriers)
{
  // GL_ARB_shader_image_load_store - glMemoryBarrier
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glMemoryBarrier)
  {
    deviceState->m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  // GL_ARB_shader_storage_buffer_object - glShaderStorageBlockBinding
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glShaderStorageBlockBinding)
  {
    deviceState->m_glShaderStorageBlockBinding (program, storageBlockIndex, storageBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetSubroutineUniformLocation
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSubroutineUniformLocation)
  {
    return deviceState->m_glGetSubroutineUniformLocation (program, shadertype, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetSubroutineIndex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSubroutineIndex)
  {
    return deviceState->m_glGetSubroutineIndex (program, shadertype, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineUniformiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveSubroutineUniformiv)
  {
    deviceState->m_glGetActiveSubroutineUniformiv (program, shadertype, index, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineUniformName
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveSubroutineUniformName)
  {
    deviceState->m_glGetActiveSubroutineUniformName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineName
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveSubroutineName)
  {
    deviceState->m_glGetActiveSubroutineName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint * indices)
{
  // GL_ARB_shader_subroutine - glUniformSubroutinesuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformSubroutinesuiv)
  {
    deviceState->m_glUniformSubroutinesuiv (shadertype, count, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint * params)
{
  // GL_ARB_shader_subroutine - glGetUniformSubroutineuiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformSubroutineuiv)
  {
    deviceState->m_glGetUniformSubroutineuiv (shadertype, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
  // GL_ARB_shader_subroutine - glGetProgramStageiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetProgramStageiv)
  {
    deviceState->m_glGetProgramStageiv (program, shadertype, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedStringARB (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string)
{
  // GL_ARB_shading_language_include - glNamedStringARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedStringARB)
  {
    deviceState->m_glNamedStringARB (type, namelen, name, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glDeleteNamedStringARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteNamedStringARB)
  {
    deviceState->m_glDeleteNamedStringARB (namelen, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length)
{
  // GL_ARB_shading_language_include - glCompileShaderIncludeARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glCompileShaderIncludeARB)
  {
    deviceState->m_glCompileShaderIncludeARB (shader, count, path, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glIsNamedStringARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsNamedStringARB)
  {
    return deviceState->m_glIsNamedStringARB (namelen, name);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedStringARB (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string)
{
  // GL_ARB_shading_language_include - glGetNamedStringARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedStringARB)
  {
    deviceState->m_glGetNamedStringARB (namelen, name, bufSize, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedStringivARB (GLint namelen, const GLchar * name, GLenum pname, GLint * params)
{
  // GL_ARB_shading_language_include - glGetNamedStringivARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetNamedStringivARB)
  {
    deviceState->m_glGetNamedStringivARB (namelen, name, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glBufferPageCommitmentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBufferPageCommitmentARB)
  {
    deviceState->m_glBufferPageCommitmentARB (target, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentEXT
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedBufferPageCommitmentEXT)
  {
    deviceState->m_glNamedBufferPageCommitmentEXT (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glNamedBufferPageCommitmentARB)
  {
    deviceState->m_glNamedBufferPageCommitmentARB (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_ARB_sparse_texture - glTexPageCommitmentARB
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexPageCommitmentARB)
  {
    deviceState->m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_ARB_sync - glFenceSync
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glFenceSync)
  {
    return deviceState->m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSync (GLsync sync)
{
  // GL_ARB_sync - glIsSync
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsSync)
  {
    return deviceState->m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSync (GLsync sync)
{
  // GL_ARB_sync - glDeleteSync
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteSync)
  {
    deviceState->m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ARB_sync - glClientWaitSync
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glClientWaitSync)
  {
    return deviceState->m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ARB_sync - glWaitSync
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glWaitSync)
  {
    deviceState->m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_ARB_sync - glGetInteger64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetInteger64v)
  {
    deviceState->m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_ARB_sync - glGetSynciv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetSynciv)
  {
    deviceState->m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteri (GLenum pname, GLint value)
{
  // GL_ARB_tessellation_shader - glPatchParameteri
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glPatchParameteri)
  {
    deviceState->m_glPatchParameteri (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameterfv (GLenum pname, const GLfloat * values)
{
  // GL_ARB_tessellation_shader - glPatchParameterfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glPatchParameterfv)
  {
    deviceState->m_glPatchParameterfv (pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBarrier ()
{
  // GL_ARB_texture_barrier - glTextureBarrier
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureBarrier)
  {
    deviceState->m_glTextureBarrier ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_texture_buffer_range - glTexBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexBufferRange)
  {
    deviceState->m_glTexBufferRange (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_multisample - glTexImage2DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexImage2DMultisample)
  {
    deviceState->m_glTexImage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_multisample - glTexImage3DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexImage3DMultisample)
  {
    deviceState->m_glTexImage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_ARB_texture_multisample - glGetMultisamplefv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetMultisamplefv)
  {
    deviceState->m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_ARB_texture_multisample - glSampleMaski
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glSampleMaski)
  {
    deviceState->m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_ARB_texture_storage - glTexStorage1D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage1D)
  {
    deviceState->m_glTexStorage1D (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_texture_storage - glTexStorage2D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage2D)
  {
    deviceState->m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_texture_storage - glTexStorage3D
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage3D)
  {
    deviceState->m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_storage_multisample - glTexStorage2DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage2DMultisample)
  {
    deviceState->m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_storage_multisample - glTexStorage3DMultisample
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTexStorage3DMultisample)
  {
    deviceState->m_glTexStorage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_ARB_texture_view - glTextureView
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glTextureView)
  {
    deviceState->m_glTextureView (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glQueryCounter (GLuint id, GLenum target)
{
  // GL_ARB_timer_query - glQueryCounter
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glQueryCounter)
  {
    deviceState->m_glQueryCounter (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_ARB_timer_query - glGetQueryObjecti64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjecti64v)
  {
    deviceState->m_glGetQueryObjecti64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_ARB_timer_query - glGetQueryObjectui64v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryObjectui64v)
  {
    deviceState->m_glGetQueryObjectui64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_ARB_transform_feedback2 - glBindTransformFeedback
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindTransformFeedback)
  {
    deviceState->m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_ARB_transform_feedback2 - glDeleteTransformFeedbacks
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteTransformFeedbacks)
  {
    deviceState->m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ARB_transform_feedback2 - glGenTransformFeedbacks
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenTransformFeedbacks)
  {
    deviceState->m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTransformFeedback (GLuint id)
{
  // GL_ARB_transform_feedback2 - glIsTransformFeedback
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsTransformFeedback)
  {
    return deviceState->m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPauseTransformFeedback ()
{
  // GL_ARB_transform_feedback2 - glPauseTransformFeedback
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glPauseTransformFeedback)
  {
    deviceState->m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResumeTransformFeedback ()
{
  // GL_ARB_transform_feedback2 - glResumeTransformFeedback
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glResumeTransformFeedback)
  {
    deviceState->m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedback (GLenum mode, GLuint id)
{
  // GL_ARB_transform_feedback2 - glDrawTransformFeedback
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawTransformFeedback)
  {
    deviceState->m_glDrawTransformFeedback (mode, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream)
{
  // GL_ARB_transform_feedback3 - glDrawTransformFeedbackStream
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawTransformFeedbackStream)
  {
    deviceState->m_glDrawTransformFeedbackStream (mode, id, stream);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQueryIndexed (GLenum target, GLuint index, GLuint id)
{
  // GL_ARB_transform_feedback3 - glBeginQueryIndexed
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBeginQueryIndexed)
  {
    deviceState->m_glBeginQueryIndexed (target, index, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQueryIndexed (GLenum target, GLuint index)
{
  // GL_ARB_transform_feedback3 - glEndQueryIndexed
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glEndQueryIndexed)
  {
    deviceState->m_glEndQueryIndexed (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint * params)
{
  // GL_ARB_transform_feedback3 - glGetQueryIndexediv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetQueryIndexediv)
  {
    deviceState->m_glGetQueryIndexediv (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount)
{
  // GL_ARB_transform_feedback_instanced - glDrawTransformFeedbackInstanced
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawTransformFeedbackInstanced)
  {
    deviceState->m_glDrawTransformFeedbackInstanced (mode, id, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
  // GL_ARB_transform_feedback_instanced - glDrawTransformFeedbackStreamInstanced
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDrawTransformFeedbackStreamInstanced)
  {
    deviceState->m_glDrawTransformFeedbackStreamInstanced (mode, id, stream, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_ARB_uniform_buffer_object - glGetUniformIndices
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformIndices)
  {
    deviceState->m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformsiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformsiv)
  {
    deviceState->m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformName
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformName)
  {
    deviceState->m_glGetActiveUniformName (program, uniformIndex, bufSize, length, uniformName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_ARB_uniform_buffer_object - glGetUniformBlockIndex
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetUniformBlockIndex)
  {
    return deviceState->m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformBlockiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformBlockiv)
  {
    deviceState->m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformBlockName
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetActiveUniformBlockName)
  {
    deviceState->m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_ARB_uniform_buffer_object - glUniformBlockBinding
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glUniformBlockBinding)
  {
    deviceState->m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_uniform_buffer_object - glBindBufferRange
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBufferRange)
  {
    deviceState->m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_ARB_uniform_buffer_object - glBindBufferBase
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindBufferBase)
  {
    deviceState->m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_ARB_uniform_buffer_object - glGetIntegeri_v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetIntegeri_v)
  {
    deviceState->m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArray (GLuint array)
{
  // GL_ARB_vertex_array_object - glBindVertexArray
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexArray)
  {
    deviceState->m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_ARB_vertex_array_object - glDeleteVertexArrays
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDeleteVertexArrays)
  {
    deviceState->m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ARB_vertex_array_object - glGenVertexArrays
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGenVertexArrays)
  {
    deviceState->m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArray (GLuint array)
{
  // GL_ARB_vertex_array_object - glIsVertexArray
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glIsVertexArray)
  {
    return deviceState->m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1d (GLuint index, GLdouble x)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL1d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL1d)
  {
    deviceState->m_glVertexAttribL1d (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL2d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL2d)
  {
    deviceState->m_glVertexAttribL2d (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL3d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL3d)
  {
    deviceState->m_glVertexAttribL3d (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL4d
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL4d)
  {
    deviceState->m_glVertexAttribL4d (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL1dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL1dv)
  {
    deviceState->m_glVertexAttribL1dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL2dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL2dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL2dv)
  {
    deviceState->m_glVertexAttribL2dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL3dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL3dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL3dv)
  {
    deviceState->m_glVertexAttribL3dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL4dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL4dv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribL4dv)
  {
    deviceState->m_glVertexAttribL4dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribLPointer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribLPointer)
  {
    deviceState->m_glVertexAttribLPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_ARB_vertex_attrib_64bit - glGetVertexAttribLdv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetVertexAttribLdv)
  {
    deviceState->m_glGetVertexAttribLdv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ARB_vertex_attrib_binding - glBindVertexBuffer
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glBindVertexBuffer)
  {
    deviceState->m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribFormat)
  {
    deviceState->m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribIFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribIFormat)
  {
    deviceState->m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribLFormat
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribLFormat)
  {
    deviceState->m_glVertexAttribLFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribBinding
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribBinding)
  {
    deviceState->m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_ARB_vertex_attrib_binding - glVertexBindingDivisor
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexBindingDivisor)
  {
    deviceState->m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP1ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP1ui)
  {
    deviceState->m_glVertexAttribP1ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP1uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP1uiv)
  {
    deviceState->m_glVertexAttribP1uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP2ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP2ui)
  {
    deviceState->m_glVertexAttribP2ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP2uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP2uiv)
  {
    deviceState->m_glVertexAttribP2uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP3ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP3ui)
  {
    deviceState->m_glVertexAttribP3ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP3uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP3uiv)
  {
    deviceState->m_glVertexAttribP3uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP4ui
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP4ui)
  {
    deviceState->m_glVertexAttribP4ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP4uiv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glVertexAttribP4uiv)
  {
    deviceState->m_glVertexAttribP4uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportArrayv (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_ARB_viewport_array - glViewportArrayv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportArrayv)
  {
    deviceState->m_glViewportArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_ARB_viewport_array - glViewportIndexedf
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportIndexedf)
  {
    deviceState->m_glViewportIndexedf (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfv (GLuint index, const GLfloat * v)
{
  // GL_ARB_viewport_array - glViewportIndexedfv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glViewportIndexedfv)
  {
    deviceState->m_glViewportIndexedfv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorArrayv (GLuint first, GLsizei count, const GLint * v)
{
  // GL_ARB_viewport_array - glScissorArrayv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorArrayv)
  {
    deviceState->m_glScissorArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_ARB_viewport_array - glScissorIndexed
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorIndexed)
  {
    deviceState->m_glScissorIndexed (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedv (GLuint index, const GLint * v)
{
  // GL_ARB_viewport_array - glScissorIndexedv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glScissorIndexedv)
  {
    deviceState->m_glScissorIndexedv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble * v)
{
  // GL_ARB_viewport_array - glDepthRangeArrayv
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangeArrayv)
  {
    deviceState->m_glDepthRangeArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f)
{
  // GL_ARB_viewport_array - glDepthRangeIndexed
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glDepthRangeIndexed)
  {
    deviceState->m_glDepthRangeIndexed (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloati_v (GLenum target, GLuint index, GLfloat * data)
{
  // GL_ARB_viewport_array - glGetFloati_v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetFloati_v)
  {
    deviceState->m_glGetFloati_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDoublei_v (GLenum target, GLuint index, GLdouble * data)
{
  // GL_ARB_viewport_array - glGetDoublei_v
  const glew::glcore::DeviceState *deviceState = glew::glcore::GetDeviceState ();
  if (deviceState && deviceState->m_glGetDoublei_v)
  {
    deviceState->m_glGetDoublei_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
