////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-glcore.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReleaseShaderCompiler ()
{
  // GL_ARB_ES2_compatibility - glReleaseShaderCompiler
  if (s_deviceConfig.m_glReleaseShaderCompiler)
  {
    s_deviceConfig.m_glReleaseShaderCompiler ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
  // GL_ARB_ES2_compatibility - glShaderBinary
  if (s_deviceConfig.m_glShaderBinary)
  {
    s_deviceConfig.m_glShaderBinary (count, shaders, binaryformat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
  // GL_ARB_ES2_compatibility - glGetShaderPrecisionFormat
  if (s_deviceConfig.m_glGetShaderPrecisionFormat)
  {
    s_deviceConfig.m_glGetShaderPrecisionFormat (shadertype, precisiontype, range, precision);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangef (GLfloat n, GLfloat f)
{
  // GL_ARB_ES2_compatibility - glDepthRangef
  if (s_deviceConfig.m_glDepthRangef)
  {
    s_deviceConfig.m_glDepthRangef (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearDepthf (GLfloat d)
{
  // GL_ARB_ES2_compatibility - glClearDepthf
  if (s_deviceConfig.m_glClearDepthf)
  {
    s_deviceConfig.m_glClearDepthf (d);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_ARB_ES3_1_compatibility - glMemoryBarrierByRegion
  if (s_deviceConfig.m_glMemoryBarrierByRegion)
  {
    s_deviceConfig.m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawArraysInstancedBaseInstance
  if (s_deviceConfig.m_glDrawArraysInstancedBaseInstance)
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstance (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawElementsInstancedBaseInstance
  if (s_deviceConfig.m_glDrawElementsInstancedBaseInstance)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseInstance (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_ARB_base_instance - glDrawElementsInstancedBaseVertexBaseInstance
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureHandleARB (GLuint texture)
{
  // GL_ARB_bindless_texture - glGetTextureHandleARB
  if (s_deviceConfig.m_glGetTextureHandleARB)
  {
    return s_deviceConfig.m_glGetTextureHandleARB (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler)
{
  // GL_ARB_bindless_texture - glGetTextureSamplerHandleARB
  if (s_deviceConfig.m_glGetTextureSamplerHandleARB)
  {
    return s_deviceConfig.m_glGetTextureSamplerHandleARB (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleResidentARB
  if (s_deviceConfig.m_glMakeTextureHandleResidentARB)
  {
    s_deviceConfig.m_glMakeTextureHandleResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeTextureHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleNonResidentARB
  if (s_deviceConfig.m_glMakeTextureHandleNonResidentARB)
  {
    s_deviceConfig.m_glMakeTextureHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_ARB_bindless_texture - glGetImageHandleARB
  if (s_deviceConfig.m_glGetImageHandleARB)
  {
    return s_deviceConfig.m_glGetImageHandleARB (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleResidentARB (GLuint64 handle, GLenum access)
{
  // GL_ARB_bindless_texture - glMakeImageHandleResidentARB
  if (s_deviceConfig.m_glMakeImageHandleResidentARB)
  {
    s_deviceConfig.m_glMakeImageHandleResidentARB (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMakeImageHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeImageHandleNonResidentARB
  if (s_deviceConfig.m_glMakeImageHandleNonResidentARB)
  {
    s_deviceConfig.m_glMakeImageHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64ARB (GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64ARB
  if (s_deviceConfig.m_glUniformHandleui64ARB)
  {
    s_deviceConfig.m_glUniformHandleui64ARB (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64vARB
  if (s_deviceConfig.m_glUniformHandleui64vARB)
  {
    s_deviceConfig.m_glUniformHandleui64vARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64ARB
  if (s_deviceConfig.m_glProgramUniformHandleui64ARB)
  {
    s_deviceConfig.m_glProgramUniformHandleui64ARB (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64vARB
  if (s_deviceConfig.m_glProgramUniformHandleui64vARB)
  {
    s_deviceConfig.m_glProgramUniformHandleui64vARB (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsTextureHandleResidentARB
  if (s_deviceConfig.m_glIsTextureHandleResidentARB)
  {
    return s_deviceConfig.m_glIsTextureHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsImageHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsImageHandleResidentARB
  if (s_deviceConfig.m_glIsImageHandleResidentARB)
  {
    return s_deviceConfig.m_glIsImageHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64ARB
  if (s_deviceConfig.m_glVertexAttribL1ui64ARB)
  {
    s_deviceConfig.m_glVertexAttribL1ui64ARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT * v)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64vARB
  if (s_deviceConfig.m_glVertexAttribL1ui64vARB)
  {
    s_deviceConfig.m_glVertexAttribL1ui64vARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT * params)
{
  // GL_ARB_bindless_texture - glGetVertexAttribLui64vARB
  if (s_deviceConfig.m_glGetVertexAttribLui64vARB)
  {
    s_deviceConfig.m_glGetVertexAttribLui64vARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
{
  // GL_ARB_blend_func_extended - glBindFragDataLocationIndexed
  if (s_deviceConfig.m_glBindFragDataLocationIndexed)
  {
    s_deviceConfig.m_glBindFragDataLocationIndexed (program, colorNumber, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetFragDataIndex (GLuint program, const GLchar * name)
{
  // GL_ARB_blend_func_extended - glGetFragDataIndex
  if (s_deviceConfig.m_glGetFragDataIndex)
  {
    return s_deviceConfig.m_glGetFragDataIndex (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferStorage (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_ARB_buffer_storage - glBufferStorage
  if (s_deviceConfig.m_glBufferStorage)
  {
    s_deviceConfig.m_glBufferStorage (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags)
{
  // GL_ARB_cl_event - glCreateSyncFromCLeventARB
  if (s_deviceConfig.m_glCreateSyncFromCLeventARB)
  {
    return s_deviceConfig.m_glCreateSyncFromCLeventARB (context, event, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_buffer_object - glClearBufferData
  if (s_deviceConfig.m_glClearBufferData)
  {
    s_deviceConfig.m_glClearBufferData (target, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_buffer_object - glClearBufferSubData
  if (s_deviceConfig.m_glClearBufferSubData)
  {
    s_deviceConfig.m_glClearBufferSubData (target, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_texture - glClearTexImage
  if (s_deviceConfig.m_glClearTexImage)
  {
    s_deviceConfig.m_glClearTexImage (texture, level, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_clear_texture - glClearTexSubImage
  if (s_deviceConfig.m_glClearTexSubImage)
  {
    s_deviceConfig.m_glClearTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClipControl (GLenum origin, GLenum depth)
{
  // GL_ARB_clip_control - glClipControl
  if (s_deviceConfig.m_glClipControl)
  {
    s_deviceConfig.m_glClipControl (origin, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_ARB_compute_shader - glDispatchCompute
  if (s_deviceConfig.m_glDispatchCompute)
  {
    s_deviceConfig.m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_ARB_compute_shader - glDispatchComputeIndirect
  if (s_deviceConfig.m_glDispatchComputeIndirect)
  {
    s_deviceConfig.m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  // GL_ARB_compute_variable_group_size - glDispatchComputeGroupSizeARB
  if (s_deviceConfig.m_glDispatchComputeGroupSizeARB)
  {
    s_deviceConfig.m_glDispatchComputeGroupSizeARB (num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ARB_copy_buffer - glCopyBufferSubData
  if (s_deviceConfig.m_glCopyBufferSubData)
  {
    s_deviceConfig.m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_ARB_copy_image - glCopyImageSubData
  if (s_deviceConfig.m_glCopyImageSubData)
  {
    s_deviceConfig.m_glCopyImageSubData (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_ARB_debug_output - glDebugMessageControlARB
  if (s_deviceConfig.m_glDebugMessageControlARB)
  {
    s_deviceConfig.m_glDebugMessageControlARB (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_ARB_debug_output - glDebugMessageInsertARB
  if (s_deviceConfig.m_glDebugMessageInsertARB)
  {
    s_deviceConfig.m_glDebugMessageInsertARB (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void * userParam)
{
  // GL_ARB_debug_output - glDebugMessageCallbackARB
  if (s_deviceConfig.m_glDebugMessageCallbackARB)
  {
    s_deviceConfig.m_glDebugMessageCallbackARB (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_ARB_debug_output - glGetDebugMessageLogARB
  if (s_deviceConfig.m_glGetDebugMessageLogARB)
  {
    return s_deviceConfig.m_glGetDebugMessageLogARB (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ARB_direct_state_access - glCreateTransformFeedbacks
  if (s_deviceConfig.m_glCreateTransformFeedbacks)
  {
    s_deviceConfig.m_glCreateTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer)
{
  // GL_ARB_direct_state_access - glTransformFeedbackBufferBase
  if (s_deviceConfig.m_glTransformFeedbackBufferBase)
  {
    s_deviceConfig.m_glTransformFeedbackBufferBase (xfb, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glTransformFeedbackBufferRange
  if (s_deviceConfig.m_glTransformFeedbackBufferRange)
  {
    s_deviceConfig.m_glTransformFeedbackBufferRange (xfb, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbackiv
  if (s_deviceConfig.m_glGetTransformFeedbackiv)
  {
    s_deviceConfig.m_glGetTransformFeedbackiv (xfb, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbacki_v
  if (s_deviceConfig.m_glGetTransformFeedbacki_v)
  {
    s_deviceConfig.m_glGetTransformFeedbacki_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 * param)
{
  // GL_ARB_direct_state_access - glGetTransformFeedbacki64_v
  if (s_deviceConfig.m_glGetTransformFeedbacki64_v)
  {
    s_deviceConfig.m_glGetTransformFeedbacki64_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateBuffers (GLsizei n, GLuint * buffers)
{
  // GL_ARB_direct_state_access - glCreateBuffers
  if (s_deviceConfig.m_glCreateBuffers)
  {
    s_deviceConfig.m_glCreateBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_ARB_direct_state_access - glNamedBufferStorage
  if (s_deviceConfig.m_glNamedBufferStorage)
  {
    s_deviceConfig.m_glNamedBufferStorage (buffer, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferData (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_ARB_direct_state_access - glNamedBufferData
  if (s_deviceConfig.m_glNamedBufferData)
  {
    s_deviceConfig.m_glNamedBufferData (buffer, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_ARB_direct_state_access - glNamedBufferSubData
  if (s_deviceConfig.m_glNamedBufferSubData)
  {
    s_deviceConfig.m_glNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glCopyNamedBufferSubData
  if (s_deviceConfig.m_glCopyNamedBufferSubData)
  {
    s_deviceConfig.m_glCopyNamedBufferSubData (readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_direct_state_access - glClearNamedBufferData
  if (s_deviceConfig.m_glClearNamedBufferData)
  {
    s_deviceConfig.m_glClearNamedBufferData (buffer, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_direct_state_access - glClearNamedBufferSubData
  if (s_deviceConfig.m_glClearNamedBufferSubData)
  {
    s_deviceConfig.m_glClearNamedBufferSubData (buffer, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapNamedBuffer (GLuint buffer, GLenum access)
{
  // GL_ARB_direct_state_access - glMapNamedBuffer
  if (s_deviceConfig.m_glMapNamedBuffer)
  {
    return s_deviceConfig.m_glMapNamedBuffer (buffer, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ARB_direct_state_access - glMapNamedBufferRange
  if (s_deviceConfig.m_glMapNamedBufferRange)
  {
    return s_deviceConfig.m_glMapNamedBufferRange (buffer, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glUnmapNamedBuffer (GLuint buffer)
{
  // GL_ARB_direct_state_access - glUnmapNamedBuffer
  if (s_deviceConfig.m_glUnmapNamedBuffer)
  {
    return s_deviceConfig.m_glUnmapNamedBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_direct_state_access - glFlushMappedNamedBufferRange
  if (s_deviceConfig.m_glFlushMappedNamedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedNamedBufferRange (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferParameteriv
  if (s_deviceConfig.m_glGetNamedBufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedBufferParameteriv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 * params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferParameteri64v
  if (s_deviceConfig.m_glGetNamedBufferParameteri64v)
  {
    s_deviceConfig.m_glGetNamedBufferParameteri64v (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void ** params)
{
  // GL_ARB_direct_state_access - glGetNamedBufferPointerv
  if (s_deviceConfig.m_glGetNamedBufferPointerv)
  {
    s_deviceConfig.m_glGetNamedBufferPointerv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
  // GL_ARB_direct_state_access - glGetNamedBufferSubData
  if (s_deviceConfig.m_glGetNamedBufferSubData)
  {
    s_deviceConfig.m_glGetNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ARB_direct_state_access - glCreateFramebuffers
  if (s_deviceConfig.m_glCreateFramebuffers)
  {
    s_deviceConfig.m_glCreateFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ARB_direct_state_access - glNamedFramebufferRenderbuffer
  if (s_deviceConfig.m_glNamedFramebufferRenderbuffer)
  {
    s_deviceConfig.m_glNamedFramebufferRenderbuffer (framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param)
{
  // GL_ARB_direct_state_access - glNamedFramebufferParameteri
  if (s_deviceConfig.m_glNamedFramebufferParameteri)
  {
    s_deviceConfig.m_glNamedFramebufferParameteri (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  // GL_ARB_direct_state_access - glNamedFramebufferTexture
  if (s_deviceConfig.m_glNamedFramebufferTexture)
  {
    s_deviceConfig.m_glNamedFramebufferTexture (framebuffer, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ARB_direct_state_access - glNamedFramebufferTextureLayer
  if (s_deviceConfig.m_glNamedFramebufferTextureLayer)
  {
    s_deviceConfig.m_glNamedFramebufferTextureLayer (framebuffer, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf)
{
  // GL_ARB_direct_state_access - glNamedFramebufferDrawBuffer
  if (s_deviceConfig.m_glNamedFramebufferDrawBuffer)
  {
    s_deviceConfig.m_glNamedFramebufferDrawBuffer (framebuffer, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
  // GL_ARB_direct_state_access - glNamedFramebufferDrawBuffers
  if (s_deviceConfig.m_glNamedFramebufferDrawBuffers)
  {
    s_deviceConfig.m_glNamedFramebufferDrawBuffers (framebuffer, n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src)
{
  // GL_ARB_direct_state_access - glNamedFramebufferReadBuffer
  if (s_deviceConfig.m_glNamedFramebufferReadBuffer)
  {
    s_deviceConfig.m_glNamedFramebufferReadBuffer (framebuffer, src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ARB_direct_state_access - glInvalidateNamedFramebufferData
  if (s_deviceConfig.m_glInvalidateNamedFramebufferData)
  {
    s_deviceConfig.m_glInvalidateNamedFramebufferData (framebuffer, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glInvalidateNamedFramebufferSubData
  if (s_deviceConfig.m_glInvalidateNamedFramebufferSubData)
  {
    s_deviceConfig.m_glInvalidateNamedFramebufferSubData (framebuffer, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferiv
  if (s_deviceConfig.m_glClearNamedFramebufferiv)
  {
    s_deviceConfig.m_glClearNamedFramebufferiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferuiv
  if (s_deviceConfig.m_glClearNamedFramebufferuiv)
  {
    s_deviceConfig.m_glClearNamedFramebufferuiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferfv
  if (s_deviceConfig.m_glClearNamedFramebufferfv)
  {
    s_deviceConfig.m_glClearNamedFramebufferfv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil)
{
  // GL_ARB_direct_state_access - glClearNamedFramebufferfi
  if (s_deviceConfig.m_glClearNamedFramebufferfi)
  {
    s_deviceConfig.m_glClearNamedFramebufferfi (framebuffer, buffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ARB_direct_state_access - glBlitNamedFramebuffer
  if (s_deviceConfig.m_glBlitNamedFramebuffer)
  {
    s_deviceConfig.m_glBlitNamedFramebuffer (readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target)
{
  // GL_ARB_direct_state_access - glCheckNamedFramebufferStatus
  if (s_deviceConfig.m_glCheckNamedFramebufferStatus)
  {
    return s_deviceConfig.m_glCheckNamedFramebufferStatus (framebuffer, target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetNamedFramebufferParameteriv
  if (s_deviceConfig.m_glGetNamedFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedFramebufferParameteriv (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedFramebufferAttachmentParameteriv
  if (s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv)
  {
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv (framebuffer, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ARB_direct_state_access - glCreateRenderbuffers
  if (s_deviceConfig.m_glCreateRenderbuffers)
  {
    s_deviceConfig.m_glCreateRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glNamedRenderbufferStorage
  if (s_deviceConfig.m_glNamedRenderbufferStorage)
  {
    s_deviceConfig.m_glNamedRenderbufferStorage (renderbuffer, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glNamedRenderbufferStorageMultisample
  if (s_deviceConfig.m_glNamedRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glNamedRenderbufferStorageMultisample (renderbuffer, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetNamedRenderbufferParameteriv
  if (s_deviceConfig.m_glGetNamedRenderbufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedRenderbufferParameteriv (renderbuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateTextures (GLenum target, GLsizei n, GLuint * textures)
{
  // GL_ARB_direct_state_access - glCreateTextures
  if (s_deviceConfig.m_glCreateTextures)
  {
    s_deviceConfig.m_glCreateTextures (target, n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer)
{
  // GL_ARB_direct_state_access - glTextureBuffer
  if (s_deviceConfig.m_glTextureBuffer)
  {
    s_deviceConfig.m_glTextureBuffer (texture, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_direct_state_access - glTextureBufferRange
  if (s_deviceConfig.m_glTextureBufferRange)
  {
    s_deviceConfig.m_glTextureBufferRange (texture, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_ARB_direct_state_access - glTextureStorage1D
  if (s_deviceConfig.m_glTextureStorage1D)
  {
    s_deviceConfig.m_glTextureStorage1D (texture, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glTextureStorage2D
  if (s_deviceConfig.m_glTextureStorage2D)
  {
    s_deviceConfig.m_glTextureStorage2D (texture, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_direct_state_access - glTextureStorage3D
  if (s_deviceConfig.m_glTextureStorage3D)
  {
    s_deviceConfig.m_glTextureStorage3D (texture, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_direct_state_access - glTextureStorage2DMultisample
  if (s_deviceConfig.m_glTextureStorage2DMultisample)
  {
    s_deviceConfig.m_glTextureStorage2DMultisample (texture, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_direct_state_access - glTextureStorage3DMultisample
  if (s_deviceConfig.m_glTextureStorage3DMultisample)
  {
    s_deviceConfig.m_glTextureStorage3DMultisample (texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage1D
  if (s_deviceConfig.m_glTextureSubImage1D)
  {
    s_deviceConfig.m_glTextureSubImage1D (texture, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage2D
  if (s_deviceConfig.m_glTextureSubImage2D)
  {
    s_deviceConfig.m_glTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_ARB_direct_state_access - glTextureSubImage3D
  if (s_deviceConfig.m_glTextureSubImage3D)
  {
    s_deviceConfig.m_glTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage1D
  if (s_deviceConfig.m_glCompressedTextureSubImage1D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage1D (texture, level, xoffset, width, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage2D
  if (s_deviceConfig.m_glCompressedTextureSubImage2D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_direct_state_access - glCompressedTextureSubImage3D
  if (s_deviceConfig.m_glCompressedTextureSubImage3D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage1D
  if (s_deviceConfig.m_glCopyTextureSubImage1D)
  {
    s_deviceConfig.m_glCopyTextureSubImage1D (texture, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage2D
  if (s_deviceConfig.m_glCopyTextureSubImage2D)
  {
    s_deviceConfig.m_glCopyTextureSubImage2D (texture, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_direct_state_access - glCopyTextureSubImage3D
  if (s_deviceConfig.m_glCopyTextureSubImage3D)
  {
    s_deviceConfig.m_glCopyTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterf (GLuint texture, GLenum pname, GLfloat param)
{
  // GL_ARB_direct_state_access - glTextureParameterf
  if (s_deviceConfig.m_glTextureParameterf)
  {
    s_deviceConfig.m_glTextureParameterf (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat * param)
{
  // GL_ARB_direct_state_access - glTextureParameterfv
  if (s_deviceConfig.m_glTextureParameterfv)
  {
    s_deviceConfig.m_glTextureParameterfv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameteri (GLuint texture, GLenum pname, GLint param)
{
  // GL_ARB_direct_state_access - glTextureParameteri
  if (s_deviceConfig.m_glTextureParameteri)
  {
    s_deviceConfig.m_glTextureParameteri (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterIiv (GLuint texture, GLenum pname, const GLint * params)
{
  // GL_ARB_direct_state_access - glTextureParameterIiv
  if (s_deviceConfig.m_glTextureParameterIiv)
  {
    s_deviceConfig.m_glTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint * params)
{
  // GL_ARB_direct_state_access - glTextureParameterIuiv
  if (s_deviceConfig.m_glTextureParameterIuiv)
  {
    s_deviceConfig.m_glTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureParameteriv (GLuint texture, GLenum pname, const GLint * param)
{
  // GL_ARB_direct_state_access - glTextureParameteriv
  if (s_deviceConfig.m_glTextureParameteriv)
  {
    s_deviceConfig.m_glTextureParameteriv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateTextureMipmap (GLuint texture)
{
  // GL_ARB_direct_state_access - glGenerateTextureMipmap
  if (s_deviceConfig.m_glGenerateTextureMipmap)
  {
    s_deviceConfig.m_glGenerateTextureMipmap (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTextureUnit (GLuint unit, GLuint texture)
{
  // GL_ARB_direct_state_access - glBindTextureUnit
  if (s_deviceConfig.m_glBindTextureUnit)
  {
    s_deviceConfig.m_glBindTextureUnit (unit, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_ARB_direct_state_access - glGetTextureImage
  if (s_deviceConfig.m_glGetTextureImage)
  {
    s_deviceConfig.m_glGetTextureImage (texture, level, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void * pixels)
{
  // GL_ARB_direct_state_access - glGetCompressedTextureImage
  if (s_deviceConfig.m_glGetCompressedTextureImage)
  {
    s_deviceConfig.m_glGetCompressedTextureImage (texture, level, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat * params)
{
  // GL_ARB_direct_state_access - glGetTextureLevelParameterfv
  if (s_deviceConfig.m_glGetTextureLevelParameterfv)
  {
    s_deviceConfig.m_glGetTextureLevelParameterfv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureLevelParameteriv
  if (s_deviceConfig.m_glGetTextureLevelParameteriv)
  {
    s_deviceConfig.m_glGetTextureLevelParameteriv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterfv
  if (s_deviceConfig.m_glGetTextureParameterfv)
  {
    s_deviceConfig.m_glGetTextureParameterfv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterIiv
  if (s_deviceConfig.m_glGetTextureParameterIiv)
  {
    s_deviceConfig.m_glGetTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameterIuiv
  if (s_deviceConfig.m_glGetTextureParameterIuiv)
  {
    s_deviceConfig.m_glGetTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureParameteriv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_ARB_direct_state_access - glGetTextureParameteriv
  if (s_deviceConfig.m_glGetTextureParameteriv)
  {
    s_deviceConfig.m_glGetTextureParameteriv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ARB_direct_state_access - glCreateVertexArrays
  if (s_deviceConfig.m_glCreateVertexArrays)
  {
    s_deviceConfig.m_glCreateVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDisableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_ARB_direct_state_access - glDisableVertexArrayAttrib
  if (s_deviceConfig.m_glDisableVertexArrayAttrib)
  {
    s_deviceConfig.m_glDisableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEnableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_ARB_direct_state_access - glEnableVertexArrayAttrib
  if (s_deviceConfig.m_glEnableVertexArrayAttrib)
  {
    s_deviceConfig.m_glEnableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer)
{
  // GL_ARB_direct_state_access - glVertexArrayElementBuffer
  if (s_deviceConfig.m_glVertexArrayElementBuffer)
  {
    s_deviceConfig.m_glVertexArrayElementBuffer (vaobj, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ARB_direct_state_access - glVertexArrayVertexBuffer
  if (s_deviceConfig.m_glVertexArrayVertexBuffer)
  {
    s_deviceConfig.m_glVertexArrayVertexBuffer (vaobj, bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_ARB_direct_state_access - glVertexArrayVertexBuffers
  if (s_deviceConfig.m_glVertexArrayVertexBuffers)
  {
    s_deviceConfig.m_glVertexArrayVertexBuffers (vaobj, first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribBinding
  if (s_deviceConfig.m_glVertexArrayAttribBinding)
  {
    s_deviceConfig.m_glVertexArrayAttribBinding (vaobj, attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribFormat
  if (s_deviceConfig.m_glVertexArrayAttribFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribFormat (vaobj, attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribIFormat
  if (s_deviceConfig.m_glVertexArrayAttribIFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribIFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_direct_state_access - glVertexArrayAttribLFormat
  if (s_deviceConfig.m_glVertexArrayAttribLFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribLFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  // GL_ARB_direct_state_access - glVertexArrayBindingDivisor
  if (s_deviceConfig.m_glVertexArrayBindingDivisor)
  {
    s_deviceConfig.m_glVertexArrayBindingDivisor (vaobj, bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayiv
  if (s_deviceConfig.m_glGetVertexArrayiv)
  {
    s_deviceConfig.m_glGetVertexArrayiv (vaobj, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayIndexediv
  if (s_deviceConfig.m_glGetVertexArrayIndexediv)
  {
    s_deviceConfig.m_glGetVertexArrayIndexediv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param)
{
  // GL_ARB_direct_state_access - glGetVertexArrayIndexed64iv
  if (s_deviceConfig.m_glGetVertexArrayIndexed64iv)
  {
    s_deviceConfig.m_glGetVertexArrayIndexed64iv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateSamplers (GLsizei n, GLuint * samplers)
{
  // GL_ARB_direct_state_access - glCreateSamplers
  if (s_deviceConfig.m_glCreateSamplers)
  {
    s_deviceConfig.m_glCreateSamplers (n, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ARB_direct_state_access - glCreateProgramPipelines
  if (s_deviceConfig.m_glCreateProgramPipelines)
  {
    s_deviceConfig.m_glCreateProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCreateQueries (GLenum target, GLsizei n, GLuint * ids)
{
  // GL_ARB_direct_state_access - glCreateQueries
  if (s_deviceConfig.m_glCreateQueries)
  {
    s_deviceConfig.m_glCreateQueries (target, n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjecti64v
  if (s_deviceConfig.m_glGetQueryBufferObjecti64v)
  {
    s_deviceConfig.m_glGetQueryBufferObjecti64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectiv
  if (s_deviceConfig.m_glGetQueryBufferObjectiv)
  {
    s_deviceConfig.m_glGetQueryBufferObjectiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectui64v
  if (s_deviceConfig.m_glGetQueryBufferObjectui64v)
  {
    s_deviceConfig.m_glGetQueryBufferObjectui64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_ARB_direct_state_access - glGetQueryBufferObjectuiv
  if (s_deviceConfig.m_glGetQueryBufferObjectuiv)
  {
    s_deviceConfig.m_glGetQueryBufferObjectuiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationiARB (GLuint buf, GLenum mode)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationiARB
  if (s_deviceConfig.m_glBlendEquationiARB)
  {
    s_deviceConfig.m_glBlendEquationiARB (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationSeparateiARB
  if (s_deviceConfig.m_glBlendEquationSeparateiARB)
  {
    s_deviceConfig.m_glBlendEquationSeparateiARB (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFunciARB (GLuint buf, GLenum src, GLenum dst)
{
  // GL_ARB_draw_buffers_blend - glBlendFunciARB
  if (s_deviceConfig.m_glBlendFunciARB)
  {
    s_deviceConfig.m_glBlendFunciARB (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendFuncSeparateiARB
  if (s_deviceConfig.m_glBlendFuncSeparateiARB)
  {
    s_deviceConfig.m_glBlendFuncSeparateiARB (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawElementsBaseVertex
  if (s_deviceConfig.m_glDrawElementsBaseVertex)
  {
    s_deviceConfig.m_glDrawElementsBaseVertex (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawRangeElementsBaseVertex
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertex)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertex (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glDrawElementsInstancedBaseVertex
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertex)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertex (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex)
{
  // GL_ARB_draw_elements_base_vertex - glMultiDrawElementsBaseVertex
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertex)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertex (mode, count, type, indices, drawcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_ARB_draw_indirect - glDrawArraysIndirect
  if (s_deviceConfig.m_glDrawArraysIndirect)
  {
    s_deviceConfig.m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_ARB_draw_indirect - glDrawElementsIndirect
  if (s_deviceConfig.m_glDrawElementsIndirect)
  {
    s_deviceConfig.m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_ARB_framebuffer_no_attachments - glFramebufferParameteri
  if (s_deviceConfig.m_glFramebufferParameteri)
  {
    s_deviceConfig.m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_no_attachments - glGetFramebufferParameteriv
  if (s_deviceConfig.m_glGetFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsRenderbuffer (GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glIsRenderbuffer
  if (s_deviceConfig.m_glIsRenderbuffer)
  {
    return s_deviceConfig.m_glIsRenderbuffer (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glBindRenderbuffer
  if (s_deviceConfig.m_glBindRenderbuffer)
  {
    s_deviceConfig.m_glBindRenderbuffer (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers)
{
  // GL_ARB_framebuffer_object - glDeleteRenderbuffers
  if (s_deviceConfig.m_glDeleteRenderbuffers)
  {
    s_deviceConfig.m_glDeleteRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_ARB_framebuffer_object - glGenRenderbuffers
  if (s_deviceConfig.m_glGenRenderbuffers)
  {
    s_deviceConfig.m_glGenRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_framebuffer_object - glRenderbufferStorage
  if (s_deviceConfig.m_glRenderbufferStorage)
  {
    s_deviceConfig.m_glRenderbufferStorage (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_object - glGetRenderbufferParameteriv
  if (s_deviceConfig.m_glGetRenderbufferParameteriv)
  {
    s_deviceConfig.m_glGetRenderbufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsFramebuffer (GLuint framebuffer)
{
  // GL_ARB_framebuffer_object - glIsFramebuffer
  if (s_deviceConfig.m_glIsFramebuffer)
  {
    return s_deviceConfig.m_glIsFramebuffer (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindFramebuffer (GLenum target, GLuint framebuffer)
{
  // GL_ARB_framebuffer_object - glBindFramebuffer
  if (s_deviceConfig.m_glBindFramebuffer)
  {
    s_deviceConfig.m_glBindFramebuffer (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers)
{
  // GL_ARB_framebuffer_object - glDeleteFramebuffers
  if (s_deviceConfig.m_glDeleteFramebuffers)
  {
    s_deviceConfig.m_glDeleteFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_ARB_framebuffer_object - glGenFramebuffers
  if (s_deviceConfig.m_glGenFramebuffers)
  {
    s_deviceConfig.m_glGenFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glCheckFramebufferStatus (GLenum target)
{
  // GL_ARB_framebuffer_object - glCheckFramebufferStatus
  if (s_deviceConfig.m_glCheckFramebufferStatus)
  {
    return s_deviceConfig.m_glCheckFramebufferStatus (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture1D
  if (s_deviceConfig.m_glFramebufferTexture1D)
  {
    s_deviceConfig.m_glFramebufferTexture1D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture2D
  if (s_deviceConfig.m_glFramebufferTexture2D)
  {
    s_deviceConfig.m_glFramebufferTexture2D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_ARB_framebuffer_object - glFramebufferTexture3D
  if (s_deviceConfig.m_glFramebufferTexture3D)
  {
    s_deviceConfig.m_glFramebufferTexture3D (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_ARB_framebuffer_object - glFramebufferRenderbuffer
  if (s_deviceConfig.m_glFramebufferRenderbuffer)
  {
    s_deviceConfig.m_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_ARB_framebuffer_object - glGetFramebufferAttachmentParameteriv
  if (s_deviceConfig.m_glGetFramebufferAttachmentParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenerateMipmap (GLenum target)
{
  // GL_ARB_framebuffer_object - glGenerateMipmap
  if (s_deviceConfig.m_glGenerateMipmap)
  {
    s_deviceConfig.m_glGenerateMipmap (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_ARB_framebuffer_object - glBlitFramebuffer
  if (s_deviceConfig.m_glBlitFramebuffer)
  {
    s_deviceConfig.m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_framebuffer_object - glRenderbufferStorageMultisample
  if (s_deviceConfig.m_glRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ARB_framebuffer_object - glFramebufferTextureLayer
  if (s_deviceConfig.m_glFramebufferTextureLayer)
  {
    s_deviceConfig.m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_ARB_get_program_binary - glGetProgramBinary
  if (s_deviceConfig.m_glGetProgramBinary)
  {
    s_deviceConfig.m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_ARB_get_program_binary - glProgramBinary
  if (s_deviceConfig.m_glProgramBinary)
  {
    s_deviceConfig.m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_ARB_get_program_binary - glProgramParameteri
  if (s_deviceConfig.m_glProgramParameteri)
  {
    s_deviceConfig.m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_ARB_get_texture_sub_image - glGetTextureSubImage
  if (s_deviceConfig.m_glGetTextureSubImage)
  {
    s_deviceConfig.m_glGetTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels)
{
  // GL_ARB_get_texture_sub_image - glGetCompressedTextureSubImage
  if (s_deviceConfig.m_glGetCompressedTextureSubImage)
  {
    s_deviceConfig.m_glGetCompressedTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1d (GLint location, GLdouble x)
{
  // GL_ARB_gpu_shader_fp64 - glUniform1d
  if (s_deviceConfig.m_glUniform1d)
  {
    s_deviceConfig.m_glUniform1d (location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2d (GLint location, GLdouble x, GLdouble y)
{
  // GL_ARB_gpu_shader_fp64 - glUniform2d
  if (s_deviceConfig.m_glUniform2d)
  {
    s_deviceConfig.m_glUniform2d (location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_gpu_shader_fp64 - glUniform3d
  if (s_deviceConfig.m_glUniform3d)
  {
    s_deviceConfig.m_glUniform3d (location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_gpu_shader_fp64 - glUniform4d
  if (s_deviceConfig.m_glUniform4d)
  {
    s_deviceConfig.m_glUniform4d (location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform1dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform1dv
  if (s_deviceConfig.m_glUniform1dv)
  {
    s_deviceConfig.m_glUniform1dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform2dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform2dv
  if (s_deviceConfig.m_glUniform2dv)
  {
    s_deviceConfig.m_glUniform2dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform3dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform3dv
  if (s_deviceConfig.m_glUniform3dv)
  {
    s_deviceConfig.m_glUniform3dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniform4dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniform4dv
  if (s_deviceConfig.m_glUniform4dv)
  {
    s_deviceConfig.m_glUniform4dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2dv
  if (s_deviceConfig.m_glUniformMatrix2dv)
  {
    s_deviceConfig.m_glUniformMatrix2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3dv
  if (s_deviceConfig.m_glUniformMatrix3dv)
  {
    s_deviceConfig.m_glUniformMatrix3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4dv
  if (s_deviceConfig.m_glUniformMatrix4dv)
  {
    s_deviceConfig.m_glUniformMatrix4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2x3dv
  if (s_deviceConfig.m_glUniformMatrix2x3dv)
  {
    s_deviceConfig.m_glUniformMatrix2x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix2x4dv
  if (s_deviceConfig.m_glUniformMatrix2x4dv)
  {
    s_deviceConfig.m_glUniformMatrix2x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3x2dv
  if (s_deviceConfig.m_glUniformMatrix3x2dv)
  {
    s_deviceConfig.m_glUniformMatrix3x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix3x4dv
  if (s_deviceConfig.m_glUniformMatrix3x4dv)
  {
    s_deviceConfig.m_glUniformMatrix3x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4x2dv
  if (s_deviceConfig.m_glUniformMatrix4x2dv)
  {
    s_deviceConfig.m_glUniformMatrix4x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_gpu_shader_fp64 - glUniformMatrix4x3dv
  if (s_deviceConfig.m_glUniformMatrix4x3dv)
  {
    s_deviceConfig.m_glUniformMatrix4x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformdv (GLuint program, GLint location, GLdouble * params)
{
  // GL_ARB_gpu_shader_fp64 - glGetUniformdv
  if (s_deviceConfig.m_glGetUniformdv)
  {
    s_deviceConfig.m_glGetUniformdv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_ARB_imaging - glBlendColor
  if (s_deviceConfig.m_glBlendColor)
  {
    s_deviceConfig.m_glBlendColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBlendEquation (GLenum mode)
{
  // GL_ARB_imaging - glBlendEquation
  if (s_deviceConfig.m_glBlendEquation)
  {
    s_deviceConfig.m_glBlendEquation (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawArraysIndirectCountARB
  if (s_deviceConfig.m_glMultiDrawArraysIndirectCountARB)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectCountARB (mode, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawElementsIndirectCountARB
  if (s_deviceConfig.m_glMultiDrawElementsIndirectCountARB)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectCountARB (mode, type, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_ARB_internalformat_query - glGetInternalformativ
  if (s_deviceConfig.m_glGetInternalformativ)
  {
    s_deviceConfig.m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
  // GL_ARB_internalformat_query2 - glGetInternalformati64v
  if (s_deviceConfig.m_glGetInternalformati64v)
  {
    s_deviceConfig.m_glGetInternalformati64v (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_invalidate_subdata - glInvalidateTexSubImage
  if (s_deviceConfig.m_glInvalidateTexSubImage)
  {
    s_deviceConfig.m_glInvalidateTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateTexImage (GLuint texture, GLint level)
{
  // GL_ARB_invalidate_subdata - glInvalidateTexImage
  if (s_deviceConfig.m_glInvalidateTexImage)
  {
    s_deviceConfig.m_glInvalidateTexImage (texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_invalidate_subdata - glInvalidateBufferSubData
  if (s_deviceConfig.m_glInvalidateBufferSubData)
  {
    s_deviceConfig.m_glInvalidateBufferSubData (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateBufferData (GLuint buffer)
{
  // GL_ARB_invalidate_subdata - glInvalidateBufferData
  if (s_deviceConfig.m_glInvalidateBufferData)
  {
    s_deviceConfig.m_glInvalidateBufferData (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_ARB_invalidate_subdata - glInvalidateFramebuffer
  if (s_deviceConfig.m_glInvalidateFramebuffer)
  {
    s_deviceConfig.m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_invalidate_subdata - glInvalidateSubFramebuffer
  if (s_deviceConfig.m_glInvalidateSubFramebuffer)
  {
    s_deviceConfig.m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_ARB_map_buffer_range - glMapBufferRange
  if (s_deviceConfig.m_glMapBufferRange)
  {
    return s_deviceConfig.m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_ARB_map_buffer_range - glFlushMappedBufferRange
  if (s_deviceConfig.m_glFlushMappedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
  // GL_ARB_multi_bind - glBindBuffersBase
  if (s_deviceConfig.m_glBindBuffersBase)
  {
    s_deviceConfig.m_glBindBuffersBase (target, first, count, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
  // GL_ARB_multi_bind - glBindBuffersRange
  if (s_deviceConfig.m_glBindBuffersRange)
  {
    s_deviceConfig.m_glBindBuffersRange (target, first, count, buffers, offsets, sizes);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_ARB_multi_bind - glBindTextures
  if (s_deviceConfig.m_glBindTextures)
  {
    s_deviceConfig.m_glBindTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSamplers (GLuint first, GLsizei count, const GLuint * samplers)
{
  // GL_ARB_multi_bind - glBindSamplers
  if (s_deviceConfig.m_glBindSamplers)
  {
    s_deviceConfig.m_glBindSamplers (first, count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_ARB_multi_bind - glBindImageTextures
  if (s_deviceConfig.m_glBindImageTextures)
  {
    s_deviceConfig.m_glBindImageTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffers (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_ARB_multi_bind - glBindVertexBuffers
  if (s_deviceConfig.m_glBindVertexBuffers)
  {
    s_deviceConfig.m_glBindVertexBuffers (first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawArraysIndirect (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_ARB_multi_draw_indirect - glMultiDrawArraysIndirect
  if (s_deviceConfig.m_glMultiDrawArraysIndirect)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirect (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_ARB_multi_draw_indirect - glMultiDrawElementsIndirect
  if (s_deviceConfig.m_glMultiDrawElementsIndirect)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirect (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_ARB_program_interface_query - glGetProgramInterfaceiv
  if (s_deviceConfig.m_glGetProgramInterfaceiv)
  {
    s_deviceConfig.m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceIndex
  if (s_deviceConfig.m_glGetProgramResourceIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceName
  if (s_deviceConfig.m_glGetProgramResourceName)
  {
    s_deviceConfig.m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_ARB_program_interface_query - glGetProgramResourceiv
  if (s_deviceConfig.m_glGetProgramResourceiv)
  {
    s_deviceConfig.m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceLocation
  if (s_deviceConfig.m_glGetProgramResourceLocation)
  {
    return s_deviceConfig.m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_ARB_program_interface_query - glGetProgramResourceLocationIndex
  if (s_deviceConfig.m_glGetProgramResourceLocationIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceLocationIndex (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProvokingVertex (GLenum mode)
{
  // GL_ARB_provoking_vertex - glProvokingVertex
  if (s_deviceConfig.m_glProvokingVertex)
  {
    s_deviceConfig.m_glProvokingVertex (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glGetGraphicsResetStatusARB ()
{
  // GL_ARB_robustness - glGetGraphicsResetStatusARB
  if (s_deviceConfig.m_glGetGraphicsResetStatusARB)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusARB ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnTexImageARB
  if (s_deviceConfig.m_glGetnTexImageARB)
  {
    s_deviceConfig.m_glGetnTexImageARB (target, level, format, type, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_ARB_robustness - glReadnPixelsARB
  if (s_deviceConfig.m_glReadnPixelsARB)
  {
    s_deviceConfig.m_glReadnPixelsARB (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnCompressedTexImageARB
  if (s_deviceConfig.m_glGetnCompressedTexImageARB)
  {
    s_deviceConfig.m_glGetnCompressedTexImageARB (target, lod, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_ARB_robustness - glGetnUniformfvARB
  if (s_deviceConfig.m_glGetnUniformfvARB)
  {
    s_deviceConfig.m_glGetnUniformfvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_ARB_robustness - glGetnUniformivARB
  if (s_deviceConfig.m_glGetnUniformivARB)
  {
    s_deviceConfig.m_glGetnUniformivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_ARB_robustness - glGetnUniformuivARB
  if (s_deviceConfig.m_glGetnUniformuivARB)
  {
    s_deviceConfig.m_glGetnUniformuivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
  // GL_ARB_robustness - glGetnUniformdvARB
  if (s_deviceConfig.m_glGetnUniformdvARB)
  {
    s_deviceConfig.m_glGetnUniformdvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMinSampleShadingARB (GLfloat value)
{
  // GL_ARB_sample_shading - glMinSampleShadingARB
  if (s_deviceConfig.m_glMinSampleShadingARB)
  {
    s_deviceConfig.m_glMinSampleShadingARB (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_ARB_sampler_objects - glGenSamplers
  if (s_deviceConfig.m_glGenSamplers)
  {
    s_deviceConfig.m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_ARB_sampler_objects - glDeleteSamplers
  if (s_deviceConfig.m_glDeleteSamplers)
  {
    s_deviceConfig.m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSampler (GLuint sampler)
{
  // GL_ARB_sampler_objects - glIsSampler
  if (s_deviceConfig.m_glIsSampler)
  {
    return s_deviceConfig.m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_ARB_sampler_objects - glBindSampler
  if (s_deviceConfig.m_glBindSampler)
  {
    s_deviceConfig.m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_ARB_sampler_objects - glSamplerParameteri
  if (s_deviceConfig.m_glSamplerParameteri)
  {
    s_deviceConfig.m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameteriv
  if (s_deviceConfig.m_glSamplerParameteriv)
  {
    s_deviceConfig.m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_ARB_sampler_objects - glSamplerParameterf
  if (s_deviceConfig.m_glSamplerParameterf)
  {
    s_deviceConfig.m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterfv
  if (s_deviceConfig.m_glSamplerParameterfv)
  {
    s_deviceConfig.m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterIiv
  if (s_deviceConfig.m_glSamplerParameterIiv)
  {
    s_deviceConfig.m_glSamplerParameterIiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_ARB_sampler_objects - glSamplerParameterIuiv
  if (s_deviceConfig.m_glSamplerParameterIuiv)
  {
    s_deviceConfig.m_glSamplerParameterIuiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameteriv
  if (s_deviceConfig.m_glGetSamplerParameteriv)
  {
    s_deviceConfig.m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterIiv
  if (s_deviceConfig.m_glGetSamplerParameterIiv)
  {
    s_deviceConfig.m_glGetSamplerParameterIiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterfv
  if (s_deviceConfig.m_glGetSamplerParameterfv)
  {
    s_deviceConfig.m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_ARB_sampler_objects - glGetSamplerParameterIuiv
  if (s_deviceConfig.m_glGetSamplerParameterIuiv)
  {
    s_deviceConfig.m_glGetSamplerParameterIuiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_ARB_separate_shader_objects - glUseProgramStages
  if (s_deviceConfig.m_glUseProgramStages)
  {
    s_deviceConfig.m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_ARB_separate_shader_objects - glActiveShaderProgram
  if (s_deviceConfig.m_glActiveShaderProgram)
  {
    s_deviceConfig.m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_ARB_separate_shader_objects - glCreateShaderProgramv
  if (s_deviceConfig.m_glCreateShaderProgramv)
  {
    return s_deviceConfig.m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glBindProgramPipeline
  if (s_deviceConfig.m_glBindProgramPipeline)
  {
    s_deviceConfig.m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_ARB_separate_shader_objects - glDeleteProgramPipelines
  if (s_deviceConfig.m_glDeleteProgramPipelines)
  {
    s_deviceConfig.m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_ARB_separate_shader_objects - glGenProgramPipelines
  if (s_deviceConfig.m_glGenProgramPipelines)
  {
    s_deviceConfig.m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glIsProgramPipeline
  if (s_deviceConfig.m_glIsProgramPipeline)
  {
    return s_deviceConfig.m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_ARB_separate_shader_objects - glGetProgramPipelineiv
  if (s_deviceConfig.m_glGetProgramPipelineiv)
  {
    s_deviceConfig.m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1i
  if (s_deviceConfig.m_glProgramUniform1i)
  {
    s_deviceConfig.m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1iv
  if (s_deviceConfig.m_glProgramUniform1iv)
  {
    s_deviceConfig.m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1f
  if (s_deviceConfig.m_glProgramUniform1f)
  {
    s_deviceConfig.m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1fv
  if (s_deviceConfig.m_glProgramUniform1fv)
  {
    s_deviceConfig.m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1d (GLuint program, GLint location, GLdouble v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1d
  if (s_deviceConfig.m_glProgramUniform1d)
  {
    s_deviceConfig.m_glProgramUniform1d (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1dv
  if (s_deviceConfig.m_glProgramUniform1dv)
  {
    s_deviceConfig.m_glProgramUniform1dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1ui
  if (s_deviceConfig.m_glProgramUniform1ui)
  {
    s_deviceConfig.m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform1uiv
  if (s_deviceConfig.m_glProgramUniform1uiv)
  {
    s_deviceConfig.m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2i
  if (s_deviceConfig.m_glProgramUniform2i)
  {
    s_deviceConfig.m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2iv
  if (s_deviceConfig.m_glProgramUniform2iv)
  {
    s_deviceConfig.m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2f
  if (s_deviceConfig.m_glProgramUniform2f)
  {
    s_deviceConfig.m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2fv
  if (s_deviceConfig.m_glProgramUniform2fv)
  {
    s_deviceConfig.m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2d
  if (s_deviceConfig.m_glProgramUniform2d)
  {
    s_deviceConfig.m_glProgramUniform2d (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2dv
  if (s_deviceConfig.m_glProgramUniform2dv)
  {
    s_deviceConfig.m_glProgramUniform2dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2ui
  if (s_deviceConfig.m_glProgramUniform2ui)
  {
    s_deviceConfig.m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform2uiv
  if (s_deviceConfig.m_glProgramUniform2uiv)
  {
    s_deviceConfig.m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3i
  if (s_deviceConfig.m_glProgramUniform3i)
  {
    s_deviceConfig.m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3iv
  if (s_deviceConfig.m_glProgramUniform3iv)
  {
    s_deviceConfig.m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3f
  if (s_deviceConfig.m_glProgramUniform3f)
  {
    s_deviceConfig.m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3fv
  if (s_deviceConfig.m_glProgramUniform3fv)
  {
    s_deviceConfig.m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3d
  if (s_deviceConfig.m_glProgramUniform3d)
  {
    s_deviceConfig.m_glProgramUniform3d (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3dv
  if (s_deviceConfig.m_glProgramUniform3dv)
  {
    s_deviceConfig.m_glProgramUniform3dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3ui
  if (s_deviceConfig.m_glProgramUniform3ui)
  {
    s_deviceConfig.m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform3uiv
  if (s_deviceConfig.m_glProgramUniform3uiv)
  {
    s_deviceConfig.m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4i
  if (s_deviceConfig.m_glProgramUniform4i)
  {
    s_deviceConfig.m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4iv
  if (s_deviceConfig.m_glProgramUniform4iv)
  {
    s_deviceConfig.m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4f
  if (s_deviceConfig.m_glProgramUniform4f)
  {
    s_deviceConfig.m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4fv
  if (s_deviceConfig.m_glProgramUniform4fv)
  {
    s_deviceConfig.m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4d
  if (s_deviceConfig.m_glProgramUniform4d)
  {
    s_deviceConfig.m_glProgramUniform4d (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4dv
  if (s_deviceConfig.m_glProgramUniform4dv)
  {
    s_deviceConfig.m_glProgramUniform4dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4ui
  if (s_deviceConfig.m_glProgramUniform4ui)
  {
    s_deviceConfig.m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniform4uiv
  if (s_deviceConfig.m_glProgramUniform4uiv)
  {
    s_deviceConfig.m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2fv
  if (s_deviceConfig.m_glProgramUniformMatrix2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3fv
  if (s_deviceConfig.m_glProgramUniformMatrix3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4fv
  if (s_deviceConfig.m_glProgramUniformMatrix4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2dv
  if (s_deviceConfig.m_glProgramUniformMatrix2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3dv
  if (s_deviceConfig.m_glProgramUniformMatrix3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4dv
  if (s_deviceConfig.m_glProgramUniformMatrix4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x3dv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x2dv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix2x4dv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x2dv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix3x4dv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_ARB_separate_shader_objects - glProgramUniformMatrix4x3dv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glValidateProgramPipeline (GLuint pipeline)
{
  // GL_ARB_separate_shader_objects - glValidateProgramPipeline
  if (s_deviceConfig.m_glValidateProgramPipeline)
  {
    s_deviceConfig.m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_ARB_separate_shader_objects - glGetProgramPipelineInfoLog
  if (s_deviceConfig.m_glGetProgramPipelineInfoLog)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
  // GL_ARB_shader_atomic_counters - glGetActiveAtomicCounterBufferiv
  if (s_deviceConfig.m_glGetActiveAtomicCounterBufferiv)
  {
    s_deviceConfig.m_glGetActiveAtomicCounterBufferiv (program, bufferIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_ARB_shader_image_load_store - glBindImageTexture
  if (s_deviceConfig.m_glBindImageTexture)
  {
    s_deviceConfig.m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glMemoryBarrier (GLbitfield barriers)
{
  // GL_ARB_shader_image_load_store - glMemoryBarrier
  if (s_deviceConfig.m_glMemoryBarrier)
  {
    s_deviceConfig.m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  // GL_ARB_shader_storage_buffer_object - glShaderStorageBlockBinding
  if (s_deviceConfig.m_glShaderStorageBlockBinding)
  {
    s_deviceConfig.m_glShaderStorageBlockBinding (program, storageBlockIndex, storageBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetSubroutineUniformLocation
  if (s_deviceConfig.m_glGetSubroutineUniformLocation)
  {
    return s_deviceConfig.m_glGetSubroutineUniformLocation (program, shadertype, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetSubroutineIndex
  if (s_deviceConfig.m_glGetSubroutineIndex)
  {
    return s_deviceConfig.m_glGetSubroutineIndex (program, shadertype, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineUniformiv
  if (s_deviceConfig.m_glGetActiveSubroutineUniformiv)
  {
    s_deviceConfig.m_glGetActiveSubroutineUniformiv (program, shadertype, index, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineUniformName
  if (s_deviceConfig.m_glGetActiveSubroutineUniformName)
  {
    s_deviceConfig.m_glGetActiveSubroutineUniformName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_ARB_shader_subroutine - glGetActiveSubroutineName
  if (s_deviceConfig.m_glGetActiveSubroutineName)
  {
    s_deviceConfig.m_glGetActiveSubroutineName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint * indices)
{
  // GL_ARB_shader_subroutine - glUniformSubroutinesuiv
  if (s_deviceConfig.m_glUniformSubroutinesuiv)
  {
    s_deviceConfig.m_glUniformSubroutinesuiv (shadertype, count, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint * params)
{
  // GL_ARB_shader_subroutine - glGetUniformSubroutineuiv
  if (s_deviceConfig.m_glGetUniformSubroutineuiv)
  {
    s_deviceConfig.m_glGetUniformSubroutineuiv (shadertype, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
  // GL_ARB_shader_subroutine - glGetProgramStageiv
  if (s_deviceConfig.m_glGetProgramStageiv)
  {
    s_deviceConfig.m_glGetProgramStageiv (program, shadertype, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedStringARB (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string)
{
  // GL_ARB_shading_language_include - glNamedStringARB
  if (s_deviceConfig.m_glNamedStringARB)
  {
    s_deviceConfig.m_glNamedStringARB (type, namelen, name, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glDeleteNamedStringARB
  if (s_deviceConfig.m_glDeleteNamedStringARB)
  {
    s_deviceConfig.m_glDeleteNamedStringARB (namelen, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length)
{
  // GL_ARB_shading_language_include - glCompileShaderIncludeARB
  if (s_deviceConfig.m_glCompileShaderIncludeARB)
  {
    s_deviceConfig.m_glCompileShaderIncludeARB (shader, count, path, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glIsNamedStringARB
  if (s_deviceConfig.m_glIsNamedStringARB)
  {
    return s_deviceConfig.m_glIsNamedStringARB (namelen, name);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedStringARB (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string)
{
  // GL_ARB_shading_language_include - glGetNamedStringARB
  if (s_deviceConfig.m_glGetNamedStringARB)
  {
    s_deviceConfig.m_glGetNamedStringARB (namelen, name, bufSize, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetNamedStringivARB (GLint namelen, const GLchar * name, GLenum pname, GLint * params)
{
  // GL_ARB_shading_language_include - glGetNamedStringivARB
  if (s_deviceConfig.m_glGetNamedStringivARB)
  {
    s_deviceConfig.m_glGetNamedStringivARB (namelen, name, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glBufferPageCommitmentARB
  if (s_deviceConfig.m_glBufferPageCommitmentARB)
  {
    s_deviceConfig.m_glBufferPageCommitmentARB (target, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentEXT
  if (s_deviceConfig.m_glNamedBufferPageCommitmentEXT)
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentEXT (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentARB
  if (s_deviceConfig.m_glNamedBufferPageCommitmentARB)
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentARB (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_ARB_sparse_texture - glTexPageCommitmentARB
  if (s_deviceConfig.m_glTexPageCommitmentARB)
  {
    s_deviceConfig.m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_ARB_sync - glFenceSync
  if (s_deviceConfig.m_glFenceSync)
  {
    return s_deviceConfig.m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsSync (GLsync sync)
{
  // GL_ARB_sync - glIsSync
  if (s_deviceConfig.m_glIsSync)
  {
    return s_deviceConfig.m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteSync (GLsync sync)
{
  // GL_ARB_sync - glDeleteSync
  if (s_deviceConfig.m_glDeleteSync)
  {
    s_deviceConfig.m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ARB_sync - glClientWaitSync
  if (s_deviceConfig.m_glClientWaitSync)
  {
    return s_deviceConfig.m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_ARB_sync - glWaitSync
  if (s_deviceConfig.m_glWaitSync)
  {
    s_deviceConfig.m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_ARB_sync - glGetInteger64v
  if (s_deviceConfig.m_glGetInteger64v)
  {
    s_deviceConfig.m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_ARB_sync - glGetSynciv
  if (s_deviceConfig.m_glGetSynciv)
  {
    s_deviceConfig.m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameteri (GLenum pname, GLint value)
{
  // GL_ARB_tessellation_shader - glPatchParameteri
  if (s_deviceConfig.m_glPatchParameteri)
  {
    s_deviceConfig.m_glPatchParameteri (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPatchParameterfv (GLenum pname, const GLfloat * values)
{
  // GL_ARB_tessellation_shader - glPatchParameterfv
  if (s_deviceConfig.m_glPatchParameterfv)
  {
    s_deviceConfig.m_glPatchParameterfv (pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureBarrier ()
{
  // GL_ARB_texture_barrier - glTextureBarrier
  if (s_deviceConfig.m_glTextureBarrier)
  {
    s_deviceConfig.m_glTextureBarrier ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_texture_buffer_range - glTexBufferRange
  if (s_deviceConfig.m_glTexBufferRange)
  {
    s_deviceConfig.m_glTexBufferRange (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_multisample - glTexImage2DMultisample
  if (s_deviceConfig.m_glTexImage2DMultisample)
  {
    s_deviceConfig.m_glTexImage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_multisample - glTexImage3DMultisample
  if (s_deviceConfig.m_glTexImage3DMultisample)
  {
    s_deviceConfig.m_glTexImage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_ARB_texture_multisample - glGetMultisamplefv
  if (s_deviceConfig.m_glGetMultisamplefv)
  {
    s_deviceConfig.m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_ARB_texture_multisample - glSampleMaski
  if (s_deviceConfig.m_glSampleMaski)
  {
    s_deviceConfig.m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_ARB_texture_storage - glTexStorage1D
  if (s_deviceConfig.m_glTexStorage1D)
  {
    s_deviceConfig.m_glTexStorage1D (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_ARB_texture_storage - glTexStorage2D
  if (s_deviceConfig.m_glTexStorage2D)
  {
    s_deviceConfig.m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_ARB_texture_storage - glTexStorage3D
  if (s_deviceConfig.m_glTexStorage3D)
  {
    s_deviceConfig.m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_storage_multisample - glTexStorage2DMultisample
  if (s_deviceConfig.m_glTexStorage2DMultisample)
  {
    s_deviceConfig.m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_ARB_texture_storage_multisample - glTexStorage3DMultisample
  if (s_deviceConfig.m_glTexStorage3DMultisample)
  {
    s_deviceConfig.m_glTexStorage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_ARB_texture_view - glTextureView
  if (s_deviceConfig.m_glTextureView)
  {
    s_deviceConfig.m_glTextureView (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glQueryCounter (GLuint id, GLenum target)
{
  // GL_ARB_timer_query - glQueryCounter
  if (s_deviceConfig.m_glQueryCounter)
  {
    s_deviceConfig.m_glQueryCounter (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_ARB_timer_query - glGetQueryObjecti64v
  if (s_deviceConfig.m_glGetQueryObjecti64v)
  {
    s_deviceConfig.m_glGetQueryObjecti64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_ARB_timer_query - glGetQueryObjectui64v
  if (s_deviceConfig.m_glGetQueryObjectui64v)
  {
    s_deviceConfig.m_glGetQueryObjectui64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_ARB_transform_feedback2 - glBindTransformFeedback
  if (s_deviceConfig.m_glBindTransformFeedback)
  {
    s_deviceConfig.m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_ARB_transform_feedback2 - glDeleteTransformFeedbacks
  if (s_deviceConfig.m_glDeleteTransformFeedbacks)
  {
    s_deviceConfig.m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_ARB_transform_feedback2 - glGenTransformFeedbacks
  if (s_deviceConfig.m_glGenTransformFeedbacks)
  {
    s_deviceConfig.m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsTransformFeedback (GLuint id)
{
  // GL_ARB_transform_feedback2 - glIsTransformFeedback
  if (s_deviceConfig.m_glIsTransformFeedback)
  {
    return s_deviceConfig.m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glPauseTransformFeedback ()
{
  // GL_ARB_transform_feedback2 - glPauseTransformFeedback
  if (s_deviceConfig.m_glPauseTransformFeedback)
  {
    s_deviceConfig.m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glResumeTransformFeedback ()
{
  // GL_ARB_transform_feedback2 - glResumeTransformFeedback
  if (s_deviceConfig.m_glResumeTransformFeedback)
  {
    s_deviceConfig.m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedback (GLenum mode, GLuint id)
{
  // GL_ARB_transform_feedback2 - glDrawTransformFeedback
  if (s_deviceConfig.m_glDrawTransformFeedback)
  {
    s_deviceConfig.m_glDrawTransformFeedback (mode, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream)
{
  // GL_ARB_transform_feedback3 - glDrawTransformFeedbackStream
  if (s_deviceConfig.m_glDrawTransformFeedbackStream)
  {
    s_deviceConfig.m_glDrawTransformFeedbackStream (mode, id, stream);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBeginQueryIndexed (GLenum target, GLuint index, GLuint id)
{
  // GL_ARB_transform_feedback3 - glBeginQueryIndexed
  if (s_deviceConfig.m_glBeginQueryIndexed)
  {
    s_deviceConfig.m_glBeginQueryIndexed (target, index, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glEndQueryIndexed (GLenum target, GLuint index)
{
  // GL_ARB_transform_feedback3 - glEndQueryIndexed
  if (s_deviceConfig.m_glEndQueryIndexed)
  {
    s_deviceConfig.m_glEndQueryIndexed (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint * params)
{
  // GL_ARB_transform_feedback3 - glGetQueryIndexediv
  if (s_deviceConfig.m_glGetQueryIndexediv)
  {
    s_deviceConfig.m_glGetQueryIndexediv (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount)
{
  // GL_ARB_transform_feedback_instanced - glDrawTransformFeedbackInstanced
  if (s_deviceConfig.m_glDrawTransformFeedbackInstanced)
  {
    s_deviceConfig.m_glDrawTransformFeedbackInstanced (mode, id, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
  // GL_ARB_transform_feedback_instanced - glDrawTransformFeedbackStreamInstanced
  if (s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced)
  {
    s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced (mode, id, stream, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_ARB_uniform_buffer_object - glGetUniformIndices
  if (s_deviceConfig.m_glGetUniformIndices)
  {
    s_deviceConfig.m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformsiv
  if (s_deviceConfig.m_glGetActiveUniformsiv)
  {
    s_deviceConfig.m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformName
  if (s_deviceConfig.m_glGetActiveUniformName)
  {
    s_deviceConfig.m_glGetActiveUniformName (program, uniformIndex, bufSize, length, uniformName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_ARB_uniform_buffer_object - glGetUniformBlockIndex
  if (s_deviceConfig.m_glGetUniformBlockIndex)
  {
    return s_deviceConfig.m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformBlockiv
  if (s_deviceConfig.m_glGetActiveUniformBlockiv)
  {
    s_deviceConfig.m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_ARB_uniform_buffer_object - glGetActiveUniformBlockName
  if (s_deviceConfig.m_glGetActiveUniformBlockName)
  {
    s_deviceConfig.m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_ARB_uniform_buffer_object - glUniformBlockBinding
  if (s_deviceConfig.m_glUniformBlockBinding)
  {
    s_deviceConfig.m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_ARB_uniform_buffer_object - glBindBufferRange
  if (s_deviceConfig.m_glBindBufferRange)
  {
    s_deviceConfig.m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_ARB_uniform_buffer_object - glBindBufferBase
  if (s_deviceConfig.m_glBindBufferBase)
  {
    s_deviceConfig.m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_ARB_uniform_buffer_object - glGetIntegeri_v
  if (s_deviceConfig.m_glGetIntegeri_v)
  {
    s_deviceConfig.m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexArray (GLuint array)
{
  // GL_ARB_vertex_array_object - glBindVertexArray
  if (s_deviceConfig.m_glBindVertexArray)
  {
    s_deviceConfig.m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_ARB_vertex_array_object - glDeleteVertexArrays
  if (s_deviceConfig.m_glDeleteVertexArrays)
  {
    s_deviceConfig.m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_ARB_vertex_array_object - glGenVertexArrays
  if (s_deviceConfig.m_glGenVertexArrays)
  {
    s_deviceConfig.m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean glIsVertexArray (GLuint array)
{
  // GL_ARB_vertex_array_object - glIsVertexArray
  if (s_deviceConfig.m_glIsVertexArray)
  {
    return s_deviceConfig.m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1d (GLuint index, GLdouble x)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL1d
  if (s_deviceConfig.m_glVertexAttribL1d)
  {
    s_deviceConfig.m_glVertexAttribL1d (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL2d
  if (s_deviceConfig.m_glVertexAttribL2d)
  {
    s_deviceConfig.m_glVertexAttribL2d (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL3d
  if (s_deviceConfig.m_glVertexAttribL3d)
  {
    s_deviceConfig.m_glVertexAttribL3d (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL4d
  if (s_deviceConfig.m_glVertexAttribL4d)
  {
    s_deviceConfig.m_glVertexAttribL4d (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL1dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL1dv
  if (s_deviceConfig.m_glVertexAttribL1dv)
  {
    s_deviceConfig.m_glVertexAttribL1dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL2dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL2dv
  if (s_deviceConfig.m_glVertexAttribL2dv)
  {
    s_deviceConfig.m_glVertexAttribL2dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL3dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL3dv
  if (s_deviceConfig.m_glVertexAttribL3dv)
  {
    s_deviceConfig.m_glVertexAttribL3dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribL4dv (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribL4dv
  if (s_deviceConfig.m_glVertexAttribL4dv)
  {
    s_deviceConfig.m_glVertexAttribL4dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ARB_vertex_attrib_64bit - glVertexAttribLPointer
  if (s_deviceConfig.m_glVertexAttribLPointer)
  {
    s_deviceConfig.m_glVertexAttribLPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_ARB_vertex_attrib_64bit - glGetVertexAttribLdv
  if (s_deviceConfig.m_glGetVertexAttribLdv)
  {
    s_deviceConfig.m_glGetVertexAttribLdv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_ARB_vertex_attrib_binding - glBindVertexBuffer
  if (s_deviceConfig.m_glBindVertexBuffer)
  {
    s_deviceConfig.m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribFormat
  if (s_deviceConfig.m_glVertexAttribFormat)
  {
    s_deviceConfig.m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribIFormat
  if (s_deviceConfig.m_glVertexAttribIFormat)
  {
    s_deviceConfig.m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribLFormat
  if (s_deviceConfig.m_glVertexAttribLFormat)
  {
    s_deviceConfig.m_glVertexAttribLFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_ARB_vertex_attrib_binding - glVertexAttribBinding
  if (s_deviceConfig.m_glVertexAttribBinding)
  {
    s_deviceConfig.m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_ARB_vertex_attrib_binding - glVertexBindingDivisor
  if (s_deviceConfig.m_glVertexBindingDivisor)
  {
    s_deviceConfig.m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP1ui
  if (s_deviceConfig.m_glVertexAttribP1ui)
  {
    s_deviceConfig.m_glVertexAttribP1ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP1uiv
  if (s_deviceConfig.m_glVertexAttribP1uiv)
  {
    s_deviceConfig.m_glVertexAttribP1uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP2ui
  if (s_deviceConfig.m_glVertexAttribP2ui)
  {
    s_deviceConfig.m_glVertexAttribP2ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP2uiv
  if (s_deviceConfig.m_glVertexAttribP2uiv)
  {
    s_deviceConfig.m_glVertexAttribP2uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP3ui
  if (s_deviceConfig.m_glVertexAttribP3ui)
  {
    s_deviceConfig.m_glVertexAttribP3ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP3uiv
  if (s_deviceConfig.m_glVertexAttribP3uiv)
  {
    s_deviceConfig.m_glVertexAttribP3uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP4ui
  if (s_deviceConfig.m_glVertexAttribP4ui)
  {
    s_deviceConfig.m_glVertexAttribP4ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_ARB_vertex_type_2_10_10_10_rev - glVertexAttribP4uiv
  if (s_deviceConfig.m_glVertexAttribP4uiv)
  {
    s_deviceConfig.m_glVertexAttribP4uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportArrayv (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_ARB_viewport_array - glViewportArrayv
  if (s_deviceConfig.m_glViewportArrayv)
  {
    s_deviceConfig.m_glViewportArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_ARB_viewport_array - glViewportIndexedf
  if (s_deviceConfig.m_glViewportIndexedf)
  {
    s_deviceConfig.m_glViewportIndexedf (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glViewportIndexedfv (GLuint index, const GLfloat * v)
{
  // GL_ARB_viewport_array - glViewportIndexedfv
  if (s_deviceConfig.m_glViewportIndexedfv)
  {
    s_deviceConfig.m_glViewportIndexedfv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorArrayv (GLuint first, GLsizei count, const GLint * v)
{
  // GL_ARB_viewport_array - glScissorArrayv
  if (s_deviceConfig.m_glScissorArrayv)
  {
    s_deviceConfig.m_glScissorArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_ARB_viewport_array - glScissorIndexed
  if (s_deviceConfig.m_glScissorIndexed)
  {
    s_deviceConfig.m_glScissorIndexed (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glScissorIndexedv (GLuint index, const GLint * v)
{
  // GL_ARB_viewport_array - glScissorIndexedv
  if (s_deviceConfig.m_glScissorIndexedv)
  {
    s_deviceConfig.m_glScissorIndexedv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble * v)
{
  // GL_ARB_viewport_array - glDepthRangeArrayv
  if (s_deviceConfig.m_glDepthRangeArrayv)
  {
    s_deviceConfig.m_glDepthRangeArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f)
{
  // GL_ARB_viewport_array - glDepthRangeIndexed
  if (s_deviceConfig.m_glDepthRangeIndexed)
  {
    s_deviceConfig.m_glDepthRangeIndexed (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetFloati_v (GLenum target, GLuint index, GLfloat * data)
{
  // GL_ARB_viewport_array - glGetFloati_v
  if (s_deviceConfig.m_glGetFloati_v)
  {
    s_deviceConfig.m_glGetFloati_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glGetDoublei_v (GLenum target, GLuint index, GLdouble * data)
{
  // GL_ARB_viewport_array - glGetDoublei_v
  if (s_deviceConfig.m_glGetDoublei_v)
  {
    s_deviceConfig.m_glGetDoublei_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
