////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include <unordered_set>

#include <wrangle-wgl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSetStereoEmitterState3DL

BOOL glew::wgl::wglSetStereoEmitterState3DL (HDC hDC, UINT uState)
{
  // WGL_3DL_stereo_control - wglSetStereoEmitterState3DL
  if (s_deviceConfig.m_wglSetStereoEmitterState3DL)
  {
    return s_deviceConfig.m_wglSetStereoEmitterState3DL (hDC, uState);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGPUIDsAMD

UINT glew::wgl::wglGetGPUIDsAMD (UINT maxCount, UINT * ids)
{
  // WGL_AMD_gpu_association - wglGetGPUIDsAMD
  if (s_deviceConfig.m_wglGetGPUIDsAMD)
  {
    return s_deviceConfig.m_wglGetGPUIDsAMD (maxCount, ids);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGPUInfoAMD

INT glew::wgl::wglGetGPUInfoAMD (UINT id, int  property, GLenum dataType, UINT size, void * data)
{
  // WGL_AMD_gpu_association - wglGetGPUInfoAMD
  if (s_deviceConfig.m_wglGetGPUInfoAMD)
  {
    return s_deviceConfig.m_wglGetGPUInfoAMD (id, property, dataType, size, data);
  }
  return ((INT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetContextGPUIDAMD

UINT glew::wgl::wglGetContextGPUIDAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglGetContextGPUIDAMD
  if (s_deviceConfig.m_wglGetContextGPUIDAMD)
  {
    return s_deviceConfig.m_wglGetContextGPUIDAMD (hglrc);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateAssociatedContextAMD

HGLRC glew::wgl::wglCreateAssociatedContextAMD (UINT id)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAMD
  if (s_deviceConfig.m_wglCreateAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglCreateAssociatedContextAMD (id);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateAssociatedContextAttribsAMD

HGLRC glew::wgl::wglCreateAssociatedContextAttribsAMD (UINT id, HGLRC hShareContext, const int * attribList)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAttribsAMD
  if (s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD)
  {
    return s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD (id, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDeleteAssociatedContextAMD

BOOL glew::wgl::wglDeleteAssociatedContextAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglDeleteAssociatedContextAMD
  if (s_deviceConfig.m_wglDeleteAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglDeleteAssociatedContextAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglMakeAssociatedContextCurrentAMD

BOOL glew::wgl::wglMakeAssociatedContextCurrentAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglMakeAssociatedContextCurrentAMD
  if (s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD)
  {
    return s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetCurrentAssociatedContextAMD

HGLRC glew::wgl::wglGetCurrentAssociatedContextAMD ()
{
  // WGL_AMD_gpu_association - wglGetCurrentAssociatedContextAMD
  if (s_deviceConfig.m_wglGetCurrentAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglGetCurrentAssociatedContextAMD ();
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBlitContextFramebufferAMD

VOID glew::wgl::wglBlitContextFramebufferAMD (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // WGL_AMD_gpu_association - wglBlitContextFramebufferAMD
  if (s_deviceConfig.m_wglBlitContextFramebufferAMD)
  {
    return s_deviceConfig.m_wglBlitContextFramebufferAMD (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateBufferRegionARB

HANDLE glew::wgl::wglCreateBufferRegionARB (HDC hDC, int  iLayerPlane, UINT uType)
{
  // WGL_ARB_buffer_region - wglCreateBufferRegionARB
  if (s_deviceConfig.m_wglCreateBufferRegionARB)
  {
    return s_deviceConfig.m_wglCreateBufferRegionARB (hDC, iLayerPlane, uType);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDeleteBufferRegionARB

VOID glew::wgl::wglDeleteBufferRegionARB (HANDLE hRegion)
{
  // WGL_ARB_buffer_region - wglDeleteBufferRegionARB
  if (s_deviceConfig.m_wglDeleteBufferRegionARB)
  {
    return s_deviceConfig.m_wglDeleteBufferRegionARB (hRegion);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSaveBufferRegionARB

BOOL glew::wgl::wglSaveBufferRegionARB (HANDLE hRegion, int  x, int  y, int  width, int  height)
{
  // WGL_ARB_buffer_region - wglSaveBufferRegionARB
  if (s_deviceConfig.m_wglSaveBufferRegionARB)
  {
    return s_deviceConfig.m_wglSaveBufferRegionARB (hRegion, x, y, width, height);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglRestoreBufferRegionARB

BOOL glew::wgl::wglRestoreBufferRegionARB (HANDLE hRegion, int  x, int  y, int  width, int  height, int  xSrc, int  ySrc)
{
  // WGL_ARB_buffer_region - wglRestoreBufferRegionARB
  if (s_deviceConfig.m_wglRestoreBufferRegionARB)
  {
    return s_deviceConfig.m_wglRestoreBufferRegionARB (hRegion, x, y, width, height, xSrc, ySrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateContextAttribsARB

HGLRC glew::wgl::wglCreateContextAttribsARB (HDC hDC, HGLRC hShareContext, const int * attribList)
{
  // WGL_ARB_create_context - wglCreateContextAttribsARB
  if (s_deviceConfig.m_wglCreateContextAttribsARB)
  {
    return s_deviceConfig.m_wglCreateContextAttribsARB (hDC, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetExtensionsStringARB

const char * glew::wgl::wglGetExtensionsStringARB (HDC hdc)
{
  // WGL_ARB_extensions_string - wglGetExtensionsStringARB
  if (s_deviceConfig.m_wglGetExtensionsStringARB)
  {
    return s_deviceConfig.m_wglGetExtensionsStringARB (hdc);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglMakeContextCurrentARB

BOOL glew::wgl::wglMakeContextCurrentARB (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_ARB_make_current_read - wglMakeContextCurrentARB
  if (s_deviceConfig.m_wglMakeContextCurrentARB)
  {
    return s_deviceConfig.m_wglMakeContextCurrentARB (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetCurrentReadDCARB

HDC glew::wgl::wglGetCurrentReadDCARB ()
{
  // WGL_ARB_make_current_read - wglGetCurrentReadDCARB
  if (s_deviceConfig.m_wglGetCurrentReadDCARB)
  {
    return s_deviceConfig.m_wglGetCurrentReadDCARB ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreatePbufferARB

HPBUFFERARB glew::wgl::wglCreatePbufferARB (HDC hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList)
{
  // WGL_ARB_pbuffer - wglCreatePbufferARB
  if (s_deviceConfig.m_wglCreatePbufferARB)
  {
    return s_deviceConfig.m_wglCreatePbufferARB (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFERARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPbufferDCARB

HDC glew::wgl::wglGetPbufferDCARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglGetPbufferDCARB
  if (s_deviceConfig.m_wglGetPbufferDCARB)
  {
    return s_deviceConfig.m_wglGetPbufferDCARB (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleasePbufferDCARB

int  glew::wgl::wglReleasePbufferDCARB (HPBUFFERARB hPbuffer, HDC hDC)
{
  // WGL_ARB_pbuffer - wglReleasePbufferDCARB
  if (s_deviceConfig.m_wglReleasePbufferDCARB)
  {
    return s_deviceConfig.m_wglReleasePbufferDCARB (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDestroyPbufferARB

BOOL glew::wgl::wglDestroyPbufferARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglDestroyPbufferARB
  if (s_deviceConfig.m_wglDestroyPbufferARB)
  {
    return s_deviceConfig.m_wglDestroyPbufferARB (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryPbufferARB

BOOL glew::wgl::wglQueryPbufferARB (HPBUFFERARB hPbuffer, int  iAttribute, int * piValue)
{
  // WGL_ARB_pbuffer - wglQueryPbufferARB
  if (s_deviceConfig.m_wglQueryPbufferARB)
  {
    return s_deviceConfig.m_wglQueryPbufferARB (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPixelFormatAttribivARB

BOOL glew::wgl::wglGetPixelFormatAttribivARB (HDC hdc, int  iPixelFormat, int  iLayerPlane, UINT nAttributes, const int * piAttributes, int * piValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribivARB
  if (s_deviceConfig.m_wglGetPixelFormatAttribivARB)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribivARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPixelFormatAttribfvARB

BOOL glew::wgl::wglGetPixelFormatAttribfvARB (HDC hdc, int  iPixelFormat, int  iLayerPlane, UINT nAttributes, const int * piAttributes, FLOAT * pfValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribfvARB
  if (s_deviceConfig.m_wglGetPixelFormatAttribfvARB)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribfvARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglChoosePixelFormatARB

BOOL glew::wgl::wglChoosePixelFormatARB (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_ARB_pixel_format - wglChoosePixelFormatARB
  if (s_deviceConfig.m_wglChoosePixelFormatARB)
  {
    return s_deviceConfig.m_wglChoosePixelFormatARB (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindTexImageARB

BOOL glew::wgl::wglBindTexImageARB (HPBUFFERARB hPbuffer, int  iBuffer)
{
  // WGL_ARB_render_texture - wglBindTexImageARB
  if (s_deviceConfig.m_wglBindTexImageARB)
  {
    return s_deviceConfig.m_wglBindTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleaseTexImageARB

BOOL glew::wgl::wglReleaseTexImageARB (HPBUFFERARB hPbuffer, int  iBuffer)
{
  // WGL_ARB_render_texture - wglReleaseTexImageARB
  if (s_deviceConfig.m_wglReleaseTexImageARB)
  {
    return s_deviceConfig.m_wglReleaseTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSetPbufferAttribARB

BOOL glew::wgl::wglSetPbufferAttribARB (HPBUFFERARB hPbuffer, const int * piAttribList)
{
  // WGL_ARB_render_texture - wglSetPbufferAttribARB
  if (s_deviceConfig.m_wglSetPbufferAttribARB)
  {
    return s_deviceConfig.m_wglSetPbufferAttribARB (hPbuffer, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateDisplayColorTableEXT

GLboolean glew::wgl::wglCreateDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglCreateDisplayColorTableEXT
  if (s_deviceConfig.m_wglCreateDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglCreateDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglLoadDisplayColorTableEXT

GLboolean glew::wgl::wglLoadDisplayColorTableEXT (const GLushort * table, GLuint length)
{
  // WGL_EXT_display_color_table - wglLoadDisplayColorTableEXT
  if (s_deviceConfig.m_wglLoadDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglLoadDisplayColorTableEXT (table, length);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindDisplayColorTableEXT

GLboolean glew::wgl::wglBindDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglBindDisplayColorTableEXT
  if (s_deviceConfig.m_wglBindDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglBindDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDestroyDisplayColorTableEXT

VOID glew::wgl::wglDestroyDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglDestroyDisplayColorTableEXT
  if (s_deviceConfig.m_wglDestroyDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglDestroyDisplayColorTableEXT (id);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetExtensionsStringEXT

const char * glew::wgl::wglGetExtensionsStringEXT ()
{
  // WGL_EXT_extensions_string - wglGetExtensionsStringEXT
  if (s_deviceConfig.m_wglGetExtensionsStringEXT)
  {
    return s_deviceConfig.m_wglGetExtensionsStringEXT ();
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglMakeContextCurrentEXT

BOOL glew::wgl::wglMakeContextCurrentEXT (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_EXT_make_current_read - wglMakeContextCurrentEXT
  if (s_deviceConfig.m_wglMakeContextCurrentEXT)
  {
    return s_deviceConfig.m_wglMakeContextCurrentEXT (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetCurrentReadDCEXT

HDC glew::wgl::wglGetCurrentReadDCEXT ()
{
  // WGL_EXT_make_current_read - wglGetCurrentReadDCEXT
  if (s_deviceConfig.m_wglGetCurrentReadDCEXT)
  {
    return s_deviceConfig.m_wglGetCurrentReadDCEXT ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreatePbufferEXT

HPBUFFEREXT glew::wgl::wglCreatePbufferEXT (HDC hDC, int  iPixelFormat, int  iWidth, int  iHeight, const int * piAttribList)
{
  // WGL_EXT_pbuffer - wglCreatePbufferEXT
  if (s_deviceConfig.m_wglCreatePbufferEXT)
  {
    return s_deviceConfig.m_wglCreatePbufferEXT (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFEREXT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPbufferDCEXT

HDC glew::wgl::wglGetPbufferDCEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglGetPbufferDCEXT
  if (s_deviceConfig.m_wglGetPbufferDCEXT)
  {
    return s_deviceConfig.m_wglGetPbufferDCEXT (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleasePbufferDCEXT

int  glew::wgl::wglReleasePbufferDCEXT (HPBUFFEREXT hPbuffer, HDC hDC)
{
  // WGL_EXT_pbuffer - wglReleasePbufferDCEXT
  if (s_deviceConfig.m_wglReleasePbufferDCEXT)
  {
    return s_deviceConfig.m_wglReleasePbufferDCEXT (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDestroyPbufferEXT

BOOL glew::wgl::wglDestroyPbufferEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglDestroyPbufferEXT
  if (s_deviceConfig.m_wglDestroyPbufferEXT)
  {
    return s_deviceConfig.m_wglDestroyPbufferEXT (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryPbufferEXT

BOOL glew::wgl::wglQueryPbufferEXT (HPBUFFEREXT hPbuffer, int  iAttribute, int * piValue)
{
  // WGL_EXT_pbuffer - wglQueryPbufferEXT
  if (s_deviceConfig.m_wglQueryPbufferEXT)
  {
    return s_deviceConfig.m_wglQueryPbufferEXT (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPixelFormatAttribivEXT

BOOL glew::wgl::wglGetPixelFormatAttribivEXT (HDC hdc, int  iPixelFormat, int  iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribivEXT
  if (s_deviceConfig.m_wglGetPixelFormatAttribivEXT)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribivEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetPixelFormatAttribfvEXT

BOOL glew::wgl::wglGetPixelFormatAttribfvEXT (HDC hdc, int  iPixelFormat, int  iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribfvEXT
  if (s_deviceConfig.m_wglGetPixelFormatAttribfvEXT)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribfvEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglChoosePixelFormatEXT

BOOL glew::wgl::wglChoosePixelFormatEXT (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_EXT_pixel_format - wglChoosePixelFormatEXT
  if (s_deviceConfig.m_wglChoosePixelFormatEXT)
  {
    return s_deviceConfig.m_wglChoosePixelFormatEXT (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSwapIntervalEXT

BOOL glew::wgl::wglSwapIntervalEXT (int  interval)
{
  // WGL_EXT_swap_control - wglSwapIntervalEXT
  if (s_deviceConfig.m_wglSwapIntervalEXT)
  {
    return s_deviceConfig.m_wglSwapIntervalEXT (interval);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetSwapIntervalEXT

int  glew::wgl::wglGetSwapIntervalEXT ()
{
  // WGL_EXT_swap_control - wglGetSwapIntervalEXT
  if (s_deviceConfig.m_wglGetSwapIntervalEXT)
  {
    return s_deviceConfig.m_wglGetSwapIntervalEXT ();
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetDigitalVideoParametersI3D

BOOL glew::wgl::wglGetDigitalVideoParametersI3D (HDC hDC, int  iAttribute, int * piValue)
{
  // WGL_I3D_digital_video_control - wglGetDigitalVideoParametersI3D
  if (s_deviceConfig.m_wglGetDigitalVideoParametersI3D)
  {
    return s_deviceConfig.m_wglGetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSetDigitalVideoParametersI3D

BOOL glew::wgl::wglSetDigitalVideoParametersI3D (HDC hDC, int  iAttribute, const int * piValue)
{
  // WGL_I3D_digital_video_control - wglSetDigitalVideoParametersI3D
  if (s_deviceConfig.m_wglSetDigitalVideoParametersI3D)
  {
    return s_deviceConfig.m_wglSetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGammaTableParametersI3D

BOOL glew::wgl::wglGetGammaTableParametersI3D (HDC hDC, int  iAttribute, int * piValue)
{
  // WGL_I3D_gamma - wglGetGammaTableParametersI3D
  if (s_deviceConfig.m_wglGetGammaTableParametersI3D)
  {
    return s_deviceConfig.m_wglGetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSetGammaTableParametersI3D

BOOL glew::wgl::wglSetGammaTableParametersI3D (HDC hDC, int  iAttribute, const int * piValue)
{
  // WGL_I3D_gamma - wglSetGammaTableParametersI3D
  if (s_deviceConfig.m_wglSetGammaTableParametersI3D)
  {
    return s_deviceConfig.m_wglSetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGammaTableI3D

BOOL glew::wgl::wglGetGammaTableI3D (HDC hDC, int  iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue)
{
  // WGL_I3D_gamma - wglGetGammaTableI3D
  if (s_deviceConfig.m_wglGetGammaTableI3D)
  {
    return s_deviceConfig.m_wglGetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSetGammaTableI3D

BOOL glew::wgl::wglSetGammaTableI3D (HDC hDC, int  iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue)
{
  // WGL_I3D_gamma - wglSetGammaTableI3D
  if (s_deviceConfig.m_wglSetGammaTableI3D)
  {
    return s_deviceConfig.m_wglSetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnableGenlockI3D

BOOL glew::wgl::wglEnableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglEnableGenlockI3D
  if (s_deviceConfig.m_wglEnableGenlockI3D)
  {
    return s_deviceConfig.m_wglEnableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDisableGenlockI3D

BOOL glew::wgl::wglDisableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglDisableGenlockI3D
  if (s_deviceConfig.m_wglDisableGenlockI3D)
  {
    return s_deviceConfig.m_wglDisableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglIsEnabledGenlockI3D

BOOL glew::wgl::wglIsEnabledGenlockI3D (HDC hDC, BOOL * pFlag)
{
  // WGL_I3D_genlock - wglIsEnabledGenlockI3D
  if (s_deviceConfig.m_wglIsEnabledGenlockI3D)
  {
    return s_deviceConfig.m_wglIsEnabledGenlockI3D (hDC, pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGenlockSourceI3D

BOOL glew::wgl::wglGenlockSourceI3D (HDC hDC, UINT uSource)
{
  // WGL_I3D_genlock - wglGenlockSourceI3D
  if (s_deviceConfig.m_wglGenlockSourceI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGenlockSourceI3D

BOOL glew::wgl::wglGetGenlockSourceI3D (HDC hDC, UINT * uSource)
{
  // WGL_I3D_genlock - wglGetGenlockSourceI3D
  if (s_deviceConfig.m_wglGetGenlockSourceI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGenlockSourceEdgeI3D

BOOL glew::wgl::wglGenlockSourceEdgeI3D (HDC hDC, UINT uEdge)
{
  // WGL_I3D_genlock - wglGenlockSourceEdgeI3D
  if (s_deviceConfig.m_wglGenlockSourceEdgeI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGenlockSourceEdgeI3D

BOOL glew::wgl::wglGetGenlockSourceEdgeI3D (HDC hDC, UINT * uEdge)
{
  // WGL_I3D_genlock - wglGetGenlockSourceEdgeI3D
  if (s_deviceConfig.m_wglGetGenlockSourceEdgeI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGenlockSampleRateI3D

BOOL glew::wgl::wglGenlockSampleRateI3D (HDC hDC, UINT uRate)
{
  // WGL_I3D_genlock - wglGenlockSampleRateI3D
  if (s_deviceConfig.m_wglGenlockSampleRateI3D)
  {
    return s_deviceConfig.m_wglGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGenlockSampleRateI3D

BOOL glew::wgl::wglGetGenlockSampleRateI3D (HDC hDC, UINT * uRate)
{
  // WGL_I3D_genlock - wglGetGenlockSampleRateI3D
  if (s_deviceConfig.m_wglGetGenlockSampleRateI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGenlockSourceDelayI3D

BOOL glew::wgl::wglGenlockSourceDelayI3D (HDC hDC, UINT uDelay)
{
  // WGL_I3D_genlock - wglGenlockSourceDelayI3D
  if (s_deviceConfig.m_wglGenlockSourceDelayI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetGenlockSourceDelayI3D

BOOL glew::wgl::wglGetGenlockSourceDelayI3D (HDC hDC, UINT * uDelay)
{
  // WGL_I3D_genlock - wglGetGenlockSourceDelayI3D
  if (s_deviceConfig.m_wglGetGenlockSourceDelayI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryGenlockMaxSourceDelayI3D

BOOL glew::wgl::wglQueryGenlockMaxSourceDelayI3D (HDC hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay)
{
  // WGL_I3D_genlock - wglQueryGenlockMaxSourceDelayI3D
  if (s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D)
  {
    return s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D (hDC, uMaxLineDelay, uMaxPixelDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateImageBufferI3D

LPVOID glew::wgl::wglCreateImageBufferI3D (HDC hDC, DWORD dwSize, UINT uFlags)
{
  // WGL_I3D_image_buffer - wglCreateImageBufferI3D
  if (s_deviceConfig.m_wglCreateImageBufferI3D)
  {
    return s_deviceConfig.m_wglCreateImageBufferI3D (hDC, dwSize, uFlags);
  }
  return ((LPVOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDestroyImageBufferI3D

BOOL glew::wgl::wglDestroyImageBufferI3D (HDC hDC, LPVOID pAddress)
{
  // WGL_I3D_image_buffer - wglDestroyImageBufferI3D
  if (s_deviceConfig.m_wglDestroyImageBufferI3D)
  {
    return s_deviceConfig.m_wglDestroyImageBufferI3D (hDC, pAddress);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglAssociateImageBufferEventsI3D

BOOL glew::wgl::wglAssociateImageBufferEventsI3D (HDC hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT count)
{
  // WGL_I3D_image_buffer - wglAssociateImageBufferEventsI3D
  if (s_deviceConfig.m_wglAssociateImageBufferEventsI3D)
  {
    return s_deviceConfig.m_wglAssociateImageBufferEventsI3D (hDC, pEvent, pAddress, pSize, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleaseImageBufferEventsI3D

BOOL glew::wgl::wglReleaseImageBufferEventsI3D (HDC hDC, const LPVOID * pAddress, UINT count)
{
  // WGL_I3D_image_buffer - wglReleaseImageBufferEventsI3D
  if (s_deviceConfig.m_wglReleaseImageBufferEventsI3D)
  {
    return s_deviceConfig.m_wglReleaseImageBufferEventsI3D (hDC, pAddress, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnableFrameLockI3D

BOOL glew::wgl::wglEnableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglEnableFrameLockI3D
  if (s_deviceConfig.m_wglEnableFrameLockI3D)
  {
    return s_deviceConfig.m_wglEnableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDisableFrameLockI3D

BOOL glew::wgl::wglDisableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglDisableFrameLockI3D
  if (s_deviceConfig.m_wglDisableFrameLockI3D)
  {
    return s_deviceConfig.m_wglDisableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglIsEnabledFrameLockI3D

BOOL glew::wgl::wglIsEnabledFrameLockI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglIsEnabledFrameLockI3D
  if (s_deviceConfig.m_wglIsEnabledFrameLockI3D)
  {
    return s_deviceConfig.m_wglIsEnabledFrameLockI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryFrameLockMasterI3D

BOOL glew::wgl::wglQueryFrameLockMasterI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglQueryFrameLockMasterI3D
  if (s_deviceConfig.m_wglQueryFrameLockMasterI3D)
  {
    return s_deviceConfig.m_wglQueryFrameLockMasterI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetFrameUsageI3D

BOOL glew::wgl::wglGetFrameUsageI3D (float * pUsage)
{
  // WGL_I3D_swap_frame_usage - wglGetFrameUsageI3D
  if (s_deviceConfig.m_wglGetFrameUsageI3D)
  {
    return s_deviceConfig.m_wglGetFrameUsageI3D (pUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBeginFrameTrackingI3D

BOOL glew::wgl::wglBeginFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglBeginFrameTrackingI3D
  if (s_deviceConfig.m_wglBeginFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglBeginFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEndFrameTrackingI3D

BOOL glew::wgl::wglEndFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglEndFrameTrackingI3D
  if (s_deviceConfig.m_wglEndFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglEndFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryFrameTrackingI3D

BOOL glew::wgl::wglQueryFrameTrackingI3D (DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage)
{
  // WGL_I3D_swap_frame_usage - wglQueryFrameTrackingI3D
  if (s_deviceConfig.m_wglQueryFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglQueryFrameTrackingI3D (pFrameCount, pMissedFrames, pLastMissedUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCopyImageSubDataNV

BOOL glew::wgl::wglCopyImageSubDataNV (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // WGL_NV_copy_image - wglCopyImageSubDataNV
  if (s_deviceConfig.m_wglCopyImageSubDataNV)
  {
    return s_deviceConfig.m_wglCopyImageSubDataNV (hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDelayBeforeSwapNV

BOOL glew::wgl::wglDelayBeforeSwapNV (HDC hDC, GLfloat seconds)
{
  // WGL_NV_delay_before_swap - wglDelayBeforeSwapNV
  if (s_deviceConfig.m_wglDelayBeforeSwapNV)
  {
    return s_deviceConfig.m_wglDelayBeforeSwapNV (hDC, seconds);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXSetResourceShareHandleNV

BOOL glew::wgl::wglDXSetResourceShareHandleNV (void * dxObject, HANDLE shareHandle)
{
  // WGL_NV_DX_interop - wglDXSetResourceShareHandleNV
  if (s_deviceConfig.m_wglDXSetResourceShareHandleNV)
  {
    return s_deviceConfig.m_wglDXSetResourceShareHandleNV (dxObject, shareHandle);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXOpenDeviceNV

HANDLE glew::wgl::wglDXOpenDeviceNV (void * dxDevice)
{
  // WGL_NV_DX_interop - wglDXOpenDeviceNV
  if (s_deviceConfig.m_wglDXOpenDeviceNV)
  {
    return s_deviceConfig.m_wglDXOpenDeviceNV (dxDevice);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXCloseDeviceNV

BOOL glew::wgl::wglDXCloseDeviceNV (HANDLE hDevice)
{
  // WGL_NV_DX_interop - wglDXCloseDeviceNV
  if (s_deviceConfig.m_wglDXCloseDeviceNV)
  {
    return s_deviceConfig.m_wglDXCloseDeviceNV (hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXRegisterObjectNV

HANDLE glew::wgl::wglDXRegisterObjectNV (HANDLE hDevice, void * dxObject, GLuint name, GLenum type, GLenum access)
{
  // WGL_NV_DX_interop - wglDXRegisterObjectNV
  if (s_deviceConfig.m_wglDXRegisterObjectNV)
  {
    return s_deviceConfig.m_wglDXRegisterObjectNV (hDevice, dxObject, name, type, access);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXUnregisterObjectNV

BOOL glew::wgl::wglDXUnregisterObjectNV (HANDLE hDevice, HANDLE hObject)
{
  // WGL_NV_DX_interop - wglDXUnregisterObjectNV
  if (s_deviceConfig.m_wglDXUnregisterObjectNV)
  {
    return s_deviceConfig.m_wglDXUnregisterObjectNV (hDevice, hObject);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXObjectAccessNV

BOOL glew::wgl::wglDXObjectAccessNV (HANDLE hObject, GLenum access)
{
  // WGL_NV_DX_interop - wglDXObjectAccessNV
  if (s_deviceConfig.m_wglDXObjectAccessNV)
  {
    return s_deviceConfig.m_wglDXObjectAccessNV (hObject, access);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXLockObjectsNV

BOOL glew::wgl::wglDXLockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXLockObjectsNV
  if (s_deviceConfig.m_wglDXLockObjectsNV)
  {
    return s_deviceConfig.m_wglDXLockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDXUnlockObjectsNV

BOOL glew::wgl::wglDXUnlockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXUnlockObjectsNV
  if (s_deviceConfig.m_wglDXUnlockObjectsNV)
  {
    return s_deviceConfig.m_wglDXUnlockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnumGpusNV

BOOL glew::wgl::wglEnumGpusNV (UINT iGpuIndex, HGPUNV * phGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusNV
  if (s_deviceConfig.m_wglEnumGpusNV)
  {
    return s_deviceConfig.m_wglEnumGpusNV (iGpuIndex, phGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnumGpuDevicesNV

BOOL glew::wgl::wglEnumGpuDevicesNV (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
  // WGL_NV_gpu_affinity - wglEnumGpuDevicesNV
  if (s_deviceConfig.m_wglEnumGpuDevicesNV)
  {
    return s_deviceConfig.m_wglEnumGpuDevicesNV (hGpu, iDeviceIndex, lpGpuDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglCreateAffinityDCNV

HDC glew::wgl::wglCreateAffinityDCNV (const HGPUNV * phGpuList)
{
  // WGL_NV_gpu_affinity - wglCreateAffinityDCNV
  if (s_deviceConfig.m_wglCreateAffinityDCNV)
  {
    return s_deviceConfig.m_wglCreateAffinityDCNV (phGpuList);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnumGpusFromAffinityDCNV

BOOL glew::wgl::wglEnumGpusFromAffinityDCNV (HDC hAffinityDC, UINT iGpuIndex, HGPUNV * hGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusFromAffinityDCNV
  if (s_deviceConfig.m_wglEnumGpusFromAffinityDCNV)
  {
    return s_deviceConfig.m_wglEnumGpusFromAffinityDCNV (hAffinityDC, iGpuIndex, hGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglDeleteDCNV

BOOL glew::wgl::wglDeleteDCNV (HDC hdc)
{
  // WGL_NV_gpu_affinity - wglDeleteDCNV
  if (s_deviceConfig.m_wglDeleteDCNV)
  {
    return s_deviceConfig.m_wglDeleteDCNV (hdc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnumerateVideoDevicesNV

int  glew::wgl::wglEnumerateVideoDevicesNV (HDC hDC, HVIDEOOUTPUTDEVICENV * phDeviceList)
{
  // WGL_NV_present_video - wglEnumerateVideoDevicesNV
  if (s_deviceConfig.m_wglEnumerateVideoDevicesNV)
  {
    return s_deviceConfig.m_wglEnumerateVideoDevicesNV (hDC, phDeviceList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindVideoDeviceNV

BOOL glew::wgl::wglBindVideoDeviceNV (HDC hDC, unsigned int  uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int * piAttribList)
{
  // WGL_NV_present_video - wglBindVideoDeviceNV
  if (s_deviceConfig.m_wglBindVideoDeviceNV)
  {
    return s_deviceConfig.m_wglBindVideoDeviceNV (hDC, uVideoSlot, hVideoDevice, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryCurrentContextNV

BOOL glew::wgl::wglQueryCurrentContextNV (int  iAttribute, int * piValue)
{
  // WGL_NV_present_video - wglQueryCurrentContextNV
  if (s_deviceConfig.m_wglQueryCurrentContextNV)
  {
    return s_deviceConfig.m_wglQueryCurrentContextNV (iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglJoinSwapGroupNV

BOOL glew::wgl::wglJoinSwapGroupNV (HDC hDC, GLuint group)
{
  // WGL_NV_swap_group - wglJoinSwapGroupNV
  if (s_deviceConfig.m_wglJoinSwapGroupNV)
  {
    return s_deviceConfig.m_wglJoinSwapGroupNV (hDC, group);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindSwapBarrierNV

BOOL glew::wgl::wglBindSwapBarrierNV (GLuint group, GLuint barrier)
{
  // WGL_NV_swap_group - wglBindSwapBarrierNV
  if (s_deviceConfig.m_wglBindSwapBarrierNV)
  {
    return s_deviceConfig.m_wglBindSwapBarrierNV (group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQuerySwapGroupNV

BOOL glew::wgl::wglQuerySwapGroupNV (HDC hDC, GLuint * group, GLuint * barrier)
{
  // WGL_NV_swap_group - wglQuerySwapGroupNV
  if (s_deviceConfig.m_wglQuerySwapGroupNV)
  {
    return s_deviceConfig.m_wglQuerySwapGroupNV (hDC, group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryMaxSwapGroupsNV

BOOL glew::wgl::wglQueryMaxSwapGroupsNV (HDC hDC, GLuint * maxGroups, GLuint * maxBarriers)
{
  // WGL_NV_swap_group - wglQueryMaxSwapGroupsNV
  if (s_deviceConfig.m_wglQueryMaxSwapGroupsNV)
  {
    return s_deviceConfig.m_wglQueryMaxSwapGroupsNV (hDC, maxGroups, maxBarriers);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryFrameCountNV

BOOL glew::wgl::wglQueryFrameCountNV (HDC hDC, GLuint * count)
{
  // WGL_NV_swap_group - wglQueryFrameCountNV
  if (s_deviceConfig.m_wglQueryFrameCountNV)
  {
    return s_deviceConfig.m_wglQueryFrameCountNV (hDC, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglResetFrameCountNV

BOOL glew::wgl::wglResetFrameCountNV (HDC hDC)
{
  // WGL_NV_swap_group - wglResetFrameCountNV
  if (s_deviceConfig.m_wglResetFrameCountNV)
  {
    return s_deviceConfig.m_wglResetFrameCountNV (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindVideoCaptureDeviceNV

BOOL glew::wgl::wglBindVideoCaptureDeviceNV (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglBindVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglBindVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglBindVideoCaptureDeviceNV (uVideoSlot, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglEnumerateVideoCaptureDevicesNV

UINT glew::wgl::wglEnumerateVideoCaptureDevicesNV (HDC hDc, HVIDEOINPUTDEVICENV * phDeviceList)
{
  // WGL_NV_video_capture - wglEnumerateVideoCaptureDevicesNV
  if (s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV)
  {
    return s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV (hDc, phDeviceList);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglLockVideoCaptureDeviceNV

BOOL glew::wgl::wglLockVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglLockVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglLockVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglLockVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglQueryVideoCaptureDeviceNV

BOOL glew::wgl::wglQueryVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int  iAttribute, int * piValue)
{
  // WGL_NV_video_capture - wglQueryVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglQueryVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglQueryVideoCaptureDeviceNV (hDc, hDevice, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleaseVideoCaptureDeviceNV

BOOL glew::wgl::wglReleaseVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglReleaseVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetVideoDeviceNV

BOOL glew::wgl::wglGetVideoDeviceNV (HDC hDC, int  numDevices, HPVIDEODEV * hVideoDevice)
{
  // WGL_NV_video_output - wglGetVideoDeviceNV
  if (s_deviceConfig.m_wglGetVideoDeviceNV)
  {
    return s_deviceConfig.m_wglGetVideoDeviceNV (hDC, numDevices, hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleaseVideoDeviceNV

BOOL glew::wgl::wglReleaseVideoDeviceNV (HPVIDEODEV hVideoDevice)
{
  // WGL_NV_video_output - wglReleaseVideoDeviceNV
  if (s_deviceConfig.m_wglReleaseVideoDeviceNV)
  {
    return s_deviceConfig.m_wglReleaseVideoDeviceNV (hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglBindVideoImageNV

BOOL glew::wgl::wglBindVideoImageNV (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int  iVideoBuffer)
{
  // WGL_NV_video_output - wglBindVideoImageNV
  if (s_deviceConfig.m_wglBindVideoImageNV)
  {
    return s_deviceConfig.m_wglBindVideoImageNV (hVideoDevice, hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglReleaseVideoImageNV

BOOL glew::wgl::wglReleaseVideoImageNV (HPBUFFERARB hPbuffer, int  iVideoBuffer)
{
  // WGL_NV_video_output - wglReleaseVideoImageNV
  if (s_deviceConfig.m_wglReleaseVideoImageNV)
  {
    return s_deviceConfig.m_wglReleaseVideoImageNV (hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSendPbufferToVideoNV

BOOL glew::wgl::wglSendPbufferToVideoNV (HPBUFFERARB hPbuffer, int  iBufferType, unsigned long * pulCounterPbuffer, BOOL bBlock)
{
  // WGL_NV_video_output - wglSendPbufferToVideoNV
  if (s_deviceConfig.m_wglSendPbufferToVideoNV)
  {
    return s_deviceConfig.m_wglSendPbufferToVideoNV (hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetVideoInfoNV

BOOL glew::wgl::wglGetVideoInfoNV (HPVIDEODEV hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)
{
  // WGL_NV_video_output - wglGetVideoInfoNV
  if (s_deviceConfig.m_wglGetVideoInfoNV)
  {
    return s_deviceConfig.m_wglGetVideoInfoNV (hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglAllocateMemoryNV

void * glew::wgl::wglAllocateMemoryNV (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  // WGL_NV_vertex_array_range - wglAllocateMemoryNV
  if (s_deviceConfig.m_wglAllocateMemoryNV)
  {
    return s_deviceConfig.m_wglAllocateMemoryNV (size, readfreq, writefreq, priority);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglFreeMemoryNV

void  glew::wgl::wglFreeMemoryNV (void * pointer)
{
  // WGL_NV_vertex_array_range - wglFreeMemoryNV
  if (s_deviceConfig.m_wglFreeMemoryNV)
  {
    s_deviceConfig.m_wglFreeMemoryNV (pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetSyncValuesOML

BOOL glew::wgl::wglGetSyncValuesOML (HDC hdc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglGetSyncValuesOML
  if (s_deviceConfig.m_wglGetSyncValuesOML)
  {
    return s_deviceConfig.m_wglGetSyncValuesOML (hdc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglGetMscRateOML

BOOL glew::wgl::wglGetMscRateOML (HDC hdc, INT32 * numerator, INT32 * denominator)
{
  // WGL_OML_sync_control - wglGetMscRateOML
  if (s_deviceConfig.m_wglGetMscRateOML)
  {
    return s_deviceConfig.m_wglGetMscRateOML (hdc, numerator, denominator);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSwapBuffersMscOML

INT64 glew::wgl::wglSwapBuffersMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapBuffersMscOML
  if (s_deviceConfig.m_wglSwapBuffersMscOML)
  {
    return s_deviceConfig.m_wglSwapBuffersMscOML (hdc, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglSwapLayerBuffersMscOML

INT64 glew::wgl::wglSwapLayerBuffersMscOML (HDC hdc, int  fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapLayerBuffersMscOML
  if (s_deviceConfig.m_wglSwapLayerBuffersMscOML)
  {
    return s_deviceConfig.m_wglSwapLayerBuffersMscOML (hdc, fuPlanes, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglWaitForMscOML

BOOL glew::wgl::wglWaitForMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForMscOML
  if (s_deviceConfig.m_wglWaitForMscOML)
  {
    return s_deviceConfig.m_wglWaitForMscOML (hdc, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef wglWaitForSbcOML

BOOL glew::wgl::wglWaitForSbcOML (HDC hdc, INT64 target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForSbcOML
  if (s_deviceConfig.m_wglWaitForSbcOML)
  {
    return s_deviceConfig.m_wglWaitForSbcOML (hdc, target_sbc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

glew::wgl::DeviceConfig glew::wgl::s_deviceConfig;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::wgl::Initialise ()
{
  memset (&s_deviceConfig, 0, sizeof (s_deviceConfig));

  // 
  // Determine current driver's feature reporting.
  // 

  PFNWGLGETEXTENSIONSSTRINGARBPROC _wglewGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) wglGetProcAddress ("wglGetExtensionsStringARB");

  PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglewGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) wglGetProcAddress ("wglGetExtensionsStringEXT");

  s_deviceConfig.m_featureSupported [GLEW_WGL_VERSION_1_0] = true;

  // 
  // Evaluate extension support.
  // 

  std::unordered_set <std::string> supportedExtensions;

  const unsigned char *wglExtensions = NULL;

  if (_wglewGetExtensionsStringEXT != NULL)
  {
    wglExtensions = (const unsigned char*) _wglewGetExtensionsStringEXT ();
  }
  else if (_wglewGetExtensionsStringARB != NULL)
  {
    wglExtensions = (const unsigned char*) _wglewGetExtensionsStringARB (wglGetCurrentDC());
  }

  if (!wglExtensions)
  {
    wglExtensions = (const unsigned char*) ""; // Protect against some drivers will happily passing back NULL.
  }

  const size_t wglExtensionsLen = strlen ((const char *) wglExtensions);

  if (wglExtensionsLen)
  {
    unsigned char *thisExtStart = (unsigned char *) wglExtensions;

    unsigned char *thisExtEnd = NULL;

    char thisExtBuffer [128];

    memset (thisExtBuffer, 0, sizeof (thisExtBuffer));

    do 
    {
      const char * seperator = strchr ((const char *) thisExtStart, ' ');

      if (seperator)
      {
        const size_t len = (((uintptr_t) seperator - (uintptr_t) thisExtStart) / sizeof (unsigned char));

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len, 127)] = '\0';

        thisExtEnd = (unsigned char *) seperator + 1; // skip tab character
      }
      else
      {
        const size_t len = strlen ((const char *) thisExtStart);

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len + 1, 127)] = '\0';

        thisExtEnd = NULL;
      }

      std::string thisExt (thisExtBuffer);

      if (supportedExtensions.find (thisExt) == supportedExtensions.end ())
      {
        supportedExtensions.insert (thisExt);
      }

      thisExtStart = thisExtEnd;
    }
    while ((thisExtStart && *thisExtStart != '\0') && (thisExtEnd && *thisExtEnd != '\0'));
  }

  s_deviceConfig.m_featureSupported [GLEW_WGL_3DFX_multisample] = (supportedExtensions.find ("WGL_3DFX_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_3DL_stereo_control] = (supportedExtensions.find ("WGL_3DL_stereo_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_AMD_gpu_association] = (supportedExtensions.find ("WGL_AMD_gpu_association") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_buffer_region] = (supportedExtensions.find ("WGL_ARB_buffer_region") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_context_flush_control] = (supportedExtensions.find ("WGL_ARB_context_flush_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context] = (supportedExtensions.find ("WGL_ARB_create_context") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context_profile] = (supportedExtensions.find ("WGL_ARB_create_context_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context_robustness] = (supportedExtensions.find ("WGL_ARB_create_context_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_extensions_string] = (supportedExtensions.find ("WGL_ARB_extensions_string") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_framebuffer_sRGB] = (supportedExtensions.find ("WGL_ARB_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_make_current_read] = (supportedExtensions.find ("WGL_ARB_make_current_read") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_multisample] = (supportedExtensions.find ("WGL_ARB_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pbuffer] = (supportedExtensions.find ("WGL_ARB_pbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format] = (supportedExtensions.find ("WGL_ARB_pixel_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format_float] = (supportedExtensions.find ("WGL_ARB_pixel_format_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_render_texture] = (supportedExtensions.find ("WGL_ARB_render_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_robustness_application_isolation] = (supportedExtensions.find ("WGL_ARB_robustness_application_isolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_robustness_share_group_isolation] = (supportedExtensions.find ("WGL_ARB_robustness_share_group_isolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ATI_pixel_format_float] = (supportedExtensions.find ("WGL_ATI_pixel_format_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_create_context_es_profile] = (supportedExtensions.find ("WGL_EXT_create_context_es_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_create_context_es2_profile] = (supportedExtensions.find ("WGL_EXT_create_context_es2_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_depth_float] = (supportedExtensions.find ("WGL_EXT_depth_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_display_color_table] = (supportedExtensions.find ("WGL_EXT_display_color_table") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_extensions_string] = (supportedExtensions.find ("WGL_EXT_extensions_string") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_framebuffer_sRGB] = (supportedExtensions.find ("WGL_EXT_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_make_current_read] = (supportedExtensions.find ("WGL_EXT_make_current_read") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_multisample] = (supportedExtensions.find ("WGL_EXT_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pbuffer] = (supportedExtensions.find ("WGL_EXT_pbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format] = (supportedExtensions.find ("WGL_EXT_pixel_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format_packed_float] = (supportedExtensions.find ("WGL_EXT_pixel_format_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control] = (supportedExtensions.find ("WGL_EXT_swap_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control_tear] = (supportedExtensions.find ("WGL_EXT_swap_control_tear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_digital_video_control] = (supportedExtensions.find ("WGL_I3D_digital_video_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_gamma] = (supportedExtensions.find ("WGL_I3D_gamma") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_genlock] = (supportedExtensions.find ("WGL_I3D_genlock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_image_buffer] = (supportedExtensions.find ("WGL_I3D_image_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_lock] = (supportedExtensions.find ("WGL_I3D_swap_frame_lock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_usage] = (supportedExtensions.find ("WGL_I3D_swap_frame_usage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_copy_image] = (supportedExtensions.find ("WGL_NV_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_delay_before_swap] = (supportedExtensions.find ("WGL_NV_delay_before_swap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop] = (supportedExtensions.find ("WGL_NV_DX_interop") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop2] = (supportedExtensions.find ("WGL_NV_DX_interop2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_float_buffer] = (supportedExtensions.find ("WGL_NV_float_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_gpu_affinity] = (supportedExtensions.find ("WGL_NV_gpu_affinity") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_multisample_coverage] = (supportedExtensions.find ("WGL_NV_multisample_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_present_video] = (supportedExtensions.find ("WGL_NV_present_video") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_render_depth_texture] = (supportedExtensions.find ("WGL_NV_render_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_render_texture_rectangle] = (supportedExtensions.find ("WGL_NV_render_texture_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_swap_group] = (supportedExtensions.find ("WGL_NV_swap_group") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_capture] = (supportedExtensions.find ("WGL_NV_video_capture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_output] = (supportedExtensions.find ("WGL_NV_video_output") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_vertex_array_range] = (supportedExtensions.find ("WGL_NV_vertex_array_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_OML_sync_control] = (supportedExtensions.find ("WGL_OML_sync_control") != supportedExtensions.end ());

  // WGL_3DL_stereo_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_3DL_stereo_control])
  {
    s_deviceConfig.m_wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC) wglGetProcAddress ("wglSetStereoEmitterState3DL");
  }

  // WGL_AMD_gpu_association
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_AMD_gpu_association])
  {
    s_deviceConfig.m_wglGetGPUIDsAMD = (PFNWGLGETGPUIDSAMDPROC) wglGetProcAddress ("wglGetGPUIDsAMD");
    s_deviceConfig.m_wglGetGPUInfoAMD = (PFNWGLGETGPUINFOAMDPROC) wglGetProcAddress ("wglGetGPUInfoAMD");
    s_deviceConfig.m_wglGetContextGPUIDAMD = (PFNWGLGETCONTEXTGPUIDAMDPROC) wglGetProcAddress ("wglGetContextGPUIDAMD");
    s_deviceConfig.m_wglCreateAssociatedContextAMD = (PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) wglGetProcAddress ("wglCreateAssociatedContextAMD");
    s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD = (PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) wglGetProcAddress ("wglCreateAssociatedContextAttribsAMD");
    s_deviceConfig.m_wglDeleteAssociatedContextAMD = (PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) wglGetProcAddress ("wglDeleteAssociatedContextAMD");
    s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD = (PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) wglGetProcAddress ("wglMakeAssociatedContextCurrentAMD");
    s_deviceConfig.m_wglGetCurrentAssociatedContextAMD = (PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) wglGetProcAddress ("wglGetCurrentAssociatedContextAMD");
    s_deviceConfig.m_wglBlitContextFramebufferAMD = (PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) wglGetProcAddress ("wglBlitContextFramebufferAMD");
  }

  // WGL_ARB_buffer_region
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_buffer_region])
  {
    s_deviceConfig.m_wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC) wglGetProcAddress ("wglCreateBufferRegionARB");
    s_deviceConfig.m_wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC) wglGetProcAddress ("wglDeleteBufferRegionARB");
    s_deviceConfig.m_wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC) wglGetProcAddress ("wglSaveBufferRegionARB");
    s_deviceConfig.m_wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC) wglGetProcAddress ("wglRestoreBufferRegionARB");
  }

  // WGL_ARB_create_context
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context])
  {
    s_deviceConfig.m_wglCreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC) wglGetProcAddress ("wglCreateContextAttribsARB");
  }

  // WGL_ARB_extensions_string
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_extensions_string])
  {
    s_deviceConfig.m_wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) wglGetProcAddress ("wglGetExtensionsStringARB");
  }

  // WGL_ARB_make_current_read
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_make_current_read])
  {
    s_deviceConfig.m_wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC) wglGetProcAddress ("wglMakeContextCurrentARB");
    s_deviceConfig.m_wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC) wglGetProcAddress ("wglGetCurrentReadDCARB");
  }

  // WGL_ARB_pbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pbuffer])
  {
    s_deviceConfig.m_wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC) wglGetProcAddress ("wglCreatePbufferARB");
    s_deviceConfig.m_wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC) wglGetProcAddress ("wglGetPbufferDCARB");
    s_deviceConfig.m_wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC) wglGetProcAddress ("wglReleasePbufferDCARB");
    s_deviceConfig.m_wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC) wglGetProcAddress ("wglDestroyPbufferARB");
    s_deviceConfig.m_wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC) wglGetProcAddress ("wglQueryPbufferARB");
  }

  // WGL_ARB_pixel_format
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format])
  {
    s_deviceConfig.m_wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC) wglGetProcAddress ("wglGetPixelFormatAttribivARB");
    s_deviceConfig.m_wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC) wglGetProcAddress ("wglGetPixelFormatAttribfvARB");
    s_deviceConfig.m_wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC) wglGetProcAddress ("wglChoosePixelFormatARB");
  }

  // WGL_ARB_render_texture
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_render_texture])
  {
    s_deviceConfig.m_wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC) wglGetProcAddress ("wglBindTexImageARB");
    s_deviceConfig.m_wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC) wglGetProcAddress ("wglReleaseTexImageARB");
    s_deviceConfig.m_wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC) wglGetProcAddress ("wglSetPbufferAttribARB");
  }

  // WGL_EXT_display_color_table
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_display_color_table])
  {
    s_deviceConfig.m_wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) wglGetProcAddress ("wglCreateDisplayColorTableEXT");
    s_deviceConfig.m_wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) wglGetProcAddress ("wglLoadDisplayColorTableEXT");
    s_deviceConfig.m_wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) wglGetProcAddress ("wglBindDisplayColorTableEXT");
    s_deviceConfig.m_wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) wglGetProcAddress ("wglDestroyDisplayColorTableEXT");
  }

  // WGL_EXT_extensions_string
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_extensions_string])
  {
    s_deviceConfig.m_wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) wglGetProcAddress ("wglGetExtensionsStringEXT");
  }

  // WGL_EXT_make_current_read
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_make_current_read])
  {
    s_deviceConfig.m_wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC) wglGetProcAddress ("wglMakeContextCurrentEXT");
    s_deviceConfig.m_wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC) wglGetProcAddress ("wglGetCurrentReadDCEXT");
  }

  // WGL_EXT_pbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pbuffer])
  {
    s_deviceConfig.m_wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC) wglGetProcAddress ("wglCreatePbufferEXT");
    s_deviceConfig.m_wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC) wglGetProcAddress ("wglGetPbufferDCEXT");
    s_deviceConfig.m_wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC) wglGetProcAddress ("wglReleasePbufferDCEXT");
    s_deviceConfig.m_wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC) wglGetProcAddress ("wglDestroyPbufferEXT");
    s_deviceConfig.m_wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC) wglGetProcAddress ("wglQueryPbufferEXT");
  }

  // WGL_EXT_pixel_format
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format])
  {
    s_deviceConfig.m_wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) wglGetProcAddress ("wglGetPixelFormatAttribivEXT");
    s_deviceConfig.m_wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) wglGetProcAddress ("wglGetPixelFormatAttribfvEXT");
    s_deviceConfig.m_wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC) wglGetProcAddress ("wglChoosePixelFormatEXT");
  }

  // WGL_EXT_swap_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control])
  {
    s_deviceConfig.m_wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC) wglGetProcAddress ("wglSwapIntervalEXT");
    s_deviceConfig.m_wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC) wglGetProcAddress ("wglGetSwapIntervalEXT");
  }

  // WGL_I3D_digital_video_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_digital_video_control])
  {
    s_deviceConfig.m_wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) wglGetProcAddress ("wglGetDigitalVideoParametersI3D");
    s_deviceConfig.m_wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) wglGetProcAddress ("wglSetDigitalVideoParametersI3D");
  }

  // WGL_I3D_gamma
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_gamma])
  {
    s_deviceConfig.m_wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) wglGetProcAddress ("wglGetGammaTableParametersI3D");
    s_deviceConfig.m_wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) wglGetProcAddress ("wglSetGammaTableParametersI3D");
    s_deviceConfig.m_wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC) wglGetProcAddress ("wglGetGammaTableI3D");
    s_deviceConfig.m_wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC) wglGetProcAddress ("wglSetGammaTableI3D");
  }

  // WGL_I3D_genlock
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_genlock])
  {
    s_deviceConfig.m_wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC) wglGetProcAddress ("wglEnableGenlockI3D");
    s_deviceConfig.m_wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC) wglGetProcAddress ("wglDisableGenlockI3D");
    s_deviceConfig.m_wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC) wglGetProcAddress ("wglIsEnabledGenlockI3D");
    s_deviceConfig.m_wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC) wglGetProcAddress ("wglGenlockSourceI3D");
    s_deviceConfig.m_wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC) wglGetProcAddress ("wglGetGenlockSourceI3D");
    s_deviceConfig.m_wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC) wglGetProcAddress ("wglGenlockSourceEdgeI3D");
    s_deviceConfig.m_wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) wglGetProcAddress ("wglGetGenlockSourceEdgeI3D");
    s_deviceConfig.m_wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC) wglGetProcAddress ("wglGenlockSampleRateI3D");
    s_deviceConfig.m_wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC) wglGetProcAddress ("wglGetGenlockSampleRateI3D");
    s_deviceConfig.m_wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC) wglGetProcAddress ("wglGenlockSourceDelayI3D");
    s_deviceConfig.m_wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) wglGetProcAddress ("wglGetGenlockSourceDelayI3D");
    s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) wglGetProcAddress ("wglQueryGenlockMaxSourceDelayI3D");
  }

  // WGL_I3D_image_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_image_buffer])
  {
    s_deviceConfig.m_wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC) wglGetProcAddress ("wglCreateImageBufferI3D");
    s_deviceConfig.m_wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC) wglGetProcAddress ("wglDestroyImageBufferI3D");
    s_deviceConfig.m_wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) wglGetProcAddress ("wglAssociateImageBufferEventsI3D");
    s_deviceConfig.m_wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) wglGetProcAddress ("wglReleaseImageBufferEventsI3D");
  }

  // WGL_I3D_swap_frame_lock
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_lock])
  {
    s_deviceConfig.m_wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC) wglGetProcAddress ("wglEnableFrameLockI3D");
    s_deviceConfig.m_wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC) wglGetProcAddress ("wglDisableFrameLockI3D");
    s_deviceConfig.m_wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC) wglGetProcAddress ("wglIsEnabledFrameLockI3D");
    s_deviceConfig.m_wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC) wglGetProcAddress ("wglQueryFrameLockMasterI3D");
  }

  // WGL_I3D_swap_frame_usage
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_usage])
  {
    s_deviceConfig.m_wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC) wglGetProcAddress ("wglGetFrameUsageI3D");
    s_deviceConfig.m_wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC) wglGetProcAddress ("wglBeginFrameTrackingI3D");
    s_deviceConfig.m_wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC) wglGetProcAddress ("wglEndFrameTrackingI3D");
    s_deviceConfig.m_wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC) wglGetProcAddress ("wglQueryFrameTrackingI3D");
  }

  // WGL_NV_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_copy_image])
  {
    s_deviceConfig.m_wglCopyImageSubDataNV = (PFNWGLCOPYIMAGESUBDATANVPROC) wglGetProcAddress ("wglCopyImageSubDataNV");
  }

  // WGL_NV_delay_before_swap
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_delay_before_swap])
  {
    s_deviceConfig.m_wglDelayBeforeSwapNV = (PFNWGLDELAYBEFORESWAPNVPROC) wglGetProcAddress ("wglDelayBeforeSwapNV");
  }

  // WGL_NV_DX_interop
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop])
  {
    s_deviceConfig.m_wglDXSetResourceShareHandleNV = (PFNWGLDXSETRESOURCESHAREHANDLENVPROC) wglGetProcAddress ("wglDXSetResourceShareHandleNV");
    s_deviceConfig.m_wglDXOpenDeviceNV = (PFNWGLDXOPENDEVICENVPROC) wglGetProcAddress ("wglDXOpenDeviceNV");
    s_deviceConfig.m_wglDXCloseDeviceNV = (PFNWGLDXCLOSEDEVICENVPROC) wglGetProcAddress ("wglDXCloseDeviceNV");
    s_deviceConfig.m_wglDXRegisterObjectNV = (PFNWGLDXREGISTEROBJECTNVPROC) wglGetProcAddress ("wglDXRegisterObjectNV");
    s_deviceConfig.m_wglDXUnregisterObjectNV = (PFNWGLDXUNREGISTEROBJECTNVPROC) wglGetProcAddress ("wglDXUnregisterObjectNV");
    s_deviceConfig.m_wglDXObjectAccessNV = (PFNWGLDXOBJECTACCESSNVPROC) wglGetProcAddress ("wglDXObjectAccessNV");
    s_deviceConfig.m_wglDXLockObjectsNV = (PFNWGLDXLOCKOBJECTSNVPROC) wglGetProcAddress ("wglDXLockObjectsNV");
    s_deviceConfig.m_wglDXUnlockObjectsNV = (PFNWGLDXUNLOCKOBJECTSNVPROC) wglGetProcAddress ("wglDXUnlockObjectsNV");
  }

  // WGL_NV_gpu_affinity
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_gpu_affinity])
  {
    s_deviceConfig.m_wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC) wglGetProcAddress ("wglEnumGpusNV");
    s_deviceConfig.m_wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC) wglGetProcAddress ("wglEnumGpuDevicesNV");
    s_deviceConfig.m_wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC) wglGetProcAddress ("wglCreateAffinityDCNV");
    s_deviceConfig.m_wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) wglGetProcAddress ("wglEnumGpusFromAffinityDCNV");
    s_deviceConfig.m_wglDeleteDCNV = (PFNWGLDELETEDCNVPROC) wglGetProcAddress ("wglDeleteDCNV");
  }

  // WGL_NV_present_video
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_present_video])
  {
    s_deviceConfig.m_wglEnumerateVideoDevicesNV = (PFNWGLENUMERATEVIDEODEVICESNVPROC) wglGetProcAddress ("wglEnumerateVideoDevicesNV");
    s_deviceConfig.m_wglBindVideoDeviceNV = (PFNWGLBINDVIDEODEVICENVPROC) wglGetProcAddress ("wglBindVideoDeviceNV");
    s_deviceConfig.m_wglQueryCurrentContextNV = (PFNWGLQUERYCURRENTCONTEXTNVPROC) wglGetProcAddress ("wglQueryCurrentContextNV");
  }

  // WGL_NV_swap_group
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_swap_group])
  {
    s_deviceConfig.m_wglJoinSwapGroupNV = (PFNWGLJOINSWAPGROUPNVPROC) wglGetProcAddress ("wglJoinSwapGroupNV");
    s_deviceConfig.m_wglBindSwapBarrierNV = (PFNWGLBINDSWAPBARRIERNVPROC) wglGetProcAddress ("wglBindSwapBarrierNV");
    s_deviceConfig.m_wglQuerySwapGroupNV = (PFNWGLQUERYSWAPGROUPNVPROC) wglGetProcAddress ("wglQuerySwapGroupNV");
    s_deviceConfig.m_wglQueryMaxSwapGroupsNV = (PFNWGLQUERYMAXSWAPGROUPSNVPROC) wglGetProcAddress ("wglQueryMaxSwapGroupsNV");
    s_deviceConfig.m_wglQueryFrameCountNV = (PFNWGLQUERYFRAMECOUNTNVPROC) wglGetProcAddress ("wglQueryFrameCountNV");
    s_deviceConfig.m_wglResetFrameCountNV = (PFNWGLRESETFRAMECOUNTNVPROC) wglGetProcAddress ("wglResetFrameCountNV");
  }

  // WGL_NV_video_capture
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_capture])
  {
    s_deviceConfig.m_wglBindVideoCaptureDeviceNV = (PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) wglGetProcAddress ("wglBindVideoCaptureDeviceNV");
    s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV = (PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) wglGetProcAddress ("wglEnumerateVideoCaptureDevicesNV");
    s_deviceConfig.m_wglLockVideoCaptureDeviceNV = (PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) wglGetProcAddress ("wglLockVideoCaptureDeviceNV");
    s_deviceConfig.m_wglQueryVideoCaptureDeviceNV = (PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) wglGetProcAddress ("wglQueryVideoCaptureDeviceNV");
    s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV = (PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) wglGetProcAddress ("wglReleaseVideoCaptureDeviceNV");
  }

  // WGL_NV_video_output
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_output])
  {
    s_deviceConfig.m_wglGetVideoDeviceNV = (PFNWGLGETVIDEODEVICENVPROC) wglGetProcAddress ("wglGetVideoDeviceNV");
    s_deviceConfig.m_wglReleaseVideoDeviceNV = (PFNWGLRELEASEVIDEODEVICENVPROC) wglGetProcAddress ("wglReleaseVideoDeviceNV");
    s_deviceConfig.m_wglBindVideoImageNV = (PFNWGLBINDVIDEOIMAGENVPROC) wglGetProcAddress ("wglBindVideoImageNV");
    s_deviceConfig.m_wglReleaseVideoImageNV = (PFNWGLRELEASEVIDEOIMAGENVPROC) wglGetProcAddress ("wglReleaseVideoImageNV");
    s_deviceConfig.m_wglSendPbufferToVideoNV = (PFNWGLSENDPBUFFERTOVIDEONVPROC) wglGetProcAddress ("wglSendPbufferToVideoNV");
    s_deviceConfig.m_wglGetVideoInfoNV = (PFNWGLGETVIDEOINFONVPROC) wglGetProcAddress ("wglGetVideoInfoNV");
  }

  // WGL_NV_vertex_array_range
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_vertex_array_range])
  {
    s_deviceConfig.m_wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC) wglGetProcAddress ("wglAllocateMemoryNV");
    s_deviceConfig.m_wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC) wglGetProcAddress ("wglFreeMemoryNV");
  }

  // WGL_OML_sync_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_OML_sync_control])
  {
    s_deviceConfig.m_wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC) wglGetProcAddress ("wglGetSyncValuesOML");
    s_deviceConfig.m_wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC) wglGetProcAddress ("wglGetMscRateOML");
    s_deviceConfig.m_wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC) wglGetProcAddress ("wglSwapBuffersMscOML");
    s_deviceConfig.m_wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) wglGetProcAddress ("wglSwapLayerBuffersMscOML");
    s_deviceConfig.m_wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC) wglGetProcAddress ("wglWaitForMscOML");
    s_deviceConfig.m_wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC) wglGetProcAddress ("wglWaitForSbcOML");
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::wgl::Deinitialise ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
