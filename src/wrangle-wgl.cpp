////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-wgl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int ChoosePixelFormat (HDC hDc, const PIXELFORMATDESCRIPTOR * pPfd)
{
  // WGL_VERSION_1_0 - ChoosePixelFormat
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_ChoosePixelFormat)
  {
    return deviceState->m_ChoosePixelFormat (hDc, pPfd);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int DescribePixelFormat (HDC hdc, int ipfd, UINT cjpfd, const PIXELFORMATDESCRIPTOR * ppfd)
{
  // WGL_VERSION_1_0 - DescribePixelFormat
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_DescribePixelFormat)
  {
    return deviceState->m_DescribePixelFormat (hdc, ipfd, cjpfd, ppfd);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT GetEnhMetaFilePixelFormat (HENHMETAFILE hemf, const PIXELFORMATDESCRIPTOR * ppfd)
{
  // WGL_VERSION_1_0 - GetEnhMetaFilePixelFormat
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_GetEnhMetaFilePixelFormat)
  {
    return deviceState->m_GetEnhMetaFilePixelFormat (hemf, ppfd);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int GetPixelFormat (HDC hdc)
{
  // WGL_VERSION_1_0 - GetPixelFormat
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_GetPixelFormat)
  {
    return deviceState->m_GetPixelFormat (hdc);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL SetPixelFormat (HDC hdc, int ipfd, const PIXELFORMATDESCRIPTOR * ppfd)
{
  // WGL_VERSION_1_0 - SetPixelFormat
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_SetPixelFormat)
  {
    return deviceState->m_SetPixelFormat (hdc, ipfd, ppfd);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL SwapBuffers (HDC hdc)
{
  // WGL_VERSION_1_0 - SwapBuffers
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_SwapBuffers)
  {
    return deviceState->m_SwapBuffers (hdc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglCopyContext (HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
{
  // WGL_VERSION_1_0 - wglCopyContext
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCopyContext)
  {
    return deviceState->m_wglCopyContext (hglrcSrc, hglrcDst, mask);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateContext (HDC hDc)
{
  // WGL_VERSION_1_0 - wglCreateContext
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateContext)
  {
    return deviceState->m_wglCreateContext (hDc);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateLayerContext (HDC hDc, int level)
{
  // WGL_VERSION_1_0 - wglCreateLayerContext
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateLayerContext)
  {
    return deviceState->m_wglCreateLayerContext (hDc, level);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDeleteContext (HGLRC oldContext)
{
  // WGL_VERSION_1_0 - wglDeleteContext
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDeleteContext)
  {
    return deviceState->m_wglDeleteContext (oldContext);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDescribeLayerPlane (HDC hDc, int pixelFormat, int layerPlane, UINT nBytes, const LAYERPLANEDESCRIPTOR * plpd)
{
  // WGL_VERSION_1_0 - wglDescribeLayerPlane
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDescribeLayerPlane)
  {
    return deviceState->m_wglDescribeLayerPlane (hDc, pixelFormat, layerPlane, nBytes, plpd);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglGetCurrentContext ()
{
  // WGL_VERSION_1_0 - wglGetCurrentContext
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetCurrentContext)
  {
    return deviceState->m_wglGetCurrentContext ();
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetCurrentDC ()
{
  // WGL_VERSION_1_0 - wglGetCurrentDC
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetCurrentDC)
  {
    return deviceState->m_wglGetCurrentDC ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglGetLayerPaletteEntries (HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF * pcr)
{
  // WGL_VERSION_1_0 - wglGetLayerPaletteEntries
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetLayerPaletteEntries)
  {
    return deviceState->m_wglGetLayerPaletteEntries (hdc, iLayerPlane, iStart, cEntries, pcr);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PROC wglGetProcAddress (LPCSTR lpszProc)
{
  // WGL_VERSION_1_0 - wglGetProcAddress
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetProcAddress)
  {
    return deviceState->m_wglGetProcAddress (lpszProc);
  }
  return ((PROC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeCurrent (HDC hDc, HGLRC newContext)
{
  // WGL_VERSION_1_0 - wglMakeCurrent
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglMakeCurrent)
  {
    return deviceState->m_wglMakeCurrent (hDc, newContext);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglRealizeLayerPalette (HDC hdc, int iLayerPlane, BOOL bRealize)
{
  // WGL_VERSION_1_0 - wglRealizeLayerPalette
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglRealizeLayerPalette)
  {
    return deviceState->m_wglRealizeLayerPalette (hdc, iLayerPlane, bRealize);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglSetLayerPaletteEntries (HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF * pcr)
{
  // WGL_VERSION_1_0 - wglSetLayerPaletteEntries
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetLayerPaletteEntries)
  {
    return deviceState->m_wglSetLayerPaletteEntries (hdc, iLayerPlane, iStart, cEntries, pcr);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglShareLists (HGLRC hrcSrvShare, HGLRC hrcSrvSource)
{
  // WGL_VERSION_1_0 - wglShareLists
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglShareLists)
  {
    return deviceState->m_wglShareLists (hrcSrvShare, hrcSrvSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSwapLayerBuffers (HDC hdc, UINT fuFlags)
{
  // WGL_VERSION_1_0 - wglSwapLayerBuffers
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSwapLayerBuffers)
  {
    return deviceState->m_wglSwapLayerBuffers (hdc, fuFlags);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontBitmaps (HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  // WGL_VERSION_1_0 - wglUseFontBitmaps
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontBitmaps)
  {
    return deviceState->m_wglUseFontBitmaps (hDC, first, count, listBase);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontBitmapsA (HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  // WGL_VERSION_1_0 - wglUseFontBitmapsA
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontBitmapsA)
  {
    return deviceState->m_wglUseFontBitmapsA (hDC, first, count, listBase);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontBitmapsW (HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
  // WGL_VERSION_1_0 - wglUseFontBitmapsW
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontBitmapsW)
  {
    return deviceState->m_wglUseFontBitmapsW (hDC, first, count, listBase);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontOutlines (HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  // WGL_VERSION_1_0 - wglUseFontOutlines
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontOutlines)
  {
    return deviceState->m_wglUseFontOutlines (hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontOutlinesA (HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  // WGL_VERSION_1_0 - wglUseFontOutlinesA
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontOutlinesA)
  {
    return deviceState->m_wglUseFontOutlinesA (hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglUseFontOutlinesW (HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
  // WGL_VERSION_1_0 - wglUseFontOutlinesW
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglUseFontOutlinesW)
  {
    return deviceState->m_wglUseFontOutlinesW (hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetStereoEmitterState3DL (HDC hDC, UINT uState)
{
  // WGL_3DL_stereo_control - wglSetStereoEmitterState3DL
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetStereoEmitterState3DL)
  {
    return deviceState->m_wglSetStereoEmitterState3DL (hDC, uState);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglGetGPUIDsAMD (UINT maxCount, UINT * ids)
{
  // WGL_AMD_gpu_association - wglGetGPUIDsAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGPUIDsAMD)
  {
    return deviceState->m_wglGetGPUIDsAMD (maxCount, ids);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT wglGetGPUInfoAMD (UINT id, int property, GLenum dataType, UINT size, void * data)
{
  // WGL_AMD_gpu_association - wglGetGPUInfoAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGPUInfoAMD)
  {
    return deviceState->m_wglGetGPUInfoAMD (id, property, dataType, size, data);
  }
  return ((INT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglGetContextGPUIDAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglGetContextGPUIDAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetContextGPUIDAMD)
  {
    return deviceState->m_wglGetContextGPUIDAMD (hglrc);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateAssociatedContextAMD (UINT id)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateAssociatedContextAMD)
  {
    return deviceState->m_wglCreateAssociatedContextAMD (id);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateAssociatedContextAttribsAMD (UINT id, HGLRC hShareContext, const int * attribList)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAttribsAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateAssociatedContextAttribsAMD)
  {
    return deviceState->m_wglCreateAssociatedContextAttribsAMD (id, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDeleteAssociatedContextAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglDeleteAssociatedContextAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDeleteAssociatedContextAMD)
  {
    return deviceState->m_wglDeleteAssociatedContextAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeAssociatedContextCurrentAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglMakeAssociatedContextCurrentAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglMakeAssociatedContextCurrentAMD)
  {
    return deviceState->m_wglMakeAssociatedContextCurrentAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglGetCurrentAssociatedContextAMD ()
{
  // WGL_AMD_gpu_association - wglGetCurrentAssociatedContextAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetCurrentAssociatedContextAMD)
  {
    return deviceState->m_wglGetCurrentAssociatedContextAMD ();
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglBlitContextFramebufferAMD (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // WGL_AMD_gpu_association - wglBlitContextFramebufferAMD
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBlitContextFramebufferAMD)
  {
    return deviceState->m_wglBlitContextFramebufferAMD (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglCreateBufferRegionARB (HDC hDC, int iLayerPlane, UINT uType)
{
  // WGL_ARB_buffer_region - wglCreateBufferRegionARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateBufferRegionARB)
  {
    return deviceState->m_wglCreateBufferRegionARB (hDC, iLayerPlane, uType);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglDeleteBufferRegionARB (HANDLE hRegion)
{
  // WGL_ARB_buffer_region - wglDeleteBufferRegionARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDeleteBufferRegionARB)
  {
    return deviceState->m_wglDeleteBufferRegionARB (hRegion);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSaveBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height)
{
  // WGL_ARB_buffer_region - wglSaveBufferRegionARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSaveBufferRegionARB)
  {
    return deviceState->m_wglSaveBufferRegionARB (hRegion, x, y, width, height);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglRestoreBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
  // WGL_ARB_buffer_region - wglRestoreBufferRegionARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglRestoreBufferRegionARB)
  {
    return deviceState->m_wglRestoreBufferRegionARB (hRegion, x, y, width, height, xSrc, ySrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateContextAttribsARB (HDC hDC, HGLRC hShareContext, const int * attribList)
{
  // WGL_ARB_create_context - wglCreateContextAttribsARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateContextAttribsARB)
  {
    return deviceState->m_wglCreateContextAttribsARB (hDC, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * wglGetExtensionsStringARB (HDC hdc)
{
  // WGL_ARB_extensions_string - wglGetExtensionsStringARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetExtensionsStringARB)
  {
    return deviceState->m_wglGetExtensionsStringARB (hdc);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeContextCurrentARB (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_ARB_make_current_read - wglMakeContextCurrentARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglMakeContextCurrentARB)
  {
    return deviceState->m_wglMakeContextCurrentARB (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetCurrentReadDCARB ()
{
  // WGL_ARB_make_current_read - wglGetCurrentReadDCARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetCurrentReadDCARB)
  {
    return deviceState->m_wglGetCurrentReadDCARB ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFERARB wglCreatePbufferARB (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList)
{
  // WGL_ARB_pbuffer - wglCreatePbufferARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreatePbufferARB)
  {
    return deviceState->m_wglCreatePbufferARB (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFERARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetPbufferDCARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglGetPbufferDCARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPbufferDCARB)
  {
    return deviceState->m_wglGetPbufferDCARB (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglReleasePbufferDCARB (HPBUFFERARB hPbuffer, HDC hDC)
{
  // WGL_ARB_pbuffer - wglReleasePbufferDCARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleasePbufferDCARB)
  {
    return deviceState->m_wglReleasePbufferDCARB (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyPbufferARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglDestroyPbufferARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDestroyPbufferARB)
  {
    return deviceState->m_wglDestroyPbufferARB (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryPbufferARB (HPBUFFERARB hPbuffer, int iAttribute, int * piValue)
{
  // WGL_ARB_pbuffer - wglQueryPbufferARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryPbufferARB)
  {
    return deviceState->m_wglQueryPbufferARB (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribivARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, int * piValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribivARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPixelFormatAttribivARB)
  {
    return deviceState->m_wglGetPixelFormatAttribivARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribfvARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, FLOAT * pfValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribfvARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPixelFormatAttribfvARB)
  {
    return deviceState->m_wglGetPixelFormatAttribfvARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglChoosePixelFormatARB (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_ARB_pixel_format - wglChoosePixelFormatARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglChoosePixelFormatARB)
  {
    return deviceState->m_wglChoosePixelFormatARB (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindTexImageARB (HPBUFFERARB hPbuffer, int iBuffer)
{
  // WGL_ARB_render_texture - wglBindTexImageARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindTexImageARB)
  {
    return deviceState->m_wglBindTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseTexImageARB (HPBUFFERARB hPbuffer, int iBuffer)
{
  // WGL_ARB_render_texture - wglReleaseTexImageARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleaseTexImageARB)
  {
    return deviceState->m_wglReleaseTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetPbufferAttribARB (HPBUFFERARB hPbuffer, const int * piAttribList)
{
  // WGL_ARB_render_texture - wglSetPbufferAttribARB
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetPbufferAttribARB)
  {
    return deviceState->m_wglSetPbufferAttribARB (hPbuffer, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglCreateDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglCreateDisplayColorTableEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateDisplayColorTableEXT)
  {
    return deviceState->m_wglCreateDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglLoadDisplayColorTableEXT (const GLushort * table, GLuint length)
{
  // WGL_EXT_display_color_table - wglLoadDisplayColorTableEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglLoadDisplayColorTableEXT)
  {
    return deviceState->m_wglLoadDisplayColorTableEXT (table, length);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglBindDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglBindDisplayColorTableEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindDisplayColorTableEXT)
  {
    return deviceState->m_wglBindDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglDestroyDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglDestroyDisplayColorTableEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDestroyDisplayColorTableEXT)
  {
    return deviceState->m_wglDestroyDisplayColorTableEXT (id);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * wglGetExtensionsStringEXT ()
{
  // WGL_EXT_extensions_string - wglGetExtensionsStringEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetExtensionsStringEXT)
  {
    return deviceState->m_wglGetExtensionsStringEXT ();
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeContextCurrentEXT (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_EXT_make_current_read - wglMakeContextCurrentEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglMakeContextCurrentEXT)
  {
    return deviceState->m_wglMakeContextCurrentEXT (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetCurrentReadDCEXT ()
{
  // WGL_EXT_make_current_read - wglGetCurrentReadDCEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetCurrentReadDCEXT)
  {
    return deviceState->m_wglGetCurrentReadDCEXT ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFEREXT wglCreatePbufferEXT (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList)
{
  // WGL_EXT_pbuffer - wglCreatePbufferEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreatePbufferEXT)
  {
    return deviceState->m_wglCreatePbufferEXT (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFEREXT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetPbufferDCEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglGetPbufferDCEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPbufferDCEXT)
  {
    return deviceState->m_wglGetPbufferDCEXT (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglReleasePbufferDCEXT (HPBUFFEREXT hPbuffer, HDC hDC)
{
  // WGL_EXT_pbuffer - wglReleasePbufferDCEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleasePbufferDCEXT)
  {
    return deviceState->m_wglReleasePbufferDCEXT (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyPbufferEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglDestroyPbufferEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDestroyPbufferEXT)
  {
    return deviceState->m_wglDestroyPbufferEXT (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryPbufferEXT (HPBUFFEREXT hPbuffer, int iAttribute, int * piValue)
{
  // WGL_EXT_pbuffer - wglQueryPbufferEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryPbufferEXT)
  {
    return deviceState->m_wglQueryPbufferEXT (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribivEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribivEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPixelFormatAttribivEXT)
  {
    return deviceState->m_wglGetPixelFormatAttribivEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribfvEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribfvEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetPixelFormatAttribfvEXT)
  {
    return deviceState->m_wglGetPixelFormatAttribfvEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglChoosePixelFormatEXT (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_EXT_pixel_format - wglChoosePixelFormatEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglChoosePixelFormatEXT)
  {
    return deviceState->m_wglChoosePixelFormatEXT (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSwapIntervalEXT (int interval)
{
  // WGL_EXT_swap_control - wglSwapIntervalEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSwapIntervalEXT)
  {
    return deviceState->m_wglSwapIntervalEXT (interval);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglGetSwapIntervalEXT ()
{
  // WGL_EXT_swap_control - wglGetSwapIntervalEXT
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetSwapIntervalEXT)
  {
    return deviceState->m_wglGetSwapIntervalEXT ();
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetDigitalVideoParametersI3D (HDC hDC, int iAttribute, int * piValue)
{
  // WGL_I3D_digital_video_control - wglGetDigitalVideoParametersI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetDigitalVideoParametersI3D)
  {
    return deviceState->m_wglGetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetDigitalVideoParametersI3D (HDC hDC, int iAttribute, const int * piValue)
{
  // WGL_I3D_digital_video_control - wglSetDigitalVideoParametersI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetDigitalVideoParametersI3D)
  {
    return deviceState->m_wglSetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGammaTableParametersI3D (HDC hDC, int iAttribute, int * piValue)
{
  // WGL_I3D_gamma - wglGetGammaTableParametersI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGammaTableParametersI3D)
  {
    return deviceState->m_wglGetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetGammaTableParametersI3D (HDC hDC, int iAttribute, const int * piValue)
{
  // WGL_I3D_gamma - wglSetGammaTableParametersI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetGammaTableParametersI3D)
  {
    return deviceState->m_wglSetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGammaTableI3D (HDC hDC, int iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue)
{
  // WGL_I3D_gamma - wglGetGammaTableI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGammaTableI3D)
  {
    return deviceState->m_wglGetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetGammaTableI3D (HDC hDC, int iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue)
{
  // WGL_I3D_gamma - wglSetGammaTableI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSetGammaTableI3D)
  {
    return deviceState->m_wglSetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglEnableGenlockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnableGenlockI3D)
  {
    return deviceState->m_wglEnableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDisableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglDisableGenlockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDisableGenlockI3D)
  {
    return deviceState->m_wglDisableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglIsEnabledGenlockI3D (HDC hDC, BOOL * pFlag)
{
  // WGL_I3D_genlock - wglIsEnabledGenlockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglIsEnabledGenlockI3D)
  {
    return deviceState->m_wglIsEnabledGenlockI3D (hDC, pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceI3D (HDC hDC, UINT uSource)
{
  // WGL_I3D_genlock - wglGenlockSourceI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGenlockSourceI3D)
  {
    return deviceState->m_wglGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceI3D (HDC hDC, UINT * uSource)
{
  // WGL_I3D_genlock - wglGetGenlockSourceI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGenlockSourceI3D)
  {
    return deviceState->m_wglGetGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceEdgeI3D (HDC hDC, UINT uEdge)
{
  // WGL_I3D_genlock - wglGenlockSourceEdgeI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGenlockSourceEdgeI3D)
  {
    return deviceState->m_wglGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceEdgeI3D (HDC hDC, UINT * uEdge)
{
  // WGL_I3D_genlock - wglGetGenlockSourceEdgeI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGenlockSourceEdgeI3D)
  {
    return deviceState->m_wglGetGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSampleRateI3D (HDC hDC, UINT uRate)
{
  // WGL_I3D_genlock - wglGenlockSampleRateI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGenlockSampleRateI3D)
  {
    return deviceState->m_wglGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSampleRateI3D (HDC hDC, UINT * uRate)
{
  // WGL_I3D_genlock - wglGetGenlockSampleRateI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGenlockSampleRateI3D)
  {
    return deviceState->m_wglGetGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceDelayI3D (HDC hDC, UINT uDelay)
{
  // WGL_I3D_genlock - wglGenlockSourceDelayI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGenlockSourceDelayI3D)
  {
    return deviceState->m_wglGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceDelayI3D (HDC hDC, UINT * uDelay)
{
  // WGL_I3D_genlock - wglGetGenlockSourceDelayI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetGenlockSourceDelayI3D)
  {
    return deviceState->m_wglGetGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryGenlockMaxSourceDelayI3D (HDC hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay)
{
  // WGL_I3D_genlock - wglQueryGenlockMaxSourceDelayI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryGenlockMaxSourceDelayI3D)
  {
    return deviceState->m_wglQueryGenlockMaxSourceDelayI3D (hDC, uMaxLineDelay, uMaxPixelDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LPVOID wglCreateImageBufferI3D (HDC hDC, DWORD dwSize, UINT uFlags)
{
  // WGL_I3D_image_buffer - wglCreateImageBufferI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateImageBufferI3D)
  {
    return deviceState->m_wglCreateImageBufferI3D (hDC, dwSize, uFlags);
  }
  return ((LPVOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyImageBufferI3D (HDC hDC, LPVOID pAddress)
{
  // WGL_I3D_image_buffer - wglDestroyImageBufferI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDestroyImageBufferI3D)
  {
    return deviceState->m_wglDestroyImageBufferI3D (hDC, pAddress);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglAssociateImageBufferEventsI3D (HDC hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT count)
{
  // WGL_I3D_image_buffer - wglAssociateImageBufferEventsI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglAssociateImageBufferEventsI3D)
  {
    return deviceState->m_wglAssociateImageBufferEventsI3D (hDC, pEvent, pAddress, pSize, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseImageBufferEventsI3D (HDC hDC, const LPVOID * pAddress, UINT count)
{
  // WGL_I3D_image_buffer - wglReleaseImageBufferEventsI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleaseImageBufferEventsI3D)
  {
    return deviceState->m_wglReleaseImageBufferEventsI3D (hDC, pAddress, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglEnableFrameLockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnableFrameLockI3D)
  {
    return deviceState->m_wglEnableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDisableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglDisableFrameLockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDisableFrameLockI3D)
  {
    return deviceState->m_wglDisableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglIsEnabledFrameLockI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglIsEnabledFrameLockI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglIsEnabledFrameLockI3D)
  {
    return deviceState->m_wglIsEnabledFrameLockI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameLockMasterI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglQueryFrameLockMasterI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryFrameLockMasterI3D)
  {
    return deviceState->m_wglQueryFrameLockMasterI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetFrameUsageI3D (float * pUsage)
{
  // WGL_I3D_swap_frame_usage - wglGetFrameUsageI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetFrameUsageI3D)
  {
    return deviceState->m_wglGetFrameUsageI3D (pUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBeginFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglBeginFrameTrackingI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBeginFrameTrackingI3D)
  {
    return deviceState->m_wglBeginFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEndFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglEndFrameTrackingI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEndFrameTrackingI3D)
  {
    return deviceState->m_wglEndFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameTrackingI3D (DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage)
{
  // WGL_I3D_swap_frame_usage - wglQueryFrameTrackingI3D
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryFrameTrackingI3D)
  {
    return deviceState->m_wglQueryFrameTrackingI3D (pFrameCount, pMissedFrames, pLastMissedUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglCopyImageSubDataNV (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // WGL_NV_copy_image - wglCopyImageSubDataNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCopyImageSubDataNV)
  {
    return deviceState->m_wglCopyImageSubDataNV (hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDelayBeforeSwapNV (HDC hDC, GLfloat seconds)
{
  // WGL_NV_delay_before_swap - wglDelayBeforeSwapNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDelayBeforeSwapNV)
  {
    return deviceState->m_wglDelayBeforeSwapNV (hDC, seconds);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXSetResourceShareHandleNV (void * dxObject, HANDLE shareHandle)
{
  // WGL_NV_DX_interop - wglDXSetResourceShareHandleNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXSetResourceShareHandleNV)
  {
    return deviceState->m_wglDXSetResourceShareHandleNV (dxObject, shareHandle);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglDXOpenDeviceNV (void * dxDevice)
{
  // WGL_NV_DX_interop - wglDXOpenDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXOpenDeviceNV)
  {
    return deviceState->m_wglDXOpenDeviceNV (dxDevice);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXCloseDeviceNV (HANDLE hDevice)
{
  // WGL_NV_DX_interop - wglDXCloseDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXCloseDeviceNV)
  {
    return deviceState->m_wglDXCloseDeviceNV (hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglDXRegisterObjectNV (HANDLE hDevice, void * dxObject, GLuint name, GLenum type, GLenum access)
{
  // WGL_NV_DX_interop - wglDXRegisterObjectNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXRegisterObjectNV)
  {
    return deviceState->m_wglDXRegisterObjectNV (hDevice, dxObject, name, type, access);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXUnregisterObjectNV (HANDLE hDevice, HANDLE hObject)
{
  // WGL_NV_DX_interop - wglDXUnregisterObjectNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXUnregisterObjectNV)
  {
    return deviceState->m_wglDXUnregisterObjectNV (hDevice, hObject);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXObjectAccessNV (HANDLE hObject, GLenum access)
{
  // WGL_NV_DX_interop - wglDXObjectAccessNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXObjectAccessNV)
  {
    return deviceState->m_wglDXObjectAccessNV (hObject, access);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXLockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXLockObjectsNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXLockObjectsNV)
  {
    return deviceState->m_wglDXLockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXUnlockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXUnlockObjectsNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDXUnlockObjectsNV)
  {
    return deviceState->m_wglDXUnlockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpusNV (UINT iGpuIndex, HGPUNV * phGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnumGpusNV)
  {
    return deviceState->m_wglEnumGpusNV (iGpuIndex, phGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpuDevicesNV (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
  // WGL_NV_gpu_affinity - wglEnumGpuDevicesNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnumGpuDevicesNV)
  {
    return deviceState->m_wglEnumGpuDevicesNV (hGpu, iDeviceIndex, lpGpuDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglCreateAffinityDCNV (const HGPUNV * phGpuList)
{
  // WGL_NV_gpu_affinity - wglCreateAffinityDCNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglCreateAffinityDCNV)
  {
    return deviceState->m_wglCreateAffinityDCNV (phGpuList);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpusFromAffinityDCNV (HDC hAffinityDC, UINT iGpuIndex, HGPUNV * hGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusFromAffinityDCNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnumGpusFromAffinityDCNV)
  {
    return deviceState->m_wglEnumGpusFromAffinityDCNV (hAffinityDC, iGpuIndex, hGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDeleteDCNV (HDC hdc)
{
  // WGL_NV_gpu_affinity - wglDeleteDCNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglDeleteDCNV)
  {
    return deviceState->m_wglDeleteDCNV (hdc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglEnumerateVideoDevicesNV (HDC hDC, HVIDEOOUTPUTDEVICENV * phDeviceList)
{
  // WGL_NV_present_video - wglEnumerateVideoDevicesNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnumerateVideoDevicesNV)
  {
    return deviceState->m_wglEnumerateVideoDevicesNV (hDC, phDeviceList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoDeviceNV (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int * piAttribList)
{
  // WGL_NV_present_video - wglBindVideoDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindVideoDeviceNV)
  {
    return deviceState->m_wglBindVideoDeviceNV (hDC, uVideoSlot, hVideoDevice, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryCurrentContextNV (int iAttribute, int * piValue)
{
  // WGL_NV_present_video - wglQueryCurrentContextNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryCurrentContextNV)
  {
    return deviceState->m_wglQueryCurrentContextNV (iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglJoinSwapGroupNV (HDC hDC, GLuint group)
{
  // WGL_NV_swap_group - wglJoinSwapGroupNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglJoinSwapGroupNV)
  {
    return deviceState->m_wglJoinSwapGroupNV (hDC, group);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindSwapBarrierNV (GLuint group, GLuint barrier)
{
  // WGL_NV_swap_group - wglBindSwapBarrierNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindSwapBarrierNV)
  {
    return deviceState->m_wglBindSwapBarrierNV (group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQuerySwapGroupNV (HDC hDC, GLuint * group, GLuint * barrier)
{
  // WGL_NV_swap_group - wglQuerySwapGroupNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQuerySwapGroupNV)
  {
    return deviceState->m_wglQuerySwapGroupNV (hDC, group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryMaxSwapGroupsNV (HDC hDC, GLuint * maxGroups, GLuint * maxBarriers)
{
  // WGL_NV_swap_group - wglQueryMaxSwapGroupsNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryMaxSwapGroupsNV)
  {
    return deviceState->m_wglQueryMaxSwapGroupsNV (hDC, maxGroups, maxBarriers);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameCountNV (HDC hDC, GLuint * count)
{
  // WGL_NV_swap_group - wglQueryFrameCountNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryFrameCountNV)
  {
    return deviceState->m_wglQueryFrameCountNV (hDC, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglResetFrameCountNV (HDC hDC)
{
  // WGL_NV_swap_group - wglResetFrameCountNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglResetFrameCountNV)
  {
    return deviceState->m_wglResetFrameCountNV (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoCaptureDeviceNV (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglBindVideoCaptureDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindVideoCaptureDeviceNV)
  {
    return deviceState->m_wglBindVideoCaptureDeviceNV (uVideoSlot, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglEnumerateVideoCaptureDevicesNV (HDC hDc, HVIDEOINPUTDEVICENV * phDeviceList)
{
  // WGL_NV_video_capture - wglEnumerateVideoCaptureDevicesNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglEnumerateVideoCaptureDevicesNV)
  {
    return deviceState->m_wglEnumerateVideoCaptureDevicesNV (hDc, phDeviceList);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglLockVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglLockVideoCaptureDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglLockVideoCaptureDeviceNV)
  {
    return deviceState->m_wglLockVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int * piValue)
{
  // WGL_NV_video_capture - wglQueryVideoCaptureDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglQueryVideoCaptureDeviceNV)
  {
    return deviceState->m_wglQueryVideoCaptureDeviceNV (hDc, hDevice, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglReleaseVideoCaptureDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleaseVideoCaptureDeviceNV)
  {
    return deviceState->m_wglReleaseVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetVideoDeviceNV (HDC hDC, int numDevices, HPVIDEODEV * hVideoDevice)
{
  // WGL_NV_video_output - wglGetVideoDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetVideoDeviceNV)
  {
    return deviceState->m_wglGetVideoDeviceNV (hDC, numDevices, hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoDeviceNV (HPVIDEODEV hVideoDevice)
{
  // WGL_NV_video_output - wglReleaseVideoDeviceNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleaseVideoDeviceNV)
  {
    return deviceState->m_wglReleaseVideoDeviceNV (hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoImageNV (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  // WGL_NV_video_output - wglBindVideoImageNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglBindVideoImageNV)
  {
    return deviceState->m_wglBindVideoImageNV (hVideoDevice, hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoImageNV (HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  // WGL_NV_video_output - wglReleaseVideoImageNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglReleaseVideoImageNV)
  {
    return deviceState->m_wglReleaseVideoImageNV (hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSendPbufferToVideoNV (HPBUFFERARB hPbuffer, int iBufferType, unsigned long * pulCounterPbuffer, BOOL bBlock)
{
  // WGL_NV_video_output - wglSendPbufferToVideoNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSendPbufferToVideoNV)
  {
    return deviceState->m_wglSendPbufferToVideoNV (hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetVideoInfoNV (HPVIDEODEV hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)
{
  // WGL_NV_video_output - wglGetVideoInfoNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetVideoInfoNV)
  {
    return deviceState->m_wglGetVideoInfoNV (hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * wglAllocateMemoryNV (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  // WGL_NV_vertex_array_range - wglAllocateMemoryNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglAllocateMemoryNV)
  {
    return deviceState->m_wglAllocateMemoryNV (size, readfreq, writefreq, priority);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void wglFreeMemoryNV (void * pointer)
{
  // WGL_NV_vertex_array_range - wglFreeMemoryNV
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglFreeMemoryNV)
  {
    deviceState->m_wglFreeMemoryNV (pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetSyncValuesOML (HDC hdc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglGetSyncValuesOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetSyncValuesOML)
  {
    return deviceState->m_wglGetSyncValuesOML (hdc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetMscRateOML (HDC hdc, INT32 * numerator, INT32 * denominator)
{
  // WGL_OML_sync_control - wglGetMscRateOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglGetMscRateOML)
  {
    return deviceState->m_wglGetMscRateOML (hdc, numerator, denominator);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 wglSwapBuffersMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapBuffersMscOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSwapBuffersMscOML)
  {
    return deviceState->m_wglSwapBuffersMscOML (hdc, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 wglSwapLayerBuffersMscOML (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapLayerBuffersMscOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglSwapLayerBuffersMscOML)
  {
    return deviceState->m_wglSwapLayerBuffersMscOML (hdc, fuPlanes, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglWaitForMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForMscOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglWaitForMscOML)
  {
    return deviceState->m_wglWaitForMscOML (hdc, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglWaitForSbcOML (HDC hdc, INT64 target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForSbcOML
  const glew::wgl::DeviceState *deviceState = glew::wgl::GetDeviceState ();
  if (deviceState && deviceState->m_wglWaitForSbcOML)
  {
    return deviceState->m_wglWaitForSbcOML (hdc, target_sbc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
