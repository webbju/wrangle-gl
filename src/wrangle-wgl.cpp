////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-wgl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSetStereoEmitterState3DL(HDC hDC, UINT uState) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSetStereoEmitterState3DL) {
    prototypeCalled = true;
    result = wglContext->m_wglSetStereoEmitterState3DL(hDC, uState);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT _glew_wgl_wglGetGPUIDsAMD(UINT maxCount, UINT * ids) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  UINT result = ((UINT)0);
  if (!prototypeCalled && wglContext->m_wglGetGPUIDsAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGPUIDsAMD(maxCount, ids);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT _glew_wgl_wglGetGPUInfoAMD(UINT id, INT property, GLenum dataType, UINT size, void * data) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  INT result = ((INT)0);
  if (!prototypeCalled && wglContext->m_wglGetGPUInfoAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGPUInfoAMD(id, property, dataType, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT _glew_wgl_wglGetContextGPUIDAMD(HGLRC hglrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  UINT result = ((UINT)0);
  if (!prototypeCalled && wglContext->m_wglGetContextGPUIDAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglGetContextGPUIDAMD(hglrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC _glew_wgl_wglCreateAssociatedContextAMD(UINT id) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HGLRC result = ((HGLRC)0);
  if (!prototypeCalled && wglContext->m_wglCreateAssociatedContextAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateAssociatedContextAMD(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC _glew_wgl_wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int * attribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HGLRC result = ((HGLRC)0);
  if (!prototypeCalled && wglContext->m_wglCreateAssociatedContextAttribsAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDeleteAssociatedContextAMD(HGLRC hglrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDeleteAssociatedContextAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglDeleteAssociatedContextAMD(hglrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglMakeAssociatedContextCurrentAMD(HGLRC hglrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglMakeAssociatedContextCurrentAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglMakeAssociatedContextCurrentAMD(hglrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC _glew_wgl_wglGetCurrentAssociatedContextAMD() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HGLRC result = ((HGLRC)0);
  if (!prototypeCalled && wglContext->m_wglGetCurrentAssociatedContextAMD) {
    prototypeCalled = true;
    result = wglContext->m_wglGetCurrentAssociatedContextAMD();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID _glew_wgl_wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  if (!prototypeCalled && wglContext->m_wglBlitContextFramebufferAMD) {
    prototypeCalled = true;
    wglContext->m_wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE _glew_wgl_wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HANDLE result = ((HANDLE)0);
  if (!prototypeCalled && wglContext->m_wglCreateBufferRegionARB) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateBufferRegionARB(hDC, iLayerPlane, uType);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID _glew_wgl_wglDeleteBufferRegionARB(HANDLE hRegion) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  if (!prototypeCalled && wglContext->m_wglDeleteBufferRegionARB) {
    prototypeCalled = true;
    wglContext->m_wglDeleteBufferRegionARB(hRegion);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSaveBufferRegionARB) {
    prototypeCalled = true;
    result = wglContext->m_wglSaveBufferRegionARB(hRegion, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglRestoreBufferRegionARB) {
    prototypeCalled = true;
    result = wglContext->m_wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC _glew_wgl_wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int * attribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HGLRC result = ((HGLRC)0);
  if (!prototypeCalled && wglContext->m_wglCreateContextAttribsARB) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateContextAttribsARB(hDC, hShareContext, attribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_wgl_wglGetExtensionsStringARB(HDC hdc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && wglContext->m_wglGetExtensionsStringARB) {
    prototypeCalled = true;
    result = wglContext->m_wglGetExtensionsStringARB(hdc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglMakeContextCurrentARB) {
    prototypeCalled = true;
    result = wglContext->m_wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC _glew_wgl_wglGetCurrentReadDCARB() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HDC result = ((HDC)0);
  if (!prototypeCalled && wglContext->m_wglGetCurrentReadDCARB) {
    prototypeCalled = true;
    result = wglContext->m_wglGetCurrentReadDCARB();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFERARB _glew_wgl_wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HPBUFFERARB result = ((HPBUFFERARB)0);
  if (!prototypeCalled && wglContext->m_wglCreatePbufferARB) {
    prototypeCalled = true;
    result = wglContext->m_wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC _glew_wgl_wglGetPbufferDCARB(HPBUFFERARB hPbuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HDC result = ((HDC)0);
  if (!prototypeCalled && wglContext->m_wglGetPbufferDCARB) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPbufferDCARB(hPbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_wgl_wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  int result = ((int)0);
  if (!prototypeCalled && wglContext->m_wglReleasePbufferDCARB) {
    prototypeCalled = true;
    result = wglContext->m_wglReleasePbufferDCARB(hPbuffer, hDC);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDestroyPbufferARB(HPBUFFERARB hPbuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDestroyPbufferARB) {
    prototypeCalled = true;
    result = wglContext->m_wglDestroyPbufferARB(hPbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryPbufferARB) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryPbufferARB(hPbuffer, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetPixelFormatAttribivARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, int * piValues) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetPixelFormatAttribivARB) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetPixelFormatAttribfvARB(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, FLOAT * pfValues) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetPixelFormatAttribfvARB) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglChoosePixelFormatARB(HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglChoosePixelFormatARB) {
    prototypeCalled = true;
    result = wglContext->m_wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBindTexImageARB) {
    prototypeCalled = true;
    result = wglContext->m_wglBindTexImageARB(hPbuffer, iBuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglReleaseTexImageARB) {
    prototypeCalled = true;
    result = wglContext->m_wglReleaseTexImageARB(hPbuffer, iBuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int * piAttribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSetPbufferAttribARB) {
    prototypeCalled = true;
    result = wglContext->m_wglSetPbufferAttribARB(hPbuffer, piAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_wgl_wglCreateDisplayColorTableEXT(GLushort id) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && wglContext->m_wglCreateDisplayColorTableEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateDisplayColorTableEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_wgl_wglLoadDisplayColorTableEXT(const GLushort * table, GLuint length) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && wglContext->m_wglLoadDisplayColorTableEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglLoadDisplayColorTableEXT(table, length);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_wgl_wglBindDisplayColorTableEXT(GLushort id) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && wglContext->m_wglBindDisplayColorTableEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglBindDisplayColorTableEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID _glew_wgl_wglDestroyDisplayColorTableEXT(GLushort id) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  if (!prototypeCalled && wglContext->m_wglDestroyDisplayColorTableEXT) {
    prototypeCalled = true;
    wglContext->m_wglDestroyDisplayColorTableEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_wgl_wglGetExtensionsStringEXT() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && wglContext->m_wglGetExtensionsStringEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetExtensionsStringEXT();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglMakeContextCurrentEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC _glew_wgl_wglGetCurrentReadDCEXT() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HDC result = ((HDC)0);
  if (!prototypeCalled && wglContext->m_wglGetCurrentReadDCEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetCurrentReadDCEXT();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFEREXT _glew_wgl_wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HPBUFFEREXT result = ((HPBUFFEREXT)0);
  if (!prototypeCalled && wglContext->m_wglCreatePbufferEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC _glew_wgl_wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HDC result = ((HDC)0);
  if (!prototypeCalled && wglContext->m_wglGetPbufferDCEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPbufferDCEXT(hPbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_wgl_wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  int result = ((int)0);
  if (!prototypeCalled && wglContext->m_wglReleasePbufferDCEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglReleasePbufferDCEXT(hPbuffer, hDC);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDestroyPbufferEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglDestroyPbufferEXT(hPbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryPbufferEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryPbufferEXT(hPbuffer, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetPixelFormatAttribivEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetPixelFormatAttribivEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetPixelFormatAttribfvEXT(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetPixelFormatAttribfvEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglChoosePixelFormatEXT(HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglChoosePixelFormatEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSwapIntervalEXT(int interval) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSwapIntervalEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglSwapIntervalEXT(interval);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_wgl_wglGetSwapIntervalEXT() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  int result = ((int)0);
  if (!prototypeCalled && wglContext->m_wglGetSwapIntervalEXT) {
    prototypeCalled = true;
    result = wglContext->m_wglGetSwapIntervalEXT();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetDigitalVideoParametersI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSetDigitalVideoParametersI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGammaTableParametersI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSetGammaTableParametersI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglSetGammaTableParametersI3D(hDC, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGammaTableI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSetGammaTableI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEnableGenlockI3D(HDC hDC) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEnableGenlockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglEnableGenlockI3D(hDC);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDisableGenlockI3D(HDC hDC) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDisableGenlockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglDisableGenlockI3D(hDC);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglIsEnabledGenlockI3D(HDC hDC, BOOL * pFlag) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglIsEnabledGenlockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglIsEnabledGenlockI3D(hDC, pFlag);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGenlockSourceI3D(HDC hDC, UINT uSource) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGenlockSourceI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGenlockSourceI3D(hDC, uSource);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGenlockSourceI3D(HDC hDC, UINT * uSource) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGenlockSourceI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGenlockSourceI3D(hDC, uSource);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGenlockSourceEdgeI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGenlockSourceEdgeI3D(hDC, uEdge);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGenlockSourceEdgeI3D(HDC hDC, UINT * uEdge) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGenlockSourceEdgeI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGenlockSourceEdgeI3D(hDC, uEdge);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGenlockSampleRateI3D(HDC hDC, UINT uRate) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGenlockSampleRateI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGenlockSampleRateI3D(hDC, uRate);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGenlockSampleRateI3D(HDC hDC, UINT * uRate) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGenlockSampleRateI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGenlockSampleRateI3D(hDC, uRate);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGenlockSourceDelayI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGenlockSourceDelayI3D(hDC, uDelay);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetGenlockSourceDelayI3D(HDC hDC, UINT * uDelay) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetGenlockSourceDelayI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetGenlockSourceDelayI3D(hDC, uDelay);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryGenlockMaxSourceDelayI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LPVOID _glew_wgl_wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  LPVOID result = ((LPVOID)0);
  if (!prototypeCalled && wglContext->m_wglCreateImageBufferI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateImageBufferI3D(hDC, dwSize, uFlags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDestroyImageBufferI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglDestroyImageBufferI3D(hDC, pAddress);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT count) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglAssociateImageBufferEventsI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID * pAddress, UINT count) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglReleaseImageBufferEventsI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglReleaseImageBufferEventsI3D(hDC, pAddress, count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEnableFrameLockI3D() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEnableFrameLockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglEnableFrameLockI3D();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDisableFrameLockI3D() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDisableFrameLockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglDisableFrameLockI3D();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglIsEnabledFrameLockI3D(BOOL * pFlag) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglIsEnabledFrameLockI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglIsEnabledFrameLockI3D(pFlag);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryFrameLockMasterI3D(BOOL * pFlag) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryFrameLockMasterI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryFrameLockMasterI3D(pFlag);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetFrameUsageI3D(float * pUsage) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetFrameUsageI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglGetFrameUsageI3D(pUsage);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBeginFrameTrackingI3D() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBeginFrameTrackingI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglBeginFrameTrackingI3D();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEndFrameTrackingI3D() {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEndFrameTrackingI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglEndFrameTrackingI3D();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryFrameTrackingI3D(DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryFrameTrackingI3D) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglCopyImageSubDataNV) {
    prototypeCalled = true;
    result = wglContext->m_wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDelayBeforeSwapNV(HDC hDC, GLfloat seconds) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDelayBeforeSwapNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDelayBeforeSwapNV(hDC, seconds);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXSetResourceShareHandleNV(void * dxObject, HANDLE shareHandle) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXSetResourceShareHandleNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXSetResourceShareHandleNV(dxObject, shareHandle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE _glew_wgl_wglDXOpenDeviceNV(void * dxDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HANDLE result = ((HANDLE)0);
  if (!prototypeCalled && wglContext->m_wglDXOpenDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXOpenDeviceNV(dxDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXCloseDeviceNV(HANDLE hDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXCloseDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXCloseDeviceNV(hDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE _glew_wgl_wglDXRegisterObjectNV(HANDLE hDevice, void * dxObject, GLuint name, GLenum type, GLenum access) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HANDLE result = ((HANDLE)0);
  if (!prototypeCalled && wglContext->m_wglDXRegisterObjectNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXRegisterObjectNV(hDevice, dxObject, name, type, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXUnregisterObjectNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXUnregisterObjectNV(hDevice, hObject);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXObjectAccessNV(HANDLE hObject, GLenum access) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXObjectAccessNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXObjectAccessNV(hObject, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE * hObjects) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXLockObjectsNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXLockObjectsNV(hDevice, count, hObjects);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE * hObjects) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDXUnlockObjectsNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDXUnlockObjectsNV(hDevice, count, hObjects);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEnumGpusNV(UINT iGpuIndex, HGPUNV * phGpu) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEnumGpusNV) {
    prototypeCalled = true;
    result = wglContext->m_wglEnumGpusNV(iGpuIndex, phGpu);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEnumGpuDevicesNV) {
    prototypeCalled = true;
    result = wglContext->m_wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC _glew_wgl_wglCreateAffinityDCNV(const HGPUNV * phGpuList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  HDC result = ((HDC)0);
  if (!prototypeCalled && wglContext->m_wglCreateAffinityDCNV) {
    prototypeCalled = true;
    result = wglContext->m_wglCreateAffinityDCNV(phGpuList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV * hGpu) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglEnumGpusFromAffinityDCNV) {
    prototypeCalled = true;
    result = wglContext->m_wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglDeleteDCNV(HDC hdc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglDeleteDCNV) {
    prototypeCalled = true;
    result = wglContext->m_wglDeleteDCNV(hdc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_wgl_wglEnumerateVideoDevicesNV(HDC hDc, HVIDEOOUTPUTDEVICENV * phDeviceList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  int result = ((int)0);
  if (!prototypeCalled && wglContext->m_wglEnumerateVideoDevicesNV) {
    prototypeCalled = true;
    result = wglContext->m_wglEnumerateVideoDevicesNV(hDc, phDeviceList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBindVideoDeviceNV(HDC hDc, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int * piAttribList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBindVideoDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglBindVideoDeviceNV(hDc, uVideoSlot, hVideoDevice, piAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryCurrentContextNV(int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryCurrentContextNV) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryCurrentContextNV(iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglJoinSwapGroupNV(HDC hDC, GLuint group) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglJoinSwapGroupNV) {
    prototypeCalled = true;
    result = wglContext->m_wglJoinSwapGroupNV(hDC, group);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBindSwapBarrierNV(GLuint group, GLuint barrier) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBindSwapBarrierNV) {
    prototypeCalled = true;
    result = wglContext->m_wglBindSwapBarrierNV(group, barrier);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQuerySwapGroupNV(HDC hDC, GLuint * group, GLuint * barrier) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQuerySwapGroupNV) {
    prototypeCalled = true;
    result = wglContext->m_wglQuerySwapGroupNV(hDC, group, barrier);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryMaxSwapGroupsNV(HDC hDC, GLuint * maxGroups, GLuint * maxBarriers) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryMaxSwapGroupsNV) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryFrameCountNV(HDC hDC, GLuint * count) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryFrameCountNV) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryFrameCountNV(hDC, count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglResetFrameCountNV(HDC hDC) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglResetFrameCountNV) {
    prototypeCalled = true;
    result = wglContext->m_wglResetFrameCountNV(hDC);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBindVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT _glew_wgl_wglEnumerateVideoCaptureDevicesNV(HDC hDc, HVIDEOINPUTDEVICENV * phDeviceList) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  UINT result = ((UINT)0);
  if (!prototypeCalled && wglContext->m_wglEnumerateVideoCaptureDevicesNV) {
    prototypeCalled = true;
    result = wglContext->m_wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglLockVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglLockVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglLockVideoCaptureDeviceNV(hDc, hDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglQueryVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int * piValue) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglQueryVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglReleaseVideoCaptureDeviceNV(HDC hDc, HVIDEOINPUTDEVICENV hDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglReleaseVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglReleaseVideoCaptureDeviceNV(hDc, hDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV * hVideoDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetVideoDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglReleaseVideoDeviceNV) {
    prototypeCalled = true;
    result = wglContext->m_wglReleaseVideoDeviceNV(hVideoDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglBindVideoImageNV) {
    prototypeCalled = true;
    result = wglContext->m_wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglReleaseVideoImageNV) {
    prototypeCalled = true;
    result = wglContext->m_wglReleaseVideoImageNV(hPbuffer, iVideoBuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long * pulCounterPbuffer, BOOL bBlock) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglSendPbufferToVideoNV) {
    prototypeCalled = true;
    result = wglContext->m_wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetVideoInfoNV) {
    prototypeCalled = true;
    result = wglContext->m_wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_wgl_wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  void * result = ((void *)0);
  if (!prototypeCalled && wglContext->m_wglAllocateMemoryNV) {
    prototypeCalled = true;
    result = wglContext->m_wglAllocateMemoryNV(size, readfreq, writefreq, priority);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_wgl_wglFreeMemoryNV(void * pointer) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  if (!prototypeCalled && wglContext->m_wglFreeMemoryNV) {
    prototypeCalled = true;
    wglContext->m_wglFreeMemoryNV(pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetSyncValuesOML(HDC hdc, INT64 * ust, INT64 * msc, INT64 * sbc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetSyncValuesOML) {
    prototypeCalled = true;
    result = wglContext->m_wglGetSyncValuesOML(hdc, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglGetMscRateOML(HDC hdc, INT32 * numerator, INT32 * denominator) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglGetMscRateOML) {
    prototypeCalled = true;
    result = wglContext->m_wglGetMscRateOML(hdc, numerator, denominator);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 _glew_wgl_wglSwapBuffersMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  INT64 result = ((INT64)0);
  if (!prototypeCalled && wglContext->m_wglSwapBuffersMscOML) {
    prototypeCalled = true;
    result = wglContext->m_wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 _glew_wgl_wglSwapLayerBuffersMscOML(HDC hdc, INT fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  INT64 result = ((INT64)0);
  if (!prototypeCalled && wglContext->m_wglSwapLayerBuffersMscOML) {
    prototypeCalled = true;
    result = wglContext->m_wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglWaitForMscOML(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 * ust, INT64 * msc, INT64 * sbc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglWaitForMscOML) {
    prototypeCalled = true;
    result = wglContext->m_wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL _glew_wgl_wglWaitForSbcOML(HDC hdc, INT64 target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc) {
  bool prototypeCalled = false;
  const glew::wgl::Context *wglContext = glew::wgl::s_wglContext;
  BOOL result = ((BOOL)0);
  if (!prototypeCalled && wglContext->m_wglWaitForSbcOML) {
    prototypeCalled = true;
    result = wglContext->m_wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
