////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include <unordered_set>

#include <windows.h>

#include <GL/gl.h>

#undef wglUseFontBitmaps

#undef wglUseFontOutlines

#include <wrangle.h>

#include <wrangle-wgl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetStereoEmitterState3DL (HDC hDC, UINT uState)
{
  // WGL_3DL_stereo_control - wglSetStereoEmitterState3DL
  if (s_deviceConfig.m_wglSetStereoEmitterState3DL)
  {
    return s_deviceConfig.m_wglSetStereoEmitterState3DL (hDC, uState);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglGetGPUIDsAMD (UINT maxCount, UINT * ids)
{
  // WGL_AMD_gpu_association - wglGetGPUIDsAMD
  if (s_deviceConfig.m_wglGetGPUIDsAMD)
  {
    return s_deviceConfig.m_wglGetGPUIDsAMD (maxCount, ids);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT wglGetGPUInfoAMD (UINT id, int property, GLenum dataType, UINT size, void * data)
{
  // WGL_AMD_gpu_association - wglGetGPUInfoAMD
  if (s_deviceConfig.m_wglGetGPUInfoAMD)
  {
    return s_deviceConfig.m_wglGetGPUInfoAMD (id, property, dataType, size, data);
  }
  return ((INT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglGetContextGPUIDAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglGetContextGPUIDAMD
  if (s_deviceConfig.m_wglGetContextGPUIDAMD)
  {
    return s_deviceConfig.m_wglGetContextGPUIDAMD (hglrc);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateAssociatedContextAMD (UINT id)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAMD
  if (s_deviceConfig.m_wglCreateAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglCreateAssociatedContextAMD (id);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateAssociatedContextAttribsAMD (UINT id, HGLRC hShareContext, const int * attribList)
{
  // WGL_AMD_gpu_association - wglCreateAssociatedContextAttribsAMD
  if (s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD)
  {
    return s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD (id, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDeleteAssociatedContextAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglDeleteAssociatedContextAMD
  if (s_deviceConfig.m_wglDeleteAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglDeleteAssociatedContextAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeAssociatedContextCurrentAMD (HGLRC hglrc)
{
  // WGL_AMD_gpu_association - wglMakeAssociatedContextCurrentAMD
  if (s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD)
  {
    return s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD (hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglGetCurrentAssociatedContextAMD ()
{
  // WGL_AMD_gpu_association - wglGetCurrentAssociatedContextAMD
  if (s_deviceConfig.m_wglGetCurrentAssociatedContextAMD)
  {
    return s_deviceConfig.m_wglGetCurrentAssociatedContextAMD ();
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglBlitContextFramebufferAMD (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // WGL_AMD_gpu_association - wglBlitContextFramebufferAMD
  if (s_deviceConfig.m_wglBlitContextFramebufferAMD)
  {
    return s_deviceConfig.m_wglBlitContextFramebufferAMD (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglCreateBufferRegionARB (HDC hDC, int iLayerPlane, UINT uType)
{
  // WGL_ARB_buffer_region - wglCreateBufferRegionARB
  if (s_deviceConfig.m_wglCreateBufferRegionARB)
  {
    return s_deviceConfig.m_wglCreateBufferRegionARB (hDC, iLayerPlane, uType);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglDeleteBufferRegionARB (HANDLE hRegion)
{
  // WGL_ARB_buffer_region - wglDeleteBufferRegionARB
  if (s_deviceConfig.m_wglDeleteBufferRegionARB)
  {
    return s_deviceConfig.m_wglDeleteBufferRegionARB (hRegion);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSaveBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height)
{
  // WGL_ARB_buffer_region - wglSaveBufferRegionARB
  if (s_deviceConfig.m_wglSaveBufferRegionARB)
  {
    return s_deviceConfig.m_wglSaveBufferRegionARB (hRegion, x, y, width, height);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglRestoreBufferRegionARB (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
  // WGL_ARB_buffer_region - wglRestoreBufferRegionARB
  if (s_deviceConfig.m_wglRestoreBufferRegionARB)
  {
    return s_deviceConfig.m_wglRestoreBufferRegionARB (hRegion, x, y, width, height, xSrc, ySrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HGLRC wglCreateContextAttribsARB (HDC hDC, HGLRC hShareContext, const int * attribList)
{
  // WGL_ARB_create_context - wglCreateContextAttribsARB
  if (s_deviceConfig.m_wglCreateContextAttribsARB)
  {
    return s_deviceConfig.m_wglCreateContextAttribsARB (hDC, hShareContext, attribList);
  }
  return ((HGLRC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * wglGetExtensionsStringARB (HDC hdc)
{
  // WGL_ARB_extensions_string - wglGetExtensionsStringARB
  if (s_deviceConfig.m_wglGetExtensionsStringARB)
  {
    return s_deviceConfig.m_wglGetExtensionsStringARB (hdc);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeContextCurrentARB (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_ARB_make_current_read - wglMakeContextCurrentARB
  if (s_deviceConfig.m_wglMakeContextCurrentARB)
  {
    return s_deviceConfig.m_wglMakeContextCurrentARB (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetCurrentReadDCARB ()
{
  // WGL_ARB_make_current_read - wglGetCurrentReadDCARB
  if (s_deviceConfig.m_wglGetCurrentReadDCARB)
  {
    return s_deviceConfig.m_wglGetCurrentReadDCARB ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFERARB wglCreatePbufferARB (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList)
{
  // WGL_ARB_pbuffer - wglCreatePbufferARB
  if (s_deviceConfig.m_wglCreatePbufferARB)
  {
    return s_deviceConfig.m_wglCreatePbufferARB (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFERARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetPbufferDCARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglGetPbufferDCARB
  if (s_deviceConfig.m_wglGetPbufferDCARB)
  {
    return s_deviceConfig.m_wglGetPbufferDCARB (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglReleasePbufferDCARB (HPBUFFERARB hPbuffer, HDC hDC)
{
  // WGL_ARB_pbuffer - wglReleasePbufferDCARB
  if (s_deviceConfig.m_wglReleasePbufferDCARB)
  {
    return s_deviceConfig.m_wglReleasePbufferDCARB (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyPbufferARB (HPBUFFERARB hPbuffer)
{
  // WGL_ARB_pbuffer - wglDestroyPbufferARB
  if (s_deviceConfig.m_wglDestroyPbufferARB)
  {
    return s_deviceConfig.m_wglDestroyPbufferARB (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryPbufferARB (HPBUFFERARB hPbuffer, int iAttribute, int * piValue)
{
  // WGL_ARB_pbuffer - wglQueryPbufferARB
  if (s_deviceConfig.m_wglQueryPbufferARB)
  {
    return s_deviceConfig.m_wglQueryPbufferARB (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribivARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, int * piValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribivARB
  if (s_deviceConfig.m_wglGetPixelFormatAttribivARB)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribivARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribfvARB (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int * piAttributes, FLOAT * pfValues)
{
  // WGL_ARB_pixel_format - wglGetPixelFormatAttribfvARB
  if (s_deviceConfig.m_wglGetPixelFormatAttribfvARB)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribfvARB (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglChoosePixelFormatARB (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_ARB_pixel_format - wglChoosePixelFormatARB
  if (s_deviceConfig.m_wglChoosePixelFormatARB)
  {
    return s_deviceConfig.m_wglChoosePixelFormatARB (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindTexImageARB (HPBUFFERARB hPbuffer, int iBuffer)
{
  // WGL_ARB_render_texture - wglBindTexImageARB
  if (s_deviceConfig.m_wglBindTexImageARB)
  {
    return s_deviceConfig.m_wglBindTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseTexImageARB (HPBUFFERARB hPbuffer, int iBuffer)
{
  // WGL_ARB_render_texture - wglReleaseTexImageARB
  if (s_deviceConfig.m_wglReleaseTexImageARB)
  {
    return s_deviceConfig.m_wglReleaseTexImageARB (hPbuffer, iBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetPbufferAttribARB (HPBUFFERARB hPbuffer, const int * piAttribList)
{
  // WGL_ARB_render_texture - wglSetPbufferAttribARB
  if (s_deviceConfig.m_wglSetPbufferAttribARB)
  {
    return s_deviceConfig.m_wglSetPbufferAttribARB (hPbuffer, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglCreateDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglCreateDisplayColorTableEXT
  if (s_deviceConfig.m_wglCreateDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglCreateDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglLoadDisplayColorTableEXT (const GLushort * table, GLuint length)
{
  // WGL_EXT_display_color_table - wglLoadDisplayColorTableEXT
  if (s_deviceConfig.m_wglLoadDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglLoadDisplayColorTableEXT (table, length);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean wglBindDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglBindDisplayColorTableEXT
  if (s_deviceConfig.m_wglBindDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglBindDisplayColorTableEXT (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

VOID wglDestroyDisplayColorTableEXT (GLushort id)
{
  // WGL_EXT_display_color_table - wglDestroyDisplayColorTableEXT
  if (s_deviceConfig.m_wglDestroyDisplayColorTableEXT)
  {
    return s_deviceConfig.m_wglDestroyDisplayColorTableEXT (id);
  }
  return ((VOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * wglGetExtensionsStringEXT ()
{
  // WGL_EXT_extensions_string - wglGetExtensionsStringEXT
  if (s_deviceConfig.m_wglGetExtensionsStringEXT)
  {
    return s_deviceConfig.m_wglGetExtensionsStringEXT ();
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglMakeContextCurrentEXT (HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
  // WGL_EXT_make_current_read - wglMakeContextCurrentEXT
  if (s_deviceConfig.m_wglMakeContextCurrentEXT)
  {
    return s_deviceConfig.m_wglMakeContextCurrentEXT (hDrawDC, hReadDC, hglrc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetCurrentReadDCEXT ()
{
  // WGL_EXT_make_current_read - wglGetCurrentReadDCEXT
  if (s_deviceConfig.m_wglGetCurrentReadDCEXT)
  {
    return s_deviceConfig.m_wglGetCurrentReadDCEXT ();
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HPBUFFEREXT wglCreatePbufferEXT (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList)
{
  // WGL_EXT_pbuffer - wglCreatePbufferEXT
  if (s_deviceConfig.m_wglCreatePbufferEXT)
  {
    return s_deviceConfig.m_wglCreatePbufferEXT (hDC, iPixelFormat, iWidth, iHeight, piAttribList);
  }
  return ((HPBUFFEREXT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglGetPbufferDCEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglGetPbufferDCEXT
  if (s_deviceConfig.m_wglGetPbufferDCEXT)
  {
    return s_deviceConfig.m_wglGetPbufferDCEXT (hPbuffer);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglReleasePbufferDCEXT (HPBUFFEREXT hPbuffer, HDC hDC)
{
  // WGL_EXT_pbuffer - wglReleasePbufferDCEXT
  if (s_deviceConfig.m_wglReleasePbufferDCEXT)
  {
    return s_deviceConfig.m_wglReleasePbufferDCEXT (hPbuffer, hDC);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyPbufferEXT (HPBUFFEREXT hPbuffer)
{
  // WGL_EXT_pbuffer - wglDestroyPbufferEXT
  if (s_deviceConfig.m_wglDestroyPbufferEXT)
  {
    return s_deviceConfig.m_wglDestroyPbufferEXT (hPbuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryPbufferEXT (HPBUFFEREXT hPbuffer, int iAttribute, int * piValue)
{
  // WGL_EXT_pbuffer - wglQueryPbufferEXT
  if (s_deviceConfig.m_wglQueryPbufferEXT)
  {
    return s_deviceConfig.m_wglQueryPbufferEXT (hPbuffer, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribivEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribivEXT
  if (s_deviceConfig.m_wglGetPixelFormatAttribivEXT)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribivEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetPixelFormatAttribfvEXT (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues)
{
  // WGL_EXT_pixel_format - wglGetPixelFormatAttribfvEXT
  if (s_deviceConfig.m_wglGetPixelFormatAttribfvEXT)
  {
    return s_deviceConfig.m_wglGetPixelFormatAttribfvEXT (hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglChoosePixelFormatEXT (HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats)
{
  // WGL_EXT_pixel_format - wglChoosePixelFormatEXT
  if (s_deviceConfig.m_wglChoosePixelFormatEXT)
  {
    return s_deviceConfig.m_wglChoosePixelFormatEXT (hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSwapIntervalEXT (int interval)
{
  // WGL_EXT_swap_control - wglSwapIntervalEXT
  if (s_deviceConfig.m_wglSwapIntervalEXT)
  {
    return s_deviceConfig.m_wglSwapIntervalEXT (interval);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglGetSwapIntervalEXT ()
{
  // WGL_EXT_swap_control - wglGetSwapIntervalEXT
  if (s_deviceConfig.m_wglGetSwapIntervalEXT)
  {
    return s_deviceConfig.m_wglGetSwapIntervalEXT ();
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetDigitalVideoParametersI3D (HDC hDC, int iAttribute, int * piValue)
{
  // WGL_I3D_digital_video_control - wglGetDigitalVideoParametersI3D
  if (s_deviceConfig.m_wglGetDigitalVideoParametersI3D)
  {
    return s_deviceConfig.m_wglGetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetDigitalVideoParametersI3D (HDC hDC, int iAttribute, const int * piValue)
{
  // WGL_I3D_digital_video_control - wglSetDigitalVideoParametersI3D
  if (s_deviceConfig.m_wglSetDigitalVideoParametersI3D)
  {
    return s_deviceConfig.m_wglSetDigitalVideoParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGammaTableParametersI3D (HDC hDC, int iAttribute, int * piValue)
{
  // WGL_I3D_gamma - wglGetGammaTableParametersI3D
  if (s_deviceConfig.m_wglGetGammaTableParametersI3D)
  {
    return s_deviceConfig.m_wglGetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetGammaTableParametersI3D (HDC hDC, int iAttribute, const int * piValue)
{
  // WGL_I3D_gamma - wglSetGammaTableParametersI3D
  if (s_deviceConfig.m_wglSetGammaTableParametersI3D)
  {
    return s_deviceConfig.m_wglSetGammaTableParametersI3D (hDC, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGammaTableI3D (HDC hDC, int iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue)
{
  // WGL_I3D_gamma - wglGetGammaTableI3D
  if (s_deviceConfig.m_wglGetGammaTableI3D)
  {
    return s_deviceConfig.m_wglGetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSetGammaTableI3D (HDC hDC, int iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue)
{
  // WGL_I3D_gamma - wglSetGammaTableI3D
  if (s_deviceConfig.m_wglSetGammaTableI3D)
  {
    return s_deviceConfig.m_wglSetGammaTableI3D (hDC, iEntries, puRed, puGreen, puBlue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglEnableGenlockI3D
  if (s_deviceConfig.m_wglEnableGenlockI3D)
  {
    return s_deviceConfig.m_wglEnableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDisableGenlockI3D (HDC hDC)
{
  // WGL_I3D_genlock - wglDisableGenlockI3D
  if (s_deviceConfig.m_wglDisableGenlockI3D)
  {
    return s_deviceConfig.m_wglDisableGenlockI3D (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglIsEnabledGenlockI3D (HDC hDC, BOOL * pFlag)
{
  // WGL_I3D_genlock - wglIsEnabledGenlockI3D
  if (s_deviceConfig.m_wglIsEnabledGenlockI3D)
  {
    return s_deviceConfig.m_wglIsEnabledGenlockI3D (hDC, pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceI3D (HDC hDC, UINT uSource)
{
  // WGL_I3D_genlock - wglGenlockSourceI3D
  if (s_deviceConfig.m_wglGenlockSourceI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceI3D (HDC hDC, UINT * uSource)
{
  // WGL_I3D_genlock - wglGetGenlockSourceI3D
  if (s_deviceConfig.m_wglGetGenlockSourceI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceI3D (hDC, uSource);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceEdgeI3D (HDC hDC, UINT uEdge)
{
  // WGL_I3D_genlock - wglGenlockSourceEdgeI3D
  if (s_deviceConfig.m_wglGenlockSourceEdgeI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceEdgeI3D (HDC hDC, UINT * uEdge)
{
  // WGL_I3D_genlock - wglGetGenlockSourceEdgeI3D
  if (s_deviceConfig.m_wglGetGenlockSourceEdgeI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceEdgeI3D (hDC, uEdge);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSampleRateI3D (HDC hDC, UINT uRate)
{
  // WGL_I3D_genlock - wglGenlockSampleRateI3D
  if (s_deviceConfig.m_wglGenlockSampleRateI3D)
  {
    return s_deviceConfig.m_wglGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSampleRateI3D (HDC hDC, UINT * uRate)
{
  // WGL_I3D_genlock - wglGetGenlockSampleRateI3D
  if (s_deviceConfig.m_wglGetGenlockSampleRateI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSampleRateI3D (hDC, uRate);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGenlockSourceDelayI3D (HDC hDC, UINT uDelay)
{
  // WGL_I3D_genlock - wglGenlockSourceDelayI3D
  if (s_deviceConfig.m_wglGenlockSourceDelayI3D)
  {
    return s_deviceConfig.m_wglGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetGenlockSourceDelayI3D (HDC hDC, UINT * uDelay)
{
  // WGL_I3D_genlock - wglGetGenlockSourceDelayI3D
  if (s_deviceConfig.m_wglGetGenlockSourceDelayI3D)
  {
    return s_deviceConfig.m_wglGetGenlockSourceDelayI3D (hDC, uDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryGenlockMaxSourceDelayI3D (HDC hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay)
{
  // WGL_I3D_genlock - wglQueryGenlockMaxSourceDelayI3D
  if (s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D)
  {
    return s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D (hDC, uMaxLineDelay, uMaxPixelDelay);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

LPVOID wglCreateImageBufferI3D (HDC hDC, DWORD dwSize, UINT uFlags)
{
  // WGL_I3D_image_buffer - wglCreateImageBufferI3D
  if (s_deviceConfig.m_wglCreateImageBufferI3D)
  {
    return s_deviceConfig.m_wglCreateImageBufferI3D (hDC, dwSize, uFlags);
  }
  return ((LPVOID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDestroyImageBufferI3D (HDC hDC, LPVOID pAddress)
{
  // WGL_I3D_image_buffer - wglDestroyImageBufferI3D
  if (s_deviceConfig.m_wglDestroyImageBufferI3D)
  {
    return s_deviceConfig.m_wglDestroyImageBufferI3D (hDC, pAddress);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglAssociateImageBufferEventsI3D (HDC hDC, const HANDLE * pEvent, const LPVOID * pAddress, const DWORD * pSize, UINT count)
{
  // WGL_I3D_image_buffer - wglAssociateImageBufferEventsI3D
  if (s_deviceConfig.m_wglAssociateImageBufferEventsI3D)
  {
    return s_deviceConfig.m_wglAssociateImageBufferEventsI3D (hDC, pEvent, pAddress, pSize, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseImageBufferEventsI3D (HDC hDC, const LPVOID * pAddress, UINT count)
{
  // WGL_I3D_image_buffer - wglReleaseImageBufferEventsI3D
  if (s_deviceConfig.m_wglReleaseImageBufferEventsI3D)
  {
    return s_deviceConfig.m_wglReleaseImageBufferEventsI3D (hDC, pAddress, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglEnableFrameLockI3D
  if (s_deviceConfig.m_wglEnableFrameLockI3D)
  {
    return s_deviceConfig.m_wglEnableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDisableFrameLockI3D ()
{
  // WGL_I3D_swap_frame_lock - wglDisableFrameLockI3D
  if (s_deviceConfig.m_wglDisableFrameLockI3D)
  {
    return s_deviceConfig.m_wglDisableFrameLockI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglIsEnabledFrameLockI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglIsEnabledFrameLockI3D
  if (s_deviceConfig.m_wglIsEnabledFrameLockI3D)
  {
    return s_deviceConfig.m_wglIsEnabledFrameLockI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameLockMasterI3D (BOOL * pFlag)
{
  // WGL_I3D_swap_frame_lock - wglQueryFrameLockMasterI3D
  if (s_deviceConfig.m_wglQueryFrameLockMasterI3D)
  {
    return s_deviceConfig.m_wglQueryFrameLockMasterI3D (pFlag);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetFrameUsageI3D (float * pUsage)
{
  // WGL_I3D_swap_frame_usage - wglGetFrameUsageI3D
  if (s_deviceConfig.m_wglGetFrameUsageI3D)
  {
    return s_deviceConfig.m_wglGetFrameUsageI3D (pUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBeginFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglBeginFrameTrackingI3D
  if (s_deviceConfig.m_wglBeginFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglBeginFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEndFrameTrackingI3D ()
{
  // WGL_I3D_swap_frame_usage - wglEndFrameTrackingI3D
  if (s_deviceConfig.m_wglEndFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglEndFrameTrackingI3D ();
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameTrackingI3D (DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage)
{
  // WGL_I3D_swap_frame_usage - wglQueryFrameTrackingI3D
  if (s_deviceConfig.m_wglQueryFrameTrackingI3D)
  {
    return s_deviceConfig.m_wglQueryFrameTrackingI3D (pFrameCount, pMissedFrames, pLastMissedUsage);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglCopyImageSubDataNV (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // WGL_NV_copy_image - wglCopyImageSubDataNV
  if (s_deviceConfig.m_wglCopyImageSubDataNV)
  {
    return s_deviceConfig.m_wglCopyImageSubDataNV (hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDelayBeforeSwapNV (HDC hDC, GLfloat seconds)
{
  // WGL_NV_delay_before_swap - wglDelayBeforeSwapNV
  if (s_deviceConfig.m_wglDelayBeforeSwapNV)
  {
    return s_deviceConfig.m_wglDelayBeforeSwapNV (hDC, seconds);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXSetResourceShareHandleNV (void * dxObject, HANDLE shareHandle)
{
  // WGL_NV_DX_interop - wglDXSetResourceShareHandleNV
  if (s_deviceConfig.m_wglDXSetResourceShareHandleNV)
  {
    return s_deviceConfig.m_wglDXSetResourceShareHandleNV (dxObject, shareHandle);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglDXOpenDeviceNV (void * dxDevice)
{
  // WGL_NV_DX_interop - wglDXOpenDeviceNV
  if (s_deviceConfig.m_wglDXOpenDeviceNV)
  {
    return s_deviceConfig.m_wglDXOpenDeviceNV (dxDevice);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXCloseDeviceNV (HANDLE hDevice)
{
  // WGL_NV_DX_interop - wglDXCloseDeviceNV
  if (s_deviceConfig.m_wglDXCloseDeviceNV)
  {
    return s_deviceConfig.m_wglDXCloseDeviceNV (hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HANDLE wglDXRegisterObjectNV (HANDLE hDevice, void * dxObject, GLuint name, GLenum type, GLenum access)
{
  // WGL_NV_DX_interop - wglDXRegisterObjectNV
  if (s_deviceConfig.m_wglDXRegisterObjectNV)
  {
    return s_deviceConfig.m_wglDXRegisterObjectNV (hDevice, dxObject, name, type, access);
  }
  return ((HANDLE)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXUnregisterObjectNV (HANDLE hDevice, HANDLE hObject)
{
  // WGL_NV_DX_interop - wglDXUnregisterObjectNV
  if (s_deviceConfig.m_wglDXUnregisterObjectNV)
  {
    return s_deviceConfig.m_wglDXUnregisterObjectNV (hDevice, hObject);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXObjectAccessNV (HANDLE hObject, GLenum access)
{
  // WGL_NV_DX_interop - wglDXObjectAccessNV
  if (s_deviceConfig.m_wglDXObjectAccessNV)
  {
    return s_deviceConfig.m_wglDXObjectAccessNV (hObject, access);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXLockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXLockObjectsNV
  if (s_deviceConfig.m_wglDXLockObjectsNV)
  {
    return s_deviceConfig.m_wglDXLockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDXUnlockObjectsNV (HANDLE hDevice, GLint count, HANDLE * hObjects)
{
  // WGL_NV_DX_interop - wglDXUnlockObjectsNV
  if (s_deviceConfig.m_wglDXUnlockObjectsNV)
  {
    return s_deviceConfig.m_wglDXUnlockObjectsNV (hDevice, count, hObjects);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpusNV (UINT iGpuIndex, HGPUNV * phGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusNV
  if (s_deviceConfig.m_wglEnumGpusNV)
  {
    return s_deviceConfig.m_wglEnumGpusNV (iGpuIndex, phGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpuDevicesNV (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
  // WGL_NV_gpu_affinity - wglEnumGpuDevicesNV
  if (s_deviceConfig.m_wglEnumGpuDevicesNV)
  {
    return s_deviceConfig.m_wglEnumGpuDevicesNV (hGpu, iDeviceIndex, lpGpuDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HDC wglCreateAffinityDCNV (const HGPUNV * phGpuList)
{
  // WGL_NV_gpu_affinity - wglCreateAffinityDCNV
  if (s_deviceConfig.m_wglCreateAffinityDCNV)
  {
    return s_deviceConfig.m_wglCreateAffinityDCNV (phGpuList);
  }
  return ((HDC)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglEnumGpusFromAffinityDCNV (HDC hAffinityDC, UINT iGpuIndex, HGPUNV * hGpu)
{
  // WGL_NV_gpu_affinity - wglEnumGpusFromAffinityDCNV
  if (s_deviceConfig.m_wglEnumGpusFromAffinityDCNV)
  {
    return s_deviceConfig.m_wglEnumGpusFromAffinityDCNV (hAffinityDC, iGpuIndex, hGpu);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglDeleteDCNV (HDC hdc)
{
  // WGL_NV_gpu_affinity - wglDeleteDCNV
  if (s_deviceConfig.m_wglDeleteDCNV)
  {
    return s_deviceConfig.m_wglDeleteDCNV (hdc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int wglEnumerateVideoDevicesNV (HDC hDC, HVIDEOOUTPUTDEVICENV * phDeviceList)
{
  // WGL_NV_present_video - wglEnumerateVideoDevicesNV
  if (s_deviceConfig.m_wglEnumerateVideoDevicesNV)
  {
    return s_deviceConfig.m_wglEnumerateVideoDevicesNV (hDC, phDeviceList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoDeviceNV (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int * piAttribList)
{
  // WGL_NV_present_video - wglBindVideoDeviceNV
  if (s_deviceConfig.m_wglBindVideoDeviceNV)
  {
    return s_deviceConfig.m_wglBindVideoDeviceNV (hDC, uVideoSlot, hVideoDevice, piAttribList);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryCurrentContextNV (int iAttribute, int * piValue)
{
  // WGL_NV_present_video - wglQueryCurrentContextNV
  if (s_deviceConfig.m_wglQueryCurrentContextNV)
  {
    return s_deviceConfig.m_wglQueryCurrentContextNV (iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglJoinSwapGroupNV (HDC hDC, GLuint group)
{
  // WGL_NV_swap_group - wglJoinSwapGroupNV
  if (s_deviceConfig.m_wglJoinSwapGroupNV)
  {
    return s_deviceConfig.m_wglJoinSwapGroupNV (hDC, group);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindSwapBarrierNV (GLuint group, GLuint barrier)
{
  // WGL_NV_swap_group - wglBindSwapBarrierNV
  if (s_deviceConfig.m_wglBindSwapBarrierNV)
  {
    return s_deviceConfig.m_wglBindSwapBarrierNV (group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQuerySwapGroupNV (HDC hDC, GLuint * group, GLuint * barrier)
{
  // WGL_NV_swap_group - wglQuerySwapGroupNV
  if (s_deviceConfig.m_wglQuerySwapGroupNV)
  {
    return s_deviceConfig.m_wglQuerySwapGroupNV (hDC, group, barrier);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryMaxSwapGroupsNV (HDC hDC, GLuint * maxGroups, GLuint * maxBarriers)
{
  // WGL_NV_swap_group - wglQueryMaxSwapGroupsNV
  if (s_deviceConfig.m_wglQueryMaxSwapGroupsNV)
  {
    return s_deviceConfig.m_wglQueryMaxSwapGroupsNV (hDC, maxGroups, maxBarriers);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryFrameCountNV (HDC hDC, GLuint * count)
{
  // WGL_NV_swap_group - wglQueryFrameCountNV
  if (s_deviceConfig.m_wglQueryFrameCountNV)
  {
    return s_deviceConfig.m_wglQueryFrameCountNV (hDC, count);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglResetFrameCountNV (HDC hDC)
{
  // WGL_NV_swap_group - wglResetFrameCountNV
  if (s_deviceConfig.m_wglResetFrameCountNV)
  {
    return s_deviceConfig.m_wglResetFrameCountNV (hDC);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoCaptureDeviceNV (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglBindVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglBindVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglBindVideoCaptureDeviceNV (uVideoSlot, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UINT wglEnumerateVideoCaptureDevicesNV (HDC hDc, HVIDEOINPUTDEVICENV * phDeviceList)
{
  // WGL_NV_video_capture - wglEnumerateVideoCaptureDevicesNV
  if (s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV)
  {
    return s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV (hDc, phDeviceList);
  }
  return ((UINT)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglLockVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglLockVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglLockVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglLockVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglQueryVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int * piValue)
{
  // WGL_NV_video_capture - wglQueryVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglQueryVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglQueryVideoCaptureDeviceNV (hDc, hDevice, iAttribute, piValue);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoCaptureDeviceNV (HDC hDc, HVIDEOINPUTDEVICENV hDevice)
{
  // WGL_NV_video_capture - wglReleaseVideoCaptureDeviceNV
  if (s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV (hDc, hDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetVideoDeviceNV (HDC hDC, int numDevices, HPVIDEODEV * hVideoDevice)
{
  // WGL_NV_video_output - wglGetVideoDeviceNV
  if (s_deviceConfig.m_wglGetVideoDeviceNV)
  {
    return s_deviceConfig.m_wglGetVideoDeviceNV (hDC, numDevices, hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoDeviceNV (HPVIDEODEV hVideoDevice)
{
  // WGL_NV_video_output - wglReleaseVideoDeviceNV
  if (s_deviceConfig.m_wglReleaseVideoDeviceNV)
  {
    return s_deviceConfig.m_wglReleaseVideoDeviceNV (hVideoDevice);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglBindVideoImageNV (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  // WGL_NV_video_output - wglBindVideoImageNV
  if (s_deviceConfig.m_wglBindVideoImageNV)
  {
    return s_deviceConfig.m_wglBindVideoImageNV (hVideoDevice, hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglReleaseVideoImageNV (HPBUFFERARB hPbuffer, int iVideoBuffer)
{
  // WGL_NV_video_output - wglReleaseVideoImageNV
  if (s_deviceConfig.m_wglReleaseVideoImageNV)
  {
    return s_deviceConfig.m_wglReleaseVideoImageNV (hPbuffer, iVideoBuffer);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglSendPbufferToVideoNV (HPBUFFERARB hPbuffer, int iBufferType, unsigned long * pulCounterPbuffer, BOOL bBlock)
{
  // WGL_NV_video_output - wglSendPbufferToVideoNV
  if (s_deviceConfig.m_wglSendPbufferToVideoNV)
  {
    return s_deviceConfig.m_wglSendPbufferToVideoNV (hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetVideoInfoNV (HPVIDEODEV hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)
{
  // WGL_NV_video_output - wglGetVideoInfoNV
  if (s_deviceConfig.m_wglGetVideoInfoNV)
  {
    return s_deviceConfig.m_wglGetVideoInfoNV (hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * wglAllocateMemoryNV (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
  // WGL_NV_vertex_array_range - wglAllocateMemoryNV
  if (s_deviceConfig.m_wglAllocateMemoryNV)
  {
    return s_deviceConfig.m_wglAllocateMemoryNV (size, readfreq, writefreq, priority);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void wglFreeMemoryNV (void * pointer)
{
  // WGL_NV_vertex_array_range - wglFreeMemoryNV
  if (s_deviceConfig.m_wglFreeMemoryNV)
  {
    s_deviceConfig.m_wglFreeMemoryNV (pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetSyncValuesOML (HDC hdc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglGetSyncValuesOML
  if (s_deviceConfig.m_wglGetSyncValuesOML)
  {
    return s_deviceConfig.m_wglGetSyncValuesOML (hdc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglGetMscRateOML (HDC hdc, INT32 * numerator, INT32 * denominator)
{
  // WGL_OML_sync_control - wglGetMscRateOML
  if (s_deviceConfig.m_wglGetMscRateOML)
  {
    return s_deviceConfig.m_wglGetMscRateOML (hdc, numerator, denominator);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 wglSwapBuffersMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapBuffersMscOML
  if (s_deviceConfig.m_wglSwapBuffersMscOML)
  {
    return s_deviceConfig.m_wglSwapBuffersMscOML (hdc, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

INT64 wglSwapLayerBuffersMscOML (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
  // WGL_OML_sync_control - wglSwapLayerBuffersMscOML
  if (s_deviceConfig.m_wglSwapLayerBuffersMscOML)
  {
    return s_deviceConfig.m_wglSwapLayerBuffersMscOML (hdc, fuPlanes, target_msc, divisor, remainder);
  }
  return ((INT64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglWaitForMscOML (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForMscOML
  if (s_deviceConfig.m_wglWaitForMscOML)
  {
    return s_deviceConfig.m_wglWaitForMscOML (hdc, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BOOL wglWaitForSbcOML (HDC hdc, INT64 target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc)
{
  // WGL_OML_sync_control - wglWaitForSbcOML
  if (s_deviceConfig.m_wglWaitForSbcOML)
  {
    return s_deviceConfig.m_wglWaitForSbcOML (hdc, target_sbc, ust, msc, sbc);
  }
  return ((BOOL)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

glew::wgl::DeviceConfig glew::wgl::s_deviceConfig;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::wgl::Initialise ()
{
  memset (&s_deviceConfig, 0, sizeof (s_deviceConfig));

  // 
  // Determine current driver's feature reporting.
  // 

  PFNWGLGETEXTENSIONSSTRINGARBPROC _wglewGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) glew::GetProcAddress ("wglGetExtensionsStringARB");

  PFNWGLGETEXTENSIONSSTRINGEXTPROC _wglewGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) glew::GetProcAddress ("wglGetExtensionsStringEXT");

  PFNWGLGETCURRENTDCPROC _wglGetCurrentDC = (PFNWGLGETCURRENTDCPROC) glew::GetProcAddress ("wglGetCurrentDC");

  s_deviceConfig.m_featureSupported [GLEW_WGL_VERSION_1_0] = true;

  // 
  // Evaluate extension support.
  // 

  std::unordered_set <std::string> supportedExtensions;

  const GLubyte *wglExtensions = (const GLubyte*)"";

  if (_wglewGetExtensionsStringEXT != NULL)
  {
    wglExtensions = (const GLubyte*) _wglewGetExtensionsStringEXT ();
  }
  else if (_wglewGetExtensionsStringARB != NULL)
  {
    wglExtensions = (const GLubyte*) _wglewGetExtensionsStringARB (_wglGetCurrentDC());
  }

  const size_t wglExtensionsLen = wglExtensions ? strlen ((const char *) wglExtensions) : 0;

  if (wglExtensionsLen)
  {
    GLubyte *thisExtStart = (GLubyte *) wglExtensions;

    GLubyte *thisExtEnd = NULL;

    char thisExtBuffer [128];

    memset (thisExtBuffer, 0, sizeof (thisExtBuffer));

    do 
    {
      const char * seperator = strchr ((const char *) thisExtStart, ' ');

      if (seperator)
      {
        const size_t len = (((uintptr_t) seperator - (uintptr_t) thisExtStart) / sizeof (GLubyte));

        strncpy (thisExtBuffer, (const char *)thisExtStart, len);

        thisExtBuffer [min (len, 127)] = '\0';

        thisExtEnd = (GLubyte *) seperator + 1; // skip tab character
      }
      else
      {
        const size_t len = strlen ((const char *) thisExtStart);

        strncpy (thisExtBuffer, (const char *) thisExtStart, len);

        thisExtBuffer [min (len + 1, 127)] = '\0';

        thisExtEnd = NULL;
      }

      std::string thisExt (thisExtBuffer);

      if (supportedExtensions.find (thisExt) == supportedExtensions.end ())
      {
        supportedExtensions.insert (thisExt);
      }

      thisExtStart = thisExtEnd;
    }
    while ((thisExtStart && *thisExtStart != '\0') && (thisExtEnd && *thisExtEnd != '\0'));
  }

  s_deviceConfig.m_featureSupported [GLEW_WGL_3DFX_multisample] = (supportedExtensions.find ("WGL_3DFX_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_3DL_stereo_control] = (supportedExtensions.find ("WGL_3DL_stereo_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_AMD_gpu_association] = (supportedExtensions.find ("WGL_AMD_gpu_association") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_buffer_region] = (supportedExtensions.find ("WGL_ARB_buffer_region") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_context_flush_control] = (supportedExtensions.find ("WGL_ARB_context_flush_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context] = (supportedExtensions.find ("WGL_ARB_create_context") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context_profile] = (supportedExtensions.find ("WGL_ARB_create_context_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context_robustness] = (supportedExtensions.find ("WGL_ARB_create_context_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_extensions_string] = (supportedExtensions.find ("WGL_ARB_extensions_string") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_framebuffer_sRGB] = (supportedExtensions.find ("WGL_ARB_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_make_current_read] = (supportedExtensions.find ("WGL_ARB_make_current_read") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_multisample] = (supportedExtensions.find ("WGL_ARB_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pbuffer] = (supportedExtensions.find ("WGL_ARB_pbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format] = (supportedExtensions.find ("WGL_ARB_pixel_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format_float] = (supportedExtensions.find ("WGL_ARB_pixel_format_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_render_texture] = (supportedExtensions.find ("WGL_ARB_render_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_robustness_application_isolation] = (supportedExtensions.find ("WGL_ARB_robustness_application_isolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_robustness_share_group_isolation] = (supportedExtensions.find ("WGL_ARB_robustness_share_group_isolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_ATI_pixel_format_float] = (supportedExtensions.find ("WGL_ATI_pixel_format_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_create_context_es_profile] = (supportedExtensions.find ("WGL_EXT_create_context_es_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_create_context_es2_profile] = (supportedExtensions.find ("WGL_EXT_create_context_es2_profile") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_depth_float] = (supportedExtensions.find ("WGL_EXT_depth_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_display_color_table] = (supportedExtensions.find ("WGL_EXT_display_color_table") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_extensions_string] = (supportedExtensions.find ("WGL_EXT_extensions_string") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_framebuffer_sRGB] = (supportedExtensions.find ("WGL_EXT_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_make_current_read] = (supportedExtensions.find ("WGL_EXT_make_current_read") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_multisample] = (supportedExtensions.find ("WGL_EXT_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pbuffer] = (supportedExtensions.find ("WGL_EXT_pbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format] = (supportedExtensions.find ("WGL_EXT_pixel_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format_packed_float] = (supportedExtensions.find ("WGL_EXT_pixel_format_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control] = (supportedExtensions.find ("WGL_EXT_swap_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control_tear] = (supportedExtensions.find ("WGL_EXT_swap_control_tear") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_digital_video_control] = (supportedExtensions.find ("WGL_I3D_digital_video_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_gamma] = (supportedExtensions.find ("WGL_I3D_gamma") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_genlock] = (supportedExtensions.find ("WGL_I3D_genlock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_image_buffer] = (supportedExtensions.find ("WGL_I3D_image_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_lock] = (supportedExtensions.find ("WGL_I3D_swap_frame_lock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_usage] = (supportedExtensions.find ("WGL_I3D_swap_frame_usage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_copy_image] = (supportedExtensions.find ("WGL_NV_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_delay_before_swap] = (supportedExtensions.find ("WGL_NV_delay_before_swap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop] = (supportedExtensions.find ("WGL_NV_DX_interop") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop2] = (supportedExtensions.find ("WGL_NV_DX_interop2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_float_buffer] = (supportedExtensions.find ("WGL_NV_float_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_gpu_affinity] = (supportedExtensions.find ("WGL_NV_gpu_affinity") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_multisample_coverage] = (supportedExtensions.find ("WGL_NV_multisample_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_present_video] = (supportedExtensions.find ("WGL_NV_present_video") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_render_depth_texture] = (supportedExtensions.find ("WGL_NV_render_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_render_texture_rectangle] = (supportedExtensions.find ("WGL_NV_render_texture_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_swap_group] = (supportedExtensions.find ("WGL_NV_swap_group") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_capture] = (supportedExtensions.find ("WGL_NV_video_capture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_output] = (supportedExtensions.find ("WGL_NV_video_output") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_NV_vertex_array_range] = (supportedExtensions.find ("WGL_NV_vertex_array_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_WGL_OML_sync_control] = (supportedExtensions.find ("WGL_OML_sync_control") != supportedExtensions.end ());

  // WGL_3DL_stereo_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_3DL_stereo_control])
  {
    #undef wglSetStereoEmitterState3DL
    s_deviceConfig.m_wglSetStereoEmitterState3DL = (PFNWGLSETSTEREOEMITTERSTATE3DLPROC) glew::GetProcAddress ("wglSetStereoEmitterState3DL");
  }

  // WGL_AMD_gpu_association
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_AMD_gpu_association])
  {
    #undef wglGetGPUIDsAMD
    #undef wglGetGPUInfoAMD
    #undef wglGetContextGPUIDAMD
    #undef wglCreateAssociatedContextAMD
    #undef wglCreateAssociatedContextAttribsAMD
    #undef wglDeleteAssociatedContextAMD
    #undef wglMakeAssociatedContextCurrentAMD
    #undef wglGetCurrentAssociatedContextAMD
    #undef wglBlitContextFramebufferAMD
    s_deviceConfig.m_wglGetGPUIDsAMD = (PFNWGLGETGPUIDSAMDPROC) glew::GetProcAddress ("wglGetGPUIDsAMD");
    s_deviceConfig.m_wglGetGPUInfoAMD = (PFNWGLGETGPUINFOAMDPROC) glew::GetProcAddress ("wglGetGPUInfoAMD");
    s_deviceConfig.m_wglGetContextGPUIDAMD = (PFNWGLGETCONTEXTGPUIDAMDPROC) glew::GetProcAddress ("wglGetContextGPUIDAMD");
    s_deviceConfig.m_wglCreateAssociatedContextAMD = (PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) glew::GetProcAddress ("wglCreateAssociatedContextAMD");
    s_deviceConfig.m_wglCreateAssociatedContextAttribsAMD = (PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) glew::GetProcAddress ("wglCreateAssociatedContextAttribsAMD");
    s_deviceConfig.m_wglDeleteAssociatedContextAMD = (PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) glew::GetProcAddress ("wglDeleteAssociatedContextAMD");
    s_deviceConfig.m_wglMakeAssociatedContextCurrentAMD = (PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) glew::GetProcAddress ("wglMakeAssociatedContextCurrentAMD");
    s_deviceConfig.m_wglGetCurrentAssociatedContextAMD = (PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) glew::GetProcAddress ("wglGetCurrentAssociatedContextAMD");
    s_deviceConfig.m_wglBlitContextFramebufferAMD = (PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) glew::GetProcAddress ("wglBlitContextFramebufferAMD");
  }

  // WGL_ARB_buffer_region
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_buffer_region])
  {
    #undef wglCreateBufferRegionARB
    #undef wglDeleteBufferRegionARB
    #undef wglSaveBufferRegionARB
    #undef wglRestoreBufferRegionARB
    s_deviceConfig.m_wglCreateBufferRegionARB = (PFNWGLCREATEBUFFERREGIONARBPROC) glew::GetProcAddress ("wglCreateBufferRegionARB");
    s_deviceConfig.m_wglDeleteBufferRegionARB = (PFNWGLDELETEBUFFERREGIONARBPROC) glew::GetProcAddress ("wglDeleteBufferRegionARB");
    s_deviceConfig.m_wglSaveBufferRegionARB = (PFNWGLSAVEBUFFERREGIONARBPROC) glew::GetProcAddress ("wglSaveBufferRegionARB");
    s_deviceConfig.m_wglRestoreBufferRegionARB = (PFNWGLRESTOREBUFFERREGIONARBPROC) glew::GetProcAddress ("wglRestoreBufferRegionARB");
  }

  // WGL_ARB_create_context
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_create_context])
  {
    #undef wglCreateContextAttribsARB
    s_deviceConfig.m_wglCreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC) glew::GetProcAddress ("wglCreateContextAttribsARB");
  }

  // WGL_ARB_extensions_string
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_extensions_string])
  {
    #undef wglGetExtensionsStringARB
    s_deviceConfig.m_wglGetExtensionsStringARB = (PFNWGLGETEXTENSIONSSTRINGARBPROC) glew::GetProcAddress ("wglGetExtensionsStringARB");
  }

  // WGL_ARB_make_current_read
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_make_current_read])
  {
    #undef wglMakeContextCurrentARB
    #undef wglGetCurrentReadDCARB
    s_deviceConfig.m_wglMakeContextCurrentARB = (PFNWGLMAKECONTEXTCURRENTARBPROC) glew::GetProcAddress ("wglMakeContextCurrentARB");
    s_deviceConfig.m_wglGetCurrentReadDCARB = (PFNWGLGETCURRENTREADDCARBPROC) glew::GetProcAddress ("wglGetCurrentReadDCARB");
  }

  // WGL_ARB_pbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pbuffer])
  {
    #undef wglCreatePbufferARB
    #undef wglGetPbufferDCARB
    #undef wglReleasePbufferDCARB
    #undef wglDestroyPbufferARB
    #undef wglQueryPbufferARB
    s_deviceConfig.m_wglCreatePbufferARB = (PFNWGLCREATEPBUFFERARBPROC) glew::GetProcAddress ("wglCreatePbufferARB");
    s_deviceConfig.m_wglGetPbufferDCARB = (PFNWGLGETPBUFFERDCARBPROC) glew::GetProcAddress ("wglGetPbufferDCARB");
    s_deviceConfig.m_wglReleasePbufferDCARB = (PFNWGLRELEASEPBUFFERDCARBPROC) glew::GetProcAddress ("wglReleasePbufferDCARB");
    s_deviceConfig.m_wglDestroyPbufferARB = (PFNWGLDESTROYPBUFFERARBPROC) glew::GetProcAddress ("wglDestroyPbufferARB");
    s_deviceConfig.m_wglQueryPbufferARB = (PFNWGLQUERYPBUFFERARBPROC) glew::GetProcAddress ("wglQueryPbufferARB");
  }

  // WGL_ARB_pixel_format
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_pixel_format])
  {
    #undef wglGetPixelFormatAttribivARB
    #undef wglGetPixelFormatAttribfvARB
    #undef wglChoosePixelFormatARB
    s_deviceConfig.m_wglGetPixelFormatAttribivARB = (PFNWGLGETPIXELFORMATATTRIBIVARBPROC) glew::GetProcAddress ("wglGetPixelFormatAttribivARB");
    s_deviceConfig.m_wglGetPixelFormatAttribfvARB = (PFNWGLGETPIXELFORMATATTRIBFVARBPROC) glew::GetProcAddress ("wglGetPixelFormatAttribfvARB");
    s_deviceConfig.m_wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC) glew::GetProcAddress ("wglChoosePixelFormatARB");
  }

  // WGL_ARB_render_texture
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_ARB_render_texture])
  {
    #undef wglBindTexImageARB
    #undef wglReleaseTexImageARB
    #undef wglSetPbufferAttribARB
    s_deviceConfig.m_wglBindTexImageARB = (PFNWGLBINDTEXIMAGEARBPROC) glew::GetProcAddress ("wglBindTexImageARB");
    s_deviceConfig.m_wglReleaseTexImageARB = (PFNWGLRELEASETEXIMAGEARBPROC) glew::GetProcAddress ("wglReleaseTexImageARB");
    s_deviceConfig.m_wglSetPbufferAttribARB = (PFNWGLSETPBUFFERATTRIBARBPROC) glew::GetProcAddress ("wglSetPbufferAttribARB");
  }

  // WGL_EXT_display_color_table
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_display_color_table])
  {
    #undef wglCreateDisplayColorTableEXT
    #undef wglLoadDisplayColorTableEXT
    #undef wglBindDisplayColorTableEXT
    #undef wglDestroyDisplayColorTableEXT
    s_deviceConfig.m_wglCreateDisplayColorTableEXT = (PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) glew::GetProcAddress ("wglCreateDisplayColorTableEXT");
    s_deviceConfig.m_wglLoadDisplayColorTableEXT = (PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) glew::GetProcAddress ("wglLoadDisplayColorTableEXT");
    s_deviceConfig.m_wglBindDisplayColorTableEXT = (PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) glew::GetProcAddress ("wglBindDisplayColorTableEXT");
    s_deviceConfig.m_wglDestroyDisplayColorTableEXT = (PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) glew::GetProcAddress ("wglDestroyDisplayColorTableEXT");
  }

  // WGL_EXT_extensions_string
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_extensions_string])
  {
    #undef wglGetExtensionsStringEXT
    s_deviceConfig.m_wglGetExtensionsStringEXT = (PFNWGLGETEXTENSIONSSTRINGEXTPROC) glew::GetProcAddress ("wglGetExtensionsStringEXT");
  }

  // WGL_EXT_make_current_read
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_make_current_read])
  {
    #undef wglMakeContextCurrentEXT
    #undef wglGetCurrentReadDCEXT
    s_deviceConfig.m_wglMakeContextCurrentEXT = (PFNWGLMAKECONTEXTCURRENTEXTPROC) glew::GetProcAddress ("wglMakeContextCurrentEXT");
    s_deviceConfig.m_wglGetCurrentReadDCEXT = (PFNWGLGETCURRENTREADDCEXTPROC) glew::GetProcAddress ("wglGetCurrentReadDCEXT");
  }

  // WGL_EXT_pbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pbuffer])
  {
    #undef wglCreatePbufferEXT
    #undef wglGetPbufferDCEXT
    #undef wglReleasePbufferDCEXT
    #undef wglDestroyPbufferEXT
    #undef wglQueryPbufferEXT
    s_deviceConfig.m_wglCreatePbufferEXT = (PFNWGLCREATEPBUFFEREXTPROC) glew::GetProcAddress ("wglCreatePbufferEXT");
    s_deviceConfig.m_wglGetPbufferDCEXT = (PFNWGLGETPBUFFERDCEXTPROC) glew::GetProcAddress ("wglGetPbufferDCEXT");
    s_deviceConfig.m_wglReleasePbufferDCEXT = (PFNWGLRELEASEPBUFFERDCEXTPROC) glew::GetProcAddress ("wglReleasePbufferDCEXT");
    s_deviceConfig.m_wglDestroyPbufferEXT = (PFNWGLDESTROYPBUFFEREXTPROC) glew::GetProcAddress ("wglDestroyPbufferEXT");
    s_deviceConfig.m_wglQueryPbufferEXT = (PFNWGLQUERYPBUFFEREXTPROC) glew::GetProcAddress ("wglQueryPbufferEXT");
  }

  // WGL_EXT_pixel_format
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_pixel_format])
  {
    #undef wglGetPixelFormatAttribivEXT
    #undef wglGetPixelFormatAttribfvEXT
    #undef wglChoosePixelFormatEXT
    s_deviceConfig.m_wglGetPixelFormatAttribivEXT = (PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) glew::GetProcAddress ("wglGetPixelFormatAttribivEXT");
    s_deviceConfig.m_wglGetPixelFormatAttribfvEXT = (PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) glew::GetProcAddress ("wglGetPixelFormatAttribfvEXT");
    s_deviceConfig.m_wglChoosePixelFormatEXT = (PFNWGLCHOOSEPIXELFORMATEXTPROC) glew::GetProcAddress ("wglChoosePixelFormatEXT");
  }

  // WGL_EXT_swap_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_EXT_swap_control])
  {
    #undef wglSwapIntervalEXT
    #undef wglGetSwapIntervalEXT
    s_deviceConfig.m_wglSwapIntervalEXT = (PFNWGLSWAPINTERVALEXTPROC) glew::GetProcAddress ("wglSwapIntervalEXT");
    s_deviceConfig.m_wglGetSwapIntervalEXT = (PFNWGLGETSWAPINTERVALEXTPROC) glew::GetProcAddress ("wglGetSwapIntervalEXT");
  }

  // WGL_I3D_digital_video_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_digital_video_control])
  {
    #undef wglGetDigitalVideoParametersI3D
    #undef wglSetDigitalVideoParametersI3D
    s_deviceConfig.m_wglGetDigitalVideoParametersI3D = (PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) glew::GetProcAddress ("wglGetDigitalVideoParametersI3D");
    s_deviceConfig.m_wglSetDigitalVideoParametersI3D = (PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) glew::GetProcAddress ("wglSetDigitalVideoParametersI3D");
  }

  // WGL_I3D_gamma
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_gamma])
  {
    #undef wglGetGammaTableParametersI3D
    #undef wglSetGammaTableParametersI3D
    #undef wglGetGammaTableI3D
    #undef wglSetGammaTableI3D
    s_deviceConfig.m_wglGetGammaTableParametersI3D = (PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) glew::GetProcAddress ("wglGetGammaTableParametersI3D");
    s_deviceConfig.m_wglSetGammaTableParametersI3D = (PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) glew::GetProcAddress ("wglSetGammaTableParametersI3D");
    s_deviceConfig.m_wglGetGammaTableI3D = (PFNWGLGETGAMMATABLEI3DPROC) glew::GetProcAddress ("wglGetGammaTableI3D");
    s_deviceConfig.m_wglSetGammaTableI3D = (PFNWGLSETGAMMATABLEI3DPROC) glew::GetProcAddress ("wglSetGammaTableI3D");
  }

  // WGL_I3D_genlock
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_genlock])
  {
    #undef wglEnableGenlockI3D
    #undef wglDisableGenlockI3D
    #undef wglIsEnabledGenlockI3D
    #undef wglGenlockSourceI3D
    #undef wglGetGenlockSourceI3D
    #undef wglGenlockSourceEdgeI3D
    #undef wglGetGenlockSourceEdgeI3D
    #undef wglGenlockSampleRateI3D
    #undef wglGetGenlockSampleRateI3D
    #undef wglGenlockSourceDelayI3D
    #undef wglGetGenlockSourceDelayI3D
    #undef wglQueryGenlockMaxSourceDelayI3D
    s_deviceConfig.m_wglEnableGenlockI3D = (PFNWGLENABLEGENLOCKI3DPROC) glew::GetProcAddress ("wglEnableGenlockI3D");
    s_deviceConfig.m_wglDisableGenlockI3D = (PFNWGLDISABLEGENLOCKI3DPROC) glew::GetProcAddress ("wglDisableGenlockI3D");
    s_deviceConfig.m_wglIsEnabledGenlockI3D = (PFNWGLISENABLEDGENLOCKI3DPROC) glew::GetProcAddress ("wglIsEnabledGenlockI3D");
    s_deviceConfig.m_wglGenlockSourceI3D = (PFNWGLGENLOCKSOURCEI3DPROC) glew::GetProcAddress ("wglGenlockSourceI3D");
    s_deviceConfig.m_wglGetGenlockSourceI3D = (PFNWGLGETGENLOCKSOURCEI3DPROC) glew::GetProcAddress ("wglGetGenlockSourceI3D");
    s_deviceConfig.m_wglGenlockSourceEdgeI3D = (PFNWGLGENLOCKSOURCEEDGEI3DPROC) glew::GetProcAddress ("wglGenlockSourceEdgeI3D");
    s_deviceConfig.m_wglGetGenlockSourceEdgeI3D = (PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) glew::GetProcAddress ("wglGetGenlockSourceEdgeI3D");
    s_deviceConfig.m_wglGenlockSampleRateI3D = (PFNWGLGENLOCKSAMPLERATEI3DPROC) glew::GetProcAddress ("wglGenlockSampleRateI3D");
    s_deviceConfig.m_wglGetGenlockSampleRateI3D = (PFNWGLGETGENLOCKSAMPLERATEI3DPROC) glew::GetProcAddress ("wglGetGenlockSampleRateI3D");
    s_deviceConfig.m_wglGenlockSourceDelayI3D = (PFNWGLGENLOCKSOURCEDELAYI3DPROC) glew::GetProcAddress ("wglGenlockSourceDelayI3D");
    s_deviceConfig.m_wglGetGenlockSourceDelayI3D = (PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) glew::GetProcAddress ("wglGetGenlockSourceDelayI3D");
    s_deviceConfig.m_wglQueryGenlockMaxSourceDelayI3D = (PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) glew::GetProcAddress ("wglQueryGenlockMaxSourceDelayI3D");
  }

  // WGL_I3D_image_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_image_buffer])
  {
    #undef wglCreateImageBufferI3D
    #undef wglDestroyImageBufferI3D
    #undef wglAssociateImageBufferEventsI3D
    #undef wglReleaseImageBufferEventsI3D
    s_deviceConfig.m_wglCreateImageBufferI3D = (PFNWGLCREATEIMAGEBUFFERI3DPROC) glew::GetProcAddress ("wglCreateImageBufferI3D");
    s_deviceConfig.m_wglDestroyImageBufferI3D = (PFNWGLDESTROYIMAGEBUFFERI3DPROC) glew::GetProcAddress ("wglDestroyImageBufferI3D");
    s_deviceConfig.m_wglAssociateImageBufferEventsI3D = (PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) glew::GetProcAddress ("wglAssociateImageBufferEventsI3D");
    s_deviceConfig.m_wglReleaseImageBufferEventsI3D = (PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) glew::GetProcAddress ("wglReleaseImageBufferEventsI3D");
  }

  // WGL_I3D_swap_frame_lock
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_lock])
  {
    #undef wglEnableFrameLockI3D
    #undef wglDisableFrameLockI3D
    #undef wglIsEnabledFrameLockI3D
    #undef wglQueryFrameLockMasterI3D
    s_deviceConfig.m_wglEnableFrameLockI3D = (PFNWGLENABLEFRAMELOCKI3DPROC) glew::GetProcAddress ("wglEnableFrameLockI3D");
    s_deviceConfig.m_wglDisableFrameLockI3D = (PFNWGLDISABLEFRAMELOCKI3DPROC) glew::GetProcAddress ("wglDisableFrameLockI3D");
    s_deviceConfig.m_wglIsEnabledFrameLockI3D = (PFNWGLISENABLEDFRAMELOCKI3DPROC) glew::GetProcAddress ("wglIsEnabledFrameLockI3D");
    s_deviceConfig.m_wglQueryFrameLockMasterI3D = (PFNWGLQUERYFRAMELOCKMASTERI3DPROC) glew::GetProcAddress ("wglQueryFrameLockMasterI3D");
  }

  // WGL_I3D_swap_frame_usage
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_I3D_swap_frame_usage])
  {
    #undef wglGetFrameUsageI3D
    #undef wglBeginFrameTrackingI3D
    #undef wglEndFrameTrackingI3D
    #undef wglQueryFrameTrackingI3D
    s_deviceConfig.m_wglGetFrameUsageI3D = (PFNWGLGETFRAMEUSAGEI3DPROC) glew::GetProcAddress ("wglGetFrameUsageI3D");
    s_deviceConfig.m_wglBeginFrameTrackingI3D = (PFNWGLBEGINFRAMETRACKINGI3DPROC) glew::GetProcAddress ("wglBeginFrameTrackingI3D");
    s_deviceConfig.m_wglEndFrameTrackingI3D = (PFNWGLENDFRAMETRACKINGI3DPROC) glew::GetProcAddress ("wglEndFrameTrackingI3D");
    s_deviceConfig.m_wglQueryFrameTrackingI3D = (PFNWGLQUERYFRAMETRACKINGI3DPROC) glew::GetProcAddress ("wglQueryFrameTrackingI3D");
  }

  // WGL_NV_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_copy_image])
  {
    #undef wglCopyImageSubDataNV
    s_deviceConfig.m_wglCopyImageSubDataNV = (PFNWGLCOPYIMAGESUBDATANVPROC) glew::GetProcAddress ("wglCopyImageSubDataNV");
  }

  // WGL_NV_delay_before_swap
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_delay_before_swap])
  {
    #undef wglDelayBeforeSwapNV
    s_deviceConfig.m_wglDelayBeforeSwapNV = (PFNWGLDELAYBEFORESWAPNVPROC) glew::GetProcAddress ("wglDelayBeforeSwapNV");
  }

  // WGL_NV_DX_interop
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_DX_interop])
  {
    #undef wglDXSetResourceShareHandleNV
    #undef wglDXOpenDeviceNV
    #undef wglDXCloseDeviceNV
    #undef wglDXRegisterObjectNV
    #undef wglDXUnregisterObjectNV
    #undef wglDXObjectAccessNV
    #undef wglDXLockObjectsNV
    #undef wglDXUnlockObjectsNV
    s_deviceConfig.m_wglDXSetResourceShareHandleNV = (PFNWGLDXSETRESOURCESHAREHANDLENVPROC) glew::GetProcAddress ("wglDXSetResourceShareHandleNV");
    s_deviceConfig.m_wglDXOpenDeviceNV = (PFNWGLDXOPENDEVICENVPROC) glew::GetProcAddress ("wglDXOpenDeviceNV");
    s_deviceConfig.m_wglDXCloseDeviceNV = (PFNWGLDXCLOSEDEVICENVPROC) glew::GetProcAddress ("wglDXCloseDeviceNV");
    s_deviceConfig.m_wglDXRegisterObjectNV = (PFNWGLDXREGISTEROBJECTNVPROC) glew::GetProcAddress ("wglDXRegisterObjectNV");
    s_deviceConfig.m_wglDXUnregisterObjectNV = (PFNWGLDXUNREGISTEROBJECTNVPROC) glew::GetProcAddress ("wglDXUnregisterObjectNV");
    s_deviceConfig.m_wglDXObjectAccessNV = (PFNWGLDXOBJECTACCESSNVPROC) glew::GetProcAddress ("wglDXObjectAccessNV");
    s_deviceConfig.m_wglDXLockObjectsNV = (PFNWGLDXLOCKOBJECTSNVPROC) glew::GetProcAddress ("wglDXLockObjectsNV");
    s_deviceConfig.m_wglDXUnlockObjectsNV = (PFNWGLDXUNLOCKOBJECTSNVPROC) glew::GetProcAddress ("wglDXUnlockObjectsNV");
  }

  // WGL_NV_gpu_affinity
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_gpu_affinity])
  {
    #undef wglEnumGpusNV
    #undef wglEnumGpuDevicesNV
    #undef wglCreateAffinityDCNV
    #undef wglEnumGpusFromAffinityDCNV
    #undef wglDeleteDCNV
    s_deviceConfig.m_wglEnumGpusNV = (PFNWGLENUMGPUSNVPROC) glew::GetProcAddress ("wglEnumGpusNV");
    s_deviceConfig.m_wglEnumGpuDevicesNV = (PFNWGLENUMGPUDEVICESNVPROC) glew::GetProcAddress ("wglEnumGpuDevicesNV");
    s_deviceConfig.m_wglCreateAffinityDCNV = (PFNWGLCREATEAFFINITYDCNVPROC) glew::GetProcAddress ("wglCreateAffinityDCNV");
    s_deviceConfig.m_wglEnumGpusFromAffinityDCNV = (PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) glew::GetProcAddress ("wglEnumGpusFromAffinityDCNV");
    s_deviceConfig.m_wglDeleteDCNV = (PFNWGLDELETEDCNVPROC) glew::GetProcAddress ("wglDeleteDCNV");
  }

  // WGL_NV_present_video
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_present_video])
  {
    #undef wglEnumerateVideoDevicesNV
    #undef wglBindVideoDeviceNV
    #undef wglQueryCurrentContextNV
    s_deviceConfig.m_wglEnumerateVideoDevicesNV = (PFNWGLENUMERATEVIDEODEVICESNVPROC) glew::GetProcAddress ("wglEnumerateVideoDevicesNV");
    s_deviceConfig.m_wglBindVideoDeviceNV = (PFNWGLBINDVIDEODEVICENVPROC) glew::GetProcAddress ("wglBindVideoDeviceNV");
    s_deviceConfig.m_wglQueryCurrentContextNV = (PFNWGLQUERYCURRENTCONTEXTNVPROC) glew::GetProcAddress ("wglQueryCurrentContextNV");
  }

  // WGL_NV_swap_group
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_swap_group])
  {
    #undef wglJoinSwapGroupNV
    #undef wglBindSwapBarrierNV
    #undef wglQuerySwapGroupNV
    #undef wglQueryMaxSwapGroupsNV
    #undef wglQueryFrameCountNV
    #undef wglResetFrameCountNV
    s_deviceConfig.m_wglJoinSwapGroupNV = (PFNWGLJOINSWAPGROUPNVPROC) glew::GetProcAddress ("wglJoinSwapGroupNV");
    s_deviceConfig.m_wglBindSwapBarrierNV = (PFNWGLBINDSWAPBARRIERNVPROC) glew::GetProcAddress ("wglBindSwapBarrierNV");
    s_deviceConfig.m_wglQuerySwapGroupNV = (PFNWGLQUERYSWAPGROUPNVPROC) glew::GetProcAddress ("wglQuerySwapGroupNV");
    s_deviceConfig.m_wglQueryMaxSwapGroupsNV = (PFNWGLQUERYMAXSWAPGROUPSNVPROC) glew::GetProcAddress ("wglQueryMaxSwapGroupsNV");
    s_deviceConfig.m_wglQueryFrameCountNV = (PFNWGLQUERYFRAMECOUNTNVPROC) glew::GetProcAddress ("wglQueryFrameCountNV");
    s_deviceConfig.m_wglResetFrameCountNV = (PFNWGLRESETFRAMECOUNTNVPROC) glew::GetProcAddress ("wglResetFrameCountNV");
  }

  // WGL_NV_video_capture
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_capture])
  {
    #undef wglBindVideoCaptureDeviceNV
    #undef wglEnumerateVideoCaptureDevicesNV
    #undef wglLockVideoCaptureDeviceNV
    #undef wglQueryVideoCaptureDeviceNV
    #undef wglReleaseVideoCaptureDeviceNV
    s_deviceConfig.m_wglBindVideoCaptureDeviceNV = (PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) glew::GetProcAddress ("wglBindVideoCaptureDeviceNV");
    s_deviceConfig.m_wglEnumerateVideoCaptureDevicesNV = (PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) glew::GetProcAddress ("wglEnumerateVideoCaptureDevicesNV");
    s_deviceConfig.m_wglLockVideoCaptureDeviceNV = (PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) glew::GetProcAddress ("wglLockVideoCaptureDeviceNV");
    s_deviceConfig.m_wglQueryVideoCaptureDeviceNV = (PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) glew::GetProcAddress ("wglQueryVideoCaptureDeviceNV");
    s_deviceConfig.m_wglReleaseVideoCaptureDeviceNV = (PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) glew::GetProcAddress ("wglReleaseVideoCaptureDeviceNV");
  }

  // WGL_NV_video_output
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_video_output])
  {
    #undef wglGetVideoDeviceNV
    #undef wglReleaseVideoDeviceNV
    #undef wglBindVideoImageNV
    #undef wglReleaseVideoImageNV
    #undef wglSendPbufferToVideoNV
    #undef wglGetVideoInfoNV
    s_deviceConfig.m_wglGetVideoDeviceNV = (PFNWGLGETVIDEODEVICENVPROC) glew::GetProcAddress ("wglGetVideoDeviceNV");
    s_deviceConfig.m_wglReleaseVideoDeviceNV = (PFNWGLRELEASEVIDEODEVICENVPROC) glew::GetProcAddress ("wglReleaseVideoDeviceNV");
    s_deviceConfig.m_wglBindVideoImageNV = (PFNWGLBINDVIDEOIMAGENVPROC) glew::GetProcAddress ("wglBindVideoImageNV");
    s_deviceConfig.m_wglReleaseVideoImageNV = (PFNWGLRELEASEVIDEOIMAGENVPROC) glew::GetProcAddress ("wglReleaseVideoImageNV");
    s_deviceConfig.m_wglSendPbufferToVideoNV = (PFNWGLSENDPBUFFERTOVIDEONVPROC) glew::GetProcAddress ("wglSendPbufferToVideoNV");
    s_deviceConfig.m_wglGetVideoInfoNV = (PFNWGLGETVIDEOINFONVPROC) glew::GetProcAddress ("wglGetVideoInfoNV");
  }

  // WGL_NV_vertex_array_range
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_NV_vertex_array_range])
  {
    #undef wglAllocateMemoryNV
    #undef wglFreeMemoryNV
    s_deviceConfig.m_wglAllocateMemoryNV = (PFNWGLALLOCATEMEMORYNVPROC) glew::GetProcAddress ("wglAllocateMemoryNV");
    s_deviceConfig.m_wglFreeMemoryNV = (PFNWGLFREEMEMORYNVPROC) glew::GetProcAddress ("wglFreeMemoryNV");
  }

  // WGL_OML_sync_control
  if (s_deviceConfig.m_featureSupported [GLEW_WGL_OML_sync_control])
  {
    #undef wglGetSyncValuesOML
    #undef wglGetMscRateOML
    #undef wglSwapBuffersMscOML
    #undef wglSwapLayerBuffersMscOML
    #undef wglWaitForMscOML
    #undef wglWaitForSbcOML
    s_deviceConfig.m_wglGetSyncValuesOML = (PFNWGLGETSYNCVALUESOMLPROC) glew::GetProcAddress ("wglGetSyncValuesOML");
    s_deviceConfig.m_wglGetMscRateOML = (PFNWGLGETMSCRATEOMLPROC) glew::GetProcAddress ("wglGetMscRateOML");
    s_deviceConfig.m_wglSwapBuffersMscOML = (PFNWGLSWAPBUFFERSMSCOMLPROC) glew::GetProcAddress ("wglSwapBuffersMscOML");
    s_deviceConfig.m_wglSwapLayerBuffersMscOML = (PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) glew::GetProcAddress ("wglSwapLayerBuffersMscOML");
    s_deviceConfig.m_wglWaitForMscOML = (PFNWGLWAITFORMSCOMLPROC) glew::GetProcAddress ("wglWaitForMscOML");
    s_deviceConfig.m_wglWaitForSbcOML = (PFNWGLWAITFORSBCOMLPROC) glew::GetProcAddress ("wglWaitForSbcOML");
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::wgl::Deinitialise ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
