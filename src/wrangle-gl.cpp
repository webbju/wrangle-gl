////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>

#include <unordered_set>

#include <wrangle-gl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArrays

void  glew::gl::glDrawArrays (GLenum mode, GLint first, GLsizei count)
{
  // GL_VERSION_1_1 - glDrawArrays
  if (s_deviceConfig.m_glDrawArrays)
  {
    s_deviceConfig.m_glDrawArrays (mode, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElements

void  glew::gl::glDrawElements (GLenum mode, GLsizei count, GLenum type, const void * indices)
{
  // GL_VERSION_1_1 - glDrawElements
  if (s_deviceConfig.m_glDrawElements)
  {
    s_deviceConfig.m_glDrawElements (mode, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPointerv

void  glew::gl::glGetPointerv (GLenum pname, void ** params)
{
  // GL_VERSION_1_1 - glGetPointerv
  if (s_deviceConfig.m_glGetPointerv)
  {
    s_deviceConfig.m_glGetPointerv (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPolygonOffset

void  glew::gl::glPolygonOffset (GLfloat factor, GLfloat units)
{
  // GL_VERSION_1_1 - glPolygonOffset
  if (s_deviceConfig.m_glPolygonOffset)
  {
    s_deviceConfig.m_glPolygonOffset (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexImage1D

void  glew::gl::glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  // GL_VERSION_1_1 - glCopyTexImage1D
  if (s_deviceConfig.m_glCopyTexImage1D)
  {
    s_deviceConfig.m_glCopyTexImage1D (target, level, internalformat, x, y, width, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexImage2D

void  glew::gl::glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_VERSION_1_1 - glCopyTexImage2D
  if (s_deviceConfig.m_glCopyTexImage2D)
  {
    s_deviceConfig.m_glCopyTexImage2D (target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage1D

void  glew::gl::glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_VERSION_1_1 - glCopyTexSubImage1D
  if (s_deviceConfig.m_glCopyTexSubImage1D)
  {
    s_deviceConfig.m_glCopyTexSubImage1D (target, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage2D

void  glew::gl::glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_1_1 - glCopyTexSubImage2D
  if (s_deviceConfig.m_glCopyTexSubImage2D)
  {
    s_deviceConfig.m_glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage1D

void  glew::gl::glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_1_1 - glTexSubImage1D
  if (s_deviceConfig.m_glTexSubImage1D)
  {
    s_deviceConfig.m_glTexSubImage1D (target, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage2D

void  glew::gl::glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_1_1 - glTexSubImage2D
  if (s_deviceConfig.m_glTexSubImage2D)
  {
    s_deviceConfig.m_glTexSubImage2D (target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTexture

void  glew::gl::glBindTexture (GLenum target, GLuint texture)
{
  // GL_VERSION_1_1 - glBindTexture
  if (s_deviceConfig.m_glBindTexture)
  {
    s_deviceConfig.m_glBindTexture (target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteTextures

void  glew::gl::glDeleteTextures (GLsizei n, const GLuint * textures)
{
  // GL_VERSION_1_1 - glDeleteTextures
  if (s_deviceConfig.m_glDeleteTextures)
  {
    s_deviceConfig.m_glDeleteTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenTextures

void  glew::gl::glGenTextures (GLsizei n, GLuint * textures)
{
  // GL_VERSION_1_1 - glGenTextures
  if (s_deviceConfig.m_glGenTextures)
  {
    s_deviceConfig.m_glGenTextures (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTexture

GLboolean glew::gl::glIsTexture (GLuint texture)
{
  // GL_VERSION_1_1 - glIsTexture
  if (s_deviceConfig.m_glIsTexture)
  {
    return s_deviceConfig.m_glIsTexture (texture);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glArrayElement

void  glew::gl::glArrayElement (GLint i)
{
  // GL_VERSION_1_1 - glArrayElement
  if (s_deviceConfig.m_glArrayElement)
  {
    s_deviceConfig.m_glArrayElement (i);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorPointer

void  glew::gl::glColorPointer (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glColorPointer
  if (s_deviceConfig.m_glColorPointer)
  {
    s_deviceConfig.m_glColorPointer (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableClientState

void  glew::gl::glDisableClientState (GLenum array)
{
  // GL_VERSION_1_1 - glDisableClientState
  if (s_deviceConfig.m_glDisableClientState)
  {
    s_deviceConfig.m_glDisableClientState (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEdgeFlagPointer

void  glew::gl::glEdgeFlagPointer (GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glEdgeFlagPointer
  if (s_deviceConfig.m_glEdgeFlagPointer)
  {
    s_deviceConfig.m_glEdgeFlagPointer (stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableClientState

void  glew::gl::glEnableClientState (GLenum array)
{
  // GL_VERSION_1_1 - glEnableClientState
  if (s_deviceConfig.m_glEnableClientState)
  {
    s_deviceConfig.m_glEnableClientState (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexPointer

void  glew::gl::glIndexPointer (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glIndexPointer
  if (s_deviceConfig.m_glIndexPointer)
  {
    s_deviceConfig.m_glIndexPointer (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInterleavedArrays

void  glew::gl::glInterleavedArrays (GLenum format, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glInterleavedArrays
  if (s_deviceConfig.m_glInterleavedArrays)
  {
    s_deviceConfig.m_glInterleavedArrays (format, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalPointer

void  glew::gl::glNormalPointer (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glNormalPointer
  if (s_deviceConfig.m_glNormalPointer)
  {
    s_deviceConfig.m_glNormalPointer (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordPointer

void  glew::gl::glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glTexCoordPointer
  if (s_deviceConfig.m_glTexCoordPointer)
  {
    s_deviceConfig.m_glTexCoordPointer (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexPointer

void  glew::gl::glVertexPointer (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_1 - glVertexPointer
  if (s_deviceConfig.m_glVertexPointer)
  {
    s_deviceConfig.m_glVertexPointer (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAreTexturesResident

GLboolean glew::gl::glAreTexturesResident (GLsizei n, const GLuint * textures, GLboolean * residences)
{
  // GL_VERSION_1_1 - glAreTexturesResident
  if (s_deviceConfig.m_glAreTexturesResident)
  {
    return s_deviceConfig.m_glAreTexturesResident (n, textures, residences);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrioritizeTextures

void  glew::gl::glPrioritizeTextures (GLsizei n, const GLuint * textures, const GLfloat * priorities)
{
  // GL_VERSION_1_1 - glPrioritizeTextures
  if (s_deviceConfig.m_glPrioritizeTextures)
  {
    s_deviceConfig.m_glPrioritizeTextures (n, textures, priorities);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexub

void  glew::gl::glIndexub (GLubyte c)
{
  // GL_VERSION_1_1 - glIndexub
  if (s_deviceConfig.m_glIndexub)
  {
    s_deviceConfig.m_glIndexub (c);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexubv

void  glew::gl::glIndexubv (const GLubyte * c)
{
  // GL_VERSION_1_1 - glIndexubv
  if (s_deviceConfig.m_glIndexubv)
  {
    s_deviceConfig.m_glIndexubv (c);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPopClientAttrib

void  glew::gl::glPopClientAttrib ()
{
  // GL_VERSION_1_1 - glPopClientAttrib
  if (s_deviceConfig.m_glPopClientAttrib)
  {
    s_deviceConfig.m_glPopClientAttrib ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushClientAttrib

void  glew::gl::glPushClientAttrib (GLbitfield mask)
{
  // GL_VERSION_1_1 - glPushClientAttrib
  if (s_deviceConfig.m_glPushClientAttrib)
  {
    s_deviceConfig.m_glPushClientAttrib (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElements

void  glew::gl::glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
  // GL_VERSION_1_2 - glDrawRangeElements
  if (s_deviceConfig.m_glDrawRangeElements)
  {
    s_deviceConfig.m_glDrawRangeElements (mode, start, end, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3D

void  glew::gl::glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_1_2 - glTexImage3D
  if (s_deviceConfig.m_glTexImage3D)
  {
    s_deviceConfig.m_glTexImage3D (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage3D

void  glew::gl::glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_1_2 - glTexSubImage3D
  if (s_deviceConfig.m_glTexSubImage3D)
  {
    s_deviceConfig.m_glTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage3D

void  glew::gl::glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_1_2 - glCopyTexSubImage3D
  if (s_deviceConfig.m_glCopyTexSubImage3D)
  {
    s_deviceConfig.m_glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveTexture

void  glew::gl::glActiveTexture (GLenum texture)
{
  // GL_VERSION_1_3 - glActiveTexture
  if (s_deviceConfig.m_glActiveTexture)
  {
    s_deviceConfig.m_glActiveTexture (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleCoverage

void  glew::gl::glSampleCoverage (GLfloat value, GLboolean invert)
{
  // GL_VERSION_1_3 - glSampleCoverage
  if (s_deviceConfig.m_glSampleCoverage)
  {
    s_deviceConfig.m_glSampleCoverage (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage3D

void  glew::gl::glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexImage3D
  if (s_deviceConfig.m_glCompressedTexImage3D)
  {
    s_deviceConfig.m_glCompressedTexImage3D (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage2D

void  glew::gl::glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexImage2D
  if (s_deviceConfig.m_glCompressedTexImage2D)
  {
    s_deviceConfig.m_glCompressedTexImage2D (target, level, internalformat, width, height, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage1D

void  glew::gl::glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexImage1D
  if (s_deviceConfig.m_glCompressedTexImage1D)
  {
    s_deviceConfig.m_glCompressedTexImage1D (target, level, internalformat, width, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage3D

void  glew::gl::glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexSubImage3D
  if (s_deviceConfig.m_glCompressedTexSubImage3D)
  {
    s_deviceConfig.m_glCompressedTexSubImage3D (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage2D

void  glew::gl::glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexSubImage2D
  if (s_deviceConfig.m_glCompressedTexSubImage2D)
  {
    s_deviceConfig.m_glCompressedTexSubImage2D (target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage1D

void  glew::gl::glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_1_3 - glCompressedTexSubImage1D
  if (s_deviceConfig.m_glCompressedTexSubImage1D)
  {
    s_deviceConfig.m_glCompressedTexSubImage1D (target, level, xoffset, width, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedTexImage

void  glew::gl::glGetCompressedTexImage (GLenum target, GLint level, void * img)
{
  // GL_VERSION_1_3 - glGetCompressedTexImage
  if (s_deviceConfig.m_glGetCompressedTexImage)
  {
    s_deviceConfig.m_glGetCompressedTexImage (target, level, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientActiveTexture

void  glew::gl::glClientActiveTexture (GLenum texture)
{
  // GL_VERSION_1_3 - glClientActiveTexture
  if (s_deviceConfig.m_glClientActiveTexture)
  {
    s_deviceConfig.m_glClientActiveTexture (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1d

void  glew::gl::glMultiTexCoord1d (GLenum target, GLdouble s)
{
  // GL_VERSION_1_3 - glMultiTexCoord1d
  if (s_deviceConfig.m_glMultiTexCoord1d)
  {
    s_deviceConfig.m_glMultiTexCoord1d (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1dv

void  glew::gl::glMultiTexCoord1dv (GLenum target, const GLdouble * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord1dv
  if (s_deviceConfig.m_glMultiTexCoord1dv)
  {
    s_deviceConfig.m_glMultiTexCoord1dv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1f

void  glew::gl::glMultiTexCoord1f (GLenum target, GLfloat s)
{
  // GL_VERSION_1_3 - glMultiTexCoord1f
  if (s_deviceConfig.m_glMultiTexCoord1f)
  {
    s_deviceConfig.m_glMultiTexCoord1f (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1fv

void  glew::gl::glMultiTexCoord1fv (GLenum target, const GLfloat * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord1fv
  if (s_deviceConfig.m_glMultiTexCoord1fv)
  {
    s_deviceConfig.m_glMultiTexCoord1fv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1i

void  glew::gl::glMultiTexCoord1i (GLenum target, GLint s)
{
  // GL_VERSION_1_3 - glMultiTexCoord1i
  if (s_deviceConfig.m_glMultiTexCoord1i)
  {
    s_deviceConfig.m_glMultiTexCoord1i (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1iv

void  glew::gl::glMultiTexCoord1iv (GLenum target, const GLint * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord1iv
  if (s_deviceConfig.m_glMultiTexCoord1iv)
  {
    s_deviceConfig.m_glMultiTexCoord1iv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1s

void  glew::gl::glMultiTexCoord1s (GLenum target, GLshort s)
{
  // GL_VERSION_1_3 - glMultiTexCoord1s
  if (s_deviceConfig.m_glMultiTexCoord1s)
  {
    s_deviceConfig.m_glMultiTexCoord1s (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1sv

void  glew::gl::glMultiTexCoord1sv (GLenum target, const GLshort * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord1sv
  if (s_deviceConfig.m_glMultiTexCoord1sv)
  {
    s_deviceConfig.m_glMultiTexCoord1sv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2d

void  glew::gl::glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t)
{
  // GL_VERSION_1_3 - glMultiTexCoord2d
  if (s_deviceConfig.m_glMultiTexCoord2d)
  {
    s_deviceConfig.m_glMultiTexCoord2d (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2dv

void  glew::gl::glMultiTexCoord2dv (GLenum target, const GLdouble * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord2dv
  if (s_deviceConfig.m_glMultiTexCoord2dv)
  {
    s_deviceConfig.m_glMultiTexCoord2dv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2f

void  glew::gl::glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t)
{
  // GL_VERSION_1_3 - glMultiTexCoord2f
  if (s_deviceConfig.m_glMultiTexCoord2f)
  {
    s_deviceConfig.m_glMultiTexCoord2f (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2fv

void  glew::gl::glMultiTexCoord2fv (GLenum target, const GLfloat * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord2fv
  if (s_deviceConfig.m_glMultiTexCoord2fv)
  {
    s_deviceConfig.m_glMultiTexCoord2fv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2i

void  glew::gl::glMultiTexCoord2i (GLenum target, GLint s, GLint t)
{
  // GL_VERSION_1_3 - glMultiTexCoord2i
  if (s_deviceConfig.m_glMultiTexCoord2i)
  {
    s_deviceConfig.m_glMultiTexCoord2i (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2iv

void  glew::gl::glMultiTexCoord2iv (GLenum target, const GLint * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord2iv
  if (s_deviceConfig.m_glMultiTexCoord2iv)
  {
    s_deviceConfig.m_glMultiTexCoord2iv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2s

void  glew::gl::glMultiTexCoord2s (GLenum target, GLshort s, GLshort t)
{
  // GL_VERSION_1_3 - glMultiTexCoord2s
  if (s_deviceConfig.m_glMultiTexCoord2s)
  {
    s_deviceConfig.m_glMultiTexCoord2s (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2sv

void  glew::gl::glMultiTexCoord2sv (GLenum target, const GLshort * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord2sv
  if (s_deviceConfig.m_glMultiTexCoord2sv)
  {
    s_deviceConfig.m_glMultiTexCoord2sv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3d

void  glew::gl::glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  // GL_VERSION_1_3 - glMultiTexCoord3d
  if (s_deviceConfig.m_glMultiTexCoord3d)
  {
    s_deviceConfig.m_glMultiTexCoord3d (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3dv

void  glew::gl::glMultiTexCoord3dv (GLenum target, const GLdouble * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord3dv
  if (s_deviceConfig.m_glMultiTexCoord3dv)
  {
    s_deviceConfig.m_glMultiTexCoord3dv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3f

void  glew::gl::glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  // GL_VERSION_1_3 - glMultiTexCoord3f
  if (s_deviceConfig.m_glMultiTexCoord3f)
  {
    s_deviceConfig.m_glMultiTexCoord3f (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3fv

void  glew::gl::glMultiTexCoord3fv (GLenum target, const GLfloat * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord3fv
  if (s_deviceConfig.m_glMultiTexCoord3fv)
  {
    s_deviceConfig.m_glMultiTexCoord3fv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3i

void  glew::gl::glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r)
{
  // GL_VERSION_1_3 - glMultiTexCoord3i
  if (s_deviceConfig.m_glMultiTexCoord3i)
  {
    s_deviceConfig.m_glMultiTexCoord3i (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3iv

void  glew::gl::glMultiTexCoord3iv (GLenum target, const GLint * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord3iv
  if (s_deviceConfig.m_glMultiTexCoord3iv)
  {
    s_deviceConfig.m_glMultiTexCoord3iv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3s

void  glew::gl::glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r)
{
  // GL_VERSION_1_3 - glMultiTexCoord3s
  if (s_deviceConfig.m_glMultiTexCoord3s)
  {
    s_deviceConfig.m_glMultiTexCoord3s (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3sv

void  glew::gl::glMultiTexCoord3sv (GLenum target, const GLshort * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord3sv
  if (s_deviceConfig.m_glMultiTexCoord3sv)
  {
    s_deviceConfig.m_glMultiTexCoord3sv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4d

void  glew::gl::glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  // GL_VERSION_1_3 - glMultiTexCoord4d
  if (s_deviceConfig.m_glMultiTexCoord4d)
  {
    s_deviceConfig.m_glMultiTexCoord4d (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4dv

void  glew::gl::glMultiTexCoord4dv (GLenum target, const GLdouble * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord4dv
  if (s_deviceConfig.m_glMultiTexCoord4dv)
  {
    s_deviceConfig.m_glMultiTexCoord4dv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4f

void  glew::gl::glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  // GL_VERSION_1_3 - glMultiTexCoord4f
  if (s_deviceConfig.m_glMultiTexCoord4f)
  {
    s_deviceConfig.m_glMultiTexCoord4f (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4fv

void  glew::gl::glMultiTexCoord4fv (GLenum target, const GLfloat * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord4fv
  if (s_deviceConfig.m_glMultiTexCoord4fv)
  {
    s_deviceConfig.m_glMultiTexCoord4fv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4i

void  glew::gl::glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  // GL_VERSION_1_3 - glMultiTexCoord4i
  if (s_deviceConfig.m_glMultiTexCoord4i)
  {
    s_deviceConfig.m_glMultiTexCoord4i (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4iv

void  glew::gl::glMultiTexCoord4iv (GLenum target, const GLint * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord4iv
  if (s_deviceConfig.m_glMultiTexCoord4iv)
  {
    s_deviceConfig.m_glMultiTexCoord4iv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4s

void  glew::gl::glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  // GL_VERSION_1_3 - glMultiTexCoord4s
  if (s_deviceConfig.m_glMultiTexCoord4s)
  {
    s_deviceConfig.m_glMultiTexCoord4s (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4sv

void  glew::gl::glMultiTexCoord4sv (GLenum target, const GLshort * v)
{
  // GL_VERSION_1_3 - glMultiTexCoord4sv
  if (s_deviceConfig.m_glMultiTexCoord4sv)
  {
    s_deviceConfig.m_glMultiTexCoord4sv (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadTransposeMatrixf

void  glew::gl::glLoadTransposeMatrixf (const GLfloat * m)
{
  // GL_VERSION_1_3 - glLoadTransposeMatrixf
  if (s_deviceConfig.m_glLoadTransposeMatrixf)
  {
    s_deviceConfig.m_glLoadTransposeMatrixf (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadTransposeMatrixd

void  glew::gl::glLoadTransposeMatrixd (const GLdouble * m)
{
  // GL_VERSION_1_3 - glLoadTransposeMatrixd
  if (s_deviceConfig.m_glLoadTransposeMatrixd)
  {
    s_deviceConfig.m_glLoadTransposeMatrixd (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultTransposeMatrixf

void  glew::gl::glMultTransposeMatrixf (const GLfloat * m)
{
  // GL_VERSION_1_3 - glMultTransposeMatrixf
  if (s_deviceConfig.m_glMultTransposeMatrixf)
  {
    s_deviceConfig.m_glMultTransposeMatrixf (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultTransposeMatrixd

void  glew::gl::glMultTransposeMatrixd (const GLdouble * m)
{
  // GL_VERSION_1_3 - glMultTransposeMatrixd
  if (s_deviceConfig.m_glMultTransposeMatrixd)
  {
    s_deviceConfig.m_glMultTransposeMatrixd (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparate

void  glew::gl::glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  // GL_VERSION_1_4 - glBlendFuncSeparate
  if (s_deviceConfig.m_glBlendFuncSeparate)
  {
    s_deviceConfig.m_glBlendFuncSeparate (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArrays

void  glew::gl::glMultiDrawArrays (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount)
{
  // GL_VERSION_1_4 - glMultiDrawArrays
  if (s_deviceConfig.m_glMultiDrawArrays)
  {
    s_deviceConfig.m_glMultiDrawArrays (mode, first, count, drawcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElements

void  glew::gl::glMultiDrawElements (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount)
{
  // GL_VERSION_1_4 - glMultiDrawElements
  if (s_deviceConfig.m_glMultiDrawElements)
  {
    s_deviceConfig.m_glMultiDrawElements (mode, count, type, indices, drawcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterf

void  glew::gl::glPointParameterf (GLenum pname, GLfloat param)
{
  // GL_VERSION_1_4 - glPointParameterf
  if (s_deviceConfig.m_glPointParameterf)
  {
    s_deviceConfig.m_glPointParameterf (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfv

void  glew::gl::glPointParameterfv (GLenum pname, const GLfloat * params)
{
  // GL_VERSION_1_4 - glPointParameterfv
  if (s_deviceConfig.m_glPointParameterfv)
  {
    s_deviceConfig.m_glPointParameterfv (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameteri

void  glew::gl::glPointParameteri (GLenum pname, GLint param)
{
  // GL_VERSION_1_4 - glPointParameteri
  if (s_deviceConfig.m_glPointParameteri)
  {
    s_deviceConfig.m_glPointParameteri (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameteriv

void  glew::gl::glPointParameteriv (GLenum pname, const GLint * params)
{
  // GL_VERSION_1_4 - glPointParameteriv
  if (s_deviceConfig.m_glPointParameteriv)
  {
    s_deviceConfig.m_glPointParameteriv (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordf

void  glew::gl::glFogCoordf (GLfloat coord)
{
  // GL_VERSION_1_4 - glFogCoordf
  if (s_deviceConfig.m_glFogCoordf)
  {
    s_deviceConfig.m_glFogCoordf (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordfv

void  glew::gl::glFogCoordfv (const GLfloat * coord)
{
  // GL_VERSION_1_4 - glFogCoordfv
  if (s_deviceConfig.m_glFogCoordfv)
  {
    s_deviceConfig.m_glFogCoordfv (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordd

void  glew::gl::glFogCoordd (GLdouble coord)
{
  // GL_VERSION_1_4 - glFogCoordd
  if (s_deviceConfig.m_glFogCoordd)
  {
    s_deviceConfig.m_glFogCoordd (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoorddv

void  glew::gl::glFogCoorddv (const GLdouble * coord)
{
  // GL_VERSION_1_4 - glFogCoorddv
  if (s_deviceConfig.m_glFogCoorddv)
  {
    s_deviceConfig.m_glFogCoorddv (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordPointer

void  glew::gl::glFogCoordPointer (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_4 - glFogCoordPointer
  if (s_deviceConfig.m_glFogCoordPointer)
  {
    s_deviceConfig.m_glFogCoordPointer (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3b

void  glew::gl::glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3b
  if (s_deviceConfig.m_glSecondaryColor3b)
  {
    s_deviceConfig.m_glSecondaryColor3b (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3bv

void  glew::gl::glSecondaryColor3bv (const GLbyte * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3bv
  if (s_deviceConfig.m_glSecondaryColor3bv)
  {
    s_deviceConfig.m_glSecondaryColor3bv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3d

void  glew::gl::glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3d
  if (s_deviceConfig.m_glSecondaryColor3d)
  {
    s_deviceConfig.m_glSecondaryColor3d (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3dv

void  glew::gl::glSecondaryColor3dv (const GLdouble * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3dv
  if (s_deviceConfig.m_glSecondaryColor3dv)
  {
    s_deviceConfig.m_glSecondaryColor3dv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3f

void  glew::gl::glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3f
  if (s_deviceConfig.m_glSecondaryColor3f)
  {
    s_deviceConfig.m_glSecondaryColor3f (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3fv

void  glew::gl::glSecondaryColor3fv (const GLfloat * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3fv
  if (s_deviceConfig.m_glSecondaryColor3fv)
  {
    s_deviceConfig.m_glSecondaryColor3fv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3i

void  glew::gl::glSecondaryColor3i (GLint red, GLint green, GLint blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3i
  if (s_deviceConfig.m_glSecondaryColor3i)
  {
    s_deviceConfig.m_glSecondaryColor3i (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3iv

void  glew::gl::glSecondaryColor3iv (const GLint * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3iv
  if (s_deviceConfig.m_glSecondaryColor3iv)
  {
    s_deviceConfig.m_glSecondaryColor3iv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3s

void  glew::gl::glSecondaryColor3s (GLshort red, GLshort green, GLshort blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3s
  if (s_deviceConfig.m_glSecondaryColor3s)
  {
    s_deviceConfig.m_glSecondaryColor3s (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3sv

void  glew::gl::glSecondaryColor3sv (const GLshort * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3sv
  if (s_deviceConfig.m_glSecondaryColor3sv)
  {
    s_deviceConfig.m_glSecondaryColor3sv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ub

void  glew::gl::glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3ub
  if (s_deviceConfig.m_glSecondaryColor3ub)
  {
    s_deviceConfig.m_glSecondaryColor3ub (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ubv

void  glew::gl::glSecondaryColor3ubv (const GLubyte * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3ubv
  if (s_deviceConfig.m_glSecondaryColor3ubv)
  {
    s_deviceConfig.m_glSecondaryColor3ubv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ui

void  glew::gl::glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3ui
  if (s_deviceConfig.m_glSecondaryColor3ui)
  {
    s_deviceConfig.m_glSecondaryColor3ui (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3uiv

void  glew::gl::glSecondaryColor3uiv (const GLuint * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3uiv
  if (s_deviceConfig.m_glSecondaryColor3uiv)
  {
    s_deviceConfig.m_glSecondaryColor3uiv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3us

void  glew::gl::glSecondaryColor3us (GLushort red, GLushort green, GLushort blue)
{
  // GL_VERSION_1_4 - glSecondaryColor3us
  if (s_deviceConfig.m_glSecondaryColor3us)
  {
    s_deviceConfig.m_glSecondaryColor3us (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3usv

void  glew::gl::glSecondaryColor3usv (const GLushort * v)
{
  // GL_VERSION_1_4 - glSecondaryColor3usv
  if (s_deviceConfig.m_glSecondaryColor3usv)
  {
    s_deviceConfig.m_glSecondaryColor3usv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorPointer

void  glew::gl::glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_1_4 - glSecondaryColorPointer
  if (s_deviceConfig.m_glSecondaryColorPointer)
  {
    s_deviceConfig.m_glSecondaryColorPointer (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2d

void  glew::gl::glWindowPos2d (GLdouble x, GLdouble y)
{
  // GL_VERSION_1_4 - glWindowPos2d
  if (s_deviceConfig.m_glWindowPos2d)
  {
    s_deviceConfig.m_glWindowPos2d (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2dv

void  glew::gl::glWindowPos2dv (const GLdouble * v)
{
  // GL_VERSION_1_4 - glWindowPos2dv
  if (s_deviceConfig.m_glWindowPos2dv)
  {
    s_deviceConfig.m_glWindowPos2dv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2f

void  glew::gl::glWindowPos2f (GLfloat x, GLfloat y)
{
  // GL_VERSION_1_4 - glWindowPos2f
  if (s_deviceConfig.m_glWindowPos2f)
  {
    s_deviceConfig.m_glWindowPos2f (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2fv

void  glew::gl::glWindowPos2fv (const GLfloat * v)
{
  // GL_VERSION_1_4 - glWindowPos2fv
  if (s_deviceConfig.m_glWindowPos2fv)
  {
    s_deviceConfig.m_glWindowPos2fv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2i

void  glew::gl::glWindowPos2i (GLint x, GLint y)
{
  // GL_VERSION_1_4 - glWindowPos2i
  if (s_deviceConfig.m_glWindowPos2i)
  {
    s_deviceConfig.m_glWindowPos2i (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2iv

void  glew::gl::glWindowPos2iv (const GLint * v)
{
  // GL_VERSION_1_4 - glWindowPos2iv
  if (s_deviceConfig.m_glWindowPos2iv)
  {
    s_deviceConfig.m_glWindowPos2iv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2s

void  glew::gl::glWindowPos2s (GLshort x, GLshort y)
{
  // GL_VERSION_1_4 - glWindowPos2s
  if (s_deviceConfig.m_glWindowPos2s)
  {
    s_deviceConfig.m_glWindowPos2s (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2sv

void  glew::gl::glWindowPos2sv (const GLshort * v)
{
  // GL_VERSION_1_4 - glWindowPos2sv
  if (s_deviceConfig.m_glWindowPos2sv)
  {
    s_deviceConfig.m_glWindowPos2sv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3d

void  glew::gl::glWindowPos3d (GLdouble x, GLdouble y, GLdouble z)
{
  // GL_VERSION_1_4 - glWindowPos3d
  if (s_deviceConfig.m_glWindowPos3d)
  {
    s_deviceConfig.m_glWindowPos3d (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3dv

void  glew::gl::glWindowPos3dv (const GLdouble * v)
{
  // GL_VERSION_1_4 - glWindowPos3dv
  if (s_deviceConfig.m_glWindowPos3dv)
  {
    s_deviceConfig.m_glWindowPos3dv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3f

void  glew::gl::glWindowPos3f (GLfloat x, GLfloat y, GLfloat z)
{
  // GL_VERSION_1_4 - glWindowPos3f
  if (s_deviceConfig.m_glWindowPos3f)
  {
    s_deviceConfig.m_glWindowPos3f (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3fv

void  glew::gl::glWindowPos3fv (const GLfloat * v)
{
  // GL_VERSION_1_4 - glWindowPos3fv
  if (s_deviceConfig.m_glWindowPos3fv)
  {
    s_deviceConfig.m_glWindowPos3fv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3i

void  glew::gl::glWindowPos3i (GLint x, GLint y, GLint z)
{
  // GL_VERSION_1_4 - glWindowPos3i
  if (s_deviceConfig.m_glWindowPos3i)
  {
    s_deviceConfig.m_glWindowPos3i (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3iv

void  glew::gl::glWindowPos3iv (const GLint * v)
{
  // GL_VERSION_1_4 - glWindowPos3iv
  if (s_deviceConfig.m_glWindowPos3iv)
  {
    s_deviceConfig.m_glWindowPos3iv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3s

void  glew::gl::glWindowPos3s (GLshort x, GLshort y, GLshort z)
{
  // GL_VERSION_1_4 - glWindowPos3s
  if (s_deviceConfig.m_glWindowPos3s)
  {
    s_deviceConfig.m_glWindowPos3s (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3sv

void  glew::gl::glWindowPos3sv (const GLshort * v)
{
  // GL_VERSION_1_4 - glWindowPos3sv
  if (s_deviceConfig.m_glWindowPos3sv)
  {
    s_deviceConfig.m_glWindowPos3sv (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendColor

void  glew::gl::glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_VERSION_1_4 - glBlendColor
  if (s_deviceConfig.m_glBlendColor)
  {
    s_deviceConfig.m_glBlendColor (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquation

void  glew::gl::glBlendEquation (GLenum mode)
{
  // GL_VERSION_1_4 - glBlendEquation
  if (s_deviceConfig.m_glBlendEquation)
  {
    s_deviceConfig.m_glBlendEquation (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenQueries

void  glew::gl::glGenQueries (GLsizei n, GLuint * ids)
{
  // GL_VERSION_1_5 - glGenQueries
  if (s_deviceConfig.m_glGenQueries)
  {
    s_deviceConfig.m_glGenQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteQueries

void  glew::gl::glDeleteQueries (GLsizei n, const GLuint * ids)
{
  // GL_VERSION_1_5 - glDeleteQueries
  if (s_deviceConfig.m_glDeleteQueries)
  {
    s_deviceConfig.m_glDeleteQueries (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsQuery

GLboolean glew::gl::glIsQuery (GLuint id)
{
  // GL_VERSION_1_5 - glIsQuery
  if (s_deviceConfig.m_glIsQuery)
  {
    return s_deviceConfig.m_glIsQuery (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginQuery

void  glew::gl::glBeginQuery (GLenum target, GLuint id)
{
  // GL_VERSION_1_5 - glBeginQuery
  if (s_deviceConfig.m_glBeginQuery)
  {
    s_deviceConfig.m_glBeginQuery (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndQuery

void  glew::gl::glEndQuery (GLenum target)
{
  // GL_VERSION_1_5 - glEndQuery
  if (s_deviceConfig.m_glEndQuery)
  {
    s_deviceConfig.m_glEndQuery (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryiv

void  glew::gl::glGetQueryiv (GLenum target, GLenum pname, GLint * params)
{
  // GL_VERSION_1_5 - glGetQueryiv
  if (s_deviceConfig.m_glGetQueryiv)
  {
    s_deviceConfig.m_glGetQueryiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectiv

void  glew::gl::glGetQueryObjectiv (GLuint id, GLenum pname, GLint * params)
{
  // GL_VERSION_1_5 - glGetQueryObjectiv
  if (s_deviceConfig.m_glGetQueryObjectiv)
  {
    s_deviceConfig.m_glGetQueryObjectiv (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectuiv

void  glew::gl::glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params)
{
  // GL_VERSION_1_5 - glGetQueryObjectuiv
  if (s_deviceConfig.m_glGetQueryObjectuiv)
  {
    s_deviceConfig.m_glGetQueryObjectuiv (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBuffer

void  glew::gl::glBindBuffer (GLenum target, GLuint buffer)
{
  // GL_VERSION_1_5 - glBindBuffer
  if (s_deviceConfig.m_glBindBuffer)
  {
    s_deviceConfig.m_glBindBuffer (target, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteBuffers

void  glew::gl::glDeleteBuffers (GLsizei n, const GLuint * buffers)
{
  // GL_VERSION_1_5 - glDeleteBuffers
  if (s_deviceConfig.m_glDeleteBuffers)
  {
    s_deviceConfig.m_glDeleteBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenBuffers

void  glew::gl::glGenBuffers (GLsizei n, GLuint * buffers)
{
  // GL_VERSION_1_5 - glGenBuffers
  if (s_deviceConfig.m_glGenBuffers)
  {
    s_deviceConfig.m_glGenBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsBuffer

GLboolean glew::gl::glIsBuffer (GLuint buffer)
{
  // GL_VERSION_1_5 - glIsBuffer
  if (s_deviceConfig.m_glIsBuffer)
  {
    return s_deviceConfig.m_glIsBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferData

void  glew::gl::glBufferData (GLenum target, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_VERSION_1_5 - glBufferData
  if (s_deviceConfig.m_glBufferData)
  {
    s_deviceConfig.m_glBufferData (target, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferSubData

void  glew::gl::glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_VERSION_1_5 - glBufferSubData
  if (s_deviceConfig.m_glBufferSubData)
  {
    s_deviceConfig.m_glBufferSubData (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferSubData

void  glew::gl::glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void * data)
{
  // GL_VERSION_1_5 - glGetBufferSubData
  if (s_deviceConfig.m_glGetBufferSubData)
  {
    s_deviceConfig.m_glGetBufferSubData (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBuffer

void * glew::gl::glMapBuffer (GLenum target, GLenum access)
{
  // GL_VERSION_1_5 - glMapBuffer
  if (s_deviceConfig.m_glMapBuffer)
  {
    return s_deviceConfig.m_glMapBuffer (target, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapBuffer

GLboolean glew::gl::glUnmapBuffer (GLenum target)
{
  // GL_VERSION_1_5 - glUnmapBuffer
  if (s_deviceConfig.m_glUnmapBuffer)
  {
    return s_deviceConfig.m_glUnmapBuffer (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferParameteriv

void  glew::gl::glGetBufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_VERSION_1_5 - glGetBufferParameteriv
  if (s_deviceConfig.m_glGetBufferParameteriv)
  {
    s_deviceConfig.m_glGetBufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferPointerv

void  glew::gl::glGetBufferPointerv (GLenum target, GLenum pname, void ** params)
{
  // GL_VERSION_1_5 - glGetBufferPointerv
  if (s_deviceConfig.m_glGetBufferPointerv)
  {
    s_deviceConfig.m_glGetBufferPointerv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparate

void  glew::gl::glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha)
{
  // GL_VERSION_2_0 - glBlendEquationSeparate
  if (s_deviceConfig.m_glBlendEquationSeparate)
  {
    s_deviceConfig.m_glBlendEquationSeparate (modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffers

void  glew::gl::glDrawBuffers (GLsizei n, const GLenum * bufs)
{
  // GL_VERSION_2_0 - glDrawBuffers
  if (s_deviceConfig.m_glDrawBuffers)
  {
    s_deviceConfig.m_glDrawBuffers (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilOpSeparate

void  glew::gl::glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  // GL_VERSION_2_0 - glStencilOpSeparate
  if (s_deviceConfig.m_glStencilOpSeparate)
  {
    s_deviceConfig.m_glStencilOpSeparate (face, sfail, dpfail, dppass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFuncSeparate

void  glew::gl::glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask)
{
  // GL_VERSION_2_0 - glStencilFuncSeparate
  if (s_deviceConfig.m_glStencilFuncSeparate)
  {
    s_deviceConfig.m_glStencilFuncSeparate (face, func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilMaskSeparate

void  glew::gl::glStencilMaskSeparate (GLenum face, GLuint mask)
{
  // GL_VERSION_2_0 - glStencilMaskSeparate
  if (s_deviceConfig.m_glStencilMaskSeparate)
  {
    s_deviceConfig.m_glStencilMaskSeparate (face, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAttachShader

void  glew::gl::glAttachShader (GLuint program, GLuint shader)
{
  // GL_VERSION_2_0 - glAttachShader
  if (s_deviceConfig.m_glAttachShader)
  {
    s_deviceConfig.m_glAttachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindAttribLocation

void  glew::gl::glBindAttribLocation (GLuint program, GLuint index, const GLchar * name)
{
  // GL_VERSION_2_0 - glBindAttribLocation
  if (s_deviceConfig.m_glBindAttribLocation)
  {
    s_deviceConfig.m_glBindAttribLocation (program, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompileShader

void  glew::gl::glCompileShader (GLuint shader)
{
  // GL_VERSION_2_0 - glCompileShader
  if (s_deviceConfig.m_glCompileShader)
  {
    s_deviceConfig.m_glCompileShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateProgram

GLuint glew::gl::glCreateProgram ()
{
  // GL_VERSION_2_0 - glCreateProgram
  if (s_deviceConfig.m_glCreateProgram)
  {
    return s_deviceConfig.m_glCreateProgram ();
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShader

GLuint glew::gl::glCreateShader (GLenum type)
{
  // GL_VERSION_2_0 - glCreateShader
  if (s_deviceConfig.m_glCreateShader)
  {
    return s_deviceConfig.m_glCreateShader (type);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgram

void  glew::gl::glDeleteProgram (GLuint program)
{
  // GL_VERSION_2_0 - glDeleteProgram
  if (s_deviceConfig.m_glDeleteProgram)
  {
    s_deviceConfig.m_glDeleteProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteShader

void  glew::gl::glDeleteShader (GLuint shader)
{
  // GL_VERSION_2_0 - glDeleteShader
  if (s_deviceConfig.m_glDeleteShader)
  {
    s_deviceConfig.m_glDeleteShader (shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDetachShader

void  glew::gl::glDetachShader (GLuint program, GLuint shader)
{
  // GL_VERSION_2_0 - glDetachShader
  if (s_deviceConfig.m_glDetachShader)
  {
    s_deviceConfig.m_glDetachShader (program, shader);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexAttribArray

void  glew::gl::glDisableVertexAttribArray (GLuint index)
{
  // GL_VERSION_2_0 - glDisableVertexAttribArray
  if (s_deviceConfig.m_glDisableVertexAttribArray)
  {
    s_deviceConfig.m_glDisableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexAttribArray

void  glew::gl::glEnableVertexAttribArray (GLuint index)
{
  // GL_VERSION_2_0 - glEnableVertexAttribArray
  if (s_deviceConfig.m_glEnableVertexAttribArray)
  {
    s_deviceConfig.m_glEnableVertexAttribArray (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveAttrib

void  glew::gl::glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_VERSION_2_0 - glGetActiveAttrib
  if (s_deviceConfig.m_glGetActiveAttrib)
  {
    s_deviceConfig.m_glGetActiveAttrib (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniform

void  glew::gl::glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name)
{
  // GL_VERSION_2_0 - glGetActiveUniform
  if (s_deviceConfig.m_glGetActiveUniform)
  {
    s_deviceConfig.m_glGetActiveUniform (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetAttachedShaders

void  glew::gl::glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders)
{
  // GL_VERSION_2_0 - glGetAttachedShaders
  if (s_deviceConfig.m_glGetAttachedShaders)
  {
    s_deviceConfig.m_glGetAttachedShaders (program, maxCount, count, shaders);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetAttribLocation

GLint glew::gl::glGetAttribLocation (GLuint program, const GLchar * name)
{
  // GL_VERSION_2_0 - glGetAttribLocation
  if (s_deviceConfig.m_glGetAttribLocation)
  {
    return s_deviceConfig.m_glGetAttribLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramiv

void  glew::gl::glGetProgramiv (GLuint program, GLenum pname, GLint * params)
{
  // GL_VERSION_2_0 - glGetProgramiv
  if (s_deviceConfig.m_glGetProgramiv)
  {
    s_deviceConfig.m_glGetProgramiv (program, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramInfoLog

void  glew::gl::glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_VERSION_2_0 - glGetProgramInfoLog
  if (s_deviceConfig.m_glGetProgramInfoLog)
  {
    s_deviceConfig.m_glGetProgramInfoLog (program, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetShaderiv

void  glew::gl::glGetShaderiv (GLuint shader, GLenum pname, GLint * params)
{
  // GL_VERSION_2_0 - glGetShaderiv
  if (s_deviceConfig.m_glGetShaderiv)
  {
    s_deviceConfig.m_glGetShaderiv (shader, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetShaderInfoLog

void  glew::gl::glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_VERSION_2_0 - glGetShaderInfoLog
  if (s_deviceConfig.m_glGetShaderInfoLog)
  {
    s_deviceConfig.m_glGetShaderInfoLog (shader, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetShaderSource

void  glew::gl::glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source)
{
  // GL_VERSION_2_0 - glGetShaderSource
  if (s_deviceConfig.m_glGetShaderSource)
  {
    s_deviceConfig.m_glGetShaderSource (shader, bufSize, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformLocation

GLint glew::gl::glGetUniformLocation (GLuint program, const GLchar * name)
{
  // GL_VERSION_2_0 - glGetUniformLocation
  if (s_deviceConfig.m_glGetUniformLocation)
  {
    return s_deviceConfig.m_glGetUniformLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformfv

void  glew::gl::glGetUniformfv (GLuint program, GLint location, GLfloat * params)
{
  // GL_VERSION_2_0 - glGetUniformfv
  if (s_deviceConfig.m_glGetUniformfv)
  {
    s_deviceConfig.m_glGetUniformfv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformiv

void  glew::gl::glGetUniformiv (GLuint program, GLint location, GLint * params)
{
  // GL_VERSION_2_0 - glGetUniformiv
  if (s_deviceConfig.m_glGetUniformiv)
  {
    s_deviceConfig.m_glGetUniformiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribdv

void  glew::gl::glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_VERSION_2_0 - glGetVertexAttribdv
  if (s_deviceConfig.m_glGetVertexAttribdv)
  {
    s_deviceConfig.m_glGetVertexAttribdv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribfv

void  glew::gl::glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_VERSION_2_0 - glGetVertexAttribfv
  if (s_deviceConfig.m_glGetVertexAttribfv)
  {
    s_deviceConfig.m_glGetVertexAttribfv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribiv

void  glew::gl::glGetVertexAttribiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_VERSION_2_0 - glGetVertexAttribiv
  if (s_deviceConfig.m_glGetVertexAttribiv)
  {
    s_deviceConfig.m_glGetVertexAttribiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribPointerv

void  glew::gl::glGetVertexAttribPointerv (GLuint index, GLenum pname, void ** pointer)
{
  // GL_VERSION_2_0 - glGetVertexAttribPointerv
  if (s_deviceConfig.m_glGetVertexAttribPointerv)
  {
    s_deviceConfig.m_glGetVertexAttribPointerv (index, pname, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgram

GLboolean glew::gl::glIsProgram (GLuint program)
{
  // GL_VERSION_2_0 - glIsProgram
  if (s_deviceConfig.m_glIsProgram)
  {
    return s_deviceConfig.m_glIsProgram (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsShader

GLboolean glew::gl::glIsShader (GLuint shader)
{
  // GL_VERSION_2_0 - glIsShader
  if (s_deviceConfig.m_glIsShader)
  {
    return s_deviceConfig.m_glIsShader (shader);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLinkProgram

void  glew::gl::glLinkProgram (GLuint program)
{
  // GL_VERSION_2_0 - glLinkProgram
  if (s_deviceConfig.m_glLinkProgram)
  {
    s_deviceConfig.m_glLinkProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderSource

void  glew::gl::glShaderSource (GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length)
{
  // GL_VERSION_2_0 - glShaderSource
  if (s_deviceConfig.m_glShaderSource)
  {
    s_deviceConfig.m_glShaderSource (shader, count, string, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseProgram

void  glew::gl::glUseProgram (GLuint program)
{
  // GL_VERSION_2_0 - glUseProgram
  if (s_deviceConfig.m_glUseProgram)
  {
    s_deviceConfig.m_glUseProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1f

void  glew::gl::glUniform1f (GLint location, GLfloat v0)
{
  // GL_VERSION_2_0 - glUniform1f
  if (s_deviceConfig.m_glUniform1f)
  {
    s_deviceConfig.m_glUniform1f (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2f

void  glew::gl::glUniform2f (GLint location, GLfloat v0, GLfloat v1)
{
  // GL_VERSION_2_0 - glUniform2f
  if (s_deviceConfig.m_glUniform2f)
  {
    s_deviceConfig.m_glUniform2f (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3f

void  glew::gl::glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_VERSION_2_0 - glUniform3f
  if (s_deviceConfig.m_glUniform3f)
  {
    s_deviceConfig.m_glUniform3f (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4f

void  glew::gl::glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_VERSION_2_0 - glUniform4f
  if (s_deviceConfig.m_glUniform4f)
  {
    s_deviceConfig.m_glUniform4f (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1i

void  glew::gl::glUniform1i (GLint location, GLint v0)
{
  // GL_VERSION_2_0 - glUniform1i
  if (s_deviceConfig.m_glUniform1i)
  {
    s_deviceConfig.m_glUniform1i (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2i

void  glew::gl::glUniform2i (GLint location, GLint v0, GLint v1)
{
  // GL_VERSION_2_0 - glUniform2i
  if (s_deviceConfig.m_glUniform2i)
  {
    s_deviceConfig.m_glUniform2i (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3i

void  glew::gl::glUniform3i (GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_VERSION_2_0 - glUniform3i
  if (s_deviceConfig.m_glUniform3i)
  {
    s_deviceConfig.m_glUniform3i (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4i

void  glew::gl::glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_VERSION_2_0 - glUniform4i
  if (s_deviceConfig.m_glUniform4i)
  {
    s_deviceConfig.m_glUniform4i (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1fv

void  glew::gl::glUniform1fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniform1fv
  if (s_deviceConfig.m_glUniform1fv)
  {
    s_deviceConfig.m_glUniform1fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2fv

void  glew::gl::glUniform2fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniform2fv
  if (s_deviceConfig.m_glUniform2fv)
  {
    s_deviceConfig.m_glUniform2fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3fv

void  glew::gl::glUniform3fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniform3fv
  if (s_deviceConfig.m_glUniform3fv)
  {
    s_deviceConfig.m_glUniform3fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4fv

void  glew::gl::glUniform4fv (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniform4fv
  if (s_deviceConfig.m_glUniform4fv)
  {
    s_deviceConfig.m_glUniform4fv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1iv

void  glew::gl::glUniform1iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_2_0 - glUniform1iv
  if (s_deviceConfig.m_glUniform1iv)
  {
    s_deviceConfig.m_glUniform1iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2iv

void  glew::gl::glUniform2iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_2_0 - glUniform2iv
  if (s_deviceConfig.m_glUniform2iv)
  {
    s_deviceConfig.m_glUniform2iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3iv

void  glew::gl::glUniform3iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_2_0 - glUniform3iv
  if (s_deviceConfig.m_glUniform3iv)
  {
    s_deviceConfig.m_glUniform3iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4iv

void  glew::gl::glUniform4iv (GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_2_0 - glUniform4iv
  if (s_deviceConfig.m_glUniform4iv)
  {
    s_deviceConfig.m_glUniform4iv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2fv

void  glew::gl::glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniformMatrix2fv
  if (s_deviceConfig.m_glUniformMatrix2fv)
  {
    s_deviceConfig.m_glUniformMatrix2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3fv

void  glew::gl::glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniformMatrix3fv
  if (s_deviceConfig.m_glUniformMatrix3fv)
  {
    s_deviceConfig.m_glUniformMatrix3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4fv

void  glew::gl::glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_0 - glUniformMatrix4fv
  if (s_deviceConfig.m_glUniformMatrix4fv)
  {
    s_deviceConfig.m_glUniformMatrix4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glValidateProgram

void  glew::gl::glValidateProgram (GLuint program)
{
  // GL_VERSION_2_0 - glValidateProgram
  if (s_deviceConfig.m_glValidateProgram)
  {
    s_deviceConfig.m_glValidateProgram (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1d

void  glew::gl::glVertexAttrib1d (GLuint index, GLdouble x)
{
  // GL_VERSION_2_0 - glVertexAttrib1d
  if (s_deviceConfig.m_glVertexAttrib1d)
  {
    s_deviceConfig.m_glVertexAttrib1d (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1dv

void  glew::gl::glVertexAttrib1dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_2_0 - glVertexAttrib1dv
  if (s_deviceConfig.m_glVertexAttrib1dv)
  {
    s_deviceConfig.m_glVertexAttrib1dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1f

void  glew::gl::glVertexAttrib1f (GLuint index, GLfloat x)
{
  // GL_VERSION_2_0 - glVertexAttrib1f
  if (s_deviceConfig.m_glVertexAttrib1f)
  {
    s_deviceConfig.m_glVertexAttrib1f (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1fv

void  glew::gl::glVertexAttrib1fv (GLuint index, const GLfloat * v)
{
  // GL_VERSION_2_0 - glVertexAttrib1fv
  if (s_deviceConfig.m_glVertexAttrib1fv)
  {
    s_deviceConfig.m_glVertexAttrib1fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1s

void  glew::gl::glVertexAttrib1s (GLuint index, GLshort x)
{
  // GL_VERSION_2_0 - glVertexAttrib1s
  if (s_deviceConfig.m_glVertexAttrib1s)
  {
    s_deviceConfig.m_glVertexAttrib1s (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1sv

void  glew::gl::glVertexAttrib1sv (GLuint index, const GLshort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib1sv
  if (s_deviceConfig.m_glVertexAttrib1sv)
  {
    s_deviceConfig.m_glVertexAttrib1sv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2d

void  glew::gl::glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y)
{
  // GL_VERSION_2_0 - glVertexAttrib2d
  if (s_deviceConfig.m_glVertexAttrib2d)
  {
    s_deviceConfig.m_glVertexAttrib2d (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2dv

void  glew::gl::glVertexAttrib2dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_2_0 - glVertexAttrib2dv
  if (s_deviceConfig.m_glVertexAttrib2dv)
  {
    s_deviceConfig.m_glVertexAttrib2dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2f

void  glew::gl::glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y)
{
  // GL_VERSION_2_0 - glVertexAttrib2f
  if (s_deviceConfig.m_glVertexAttrib2f)
  {
    s_deviceConfig.m_glVertexAttrib2f (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2fv

void  glew::gl::glVertexAttrib2fv (GLuint index, const GLfloat * v)
{
  // GL_VERSION_2_0 - glVertexAttrib2fv
  if (s_deviceConfig.m_glVertexAttrib2fv)
  {
    s_deviceConfig.m_glVertexAttrib2fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2s

void  glew::gl::glVertexAttrib2s (GLuint index, GLshort x, GLshort y)
{
  // GL_VERSION_2_0 - glVertexAttrib2s
  if (s_deviceConfig.m_glVertexAttrib2s)
  {
    s_deviceConfig.m_glVertexAttrib2s (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2sv

void  glew::gl::glVertexAttrib2sv (GLuint index, const GLshort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib2sv
  if (s_deviceConfig.m_glVertexAttrib2sv)
  {
    s_deviceConfig.m_glVertexAttrib2sv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3d

void  glew::gl::glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_VERSION_2_0 - glVertexAttrib3d
  if (s_deviceConfig.m_glVertexAttrib3d)
  {
    s_deviceConfig.m_glVertexAttrib3d (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3dv

void  glew::gl::glVertexAttrib3dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_2_0 - glVertexAttrib3dv
  if (s_deviceConfig.m_glVertexAttrib3dv)
  {
    s_deviceConfig.m_glVertexAttrib3dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3f

void  glew::gl::glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_VERSION_2_0 - glVertexAttrib3f
  if (s_deviceConfig.m_glVertexAttrib3f)
  {
    s_deviceConfig.m_glVertexAttrib3f (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3fv

void  glew::gl::glVertexAttrib3fv (GLuint index, const GLfloat * v)
{
  // GL_VERSION_2_0 - glVertexAttrib3fv
  if (s_deviceConfig.m_glVertexAttrib3fv)
  {
    s_deviceConfig.m_glVertexAttrib3fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3s

void  glew::gl::glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z)
{
  // GL_VERSION_2_0 - glVertexAttrib3s
  if (s_deviceConfig.m_glVertexAttrib3s)
  {
    s_deviceConfig.m_glVertexAttrib3s (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3sv

void  glew::gl::glVertexAttrib3sv (GLuint index, const GLshort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib3sv
  if (s_deviceConfig.m_glVertexAttrib3sv)
  {
    s_deviceConfig.m_glVertexAttrib3sv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nbv

void  glew::gl::glVertexAttrib4Nbv (GLuint index, const GLbyte * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nbv
  if (s_deviceConfig.m_glVertexAttrib4Nbv)
  {
    s_deviceConfig.m_glVertexAttrib4Nbv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Niv

void  glew::gl::glVertexAttrib4Niv (GLuint index, const GLint * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Niv
  if (s_deviceConfig.m_glVertexAttrib4Niv)
  {
    s_deviceConfig.m_glVertexAttrib4Niv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nsv

void  glew::gl::glVertexAttrib4Nsv (GLuint index, const GLshort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nsv
  if (s_deviceConfig.m_glVertexAttrib4Nsv)
  {
    s_deviceConfig.m_glVertexAttrib4Nsv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nub

void  glew::gl::glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nub
  if (s_deviceConfig.m_glVertexAttrib4Nub)
  {
    s_deviceConfig.m_glVertexAttrib4Nub (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nubv

void  glew::gl::glVertexAttrib4Nubv (GLuint index, const GLubyte * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nubv
  if (s_deviceConfig.m_glVertexAttrib4Nubv)
  {
    s_deviceConfig.m_glVertexAttrib4Nubv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nuiv

void  glew::gl::glVertexAttrib4Nuiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nuiv
  if (s_deviceConfig.m_glVertexAttrib4Nuiv)
  {
    s_deviceConfig.m_glVertexAttrib4Nuiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4Nusv

void  glew::gl::glVertexAttrib4Nusv (GLuint index, const GLushort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4Nusv
  if (s_deviceConfig.m_glVertexAttrib4Nusv)
  {
    s_deviceConfig.m_glVertexAttrib4Nusv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4bv

void  glew::gl::glVertexAttrib4bv (GLuint index, const GLbyte * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4bv
  if (s_deviceConfig.m_glVertexAttrib4bv)
  {
    s_deviceConfig.m_glVertexAttrib4bv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4d

void  glew::gl::glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_VERSION_2_0 - glVertexAttrib4d
  if (s_deviceConfig.m_glVertexAttrib4d)
  {
    s_deviceConfig.m_glVertexAttrib4d (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4dv

void  glew::gl::glVertexAttrib4dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4dv
  if (s_deviceConfig.m_glVertexAttrib4dv)
  {
    s_deviceConfig.m_glVertexAttrib4dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4f

void  glew::gl::glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_VERSION_2_0 - glVertexAttrib4f
  if (s_deviceConfig.m_glVertexAttrib4f)
  {
    s_deviceConfig.m_glVertexAttrib4f (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4fv

void  glew::gl::glVertexAttrib4fv (GLuint index, const GLfloat * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4fv
  if (s_deviceConfig.m_glVertexAttrib4fv)
  {
    s_deviceConfig.m_glVertexAttrib4fv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4iv

void  glew::gl::glVertexAttrib4iv (GLuint index, const GLint * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4iv
  if (s_deviceConfig.m_glVertexAttrib4iv)
  {
    s_deviceConfig.m_glVertexAttrib4iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4s

void  glew::gl::glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  // GL_VERSION_2_0 - glVertexAttrib4s
  if (s_deviceConfig.m_glVertexAttrib4s)
  {
    s_deviceConfig.m_glVertexAttrib4s (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4sv

void  glew::gl::glVertexAttrib4sv (GLuint index, const GLshort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4sv
  if (s_deviceConfig.m_glVertexAttrib4sv)
  {
    s_deviceConfig.m_glVertexAttrib4sv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4ubv

void  glew::gl::glVertexAttrib4ubv (GLuint index, const GLubyte * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4ubv
  if (s_deviceConfig.m_glVertexAttrib4ubv)
  {
    s_deviceConfig.m_glVertexAttrib4ubv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4uiv

void  glew::gl::glVertexAttrib4uiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4uiv
  if (s_deviceConfig.m_glVertexAttrib4uiv)
  {
    s_deviceConfig.m_glVertexAttrib4uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4usv

void  glew::gl::glVertexAttrib4usv (GLuint index, const GLushort * v)
{
  // GL_VERSION_2_0 - glVertexAttrib4usv
  if (s_deviceConfig.m_glVertexAttrib4usv)
  {
    s_deviceConfig.m_glVertexAttrib4usv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribPointer

void  glew::gl::glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)
{
  // GL_VERSION_2_0 - glVertexAttribPointer
  if (s_deviceConfig.m_glVertexAttribPointer)
  {
    s_deviceConfig.m_glVertexAttribPointer (index, size, type, normalized, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x3fv

void  glew::gl::glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix2x3fv
  if (s_deviceConfig.m_glUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glUniformMatrix2x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x2fv

void  glew::gl::glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix3x2fv
  if (s_deviceConfig.m_glUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glUniformMatrix3x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x4fv

void  glew::gl::glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix2x4fv
  if (s_deviceConfig.m_glUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glUniformMatrix2x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x2fv

void  glew::gl::glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix4x2fv
  if (s_deviceConfig.m_glUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glUniformMatrix4x2fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x4fv

void  glew::gl::glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix3x4fv
  if (s_deviceConfig.m_glUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glUniformMatrix3x4fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x3fv

void  glew::gl::glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_2_1 - glUniformMatrix4x3fv
  if (s_deviceConfig.m_glUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glUniformMatrix4x3fv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorMaski

void  glew::gl::glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_VERSION_3_0 - glColorMaski
  if (s_deviceConfig.m_glColorMaski)
  {
    s_deviceConfig.m_glColorMaski (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBooleani_v

void  glew::gl::glGetBooleani_v (GLenum target, GLuint index, GLboolean * data)
{
  // GL_VERSION_3_0 - glGetBooleani_v
  if (s_deviceConfig.m_glGetBooleani_v)
  {
    s_deviceConfig.m_glGetBooleani_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegeri_v

void  glew::gl::glGetIntegeri_v (GLenum target, GLuint index, GLint * data)
{
  // GL_VERSION_3_0 - glGetIntegeri_v
  if (s_deviceConfig.m_glGetIntegeri_v)
  {
    s_deviceConfig.m_glGetIntegeri_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnablei

void  glew::gl::glEnablei (GLenum target, GLuint index)
{
  // GL_VERSION_3_0 - glEnablei
  if (s_deviceConfig.m_glEnablei)
  {
    s_deviceConfig.m_glEnablei (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisablei

void  glew::gl::glDisablei (GLenum target, GLuint index)
{
  // GL_VERSION_3_0 - glDisablei
  if (s_deviceConfig.m_glDisablei)
  {
    s_deviceConfig.m_glDisablei (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsEnabledi

GLboolean glew::gl::glIsEnabledi (GLenum target, GLuint index)
{
  // GL_VERSION_3_0 - glIsEnabledi
  if (s_deviceConfig.m_glIsEnabledi)
  {
    return s_deviceConfig.m_glIsEnabledi (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginTransformFeedback

void  glew::gl::glBeginTransformFeedback (GLenum primitiveMode)
{
  // GL_VERSION_3_0 - glBeginTransformFeedback
  if (s_deviceConfig.m_glBeginTransformFeedback)
  {
    s_deviceConfig.m_glBeginTransformFeedback (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndTransformFeedback

void  glew::gl::glEndTransformFeedback ()
{
  // GL_VERSION_3_0 - glEndTransformFeedback
  if (s_deviceConfig.m_glEndTransformFeedback)
  {
    s_deviceConfig.m_glEndTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferRange

void  glew::gl::glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_VERSION_3_0 - glBindBufferRange
  if (s_deviceConfig.m_glBindBufferRange)
  {
    s_deviceConfig.m_glBindBufferRange (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferBase

void  glew::gl::glBindBufferBase (GLenum target, GLuint index, GLuint buffer)
{
  // GL_VERSION_3_0 - glBindBufferBase
  if (s_deviceConfig.m_glBindBufferBase)
  {
    s_deviceConfig.m_glBindBufferBase (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackVaryings

void  glew::gl::glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
  // GL_VERSION_3_0 - glTransformFeedbackVaryings
  if (s_deviceConfig.m_glTransformFeedbackVaryings)
  {
    s_deviceConfig.m_glTransformFeedbackVaryings (program, count, varyings, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbackVarying

void  glew::gl::glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_VERSION_3_0 - glGetTransformFeedbackVarying
  if (s_deviceConfig.m_glGetTransformFeedbackVarying)
  {
    s_deviceConfig.m_glGetTransformFeedbackVarying (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClampColor

void  glew::gl::glClampColor (GLenum target, GLenum clamp)
{
  // GL_VERSION_3_0 - glClampColor
  if (s_deviceConfig.m_glClampColor)
  {
    s_deviceConfig.m_glClampColor (target, clamp);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginConditionalRender

void  glew::gl::glBeginConditionalRender (GLuint id, GLenum mode)
{
  // GL_VERSION_3_0 - glBeginConditionalRender
  if (s_deviceConfig.m_glBeginConditionalRender)
  {
    s_deviceConfig.m_glBeginConditionalRender (id, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndConditionalRender

void  glew::gl::glEndConditionalRender ()
{
  // GL_VERSION_3_0 - glEndConditionalRender
  if (s_deviceConfig.m_glEndConditionalRender)
  {
    s_deviceConfig.m_glEndConditionalRender ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIPointer

void  glew::gl::glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_3_0 - glVertexAttribIPointer
  if (s_deviceConfig.m_glVertexAttribIPointer)
  {
    s_deviceConfig.m_glVertexAttribIPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIiv

void  glew::gl::glGetVertexAttribIiv (GLuint index, GLenum pname, GLint * params)
{
  // GL_VERSION_3_0 - glGetVertexAttribIiv
  if (s_deviceConfig.m_glGetVertexAttribIiv)
  {
    s_deviceConfig.m_glGetVertexAttribIiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIuiv

void  glew::gl::glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint * params)
{
  // GL_VERSION_3_0 - glGetVertexAttribIuiv
  if (s_deviceConfig.m_glGetVertexAttribIuiv)
  {
    s_deviceConfig.m_glGetVertexAttribIuiv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1i

void  glew::gl::glVertexAttribI1i (GLuint index, GLint x)
{
  // GL_VERSION_3_0 - glVertexAttribI1i
  if (s_deviceConfig.m_glVertexAttribI1i)
  {
    s_deviceConfig.m_glVertexAttribI1i (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2i

void  glew::gl::glVertexAttribI2i (GLuint index, GLint x, GLint y)
{
  // GL_VERSION_3_0 - glVertexAttribI2i
  if (s_deviceConfig.m_glVertexAttribI2i)
  {
    s_deviceConfig.m_glVertexAttribI2i (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3i

void  glew::gl::glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z)
{
  // GL_VERSION_3_0 - glVertexAttribI3i
  if (s_deviceConfig.m_glVertexAttribI3i)
  {
    s_deviceConfig.m_glVertexAttribI3i (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4i

void  glew::gl::glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_VERSION_3_0 - glVertexAttribI4i
  if (s_deviceConfig.m_glVertexAttribI4i)
  {
    s_deviceConfig.m_glVertexAttribI4i (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1ui

void  glew::gl::glVertexAttribI1ui (GLuint index, GLuint x)
{
  // GL_VERSION_3_0 - glVertexAttribI1ui
  if (s_deviceConfig.m_glVertexAttribI1ui)
  {
    s_deviceConfig.m_glVertexAttribI1ui (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2ui

void  glew::gl::glVertexAttribI2ui (GLuint index, GLuint x, GLuint y)
{
  // GL_VERSION_3_0 - glVertexAttribI2ui
  if (s_deviceConfig.m_glVertexAttribI2ui)
  {
    s_deviceConfig.m_glVertexAttribI2ui (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3ui

void  glew::gl::glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z)
{
  // GL_VERSION_3_0 - glVertexAttribI3ui
  if (s_deviceConfig.m_glVertexAttribI3ui)
  {
    s_deviceConfig.m_glVertexAttribI3ui (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4ui

void  glew::gl::glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_VERSION_3_0 - glVertexAttribI4ui
  if (s_deviceConfig.m_glVertexAttribI4ui)
  {
    s_deviceConfig.m_glVertexAttribI4ui (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1iv

void  glew::gl::glVertexAttribI1iv (GLuint index, const GLint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI1iv
  if (s_deviceConfig.m_glVertexAttribI1iv)
  {
    s_deviceConfig.m_glVertexAttribI1iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2iv

void  glew::gl::glVertexAttribI2iv (GLuint index, const GLint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI2iv
  if (s_deviceConfig.m_glVertexAttribI2iv)
  {
    s_deviceConfig.m_glVertexAttribI2iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3iv

void  glew::gl::glVertexAttribI3iv (GLuint index, const GLint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI3iv
  if (s_deviceConfig.m_glVertexAttribI3iv)
  {
    s_deviceConfig.m_glVertexAttribI3iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4iv

void  glew::gl::glVertexAttribI4iv (GLuint index, const GLint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4iv
  if (s_deviceConfig.m_glVertexAttribI4iv)
  {
    s_deviceConfig.m_glVertexAttribI4iv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1uiv

void  glew::gl::glVertexAttribI1uiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI1uiv
  if (s_deviceConfig.m_glVertexAttribI1uiv)
  {
    s_deviceConfig.m_glVertexAttribI1uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2uiv

void  glew::gl::glVertexAttribI2uiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI2uiv
  if (s_deviceConfig.m_glVertexAttribI2uiv)
  {
    s_deviceConfig.m_glVertexAttribI2uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3uiv

void  glew::gl::glVertexAttribI3uiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI3uiv
  if (s_deviceConfig.m_glVertexAttribI3uiv)
  {
    s_deviceConfig.m_glVertexAttribI3uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4uiv

void  glew::gl::glVertexAttribI4uiv (GLuint index, const GLuint * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4uiv
  if (s_deviceConfig.m_glVertexAttribI4uiv)
  {
    s_deviceConfig.m_glVertexAttribI4uiv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4bv

void  glew::gl::glVertexAttribI4bv (GLuint index, const GLbyte * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4bv
  if (s_deviceConfig.m_glVertexAttribI4bv)
  {
    s_deviceConfig.m_glVertexAttribI4bv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4sv

void  glew::gl::glVertexAttribI4sv (GLuint index, const GLshort * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4sv
  if (s_deviceConfig.m_glVertexAttribI4sv)
  {
    s_deviceConfig.m_glVertexAttribI4sv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4ubv

void  glew::gl::glVertexAttribI4ubv (GLuint index, const GLubyte * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4ubv
  if (s_deviceConfig.m_glVertexAttribI4ubv)
  {
    s_deviceConfig.m_glVertexAttribI4ubv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4usv

void  glew::gl::glVertexAttribI4usv (GLuint index, const GLushort * v)
{
  // GL_VERSION_3_0 - glVertexAttribI4usv
  if (s_deviceConfig.m_glVertexAttribI4usv)
  {
    s_deviceConfig.m_glVertexAttribI4usv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformuiv

void  glew::gl::glGetUniformuiv (GLuint program, GLint location, GLuint * params)
{
  // GL_VERSION_3_0 - glGetUniformuiv
  if (s_deviceConfig.m_glGetUniformuiv)
  {
    s_deviceConfig.m_glGetUniformuiv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFragDataLocation

void  glew::gl::glBindFragDataLocation (GLuint program, GLuint color, const GLchar * name)
{
  // GL_VERSION_3_0 - glBindFragDataLocation
  if (s_deviceConfig.m_glBindFragDataLocation)
  {
    s_deviceConfig.m_glBindFragDataLocation (program, color, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragDataLocation

GLint glew::gl::glGetFragDataLocation (GLuint program, const GLchar * name)
{
  // GL_VERSION_3_0 - glGetFragDataLocation
  if (s_deviceConfig.m_glGetFragDataLocation)
  {
    return s_deviceConfig.m_glGetFragDataLocation (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1ui

void  glew::gl::glUniform1ui (GLint location, GLuint v0)
{
  // GL_VERSION_3_0 - glUniform1ui
  if (s_deviceConfig.m_glUniform1ui)
  {
    s_deviceConfig.m_glUniform1ui (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2ui

void  glew::gl::glUniform2ui (GLint location, GLuint v0, GLuint v1)
{
  // GL_VERSION_3_0 - glUniform2ui
  if (s_deviceConfig.m_glUniform2ui)
  {
    s_deviceConfig.m_glUniform2ui (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3ui

void  glew::gl::glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_VERSION_3_0 - glUniform3ui
  if (s_deviceConfig.m_glUniform3ui)
  {
    s_deviceConfig.m_glUniform3ui (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4ui

void  glew::gl::glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_VERSION_3_0 - glUniform4ui
  if (s_deviceConfig.m_glUniform4ui)
  {
    s_deviceConfig.m_glUniform4ui (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1uiv

void  glew::gl::glUniform1uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_3_0 - glUniform1uiv
  if (s_deviceConfig.m_glUniform1uiv)
  {
    s_deviceConfig.m_glUniform1uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2uiv

void  glew::gl::glUniform2uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_3_0 - glUniform2uiv
  if (s_deviceConfig.m_glUniform2uiv)
  {
    s_deviceConfig.m_glUniform2uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3uiv

void  glew::gl::glUniform3uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_3_0 - glUniform3uiv
  if (s_deviceConfig.m_glUniform3uiv)
  {
    s_deviceConfig.m_glUniform3uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4uiv

void  glew::gl::glUniform4uiv (GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_3_0 - glUniform4uiv
  if (s_deviceConfig.m_glUniform4uiv)
  {
    s_deviceConfig.m_glUniform4uiv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIiv

void  glew::gl::glTexParameterIiv (GLenum target, GLenum pname, const GLint * params)
{
  // GL_VERSION_3_0 - glTexParameterIiv
  if (s_deviceConfig.m_glTexParameterIiv)
  {
    s_deviceConfig.m_glTexParameterIiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIuiv

void  glew::gl::glTexParameterIuiv (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_VERSION_3_0 - glTexParameterIuiv
  if (s_deviceConfig.m_glTexParameterIuiv)
  {
    s_deviceConfig.m_glTexParameterIuiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIiv

void  glew::gl::glGetTexParameterIiv (GLenum target, GLenum pname, GLint * params)
{
  // GL_VERSION_3_0 - glGetTexParameterIiv
  if (s_deviceConfig.m_glGetTexParameterIiv)
  {
    s_deviceConfig.m_glGetTexParameterIiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIuiv

void  glew::gl::glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint * params)
{
  // GL_VERSION_3_0 - glGetTexParameterIuiv
  if (s_deviceConfig.m_glGetTexParameterIuiv)
  {
    s_deviceConfig.m_glGetTexParameterIuiv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferiv

void  glew::gl::glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_VERSION_3_0 - glClearBufferiv
  if (s_deviceConfig.m_glClearBufferiv)
  {
    s_deviceConfig.m_glClearBufferiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferuiv

void  glew::gl::glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_VERSION_3_0 - glClearBufferuiv
  if (s_deviceConfig.m_glClearBufferuiv)
  {
    s_deviceConfig.m_glClearBufferuiv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferfv

void  glew::gl::glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_VERSION_3_0 - glClearBufferfv
  if (s_deviceConfig.m_glClearBufferfv)
  {
    s_deviceConfig.m_glClearBufferfv (buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferfi

void  glew::gl::glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  // GL_VERSION_3_0 - glClearBufferfi
  if (s_deviceConfig.m_glClearBufferfi)
  {
    s_deviceConfig.m_glClearBufferfi (buffer, drawbuffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetStringi

const GLubyte * glew::gl::glGetStringi (GLenum name, GLuint index)
{
  // GL_VERSION_3_0 - glGetStringi
  if (s_deviceConfig.m_glGetStringi)
  {
    return s_deviceConfig.m_glGetStringi (name, index);
  }
  return ((const GLubyte *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsRenderbuffer

GLboolean glew::gl::glIsRenderbuffer (GLuint renderbuffer)
{
  // GL_VERSION_3_0 - glIsRenderbuffer
  if (s_deviceConfig.m_glIsRenderbuffer)
  {
    return s_deviceConfig.m_glIsRenderbuffer (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindRenderbuffer

void  glew::gl::glBindRenderbuffer (GLenum target, GLuint renderbuffer)
{
  // GL_VERSION_3_0 - glBindRenderbuffer
  if (s_deviceConfig.m_glBindRenderbuffer)
  {
    s_deviceConfig.m_glBindRenderbuffer (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteRenderbuffers

void  glew::gl::glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers)
{
  // GL_VERSION_3_0 - glDeleteRenderbuffers
  if (s_deviceConfig.m_glDeleteRenderbuffers)
  {
    s_deviceConfig.m_glDeleteRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenRenderbuffers

void  glew::gl::glGenRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_VERSION_3_0 - glGenRenderbuffers
  if (s_deviceConfig.m_glGenRenderbuffers)
  {
    s_deviceConfig.m_glGenRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorage

void  glew::gl::glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_3_0 - glRenderbufferStorage
  if (s_deviceConfig.m_glRenderbufferStorage)
  {
    s_deviceConfig.m_glRenderbufferStorage (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetRenderbufferParameteriv

void  glew::gl::glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_VERSION_3_0 - glGetRenderbufferParameteriv
  if (s_deviceConfig.m_glGetRenderbufferParameteriv)
  {
    s_deviceConfig.m_glGetRenderbufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsFramebuffer

GLboolean glew::gl::glIsFramebuffer (GLuint framebuffer)
{
  // GL_VERSION_3_0 - glIsFramebuffer
  if (s_deviceConfig.m_glIsFramebuffer)
  {
    return s_deviceConfig.m_glIsFramebuffer (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFramebuffer

void  glew::gl::glBindFramebuffer (GLenum target, GLuint framebuffer)
{
  // GL_VERSION_3_0 - glBindFramebuffer
  if (s_deviceConfig.m_glBindFramebuffer)
  {
    s_deviceConfig.m_glBindFramebuffer (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFramebuffers

void  glew::gl::glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers)
{
  // GL_VERSION_3_0 - glDeleteFramebuffers
  if (s_deviceConfig.m_glDeleteFramebuffers)
  {
    s_deviceConfig.m_glDeleteFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFramebuffers

void  glew::gl::glGenFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_VERSION_3_0 - glGenFramebuffers
  if (s_deviceConfig.m_glGenFramebuffers)
  {
    s_deviceConfig.m_glGenFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCheckFramebufferStatus

GLenum glew::gl::glCheckFramebufferStatus (GLenum target)
{
  // GL_VERSION_3_0 - glCheckFramebufferStatus
  if (s_deviceConfig.m_glCheckFramebufferStatus)
  {
    return s_deviceConfig.m_glCheckFramebufferStatus (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture1D

void  glew::gl::glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_VERSION_3_0 - glFramebufferTexture1D
  if (s_deviceConfig.m_glFramebufferTexture1D)
  {
    s_deviceConfig.m_glFramebufferTexture1D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture2D

void  glew::gl::glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_VERSION_3_0 - glFramebufferTexture2D
  if (s_deviceConfig.m_glFramebufferTexture2D)
  {
    s_deviceConfig.m_glFramebufferTexture2D (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture3D

void  glew::gl::glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_VERSION_3_0 - glFramebufferTexture3D
  if (s_deviceConfig.m_glFramebufferTexture3D)
  {
    s_deviceConfig.m_glFramebufferTexture3D (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferRenderbuffer

void  glew::gl::glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_VERSION_3_0 - glFramebufferRenderbuffer
  if (s_deviceConfig.m_glFramebufferRenderbuffer)
  {
    s_deviceConfig.m_glFramebufferRenderbuffer (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFramebufferAttachmentParameteriv

void  glew::gl::glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_VERSION_3_0 - glGetFramebufferAttachmentParameteriv
  if (s_deviceConfig.m_glGetFramebufferAttachmentParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenerateMipmap

void  glew::gl::glGenerateMipmap (GLenum target)
{
  // GL_VERSION_3_0 - glGenerateMipmap
  if (s_deviceConfig.m_glGenerateMipmap)
  {
    s_deviceConfig.m_glGenerateMipmap (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitFramebuffer

void  glew::gl::glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_VERSION_3_0 - glBlitFramebuffer
  if (s_deviceConfig.m_glBlitFramebuffer)
  {
    s_deviceConfig.m_glBlitFramebuffer (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisample

void  glew::gl::glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_3_0 - glRenderbufferStorageMultisample
  if (s_deviceConfig.m_glRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisample (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureLayer

void  glew::gl::glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_VERSION_3_0 - glFramebufferTextureLayer
  if (s_deviceConfig.m_glFramebufferTextureLayer)
  {
    s_deviceConfig.m_glFramebufferTextureLayer (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBufferRange

void * glew::gl::glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_VERSION_3_0 - glMapBufferRange
  if (s_deviceConfig.m_glMapBufferRange)
  {
    return s_deviceConfig.m_glMapBufferRange (target, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedBufferRange

void  glew::gl::glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length)
{
  // GL_VERSION_3_0 - glFlushMappedBufferRange
  if (s_deviceConfig.m_glFlushMappedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedBufferRange (target, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexArray

void  glew::gl::glBindVertexArray (GLuint array)
{
  // GL_VERSION_3_0 - glBindVertexArray
  if (s_deviceConfig.m_glBindVertexArray)
  {
    s_deviceConfig.m_glBindVertexArray (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteVertexArrays

void  glew::gl::glDeleteVertexArrays (GLsizei n, const GLuint * arrays)
{
  // GL_VERSION_3_0 - glDeleteVertexArrays
  if (s_deviceConfig.m_glDeleteVertexArrays)
  {
    s_deviceConfig.m_glDeleteVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenVertexArrays

void  glew::gl::glGenVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_VERSION_3_0 - glGenVertexArrays
  if (s_deviceConfig.m_glGenVertexArrays)
  {
    s_deviceConfig.m_glGenVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVertexArray

GLboolean glew::gl::glIsVertexArray (GLuint array)
{
  // GL_VERSION_3_0 - glIsVertexArray
  if (s_deviceConfig.m_glIsVertexArray)
  {
    return s_deviceConfig.m_glIsVertexArray (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstanced

void  glew::gl::glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
  // GL_VERSION_3_1 - glDrawArraysInstanced
  if (s_deviceConfig.m_glDrawArraysInstanced)
  {
    s_deviceConfig.m_glDrawArraysInstanced (mode, first, count, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstanced

void  glew::gl::glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount)
{
  // GL_VERSION_3_1 - glDrawElementsInstanced
  if (s_deviceConfig.m_glDrawElementsInstanced)
  {
    s_deviceConfig.m_glDrawElementsInstanced (mode, count, type, indices, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBuffer

void  glew::gl::glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_VERSION_3_1 - glTexBuffer
  if (s_deviceConfig.m_glTexBuffer)
  {
    s_deviceConfig.m_glTexBuffer (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrimitiveRestartIndex

void  glew::gl::glPrimitiveRestartIndex (GLuint index)
{
  // GL_VERSION_3_1 - glPrimitiveRestartIndex
  if (s_deviceConfig.m_glPrimitiveRestartIndex)
  {
    s_deviceConfig.m_glPrimitiveRestartIndex (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyBufferSubData

void  glew::gl::glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_VERSION_3_1 - glCopyBufferSubData
  if (s_deviceConfig.m_glCopyBufferSubData)
  {
    s_deviceConfig.m_glCopyBufferSubData (readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformIndices

void  glew::gl::glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices)
{
  // GL_VERSION_3_1 - glGetUniformIndices
  if (s_deviceConfig.m_glGetUniformIndices)
  {
    s_deviceConfig.m_glGetUniformIndices (program, uniformCount, uniformNames, uniformIndices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformsiv

void  glew::gl::glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params)
{
  // GL_VERSION_3_1 - glGetActiveUniformsiv
  if (s_deviceConfig.m_glGetActiveUniformsiv)
  {
    s_deviceConfig.m_glGetActiveUniformsiv (program, uniformCount, uniformIndices, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformName

void  glew::gl::glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName)
{
  // GL_VERSION_3_1 - glGetActiveUniformName
  if (s_deviceConfig.m_glGetActiveUniformName)
  {
    s_deviceConfig.m_glGetActiveUniformName (program, uniformIndex, bufSize, length, uniformName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformBlockIndex

GLuint glew::gl::glGetUniformBlockIndex (GLuint program, const GLchar * uniformBlockName)
{
  // GL_VERSION_3_1 - glGetUniformBlockIndex
  if (s_deviceConfig.m_glGetUniformBlockIndex)
  {
    return s_deviceConfig.m_glGetUniformBlockIndex (program, uniformBlockName);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformBlockiv

void  glew::gl::glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params)
{
  // GL_VERSION_3_1 - glGetActiveUniformBlockiv
  if (s_deviceConfig.m_glGetActiveUniformBlockiv)
  {
    s_deviceConfig.m_glGetActiveUniformBlockiv (program, uniformBlockIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformBlockName

void  glew::gl::glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName)
{
  // GL_VERSION_3_1 - glGetActiveUniformBlockName
  if (s_deviceConfig.m_glGetActiveUniformBlockName)
  {
    s_deviceConfig.m_glGetActiveUniformBlockName (program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformBlockBinding

void  glew::gl::glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  // GL_VERSION_3_1 - glUniformBlockBinding
  if (s_deviceConfig.m_glUniformBlockBinding)
  {
    s_deviceConfig.m_glUniformBlockBinding (program, uniformBlockIndex, uniformBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsBaseVertex

void  glew::gl::glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_VERSION_3_2 - glDrawElementsBaseVertex
  if (s_deviceConfig.m_glDrawElementsBaseVertex)
  {
    s_deviceConfig.m_glDrawElementsBaseVertex (mode, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementsBaseVertex

void  glew::gl::glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex)
{
  // GL_VERSION_3_2 - glDrawRangeElementsBaseVertex
  if (s_deviceConfig.m_glDrawRangeElementsBaseVertex)
  {
    s_deviceConfig.m_glDrawRangeElementsBaseVertex (mode, start, end, count, type, indices, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseVertex

void  glew::gl::glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex)
{
  // GL_VERSION_3_2 - glDrawElementsInstancedBaseVertex
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertex)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertex (mode, count, type, indices, instancecount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsBaseVertex

void  glew::gl::glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex)
{
  // GL_VERSION_3_2 - glMultiDrawElementsBaseVertex
  if (s_deviceConfig.m_glMultiDrawElementsBaseVertex)
  {
    s_deviceConfig.m_glMultiDrawElementsBaseVertex (mode, count, type, indices, drawcount, basevertex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProvokingVertex

void  glew::gl::glProvokingVertex (GLenum mode)
{
  // GL_VERSION_3_2 - glProvokingVertex
  if (s_deviceConfig.m_glProvokingVertex)
  {
    s_deviceConfig.m_glProvokingVertex (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFenceSync

GLsync glew::gl::glFenceSync (GLenum condition, GLbitfield flags)
{
  // GL_VERSION_3_2 - glFenceSync
  if (s_deviceConfig.m_glFenceSync)
  {
    return s_deviceConfig.m_glFenceSync (condition, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsSync

GLboolean glew::gl::glIsSync (GLsync sync)
{
  // GL_VERSION_3_2 - glIsSync
  if (s_deviceConfig.m_glIsSync)
  {
    return s_deviceConfig.m_glIsSync (sync);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteSync

void  glew::gl::glDeleteSync (GLsync sync)
{
  // GL_VERSION_3_2 - glDeleteSync
  if (s_deviceConfig.m_glDeleteSync)
  {
    s_deviceConfig.m_glDeleteSync (sync);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientWaitSync

GLenum glew::gl::glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_VERSION_3_2 - glClientWaitSync
  if (s_deviceConfig.m_glClientWaitSync)
  {
    return s_deviceConfig.m_glClientWaitSync (sync, flags, timeout);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWaitSync

void  glew::gl::glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  // GL_VERSION_3_2 - glWaitSync
  if (s_deviceConfig.m_glWaitSync)
  {
    s_deviceConfig.m_glWaitSync (sync, flags, timeout);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInteger64v

void  glew::gl::glGetInteger64v (GLenum pname, GLint64 * data)
{
  // GL_VERSION_3_2 - glGetInteger64v
  if (s_deviceConfig.m_glGetInteger64v)
  {
    s_deviceConfig.m_glGetInteger64v (pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSynciv

void  glew::gl::glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_VERSION_3_2 - glGetSynciv
  if (s_deviceConfig.m_glGetSynciv)
  {
    s_deviceConfig.m_glGetSynciv (sync, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInteger64i_v

void  glew::gl::glGetInteger64i_v (GLenum target, GLuint index, GLint64 * data)
{
  // GL_VERSION_3_2 - glGetInteger64i_v
  if (s_deviceConfig.m_glGetInteger64i_v)
  {
    s_deviceConfig.m_glGetInteger64i_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferParameteri64v

void  glew::gl::glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 * params)
{
  // GL_VERSION_3_2 - glGetBufferParameteri64v
  if (s_deviceConfig.m_glGetBufferParameteri64v)
  {
    s_deviceConfig.m_glGetBufferParameteri64v (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture

void  glew::gl::glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_VERSION_3_2 - glFramebufferTexture
  if (s_deviceConfig.m_glFramebufferTexture)
  {
    s_deviceConfig.m_glFramebufferTexture (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage2DMultisample

void  glew::gl::glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_VERSION_3_2 - glTexImage2DMultisample
  if (s_deviceConfig.m_glTexImage2DMultisample)
  {
    s_deviceConfig.m_glTexImage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3DMultisample

void  glew::gl::glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_VERSION_3_2 - glTexImage3DMultisample
  if (s_deviceConfig.m_glTexImage3DMultisample)
  {
    s_deviceConfig.m_glTexImage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultisamplefv

void  glew::gl::glGetMultisamplefv (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_VERSION_3_2 - glGetMultisamplefv
  if (s_deviceConfig.m_glGetMultisamplefv)
  {
    s_deviceConfig.m_glGetMultisamplefv (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMaski

void  glew::gl::glSampleMaski (GLuint maskNumber, GLbitfield mask)
{
  // GL_VERSION_3_2 - glSampleMaski
  if (s_deviceConfig.m_glSampleMaski)
  {
    s_deviceConfig.m_glSampleMaski (maskNumber, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFragDataLocationIndexed

void  glew::gl::glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name)
{
  // GL_VERSION_3_3 - glBindFragDataLocationIndexed
  if (s_deviceConfig.m_glBindFragDataLocationIndexed)
  {
    s_deviceConfig.m_glBindFragDataLocationIndexed (program, colorNumber, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragDataIndex

GLint glew::gl::glGetFragDataIndex (GLuint program, const GLchar * name)
{
  // GL_VERSION_3_3 - glGetFragDataIndex
  if (s_deviceConfig.m_glGetFragDataIndex)
  {
    return s_deviceConfig.m_glGetFragDataIndex (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenSamplers

void  glew::gl::glGenSamplers (GLsizei count, GLuint * samplers)
{
  // GL_VERSION_3_3 - glGenSamplers
  if (s_deviceConfig.m_glGenSamplers)
  {
    s_deviceConfig.m_glGenSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteSamplers

void  glew::gl::glDeleteSamplers (GLsizei count, const GLuint * samplers)
{
  // GL_VERSION_3_3 - glDeleteSamplers
  if (s_deviceConfig.m_glDeleteSamplers)
  {
    s_deviceConfig.m_glDeleteSamplers (count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsSampler

GLboolean glew::gl::glIsSampler (GLuint sampler)
{
  // GL_VERSION_3_3 - glIsSampler
  if (s_deviceConfig.m_glIsSampler)
  {
    return s_deviceConfig.m_glIsSampler (sampler);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindSampler

void  glew::gl::glBindSampler (GLuint unit, GLuint sampler)
{
  // GL_VERSION_3_3 - glBindSampler
  if (s_deviceConfig.m_glBindSampler)
  {
    s_deviceConfig.m_glBindSampler (unit, sampler);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameteri

void  glew::gl::glSamplerParameteri (GLuint sampler, GLenum pname, GLint param)
{
  // GL_VERSION_3_3 - glSamplerParameteri
  if (s_deviceConfig.m_glSamplerParameteri)
  {
    s_deviceConfig.m_glSamplerParameteri (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameteriv

void  glew::gl::glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_VERSION_3_3 - glSamplerParameteriv
  if (s_deviceConfig.m_glSamplerParameteriv)
  {
    s_deviceConfig.m_glSamplerParameteriv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterf

void  glew::gl::glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param)
{
  // GL_VERSION_3_3 - glSamplerParameterf
  if (s_deviceConfig.m_glSamplerParameterf)
  {
    s_deviceConfig.m_glSamplerParameterf (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterfv

void  glew::gl::glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat * param)
{
  // GL_VERSION_3_3 - glSamplerParameterfv
  if (s_deviceConfig.m_glSamplerParameterfv)
  {
    s_deviceConfig.m_glSamplerParameterfv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIiv

void  glew::gl::glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint * param)
{
  // GL_VERSION_3_3 - glSamplerParameterIiv
  if (s_deviceConfig.m_glSamplerParameterIiv)
  {
    s_deviceConfig.m_glSamplerParameterIiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplerParameterIuiv

void  glew::gl::glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint * param)
{
  // GL_VERSION_3_3 - glSamplerParameterIuiv
  if (s_deviceConfig.m_glSamplerParameterIuiv)
  {
    s_deviceConfig.m_glSamplerParameterIuiv (sampler, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameteriv

void  glew::gl::glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_VERSION_3_3 - glGetSamplerParameteriv
  if (s_deviceConfig.m_glGetSamplerParameteriv)
  {
    s_deviceConfig.m_glGetSamplerParameteriv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIiv

void  glew::gl::glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint * params)
{
  // GL_VERSION_3_3 - glGetSamplerParameterIiv
  if (s_deviceConfig.m_glGetSamplerParameterIiv)
  {
    s_deviceConfig.m_glGetSamplerParameterIiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterfv

void  glew::gl::glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat * params)
{
  // GL_VERSION_3_3 - glGetSamplerParameterfv
  if (s_deviceConfig.m_glGetSamplerParameterfv)
  {
    s_deviceConfig.m_glGetSamplerParameterfv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSamplerParameterIuiv

void  glew::gl::glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint * params)
{
  // GL_VERSION_3_3 - glGetSamplerParameterIuiv
  if (s_deviceConfig.m_glGetSamplerParameterIuiv)
  {
    s_deviceConfig.m_glGetSamplerParameterIuiv (sampler, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glQueryCounter

void  glew::gl::glQueryCounter (GLuint id, GLenum target)
{
  // GL_VERSION_3_3 - glQueryCounter
  if (s_deviceConfig.m_glQueryCounter)
  {
    s_deviceConfig.m_glQueryCounter (id, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjecti64v

void  glew::gl::glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_VERSION_3_3 - glGetQueryObjecti64v
  if (s_deviceConfig.m_glGetQueryObjecti64v)
  {
    s_deviceConfig.m_glGetQueryObjecti64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectui64v

void  glew::gl::glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_VERSION_3_3 - glGetQueryObjectui64v
  if (s_deviceConfig.m_glGetQueryObjectui64v)
  {
    s_deviceConfig.m_glGetQueryObjectui64v (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisor

void  glew::gl::glVertexAttribDivisor (GLuint index, GLuint divisor)
{
  // GL_VERSION_3_3 - glVertexAttribDivisor
  if (s_deviceConfig.m_glVertexAttribDivisor)
  {
    s_deviceConfig.m_glVertexAttribDivisor (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP1ui

void  glew::gl::glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_VERSION_3_3 - glVertexAttribP1ui
  if (s_deviceConfig.m_glVertexAttribP1ui)
  {
    s_deviceConfig.m_glVertexAttribP1ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP1uiv

void  glew::gl::glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexAttribP1uiv
  if (s_deviceConfig.m_glVertexAttribP1uiv)
  {
    s_deviceConfig.m_glVertexAttribP1uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP2ui

void  glew::gl::glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_VERSION_3_3 - glVertexAttribP2ui
  if (s_deviceConfig.m_glVertexAttribP2ui)
  {
    s_deviceConfig.m_glVertexAttribP2ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP2uiv

void  glew::gl::glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexAttribP2uiv
  if (s_deviceConfig.m_glVertexAttribP2uiv)
  {
    s_deviceConfig.m_glVertexAttribP2uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP3ui

void  glew::gl::glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_VERSION_3_3 - glVertexAttribP3ui
  if (s_deviceConfig.m_glVertexAttribP3ui)
  {
    s_deviceConfig.m_glVertexAttribP3ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP3uiv

void  glew::gl::glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexAttribP3uiv
  if (s_deviceConfig.m_glVertexAttribP3uiv)
  {
    s_deviceConfig.m_glVertexAttribP3uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP4ui

void  glew::gl::glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  // GL_VERSION_3_3 - glVertexAttribP4ui
  if (s_deviceConfig.m_glVertexAttribP4ui)
  {
    s_deviceConfig.m_glVertexAttribP4ui (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribP4uiv

void  glew::gl::glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexAttribP4uiv
  if (s_deviceConfig.m_glVertexAttribP4uiv)
  {
    s_deviceConfig.m_glVertexAttribP4uiv (index, type, normalized, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP2ui

void  glew::gl::glVertexP2ui (GLenum type, GLuint value)
{
  // GL_VERSION_3_3 - glVertexP2ui
  if (s_deviceConfig.m_glVertexP2ui)
  {
    s_deviceConfig.m_glVertexP2ui (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP2uiv

void  glew::gl::glVertexP2uiv (GLenum type, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexP2uiv
  if (s_deviceConfig.m_glVertexP2uiv)
  {
    s_deviceConfig.m_glVertexP2uiv (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP3ui

void  glew::gl::glVertexP3ui (GLenum type, GLuint value)
{
  // GL_VERSION_3_3 - glVertexP3ui
  if (s_deviceConfig.m_glVertexP3ui)
  {
    s_deviceConfig.m_glVertexP3ui (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP3uiv

void  glew::gl::glVertexP3uiv (GLenum type, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexP3uiv
  if (s_deviceConfig.m_glVertexP3uiv)
  {
    s_deviceConfig.m_glVertexP3uiv (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP4ui

void  glew::gl::glVertexP4ui (GLenum type, GLuint value)
{
  // GL_VERSION_3_3 - glVertexP4ui
  if (s_deviceConfig.m_glVertexP4ui)
  {
    s_deviceConfig.m_glVertexP4ui (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexP4uiv

void  glew::gl::glVertexP4uiv (GLenum type, const GLuint * value)
{
  // GL_VERSION_3_3 - glVertexP4uiv
  if (s_deviceConfig.m_glVertexP4uiv)
  {
    s_deviceConfig.m_glVertexP4uiv (type, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP1ui

void  glew::gl::glTexCoordP1ui (GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glTexCoordP1ui
  if (s_deviceConfig.m_glTexCoordP1ui)
  {
    s_deviceConfig.m_glTexCoordP1ui (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP1uiv

void  glew::gl::glTexCoordP1uiv (GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glTexCoordP1uiv
  if (s_deviceConfig.m_glTexCoordP1uiv)
  {
    s_deviceConfig.m_glTexCoordP1uiv (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP2ui

void  glew::gl::glTexCoordP2ui (GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glTexCoordP2ui
  if (s_deviceConfig.m_glTexCoordP2ui)
  {
    s_deviceConfig.m_glTexCoordP2ui (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP2uiv

void  glew::gl::glTexCoordP2uiv (GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glTexCoordP2uiv
  if (s_deviceConfig.m_glTexCoordP2uiv)
  {
    s_deviceConfig.m_glTexCoordP2uiv (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP3ui

void  glew::gl::glTexCoordP3ui (GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glTexCoordP3ui
  if (s_deviceConfig.m_glTexCoordP3ui)
  {
    s_deviceConfig.m_glTexCoordP3ui (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP3uiv

void  glew::gl::glTexCoordP3uiv (GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glTexCoordP3uiv
  if (s_deviceConfig.m_glTexCoordP3uiv)
  {
    s_deviceConfig.m_glTexCoordP3uiv (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP4ui

void  glew::gl::glTexCoordP4ui (GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glTexCoordP4ui
  if (s_deviceConfig.m_glTexCoordP4ui)
  {
    s_deviceConfig.m_glTexCoordP4ui (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordP4uiv

void  glew::gl::glTexCoordP4uiv (GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glTexCoordP4uiv
  if (s_deviceConfig.m_glTexCoordP4uiv)
  {
    s_deviceConfig.m_glTexCoordP4uiv (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP1ui

void  glew::gl::glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP1ui
  if (s_deviceConfig.m_glMultiTexCoordP1ui)
  {
    s_deviceConfig.m_glMultiTexCoordP1ui (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP1uiv

void  glew::gl::glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP1uiv
  if (s_deviceConfig.m_glMultiTexCoordP1uiv)
  {
    s_deviceConfig.m_glMultiTexCoordP1uiv (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP2ui

void  glew::gl::glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP2ui
  if (s_deviceConfig.m_glMultiTexCoordP2ui)
  {
    s_deviceConfig.m_glMultiTexCoordP2ui (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP2uiv

void  glew::gl::glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP2uiv
  if (s_deviceConfig.m_glMultiTexCoordP2uiv)
  {
    s_deviceConfig.m_glMultiTexCoordP2uiv (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP3ui

void  glew::gl::glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP3ui
  if (s_deviceConfig.m_glMultiTexCoordP3ui)
  {
    s_deviceConfig.m_glMultiTexCoordP3ui (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP3uiv

void  glew::gl::glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP3uiv
  if (s_deviceConfig.m_glMultiTexCoordP3uiv)
  {
    s_deviceConfig.m_glMultiTexCoordP3uiv (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP4ui

void  glew::gl::glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP4ui
  if (s_deviceConfig.m_glMultiTexCoordP4ui)
  {
    s_deviceConfig.m_glMultiTexCoordP4ui (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordP4uiv

void  glew::gl::glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glMultiTexCoordP4uiv
  if (s_deviceConfig.m_glMultiTexCoordP4uiv)
  {
    s_deviceConfig.m_glMultiTexCoordP4uiv (texture, type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalP3ui

void  glew::gl::glNormalP3ui (GLenum type, GLuint coords)
{
  // GL_VERSION_3_3 - glNormalP3ui
  if (s_deviceConfig.m_glNormalP3ui)
  {
    s_deviceConfig.m_glNormalP3ui (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalP3uiv

void  glew::gl::glNormalP3uiv (GLenum type, const GLuint * coords)
{
  // GL_VERSION_3_3 - glNormalP3uiv
  if (s_deviceConfig.m_glNormalP3uiv)
  {
    s_deviceConfig.m_glNormalP3uiv (type, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorP3ui

void  glew::gl::glColorP3ui (GLenum type, GLuint color)
{
  // GL_VERSION_3_3 - glColorP3ui
  if (s_deviceConfig.m_glColorP3ui)
  {
    s_deviceConfig.m_glColorP3ui (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorP3uiv

void  glew::gl::glColorP3uiv (GLenum type, const GLuint * color)
{
  // GL_VERSION_3_3 - glColorP3uiv
  if (s_deviceConfig.m_glColorP3uiv)
  {
    s_deviceConfig.m_glColorP3uiv (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorP4ui

void  glew::gl::glColorP4ui (GLenum type, GLuint color)
{
  // GL_VERSION_3_3 - glColorP4ui
  if (s_deviceConfig.m_glColorP4ui)
  {
    s_deviceConfig.m_glColorP4ui (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorP4uiv

void  glew::gl::glColorP4uiv (GLenum type, const GLuint * color)
{
  // GL_VERSION_3_3 - glColorP4uiv
  if (s_deviceConfig.m_glColorP4uiv)
  {
    s_deviceConfig.m_glColorP4uiv (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorP3ui

void  glew::gl::glSecondaryColorP3ui (GLenum type, GLuint color)
{
  // GL_VERSION_3_3 - glSecondaryColorP3ui
  if (s_deviceConfig.m_glSecondaryColorP3ui)
  {
    s_deviceConfig.m_glSecondaryColorP3ui (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorP3uiv

void  glew::gl::glSecondaryColorP3uiv (GLenum type, const GLuint * color)
{
  // GL_VERSION_3_3 - glSecondaryColorP3uiv
  if (s_deviceConfig.m_glSecondaryColorP3uiv)
  {
    s_deviceConfig.m_glSecondaryColorP3uiv (type, color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMinSampleShading

void  glew::gl::glMinSampleShading (GLfloat value)
{
  // GL_VERSION_4_0 - glMinSampleShading
  if (s_deviceConfig.m_glMinSampleShading)
  {
    s_deviceConfig.m_glMinSampleShading (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationi

void  glew::gl::glBlendEquationi (GLuint buf, GLenum mode)
{
  // GL_VERSION_4_0 - glBlendEquationi
  if (s_deviceConfig.m_glBlendEquationi)
  {
    s_deviceConfig.m_glBlendEquationi (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparatei

void  glew::gl::glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_VERSION_4_0 - glBlendEquationSeparatei
  if (s_deviceConfig.m_glBlendEquationSeparatei)
  {
    s_deviceConfig.m_glBlendEquationSeparatei (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFunci

void  glew::gl::glBlendFunci (GLuint buf, GLenum src, GLenum dst)
{
  // GL_VERSION_4_0 - glBlendFunci
  if (s_deviceConfig.m_glBlendFunci)
  {
    s_deviceConfig.m_glBlendFunci (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparatei

void  glew::gl::glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_VERSION_4_0 - glBlendFuncSeparatei
  if (s_deviceConfig.m_glBlendFuncSeparatei)
  {
    s_deviceConfig.m_glBlendFuncSeparatei (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysIndirect

void  glew::gl::glDrawArraysIndirect (GLenum mode, const void * indirect)
{
  // GL_VERSION_4_0 - glDrawArraysIndirect
  if (s_deviceConfig.m_glDrawArraysIndirect)
  {
    s_deviceConfig.m_glDrawArraysIndirect (mode, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsIndirect

void  glew::gl::glDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect)
{
  // GL_VERSION_4_0 - glDrawElementsIndirect
  if (s_deviceConfig.m_glDrawElementsIndirect)
  {
    s_deviceConfig.m_glDrawElementsIndirect (mode, type, indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1d

void  glew::gl::glUniform1d (GLint location, GLdouble x)
{
  // GL_VERSION_4_0 - glUniform1d
  if (s_deviceConfig.m_glUniform1d)
  {
    s_deviceConfig.m_glUniform1d (location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2d

void  glew::gl::glUniform2d (GLint location, GLdouble x, GLdouble y)
{
  // GL_VERSION_4_0 - glUniform2d
  if (s_deviceConfig.m_glUniform2d)
  {
    s_deviceConfig.m_glUniform2d (location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3d

void  glew::gl::glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_VERSION_4_0 - glUniform3d
  if (s_deviceConfig.m_glUniform3d)
  {
    s_deviceConfig.m_glUniform3d (location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4d

void  glew::gl::glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_VERSION_4_0 - glUniform4d
  if (s_deviceConfig.m_glUniform4d)
  {
    s_deviceConfig.m_glUniform4d (location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1dv

void  glew::gl::glUniform1dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniform1dv
  if (s_deviceConfig.m_glUniform1dv)
  {
    s_deviceConfig.m_glUniform1dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2dv

void  glew::gl::glUniform2dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniform2dv
  if (s_deviceConfig.m_glUniform2dv)
  {
    s_deviceConfig.m_glUniform2dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3dv

void  glew::gl::glUniform3dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniform3dv
  if (s_deviceConfig.m_glUniform3dv)
  {
    s_deviceConfig.m_glUniform3dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4dv

void  glew::gl::glUniform4dv (GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniform4dv
  if (s_deviceConfig.m_glUniform4dv)
  {
    s_deviceConfig.m_glUniform4dv (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2dv

void  glew::gl::glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix2dv
  if (s_deviceConfig.m_glUniformMatrix2dv)
  {
    s_deviceConfig.m_glUniformMatrix2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3dv

void  glew::gl::glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix3dv
  if (s_deviceConfig.m_glUniformMatrix3dv)
  {
    s_deviceConfig.m_glUniformMatrix3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4dv

void  glew::gl::glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix4dv
  if (s_deviceConfig.m_glUniformMatrix4dv)
  {
    s_deviceConfig.m_glUniformMatrix4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x3dv

void  glew::gl::glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix2x3dv
  if (s_deviceConfig.m_glUniformMatrix2x3dv)
  {
    s_deviceConfig.m_glUniformMatrix2x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2x4dv

void  glew::gl::glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix2x4dv
  if (s_deviceConfig.m_glUniformMatrix2x4dv)
  {
    s_deviceConfig.m_glUniformMatrix2x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x2dv

void  glew::gl::glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix3x2dv
  if (s_deviceConfig.m_glUniformMatrix3x2dv)
  {
    s_deviceConfig.m_glUniformMatrix3x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3x4dv

void  glew::gl::glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix3x4dv
  if (s_deviceConfig.m_glUniformMatrix3x4dv)
  {
    s_deviceConfig.m_glUniformMatrix3x4dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x2dv

void  glew::gl::glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix4x2dv
  if (s_deviceConfig.m_glUniformMatrix4x2dv)
  {
    s_deviceConfig.m_glUniformMatrix4x2dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4x3dv

void  glew::gl::glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_0 - glUniformMatrix4x3dv
  if (s_deviceConfig.m_glUniformMatrix4x3dv)
  {
    s_deviceConfig.m_glUniformMatrix4x3dv (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformdv

void  glew::gl::glGetUniformdv (GLuint program, GLint location, GLdouble * params)
{
  // GL_VERSION_4_0 - glGetUniformdv
  if (s_deviceConfig.m_glGetUniformdv)
  {
    s_deviceConfig.m_glGetUniformdv (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSubroutineUniformLocation

GLint glew::gl::glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_VERSION_4_0 - glGetSubroutineUniformLocation
  if (s_deviceConfig.m_glGetSubroutineUniformLocation)
  {
    return s_deviceConfig.m_glGetSubroutineUniformLocation (program, shadertype, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSubroutineIndex

GLuint glew::gl::glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar * name)
{
  // GL_VERSION_4_0 - glGetSubroutineIndex
  if (s_deviceConfig.m_glGetSubroutineIndex)
  {
    return s_deviceConfig.m_glGetSubroutineIndex (program, shadertype, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveSubroutineUniformiv

void  glew::gl::glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
  // GL_VERSION_4_0 - glGetActiveSubroutineUniformiv
  if (s_deviceConfig.m_glGetActiveSubroutineUniformiv)
  {
    s_deviceConfig.m_glGetActiveSubroutineUniformiv (program, shadertype, index, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveSubroutineUniformName

void  glew::gl::glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_VERSION_4_0 - glGetActiveSubroutineUniformName
  if (s_deviceConfig.m_glGetActiveSubroutineUniformName)
  {
    s_deviceConfig.m_glGetActiveSubroutineUniformName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveSubroutineName

void  glew::gl::glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
  // GL_VERSION_4_0 - glGetActiveSubroutineName
  if (s_deviceConfig.m_glGetActiveSubroutineName)
  {
    s_deviceConfig.m_glGetActiveSubroutineName (program, shadertype, index, bufsize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformSubroutinesuiv

void  glew::gl::glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint * indices)
{
  // GL_VERSION_4_0 - glUniformSubroutinesuiv
  if (s_deviceConfig.m_glUniformSubroutinesuiv)
  {
    s_deviceConfig.m_glUniformSubroutinesuiv (shadertype, count, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformSubroutineuiv

void  glew::gl::glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint * params)
{
  // GL_VERSION_4_0 - glGetUniformSubroutineuiv
  if (s_deviceConfig.m_glGetUniformSubroutineuiv)
  {
    s_deviceConfig.m_glGetUniformSubroutineuiv (shadertype, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramStageiv

void  glew::gl::glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
  // GL_VERSION_4_0 - glGetProgramStageiv
  if (s_deviceConfig.m_glGetProgramStageiv)
  {
    s_deviceConfig.m_glGetProgramStageiv (program, shadertype, pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPatchParameteri

void  glew::gl::glPatchParameteri (GLenum pname, GLint value)
{
  // GL_VERSION_4_0 - glPatchParameteri
  if (s_deviceConfig.m_glPatchParameteri)
  {
    s_deviceConfig.m_glPatchParameteri (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPatchParameterfv

void  glew::gl::glPatchParameterfv (GLenum pname, const GLfloat * values)
{
  // GL_VERSION_4_0 - glPatchParameterfv
  if (s_deviceConfig.m_glPatchParameterfv)
  {
    s_deviceConfig.m_glPatchParameterfv (pname, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTransformFeedback

void  glew::gl::glBindTransformFeedback (GLenum target, GLuint id)
{
  // GL_VERSION_4_0 - glBindTransformFeedback
  if (s_deviceConfig.m_glBindTransformFeedback)
  {
    s_deviceConfig.m_glBindTransformFeedback (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteTransformFeedbacks

void  glew::gl::glDeleteTransformFeedbacks (GLsizei n, const GLuint * ids)
{
  // GL_VERSION_4_0 - glDeleteTransformFeedbacks
  if (s_deviceConfig.m_glDeleteTransformFeedbacks)
  {
    s_deviceConfig.m_glDeleteTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenTransformFeedbacks

void  glew::gl::glGenTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_VERSION_4_0 - glGenTransformFeedbacks
  if (s_deviceConfig.m_glGenTransformFeedbacks)
  {
    s_deviceConfig.m_glGenTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTransformFeedback

GLboolean glew::gl::glIsTransformFeedback (GLuint id)
{
  // GL_VERSION_4_0 - glIsTransformFeedback
  if (s_deviceConfig.m_glIsTransformFeedback)
  {
    return s_deviceConfig.m_glIsTransformFeedback (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPauseTransformFeedback

void  glew::gl::glPauseTransformFeedback ()
{
  // GL_VERSION_4_0 - glPauseTransformFeedback
  if (s_deviceConfig.m_glPauseTransformFeedback)
  {
    s_deviceConfig.m_glPauseTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResumeTransformFeedback

void  glew::gl::glResumeTransformFeedback ()
{
  // GL_VERSION_4_0 - glResumeTransformFeedback
  if (s_deviceConfig.m_glResumeTransformFeedback)
  {
    s_deviceConfig.m_glResumeTransformFeedback ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTransformFeedback

void  glew::gl::glDrawTransformFeedback (GLenum mode, GLuint id)
{
  // GL_VERSION_4_0 - glDrawTransformFeedback
  if (s_deviceConfig.m_glDrawTransformFeedback)
  {
    s_deviceConfig.m_glDrawTransformFeedback (mode, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTransformFeedbackStream

void  glew::gl::glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream)
{
  // GL_VERSION_4_0 - glDrawTransformFeedbackStream
  if (s_deviceConfig.m_glDrawTransformFeedbackStream)
  {
    s_deviceConfig.m_glDrawTransformFeedbackStream (mode, id, stream);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginQueryIndexed

void  glew::gl::glBeginQueryIndexed (GLenum target, GLuint index, GLuint id)
{
  // GL_VERSION_4_0 - glBeginQueryIndexed
  if (s_deviceConfig.m_glBeginQueryIndexed)
  {
    s_deviceConfig.m_glBeginQueryIndexed (target, index, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndQueryIndexed

void  glew::gl::glEndQueryIndexed (GLenum target, GLuint index)
{
  // GL_VERSION_4_0 - glEndQueryIndexed
  if (s_deviceConfig.m_glEndQueryIndexed)
  {
    s_deviceConfig.m_glEndQueryIndexed (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryIndexediv

void  glew::gl::glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint * params)
{
  // GL_VERSION_4_0 - glGetQueryIndexediv
  if (s_deviceConfig.m_glGetQueryIndexediv)
  {
    s_deviceConfig.m_glGetQueryIndexediv (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReleaseShaderCompiler

void  glew::gl::glReleaseShaderCompiler ()
{
  // GL_VERSION_4_1 - glReleaseShaderCompiler
  if (s_deviceConfig.m_glReleaseShaderCompiler)
  {
    s_deviceConfig.m_glReleaseShaderCompiler ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderBinary

void  glew::gl::glShaderBinary (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
  // GL_VERSION_4_1 - glShaderBinary
  if (s_deviceConfig.m_glShaderBinary)
  {
    s_deviceConfig.m_glShaderBinary (count, shaders, binaryformat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetShaderPrecisionFormat

void  glew::gl::glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
  // GL_VERSION_4_1 - glGetShaderPrecisionFormat
  if (s_deviceConfig.m_glGetShaderPrecisionFormat)
  {
    s_deviceConfig.m_glGetShaderPrecisionFormat (shadertype, precisiontype, range, precision);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangef

void  glew::gl::glDepthRangef (GLfloat n, GLfloat f)
{
  // GL_VERSION_4_1 - glDepthRangef
  if (s_deviceConfig.m_glDepthRangef)
  {
    s_deviceConfig.m_glDepthRangef (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearDepthf

void  glew::gl::glClearDepthf (GLfloat d)
{
  // GL_VERSION_4_1 - glClearDepthf
  if (s_deviceConfig.m_glClearDepthf)
  {
    s_deviceConfig.m_glClearDepthf (d);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramBinary

void  glew::gl::glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
  // GL_VERSION_4_1 - glGetProgramBinary
  if (s_deviceConfig.m_glGetProgramBinary)
  {
    s_deviceConfig.m_glGetProgramBinary (program, bufSize, length, binaryFormat, binary);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBinary

void  glew::gl::glProgramBinary (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
  // GL_VERSION_4_1 - glProgramBinary
  if (s_deviceConfig.m_glProgramBinary)
  {
    s_deviceConfig.m_glProgramBinary (program, binaryFormat, binary, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameteri

void  glew::gl::glProgramParameteri (GLuint program, GLenum pname, GLint value)
{
  // GL_VERSION_4_1 - glProgramParameteri
  if (s_deviceConfig.m_glProgramParameteri)
  {
    s_deviceConfig.m_glProgramParameteri (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseProgramStages

void  glew::gl::glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program)
{
  // GL_VERSION_4_1 - glUseProgramStages
  if (s_deviceConfig.m_glUseProgramStages)
  {
    s_deviceConfig.m_glUseProgramStages (pipeline, stages, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveShaderProgram

void  glew::gl::glActiveShaderProgram (GLuint pipeline, GLuint program)
{
  // GL_VERSION_4_1 - glActiveShaderProgram
  if (s_deviceConfig.m_glActiveShaderProgram)
  {
    s_deviceConfig.m_glActiveShaderProgram (pipeline, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShaderProgramv

GLuint glew::gl::glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const* strings)
{
  // GL_VERSION_4_1 - glCreateShaderProgramv
  if (s_deviceConfig.m_glCreateShaderProgramv)
  {
    return s_deviceConfig.m_glCreateShaderProgramv (type, count, strings);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindProgramPipeline

void  glew::gl::glBindProgramPipeline (GLuint pipeline)
{
  // GL_VERSION_4_1 - glBindProgramPipeline
  if (s_deviceConfig.m_glBindProgramPipeline)
  {
    s_deviceConfig.m_glBindProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgramPipelines

void  glew::gl::glDeleteProgramPipelines (GLsizei n, const GLuint * pipelines)
{
  // GL_VERSION_4_1 - glDeleteProgramPipelines
  if (s_deviceConfig.m_glDeleteProgramPipelines)
  {
    s_deviceConfig.m_glDeleteProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenProgramPipelines

void  glew::gl::glGenProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_VERSION_4_1 - glGenProgramPipelines
  if (s_deviceConfig.m_glGenProgramPipelines)
  {
    s_deviceConfig.m_glGenProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgramPipeline

GLboolean glew::gl::glIsProgramPipeline (GLuint pipeline)
{
  // GL_VERSION_4_1 - glIsProgramPipeline
  if (s_deviceConfig.m_glIsProgramPipeline)
  {
    return s_deviceConfig.m_glIsProgramPipeline (pipeline);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineiv

void  glew::gl::glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint * params)
{
  // GL_VERSION_4_1 - glGetProgramPipelineiv
  if (s_deviceConfig.m_glGetProgramPipelineiv)
  {
    s_deviceConfig.m_glGetProgramPipelineiv (pipeline, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1i

void  glew::gl::glProgramUniform1i (GLuint program, GLint location, GLint v0)
{
  // GL_VERSION_4_1 - glProgramUniform1i
  if (s_deviceConfig.m_glProgramUniform1i)
  {
    s_deviceConfig.m_glProgramUniform1i (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1iv

void  glew::gl::glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_4_1 - glProgramUniform1iv
  if (s_deviceConfig.m_glProgramUniform1iv)
  {
    s_deviceConfig.m_glProgramUniform1iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1f

void  glew::gl::glProgramUniform1f (GLuint program, GLint location, GLfloat v0)
{
  // GL_VERSION_4_1 - glProgramUniform1f
  if (s_deviceConfig.m_glProgramUniform1f)
  {
    s_deviceConfig.m_glProgramUniform1f (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fv

void  glew::gl::glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniform1fv
  if (s_deviceConfig.m_glProgramUniform1fv)
  {
    s_deviceConfig.m_glProgramUniform1fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1d

void  glew::gl::glProgramUniform1d (GLuint program, GLint location, GLdouble v0)
{
  // GL_VERSION_4_1 - glProgramUniform1d
  if (s_deviceConfig.m_glProgramUniform1d)
  {
    s_deviceConfig.m_glProgramUniform1d (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1dv

void  glew::gl::glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniform1dv
  if (s_deviceConfig.m_glProgramUniform1dv)
  {
    s_deviceConfig.m_glProgramUniform1dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ui

void  glew::gl::glProgramUniform1ui (GLuint program, GLint location, GLuint v0)
{
  // GL_VERSION_4_1 - glProgramUniform1ui
  if (s_deviceConfig.m_glProgramUniform1ui)
  {
    s_deviceConfig.m_glProgramUniform1ui (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uiv

void  glew::gl::glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_4_1 - glProgramUniform1uiv
  if (s_deviceConfig.m_glProgramUniform1uiv)
  {
    s_deviceConfig.m_glProgramUniform1uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2i

void  glew::gl::glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_VERSION_4_1 - glProgramUniform2i
  if (s_deviceConfig.m_glProgramUniform2i)
  {
    s_deviceConfig.m_glProgramUniform2i (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2iv

void  glew::gl::glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_4_1 - glProgramUniform2iv
  if (s_deviceConfig.m_glProgramUniform2iv)
  {
    s_deviceConfig.m_glProgramUniform2iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2f

void  glew::gl::glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_VERSION_4_1 - glProgramUniform2f
  if (s_deviceConfig.m_glProgramUniform2f)
  {
    s_deviceConfig.m_glProgramUniform2f (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fv

void  glew::gl::glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniform2fv
  if (s_deviceConfig.m_glProgramUniform2fv)
  {
    s_deviceConfig.m_glProgramUniform2fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2d

void  glew::gl::glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
  // GL_VERSION_4_1 - glProgramUniform2d
  if (s_deviceConfig.m_glProgramUniform2d)
  {
    s_deviceConfig.m_glProgramUniform2d (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2dv

void  glew::gl::glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniform2dv
  if (s_deviceConfig.m_glProgramUniform2dv)
  {
    s_deviceConfig.m_glProgramUniform2dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ui

void  glew::gl::glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_VERSION_4_1 - glProgramUniform2ui
  if (s_deviceConfig.m_glProgramUniform2ui)
  {
    s_deviceConfig.m_glProgramUniform2ui (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uiv

void  glew::gl::glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_4_1 - glProgramUniform2uiv
  if (s_deviceConfig.m_glProgramUniform2uiv)
  {
    s_deviceConfig.m_glProgramUniform2uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3i

void  glew::gl::glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_VERSION_4_1 - glProgramUniform3i
  if (s_deviceConfig.m_glProgramUniform3i)
  {
    s_deviceConfig.m_glProgramUniform3i (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3iv

void  glew::gl::glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_4_1 - glProgramUniform3iv
  if (s_deviceConfig.m_glProgramUniform3iv)
  {
    s_deviceConfig.m_glProgramUniform3iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3f

void  glew::gl::glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_VERSION_4_1 - glProgramUniform3f
  if (s_deviceConfig.m_glProgramUniform3f)
  {
    s_deviceConfig.m_glProgramUniform3f (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fv

void  glew::gl::glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniform3fv
  if (s_deviceConfig.m_glProgramUniform3fv)
  {
    s_deviceConfig.m_glProgramUniform3fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3d

void  glew::gl::glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
  // GL_VERSION_4_1 - glProgramUniform3d
  if (s_deviceConfig.m_glProgramUniform3d)
  {
    s_deviceConfig.m_glProgramUniform3d (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3dv

void  glew::gl::glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniform3dv
  if (s_deviceConfig.m_glProgramUniform3dv)
  {
    s_deviceConfig.m_glProgramUniform3dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ui

void  glew::gl::glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_VERSION_4_1 - glProgramUniform3ui
  if (s_deviceConfig.m_glProgramUniform3ui)
  {
    s_deviceConfig.m_glProgramUniform3ui (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uiv

void  glew::gl::glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_4_1 - glProgramUniform3uiv
  if (s_deviceConfig.m_glProgramUniform3uiv)
  {
    s_deviceConfig.m_glProgramUniform3uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4i

void  glew::gl::glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_VERSION_4_1 - glProgramUniform4i
  if (s_deviceConfig.m_glProgramUniform4i)
  {
    s_deviceConfig.m_glProgramUniform4i (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4iv

void  glew::gl::glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_VERSION_4_1 - glProgramUniform4iv
  if (s_deviceConfig.m_glProgramUniform4iv)
  {
    s_deviceConfig.m_glProgramUniform4iv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4f

void  glew::gl::glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_VERSION_4_1 - glProgramUniform4f
  if (s_deviceConfig.m_glProgramUniform4f)
  {
    s_deviceConfig.m_glProgramUniform4f (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fv

void  glew::gl::glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniform4fv
  if (s_deviceConfig.m_glProgramUniform4fv)
  {
    s_deviceConfig.m_glProgramUniform4fv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4d

void  glew::gl::glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
  // GL_VERSION_4_1 - glProgramUniform4d
  if (s_deviceConfig.m_glProgramUniform4d)
  {
    s_deviceConfig.m_glProgramUniform4d (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4dv

void  glew::gl::glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniform4dv
  if (s_deviceConfig.m_glProgramUniform4dv)
  {
    s_deviceConfig.m_glProgramUniform4dv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ui

void  glew::gl::glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_VERSION_4_1 - glProgramUniform4ui
  if (s_deviceConfig.m_glProgramUniform4ui)
  {
    s_deviceConfig.m_glProgramUniform4ui (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uiv

void  glew::gl::glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_VERSION_4_1 - glProgramUniform4uiv
  if (s_deviceConfig.m_glProgramUniform4uiv)
  {
    s_deviceConfig.m_glProgramUniform4uiv (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2fv

void  glew::gl::glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2fv
  if (s_deviceConfig.m_glProgramUniformMatrix2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3fv

void  glew::gl::glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3fv
  if (s_deviceConfig.m_glProgramUniformMatrix3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4fv

void  glew::gl::glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4fv
  if (s_deviceConfig.m_glProgramUniformMatrix4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2dv

void  glew::gl::glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2dv
  if (s_deviceConfig.m_glProgramUniformMatrix2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3dv

void  glew::gl::glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3dv
  if (s_deviceConfig.m_glProgramUniformMatrix3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4dv

void  glew::gl::glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4dv
  if (s_deviceConfig.m_glProgramUniformMatrix4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3fv

void  glew::gl::glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2fv

void  glew::gl::glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4fv

void  glew::gl::glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2fv

void  glew::gl::glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4x2fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4fv

void  glew::gl::glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3x4fv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3fv

void  glew::gl::glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4x3fv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3dv

void  glew::gl::glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2x3dv
  if (s_deviceConfig.m_glProgramUniformMatrix2x3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2dv

void  glew::gl::glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3x2dv
  if (s_deviceConfig.m_glProgramUniformMatrix3x2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4dv

void  glew::gl::glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix2x4dv
  if (s_deviceConfig.m_glProgramUniformMatrix2x4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2dv

void  glew::gl::glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4x2dv
  if (s_deviceConfig.m_glProgramUniformMatrix4x2dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4dv

void  glew::gl::glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix3x4dv
  if (s_deviceConfig.m_glProgramUniformMatrix3x4dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3dv

void  glew::gl::glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_VERSION_4_1 - glProgramUniformMatrix4x3dv
  if (s_deviceConfig.m_glProgramUniformMatrix4x3dv)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3dv (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glValidateProgramPipeline

void  glew::gl::glValidateProgramPipeline (GLuint pipeline)
{
  // GL_VERSION_4_1 - glValidateProgramPipeline
  if (s_deviceConfig.m_glValidateProgramPipeline)
  {
    s_deviceConfig.m_glValidateProgramPipeline (pipeline);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramPipelineInfoLog

void  glew::gl::glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
  // GL_VERSION_4_1 - glGetProgramPipelineInfoLog
  if (s_deviceConfig.m_glGetProgramPipelineInfoLog)
  {
    s_deviceConfig.m_glGetProgramPipelineInfoLog (pipeline, bufSize, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1d

void  glew::gl::glVertexAttribL1d (GLuint index, GLdouble x)
{
  // GL_VERSION_4_1 - glVertexAttribL1d
  if (s_deviceConfig.m_glVertexAttribL1d)
  {
    s_deviceConfig.m_glVertexAttribL1d (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2d

void  glew::gl::glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y)
{
  // GL_VERSION_4_1 - glVertexAttribL2d
  if (s_deviceConfig.m_glVertexAttribL2d)
  {
    s_deviceConfig.m_glVertexAttribL2d (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3d

void  glew::gl::glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_VERSION_4_1 - glVertexAttribL3d
  if (s_deviceConfig.m_glVertexAttribL3d)
  {
    s_deviceConfig.m_glVertexAttribL3d (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4d

void  glew::gl::glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_VERSION_4_1 - glVertexAttribL4d
  if (s_deviceConfig.m_glVertexAttribL4d)
  {
    s_deviceConfig.m_glVertexAttribL4d (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1dv

void  glew::gl::glVertexAttribL1dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_4_1 - glVertexAttribL1dv
  if (s_deviceConfig.m_glVertexAttribL1dv)
  {
    s_deviceConfig.m_glVertexAttribL1dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2dv

void  glew::gl::glVertexAttribL2dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_4_1 - glVertexAttribL2dv
  if (s_deviceConfig.m_glVertexAttribL2dv)
  {
    s_deviceConfig.m_glVertexAttribL2dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3dv

void  glew::gl::glVertexAttribL3dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_4_1 - glVertexAttribL3dv
  if (s_deviceConfig.m_glVertexAttribL3dv)
  {
    s_deviceConfig.m_glVertexAttribL3dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4dv

void  glew::gl::glVertexAttribL4dv (GLuint index, const GLdouble * v)
{
  // GL_VERSION_4_1 - glVertexAttribL4dv
  if (s_deviceConfig.m_glVertexAttribL4dv)
  {
    s_deviceConfig.m_glVertexAttribL4dv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribLPointer

void  glew::gl::glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_VERSION_4_1 - glVertexAttribLPointer
  if (s_deviceConfig.m_glVertexAttribLPointer)
  {
    s_deviceConfig.m_glVertexAttribLPointer (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribLdv

void  glew::gl::glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_VERSION_4_1 - glGetVertexAttribLdv
  if (s_deviceConfig.m_glGetVertexAttribLdv)
  {
    s_deviceConfig.m_glGetVertexAttribLdv (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportArrayv

void  glew::gl::glViewportArrayv (GLuint first, GLsizei count, const GLfloat * v)
{
  // GL_VERSION_4_1 - glViewportArrayv
  if (s_deviceConfig.m_glViewportArrayv)
  {
    s_deviceConfig.m_glViewportArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportIndexedf

void  glew::gl::glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  // GL_VERSION_4_1 - glViewportIndexedf
  if (s_deviceConfig.m_glViewportIndexedf)
  {
    s_deviceConfig.m_glViewportIndexedf (index, x, y, w, h);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glViewportIndexedfv

void  glew::gl::glViewportIndexedfv (GLuint index, const GLfloat * v)
{
  // GL_VERSION_4_1 - glViewportIndexedfv
  if (s_deviceConfig.m_glViewportIndexedfv)
  {
    s_deviceConfig.m_glViewportIndexedfv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorArrayv

void  glew::gl::glScissorArrayv (GLuint first, GLsizei count, const GLint * v)
{
  // GL_VERSION_4_1 - glScissorArrayv
  if (s_deviceConfig.m_glScissorArrayv)
  {
    s_deviceConfig.m_glScissorArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorIndexed

void  glew::gl::glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_1 - glScissorIndexed
  if (s_deviceConfig.m_glScissorIndexed)
  {
    s_deviceConfig.m_glScissorIndexed (index, left, bottom, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScissorIndexedv

void  glew::gl::glScissorIndexedv (GLuint index, const GLint * v)
{
  // GL_VERSION_4_1 - glScissorIndexedv
  if (s_deviceConfig.m_glScissorIndexedv)
  {
    s_deviceConfig.m_glScissorIndexedv (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangeArrayv

void  glew::gl::glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble * v)
{
  // GL_VERSION_4_1 - glDepthRangeArrayv
  if (s_deviceConfig.m_glDepthRangeArrayv)
  {
    s_deviceConfig.m_glDepthRangeArrayv (first, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangeIndexed

void  glew::gl::glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f)
{
  // GL_VERSION_4_1 - glDepthRangeIndexed
  if (s_deviceConfig.m_glDepthRangeIndexed)
  {
    s_deviceConfig.m_glDepthRangeIndexed (index, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFloati_v

void  glew::gl::glGetFloati_v (GLenum target, GLuint index, GLfloat * data)
{
  // GL_VERSION_4_1 - glGetFloati_v
  if (s_deviceConfig.m_glGetFloati_v)
  {
    s_deviceConfig.m_glGetFloati_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDoublei_v

void  glew::gl::glGetDoublei_v (GLenum target, GLuint index, GLdouble * data)
{
  // GL_VERSION_4_1 - glGetDoublei_v
  if (s_deviceConfig.m_glGetDoublei_v)
  {
    s_deviceConfig.m_glGetDoublei_v (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedBaseInstance

void  glew::gl::glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
  // GL_VERSION_4_2 - glDrawArraysInstancedBaseInstance
  if (s_deviceConfig.m_glDrawArraysInstancedBaseInstance)
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstance (mode, first, count, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseInstance

void  glew::gl::glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
  // GL_VERSION_4_2 - glDrawElementsInstancedBaseInstance
  if (s_deviceConfig.m_glDrawElementsInstancedBaseInstance)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseInstance (mode, count, type, indices, instancecount, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedBaseVertexBaseInstance

void  glew::gl::glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
  // GL_VERSION_4_2 - glDrawElementsInstancedBaseVertexBaseInstance
  if (s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance)
  {
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance (mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInternalformativ

void  glew::gl::glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_VERSION_4_2 - glGetInternalformativ
  if (s_deviceConfig.m_glGetInternalformativ)
  {
    s_deviceConfig.m_glGetInternalformativ (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveAtomicCounterBufferiv

void  glew::gl::glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
  // GL_VERSION_4_2 - glGetActiveAtomicCounterBufferiv
  if (s_deviceConfig.m_glGetActiveAtomicCounterBufferiv)
  {
    s_deviceConfig.m_glGetActiveAtomicCounterBufferiv (program, bufferIndex, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindImageTexture

void  glew::gl::glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  // GL_VERSION_4_2 - glBindImageTexture
  if (s_deviceConfig.m_glBindImageTexture)
  {
    s_deviceConfig.m_glBindImageTexture (unit, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMemoryBarrier

void  glew::gl::glMemoryBarrier (GLbitfield barriers)
{
  // GL_VERSION_4_2 - glMemoryBarrier
  if (s_deviceConfig.m_glMemoryBarrier)
  {
    s_deviceConfig.m_glMemoryBarrier (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage1D

void  glew::gl::glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_VERSION_4_2 - glTexStorage1D
  if (s_deviceConfig.m_glTexStorage1D)
  {
    s_deviceConfig.m_glTexStorage1D (target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage2D

void  glew::gl::glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_2 - glTexStorage2D
  if (s_deviceConfig.m_glTexStorage2D)
  {
    s_deviceConfig.m_glTexStorage2D (target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage3D

void  glew::gl::glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_VERSION_4_2 - glTexStorage3D
  if (s_deviceConfig.m_glTexStorage3D)
  {
    s_deviceConfig.m_glTexStorage3D (target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTransformFeedbackInstanced

void  glew::gl::glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount)
{
  // GL_VERSION_4_2 - glDrawTransformFeedbackInstanced
  if (s_deviceConfig.m_glDrawTransformFeedbackInstanced)
  {
    s_deviceConfig.m_glDrawTransformFeedbackInstanced (mode, id, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTransformFeedbackStreamInstanced

void  glew::gl::glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
  // GL_VERSION_4_2 - glDrawTransformFeedbackStreamInstanced
  if (s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced)
  {
    s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced (mode, id, stream, instancecount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferData

void  glew::gl::glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_3 - glClearBufferData
  if (s_deviceConfig.m_glClearBufferData)
  {
    s_deviceConfig.m_glClearBufferData (target, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearBufferSubData

void  glew::gl::glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_3 - glClearBufferSubData
  if (s_deviceConfig.m_glClearBufferSubData)
  {
    s_deviceConfig.m_glClearBufferSubData (target, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDispatchCompute

void  glew::gl::glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  // GL_VERSION_4_3 - glDispatchCompute
  if (s_deviceConfig.m_glDispatchCompute)
  {
    s_deviceConfig.m_glDispatchCompute (num_groups_x, num_groups_y, num_groups_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDispatchComputeIndirect

void  glew::gl::glDispatchComputeIndirect (GLintptr indirect)
{
  // GL_VERSION_4_3 - glDispatchComputeIndirect
  if (s_deviceConfig.m_glDispatchComputeIndirect)
  {
    s_deviceConfig.m_glDispatchComputeIndirect (indirect);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyImageSubData

void  glew::gl::glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  // GL_VERSION_4_3 - glCopyImageSubData
  if (s_deviceConfig.m_glCopyImageSubData)
  {
    s_deviceConfig.m_glCopyImageSubData (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferParameteri

void  glew::gl::glFramebufferParameteri (GLenum target, GLenum pname, GLint param)
{
  // GL_VERSION_4_3 - glFramebufferParameteri
  if (s_deviceConfig.m_glFramebufferParameteri)
  {
    s_deviceConfig.m_glFramebufferParameteri (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFramebufferParameteriv

void  glew::gl::glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_VERSION_4_3 - glGetFramebufferParameteriv
  if (s_deviceConfig.m_glGetFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetFramebufferParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInternalformati64v

void  glew::gl::glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
  // GL_VERSION_4_3 - glGetInternalformati64v
  if (s_deviceConfig.m_glGetInternalformati64v)
  {
    s_deviceConfig.m_glGetInternalformati64v (target, internalformat, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateTexSubImage

void  glew::gl::glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_VERSION_4_3 - glInvalidateTexSubImage
  if (s_deviceConfig.m_glInvalidateTexSubImage)
  {
    s_deviceConfig.m_glInvalidateTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateTexImage

void  glew::gl::glInvalidateTexImage (GLuint texture, GLint level)
{
  // GL_VERSION_4_3 - glInvalidateTexImage
  if (s_deviceConfig.m_glInvalidateTexImage)
  {
    s_deviceConfig.m_glInvalidateTexImage (texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateBufferSubData

void  glew::gl::glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_VERSION_4_3 - glInvalidateBufferSubData
  if (s_deviceConfig.m_glInvalidateBufferSubData)
  {
    s_deviceConfig.m_glInvalidateBufferSubData (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateBufferData

void  glew::gl::glInvalidateBufferData (GLuint buffer)
{
  // GL_VERSION_4_3 - glInvalidateBufferData
  if (s_deviceConfig.m_glInvalidateBufferData)
  {
    s_deviceConfig.m_glInvalidateBufferData (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateFramebuffer

void  glew::gl::glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_VERSION_4_3 - glInvalidateFramebuffer
  if (s_deviceConfig.m_glInvalidateFramebuffer)
  {
    s_deviceConfig.m_glInvalidateFramebuffer (target, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateSubFramebuffer

void  glew::gl::glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_3 - glInvalidateSubFramebuffer
  if (s_deviceConfig.m_glInvalidateSubFramebuffer)
  {
    s_deviceConfig.m_glInvalidateSubFramebuffer (target, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirect

void  glew::gl::glMultiDrawArraysIndirect (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_VERSION_4_3 - glMultiDrawArraysIndirect
  if (s_deviceConfig.m_glMultiDrawArraysIndirect)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirect (mode, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirect

void  glew::gl::glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
  // GL_VERSION_4_3 - glMultiDrawElementsIndirect
  if (s_deviceConfig.m_glMultiDrawElementsIndirect)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirect (mode, type, indirect, drawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramInterfaceiv

void  glew::gl::glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
  // GL_VERSION_4_3 - glGetProgramInterfaceiv
  if (s_deviceConfig.m_glGetProgramInterfaceiv)
  {
    s_deviceConfig.m_glGetProgramInterfaceiv (program, programInterface, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceIndex

GLuint glew::gl::glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_VERSION_4_3 - glGetProgramResourceIndex
  if (s_deviceConfig.m_glGetProgramResourceIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceIndex (program, programInterface, name);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceName

void  glew::gl::glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
  // GL_VERSION_4_3 - glGetProgramResourceName
  if (s_deviceConfig.m_glGetProgramResourceName)
  {
    s_deviceConfig.m_glGetProgramResourceName (program, programInterface, index, bufSize, length, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceiv

void  glew::gl::glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
  // GL_VERSION_4_3 - glGetProgramResourceiv
  if (s_deviceConfig.m_glGetProgramResourceiv)
  {
    s_deviceConfig.m_glGetProgramResourceiv (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceLocation

GLint glew::gl::glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_VERSION_4_3 - glGetProgramResourceLocation
  if (s_deviceConfig.m_glGetProgramResourceLocation)
  {
    return s_deviceConfig.m_glGetProgramResourceLocation (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourceLocationIndex

GLint glew::gl::glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar * name)
{
  // GL_VERSION_4_3 - glGetProgramResourceLocationIndex
  if (s_deviceConfig.m_glGetProgramResourceLocationIndex)
  {
    return s_deviceConfig.m_glGetProgramResourceLocationIndex (program, programInterface, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderStorageBlockBinding

void  glew::gl::glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  // GL_VERSION_4_3 - glShaderStorageBlockBinding
  if (s_deviceConfig.m_glShaderStorageBlockBinding)
  {
    s_deviceConfig.m_glShaderStorageBlockBinding (program, storageBlockIndex, storageBlockBinding);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferRange

void  glew::gl::glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_VERSION_4_3 - glTexBufferRange
  if (s_deviceConfig.m_glTexBufferRange)
  {
    s_deviceConfig.m_glTexBufferRange (target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage2DMultisample

void  glew::gl::glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_VERSION_4_3 - glTexStorage2DMultisample
  if (s_deviceConfig.m_glTexStorage2DMultisample)
  {
    s_deviceConfig.m_glTexStorage2DMultisample (target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorage3DMultisample

void  glew::gl::glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_VERSION_4_3 - glTexStorage3DMultisample
  if (s_deviceConfig.m_glTexStorage3DMultisample)
  {
    s_deviceConfig.m_glTexStorage3DMultisample (target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureView

void  glew::gl::glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  // GL_VERSION_4_3 - glTextureView
  if (s_deviceConfig.m_glTextureView)
  {
    s_deviceConfig.m_glTextureView (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexBuffer

void  glew::gl::glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_VERSION_4_3 - glBindVertexBuffer
  if (s_deviceConfig.m_glBindVertexBuffer)
  {
    s_deviceConfig.m_glBindVertexBuffer (bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribFormat

void  glew::gl::glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_VERSION_4_3 - glVertexAttribFormat
  if (s_deviceConfig.m_glVertexAttribFormat)
  {
    s_deviceConfig.m_glVertexAttribFormat (attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIFormat

void  glew::gl::glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_VERSION_4_3 - glVertexAttribIFormat
  if (s_deviceConfig.m_glVertexAttribIFormat)
  {
    s_deviceConfig.m_glVertexAttribIFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribLFormat

void  glew::gl::glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_VERSION_4_3 - glVertexAttribLFormat
  if (s_deviceConfig.m_glVertexAttribLFormat)
  {
    s_deviceConfig.m_glVertexAttribLFormat (attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribBinding

void  glew::gl::glVertexAttribBinding (GLuint attribindex, GLuint bindingindex)
{
  // GL_VERSION_4_3 - glVertexAttribBinding
  if (s_deviceConfig.m_glVertexAttribBinding)
  {
    s_deviceConfig.m_glVertexAttribBinding (attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexBindingDivisor

void  glew::gl::glVertexBindingDivisor (GLuint bindingindex, GLuint divisor)
{
  // GL_VERSION_4_3 - glVertexBindingDivisor
  if (s_deviceConfig.m_glVertexBindingDivisor)
  {
    s_deviceConfig.m_glVertexBindingDivisor (bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageControl

void  glew::gl::glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_VERSION_4_3 - glDebugMessageControl
  if (s_deviceConfig.m_glDebugMessageControl)
  {
    s_deviceConfig.m_glDebugMessageControl (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageInsert

void  glew::gl::glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_VERSION_4_3 - glDebugMessageInsert
  if (s_deviceConfig.m_glDebugMessageInsert)
  {
    s_deviceConfig.m_glDebugMessageInsert (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageCallback

void  glew::gl::glDebugMessageCallback (GLDEBUGPROC callback, const void * userParam)
{
  // GL_VERSION_4_3 - glDebugMessageCallback
  if (s_deviceConfig.m_glDebugMessageCallback)
  {
    s_deviceConfig.m_glDebugMessageCallback (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDebugMessageLog

GLuint glew::gl::glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_VERSION_4_3 - glGetDebugMessageLog
  if (s_deviceConfig.m_glGetDebugMessageLog)
  {
    return s_deviceConfig.m_glGetDebugMessageLog (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushDebugGroup

void  glew::gl::glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
  // GL_VERSION_4_3 - glPushDebugGroup
  if (s_deviceConfig.m_glPushDebugGroup)
  {
    s_deviceConfig.m_glPushDebugGroup (source, id, length, message);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPopDebugGroup

void  glew::gl::glPopDebugGroup ()
{
  // GL_VERSION_4_3 - glPopDebugGroup
  if (s_deviceConfig.m_glPopDebugGroup)
  {
    s_deviceConfig.m_glPopDebugGroup ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectLabel

void  glew::gl::glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
  // GL_VERSION_4_3 - glObjectLabel
  if (s_deviceConfig.m_glObjectLabel)
  {
    s_deviceConfig.m_glObjectLabel (identifier, name, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectLabel

void  glew::gl::glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_VERSION_4_3 - glGetObjectLabel
  if (s_deviceConfig.m_glGetObjectLabel)
  {
    s_deviceConfig.m_glGetObjectLabel (identifier, name, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectPtrLabel

void  glew::gl::glObjectPtrLabel (const void * ptr, GLsizei length, const GLchar * label)
{
  // GL_VERSION_4_3 - glObjectPtrLabel
  if (s_deviceConfig.m_glObjectPtrLabel)
  {
    s_deviceConfig.m_glObjectPtrLabel (ptr, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectPtrLabel

void  glew::gl::glGetObjectPtrLabel (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_VERSION_4_3 - glGetObjectPtrLabel
  if (s_deviceConfig.m_glGetObjectPtrLabel)
  {
    s_deviceConfig.m_glGetObjectPtrLabel (ptr, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferStorage

void  glew::gl::glBufferStorage (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_VERSION_4_4 - glBufferStorage
  if (s_deviceConfig.m_glBufferStorage)
  {
    s_deviceConfig.m_glBufferStorage (target, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearTexImage

void  glew::gl::glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_4 - glClearTexImage
  if (s_deviceConfig.m_glClearTexImage)
  {
    s_deviceConfig.m_glClearTexImage (texture, level, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearTexSubImage

void  glew::gl::glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_4 - glClearTexSubImage
  if (s_deviceConfig.m_glClearTexSubImage)
  {
    s_deviceConfig.m_glClearTexSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBuffersBase

void  glew::gl::glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
  // GL_VERSION_4_4 - glBindBuffersBase
  if (s_deviceConfig.m_glBindBuffersBase)
  {
    s_deviceConfig.m_glBindBuffersBase (target, first, count, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBuffersRange

void  glew::gl::glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
  // GL_VERSION_4_4 - glBindBuffersRange
  if (s_deviceConfig.m_glBindBuffersRange)
  {
    s_deviceConfig.m_glBindBuffersRange (target, first, count, buffers, offsets, sizes);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTextures

void  glew::gl::glBindTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_VERSION_4_4 - glBindTextures
  if (s_deviceConfig.m_glBindTextures)
  {
    s_deviceConfig.m_glBindTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindSamplers

void  glew::gl::glBindSamplers (GLuint first, GLsizei count, const GLuint * samplers)
{
  // GL_VERSION_4_4 - glBindSamplers
  if (s_deviceConfig.m_glBindSamplers)
  {
    s_deviceConfig.m_glBindSamplers (first, count, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindImageTextures

void  glew::gl::glBindImageTextures (GLuint first, GLsizei count, const GLuint * textures)
{
  // GL_VERSION_4_4 - glBindImageTextures
  if (s_deviceConfig.m_glBindImageTextures)
  {
    s_deviceConfig.m_glBindImageTextures (first, count, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexBuffers

void  glew::gl::glBindVertexBuffers (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_VERSION_4_4 - glBindVertexBuffers
  if (s_deviceConfig.m_glBindVertexBuffers)
  {
    s_deviceConfig.m_glBindVertexBuffers (first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClipControl

void  glew::gl::glClipControl (GLenum origin, GLenum depth)
{
  // GL_VERSION_4_5 - glClipControl
  if (s_deviceConfig.m_glClipControl)
  {
    s_deviceConfig.m_glClipControl (origin, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateTransformFeedbacks

void  glew::gl::glCreateTransformFeedbacks (GLsizei n, GLuint * ids)
{
  // GL_VERSION_4_5 - glCreateTransformFeedbacks
  if (s_deviceConfig.m_glCreateTransformFeedbacks)
  {
    s_deviceConfig.m_glCreateTransformFeedbacks (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackBufferBase

void  glew::gl::glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer)
{
  // GL_VERSION_4_5 - glTransformFeedbackBufferBase
  if (s_deviceConfig.m_glTransformFeedbackBufferBase)
  {
    s_deviceConfig.m_glTransformFeedbackBufferBase (xfb, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackBufferRange

void  glew::gl::glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_VERSION_4_5 - glTransformFeedbackBufferRange
  if (s_deviceConfig.m_glTransformFeedbackBufferRange)
  {
    s_deviceConfig.m_glTransformFeedbackBufferRange (xfb, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbackiv

void  glew::gl::glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint * param)
{
  // GL_VERSION_4_5 - glGetTransformFeedbackiv
  if (s_deviceConfig.m_glGetTransformFeedbackiv)
  {
    s_deviceConfig.m_glGetTransformFeedbackiv (xfb, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbacki_v

void  glew::gl::glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint * param)
{
  // GL_VERSION_4_5 - glGetTransformFeedbacki_v
  if (s_deviceConfig.m_glGetTransformFeedbacki_v)
  {
    s_deviceConfig.m_glGetTransformFeedbacki_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbacki64_v

void  glew::gl::glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 * param)
{
  // GL_VERSION_4_5 - glGetTransformFeedbacki64_v
  if (s_deviceConfig.m_glGetTransformFeedbacki64_v)
  {
    s_deviceConfig.m_glGetTransformFeedbacki64_v (xfb, pname, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateBuffers

void  glew::gl::glCreateBuffers (GLsizei n, GLuint * buffers)
{
  // GL_VERSION_4_5 - glCreateBuffers
  if (s_deviceConfig.m_glCreateBuffers)
  {
    s_deviceConfig.m_glCreateBuffers (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferStorage

void  glew::gl::glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_VERSION_4_5 - glNamedBufferStorage
  if (s_deviceConfig.m_glNamedBufferStorage)
  {
    s_deviceConfig.m_glNamedBufferStorage (buffer, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferData

void  glew::gl::glNamedBufferData (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_VERSION_4_5 - glNamedBufferData
  if (s_deviceConfig.m_glNamedBufferData)
  {
    s_deviceConfig.m_glNamedBufferData (buffer, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferSubData

void  glew::gl::glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_VERSION_4_5 - glNamedBufferSubData
  if (s_deviceConfig.m_glNamedBufferSubData)
  {
    s_deviceConfig.m_glNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyNamedBufferSubData

void  glew::gl::glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_VERSION_4_5 - glCopyNamedBufferSubData
  if (s_deviceConfig.m_glCopyNamedBufferSubData)
  {
    s_deviceConfig.m_glCopyNamedBufferSubData (readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedBufferData

void  glew::gl::glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_5 - glClearNamedBufferData
  if (s_deviceConfig.m_glClearNamedBufferData)
  {
    s_deviceConfig.m_glClearNamedBufferData (buffer, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedBufferSubData

void  glew::gl::glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_VERSION_4_5 - glClearNamedBufferSubData
  if (s_deviceConfig.m_glClearNamedBufferSubData)
  {
    s_deviceConfig.m_glClearNamedBufferSubData (buffer, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapNamedBuffer

void * glew::gl::glMapNamedBuffer (GLuint buffer, GLenum access)
{
  // GL_VERSION_4_5 - glMapNamedBuffer
  if (s_deviceConfig.m_glMapNamedBuffer)
  {
    return s_deviceConfig.m_glMapNamedBuffer (buffer, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapNamedBufferRange

void * glew::gl::glMapNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_VERSION_4_5 - glMapNamedBufferRange
  if (s_deviceConfig.m_glMapNamedBufferRange)
  {
    return s_deviceConfig.m_glMapNamedBufferRange (buffer, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapNamedBuffer

GLboolean glew::gl::glUnmapNamedBuffer (GLuint buffer)
{
  // GL_VERSION_4_5 - glUnmapNamedBuffer
  if (s_deviceConfig.m_glUnmapNamedBuffer)
  {
    return s_deviceConfig.m_glUnmapNamedBuffer (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedNamedBufferRange

void  glew::gl::glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_VERSION_4_5 - glFlushMappedNamedBufferRange
  if (s_deviceConfig.m_glFlushMappedNamedBufferRange)
  {
    s_deviceConfig.m_glFlushMappedNamedBufferRange (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferParameteriv

void  glew::gl::glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetNamedBufferParameteriv
  if (s_deviceConfig.m_glGetNamedBufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedBufferParameteriv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferParameteri64v

void  glew::gl::glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 * params)
{
  // GL_VERSION_4_5 - glGetNamedBufferParameteri64v
  if (s_deviceConfig.m_glGetNamedBufferParameteri64v)
  {
    s_deviceConfig.m_glGetNamedBufferParameteri64v (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferPointerv

void  glew::gl::glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void ** params)
{
  // GL_VERSION_4_5 - glGetNamedBufferPointerv
  if (s_deviceConfig.m_glGetNamedBufferPointerv)
  {
    s_deviceConfig.m_glGetNamedBufferPointerv (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferSubData

void  glew::gl::glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
  // GL_VERSION_4_5 - glGetNamedBufferSubData
  if (s_deviceConfig.m_glGetNamedBufferSubData)
  {
    s_deviceConfig.m_glGetNamedBufferSubData (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateFramebuffers

void  glew::gl::glCreateFramebuffers (GLsizei n, GLuint * framebuffers)
{
  // GL_VERSION_4_5 - glCreateFramebuffers
  if (s_deviceConfig.m_glCreateFramebuffers)
  {
    s_deviceConfig.m_glCreateFramebuffers (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferRenderbuffer

void  glew::gl::glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_VERSION_4_5 - glNamedFramebufferRenderbuffer
  if (s_deviceConfig.m_glNamedFramebufferRenderbuffer)
  {
    s_deviceConfig.m_glNamedFramebufferRenderbuffer (framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferParameteri

void  glew::gl::glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param)
{
  // GL_VERSION_4_5 - glNamedFramebufferParameteri
  if (s_deviceConfig.m_glNamedFramebufferParameteri)
  {
    s_deviceConfig.m_glNamedFramebufferParameteri (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTexture

void  glew::gl::glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  // GL_VERSION_4_5 - glNamedFramebufferTexture
  if (s_deviceConfig.m_glNamedFramebufferTexture)
  {
    s_deviceConfig.m_glNamedFramebufferTexture (framebuffer, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTextureLayer

void  glew::gl::glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_VERSION_4_5 - glNamedFramebufferTextureLayer
  if (s_deviceConfig.m_glNamedFramebufferTextureLayer)
  {
    s_deviceConfig.m_glNamedFramebufferTextureLayer (framebuffer, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferDrawBuffer

void  glew::gl::glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf)
{
  // GL_VERSION_4_5 - glNamedFramebufferDrawBuffer
  if (s_deviceConfig.m_glNamedFramebufferDrawBuffer)
  {
    s_deviceConfig.m_glNamedFramebufferDrawBuffer (framebuffer, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferDrawBuffers

void  glew::gl::glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
  // GL_VERSION_4_5 - glNamedFramebufferDrawBuffers
  if (s_deviceConfig.m_glNamedFramebufferDrawBuffers)
  {
    s_deviceConfig.m_glNamedFramebufferDrawBuffers (framebuffer, n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferReadBuffer

void  glew::gl::glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src)
{
  // GL_VERSION_4_5 - glNamedFramebufferReadBuffer
  if (s_deviceConfig.m_glNamedFramebufferReadBuffer)
  {
    s_deviceConfig.m_glNamedFramebufferReadBuffer (framebuffer, src);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateNamedFramebufferData

void  glew::gl::glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments)
{
  // GL_VERSION_4_5 - glInvalidateNamedFramebufferData
  if (s_deviceConfig.m_glInvalidateNamedFramebufferData)
  {
    s_deviceConfig.m_glInvalidateNamedFramebufferData (framebuffer, numAttachments, attachments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInvalidateNamedFramebufferSubData

void  glew::gl::glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glInvalidateNamedFramebufferSubData
  if (s_deviceConfig.m_glInvalidateNamedFramebufferSubData)
  {
    s_deviceConfig.m_glInvalidateNamedFramebufferSubData (framebuffer, numAttachments, attachments, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedFramebufferiv

void  glew::gl::glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value)
{
  // GL_VERSION_4_5 - glClearNamedFramebufferiv
  if (s_deviceConfig.m_glClearNamedFramebufferiv)
  {
    s_deviceConfig.m_glClearNamedFramebufferiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedFramebufferuiv

void  glew::gl::glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value)
{
  // GL_VERSION_4_5 - glClearNamedFramebufferuiv
  if (s_deviceConfig.m_glClearNamedFramebufferuiv)
  {
    s_deviceConfig.m_glClearNamedFramebufferuiv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedFramebufferfv

void  glew::gl::glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
  // GL_VERSION_4_5 - glClearNamedFramebufferfv
  if (s_deviceConfig.m_glClearNamedFramebufferfv)
  {
    s_deviceConfig.m_glClearNamedFramebufferfv (framebuffer, buffer, drawbuffer, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedFramebufferfi

void  glew::gl::glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil)
{
  // GL_VERSION_4_5 - glClearNamedFramebufferfi
  if (s_deviceConfig.m_glClearNamedFramebufferfi)
  {
    s_deviceConfig.m_glClearNamedFramebufferfi (framebuffer, buffer, depth, stencil);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitNamedFramebuffer

void  glew::gl::glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_VERSION_4_5 - glBlitNamedFramebuffer
  if (s_deviceConfig.m_glBlitNamedFramebuffer)
  {
    s_deviceConfig.m_glBlitNamedFramebuffer (readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCheckNamedFramebufferStatus

GLenum glew::gl::glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target)
{
  // GL_VERSION_4_5 - glCheckNamedFramebufferStatus
  if (s_deviceConfig.m_glCheckNamedFramebufferStatus)
  {
    return s_deviceConfig.m_glCheckNamedFramebufferStatus (framebuffer, target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedFramebufferParameteriv

void  glew::gl::glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint * param)
{
  // GL_VERSION_4_5 - glGetNamedFramebufferParameteriv
  if (s_deviceConfig.m_glGetNamedFramebufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedFramebufferParameteriv (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedFramebufferAttachmentParameteriv

void  glew::gl::glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetNamedFramebufferAttachmentParameteriv
  if (s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv)
  {
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv (framebuffer, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateRenderbuffers

void  glew::gl::glCreateRenderbuffers (GLsizei n, GLuint * renderbuffers)
{
  // GL_VERSION_4_5 - glCreateRenderbuffers
  if (s_deviceConfig.m_glCreateRenderbuffers)
  {
    s_deviceConfig.m_glCreateRenderbuffers (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedRenderbufferStorage

void  glew::gl::glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glNamedRenderbufferStorage
  if (s_deviceConfig.m_glNamedRenderbufferStorage)
  {
    s_deviceConfig.m_glNamedRenderbufferStorage (renderbuffer, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedRenderbufferStorageMultisample

void  glew::gl::glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glNamedRenderbufferStorageMultisample
  if (s_deviceConfig.m_glNamedRenderbufferStorageMultisample)
  {
    s_deviceConfig.m_glNamedRenderbufferStorageMultisample (renderbuffer, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedRenderbufferParameteriv

void  glew::gl::glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetNamedRenderbufferParameteriv
  if (s_deviceConfig.m_glGetNamedRenderbufferParameteriv)
  {
    s_deviceConfig.m_glGetNamedRenderbufferParameteriv (renderbuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateTextures

void  glew::gl::glCreateTextures (GLenum target, GLsizei n, GLuint * textures)
{
  // GL_VERSION_4_5 - glCreateTextures
  if (s_deviceConfig.m_glCreateTextures)
  {
    s_deviceConfig.m_glCreateTextures (target, n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBuffer

void  glew::gl::glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer)
{
  // GL_VERSION_4_5 - glTextureBuffer
  if (s_deviceConfig.m_glTextureBuffer)
  {
    s_deviceConfig.m_glTextureBuffer (texture, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBufferRange

void  glew::gl::glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_VERSION_4_5 - glTextureBufferRange
  if (s_deviceConfig.m_glTextureBufferRange)
  {
    s_deviceConfig.m_glTextureBufferRange (texture, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage1D

void  glew::gl::glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_VERSION_4_5 - glTextureStorage1D
  if (s_deviceConfig.m_glTextureStorage1D)
  {
    s_deviceConfig.m_glTextureStorage1D (texture, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage2D

void  glew::gl::glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glTextureStorage2D
  if (s_deviceConfig.m_glTextureStorage2D)
  {
    s_deviceConfig.m_glTextureStorage2D (texture, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage3D

void  glew::gl::glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_VERSION_4_5 - glTextureStorage3D
  if (s_deviceConfig.m_glTextureStorage3D)
  {
    s_deviceConfig.m_glTextureStorage3D (texture, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage2DMultisample

void  glew::gl::glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_VERSION_4_5 - glTextureStorage2DMultisample
  if (s_deviceConfig.m_glTextureStorage2DMultisample)
  {
    s_deviceConfig.m_glTextureStorage2DMultisample (texture, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage3DMultisample

void  glew::gl::glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_VERSION_4_5 - glTextureStorage3DMultisample
  if (s_deviceConfig.m_glTextureStorage3DMultisample)
  {
    s_deviceConfig.m_glTextureStorage3DMultisample (texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage1D

void  glew::gl::glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_4_5 - glTextureSubImage1D
  if (s_deviceConfig.m_glTextureSubImage1D)
  {
    s_deviceConfig.m_glTextureSubImage1D (texture, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage2D

void  glew::gl::glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_4_5 - glTextureSubImage2D
  if (s_deviceConfig.m_glTextureSubImage2D)
  {
    s_deviceConfig.m_glTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage3D

void  glew::gl::glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_VERSION_4_5 - glTextureSubImage3D
  if (s_deviceConfig.m_glTextureSubImage3D)
  {
    s_deviceConfig.m_glTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage1D

void  glew::gl::glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_4_5 - glCompressedTextureSubImage1D
  if (s_deviceConfig.m_glCompressedTextureSubImage1D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage1D (texture, level, xoffset, width, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage2D

void  glew::gl::glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_4_5 - glCompressedTextureSubImage2D
  if (s_deviceConfig.m_glCompressedTextureSubImage2D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage2D (texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage3D

void  glew::gl::glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_VERSION_4_5 - glCompressedTextureSubImage3D
  if (s_deviceConfig.m_glCompressedTextureSubImage3D)
  {
    s_deviceConfig.m_glCompressedTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage1D

void  glew::gl::glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_VERSION_4_5 - glCopyTextureSubImage1D
  if (s_deviceConfig.m_glCopyTextureSubImage1D)
  {
    s_deviceConfig.m_glCopyTextureSubImage1D (texture, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage2D

void  glew::gl::glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glCopyTextureSubImage2D
  if (s_deviceConfig.m_glCopyTextureSubImage2D)
  {
    s_deviceConfig.m_glCopyTextureSubImage2D (texture, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage3D

void  glew::gl::glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_VERSION_4_5 - glCopyTextureSubImage3D
  if (s_deviceConfig.m_glCopyTextureSubImage3D)
  {
    s_deviceConfig.m_glCopyTextureSubImage3D (texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterf

void  glew::gl::glTextureParameterf (GLuint texture, GLenum pname, GLfloat param)
{
  // GL_VERSION_4_5 - glTextureParameterf
  if (s_deviceConfig.m_glTextureParameterf)
  {
    s_deviceConfig.m_glTextureParameterf (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterfv

void  glew::gl::glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat * param)
{
  // GL_VERSION_4_5 - glTextureParameterfv
  if (s_deviceConfig.m_glTextureParameterfv)
  {
    s_deviceConfig.m_glTextureParameterfv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameteri

void  glew::gl::glTextureParameteri (GLuint texture, GLenum pname, GLint param)
{
  // GL_VERSION_4_5 - glTextureParameteri
  if (s_deviceConfig.m_glTextureParameteri)
  {
    s_deviceConfig.m_glTextureParameteri (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterIiv

void  glew::gl::glTextureParameterIiv (GLuint texture, GLenum pname, const GLint * params)
{
  // GL_VERSION_4_5 - glTextureParameterIiv
  if (s_deviceConfig.m_glTextureParameterIiv)
  {
    s_deviceConfig.m_glTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterIuiv

void  glew::gl::glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint * params)
{
  // GL_VERSION_4_5 - glTextureParameterIuiv
  if (s_deviceConfig.m_glTextureParameterIuiv)
  {
    s_deviceConfig.m_glTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameteriv

void  glew::gl::glTextureParameteriv (GLuint texture, GLenum pname, const GLint * param)
{
  // GL_VERSION_4_5 - glTextureParameteriv
  if (s_deviceConfig.m_glTextureParameteriv)
  {
    s_deviceConfig.m_glTextureParameteriv (texture, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenerateTextureMipmap

void  glew::gl::glGenerateTextureMipmap (GLuint texture)
{
  // GL_VERSION_4_5 - glGenerateTextureMipmap
  if (s_deviceConfig.m_glGenerateTextureMipmap)
  {
    s_deviceConfig.m_glGenerateTextureMipmap (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTextureUnit

void  glew::gl::glBindTextureUnit (GLuint unit, GLuint texture)
{
  // GL_VERSION_4_5 - glBindTextureUnit
  if (s_deviceConfig.m_glBindTextureUnit)
  {
    s_deviceConfig.m_glBindTextureUnit (unit, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureImage

void  glew::gl::glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetTextureImage
  if (s_deviceConfig.m_glGetTextureImage)
  {
    s_deviceConfig.m_glGetTextureImage (texture, level, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedTextureImage

void  glew::gl::glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetCompressedTextureImage
  if (s_deviceConfig.m_glGetCompressedTextureImage)
  {
    s_deviceConfig.m_glGetCompressedTextureImage (texture, level, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureLevelParameterfv

void  glew::gl::glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat * params)
{
  // GL_VERSION_4_5 - glGetTextureLevelParameterfv
  if (s_deviceConfig.m_glGetTextureLevelParameterfv)
  {
    s_deviceConfig.m_glGetTextureLevelParameterfv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureLevelParameteriv

void  glew::gl::glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetTextureLevelParameteriv
  if (s_deviceConfig.m_glGetTextureLevelParameteriv)
  {
    s_deviceConfig.m_glGetTextureLevelParameteriv (texture, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterfv

void  glew::gl::glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat * params)
{
  // GL_VERSION_4_5 - glGetTextureParameterfv
  if (s_deviceConfig.m_glGetTextureParameterfv)
  {
    s_deviceConfig.m_glGetTextureParameterfv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterIiv

void  glew::gl::glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetTextureParameterIiv
  if (s_deviceConfig.m_glGetTextureParameterIiv)
  {
    s_deviceConfig.m_glGetTextureParameterIiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterIuiv

void  glew::gl::glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint * params)
{
  // GL_VERSION_4_5 - glGetTextureParameterIuiv
  if (s_deviceConfig.m_glGetTextureParameterIuiv)
  {
    s_deviceConfig.m_glGetTextureParameterIuiv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameteriv

void  glew::gl::glGetTextureParameteriv (GLuint texture, GLenum pname, GLint * params)
{
  // GL_VERSION_4_5 - glGetTextureParameteriv
  if (s_deviceConfig.m_glGetTextureParameteriv)
  {
    s_deviceConfig.m_glGetTextureParameteriv (texture, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateVertexArrays

void  glew::gl::glCreateVertexArrays (GLsizei n, GLuint * arrays)
{
  // GL_VERSION_4_5 - glCreateVertexArrays
  if (s_deviceConfig.m_glCreateVertexArrays)
  {
    s_deviceConfig.m_glCreateVertexArrays (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexArrayAttrib

void  glew::gl::glDisableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_VERSION_4_5 - glDisableVertexArrayAttrib
  if (s_deviceConfig.m_glDisableVertexArrayAttrib)
  {
    s_deviceConfig.m_glDisableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexArrayAttrib

void  glew::gl::glEnableVertexArrayAttrib (GLuint vaobj, GLuint index)
{
  // GL_VERSION_4_5 - glEnableVertexArrayAttrib
  if (s_deviceConfig.m_glEnableVertexArrayAttrib)
  {
    s_deviceConfig.m_glEnableVertexArrayAttrib (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayElementBuffer

void  glew::gl::glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer)
{
  // GL_VERSION_4_5 - glVertexArrayElementBuffer
  if (s_deviceConfig.m_glVertexArrayElementBuffer)
  {
    s_deviceConfig.m_glVertexArrayElementBuffer (vaobj, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexBuffer

void  glew::gl::glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_VERSION_4_5 - glVertexArrayVertexBuffer
  if (s_deviceConfig.m_glVertexArrayVertexBuffer)
  {
    s_deviceConfig.m_glVertexArrayVertexBuffer (vaobj, bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexBuffers

void  glew::gl::glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
  // GL_VERSION_4_5 - glVertexArrayVertexBuffers
  if (s_deviceConfig.m_glVertexArrayVertexBuffers)
  {
    s_deviceConfig.m_glVertexArrayVertexBuffers (vaobj, first, count, buffers, offsets, strides);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayAttribBinding

void  glew::gl::glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  // GL_VERSION_4_5 - glVertexArrayAttribBinding
  if (s_deviceConfig.m_glVertexArrayAttribBinding)
  {
    s_deviceConfig.m_glVertexArrayAttribBinding (vaobj, attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayAttribFormat

void  glew::gl::glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_VERSION_4_5 - glVertexArrayAttribFormat
  if (s_deviceConfig.m_glVertexArrayAttribFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribFormat (vaobj, attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayAttribIFormat

void  glew::gl::glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_VERSION_4_5 - glVertexArrayAttribIFormat
  if (s_deviceConfig.m_glVertexArrayAttribIFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribIFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayAttribLFormat

void  glew::gl::glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_VERSION_4_5 - glVertexArrayAttribLFormat
  if (s_deviceConfig.m_glVertexArrayAttribLFormat)
  {
    s_deviceConfig.m_glVertexArrayAttribLFormat (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayBindingDivisor

void  glew::gl::glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  // GL_VERSION_4_5 - glVertexArrayBindingDivisor
  if (s_deviceConfig.m_glVertexArrayBindingDivisor)
  {
    s_deviceConfig.m_glVertexArrayBindingDivisor (vaobj, bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayiv

void  glew::gl::glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint * param)
{
  // GL_VERSION_4_5 - glGetVertexArrayiv
  if (s_deviceConfig.m_glGetVertexArrayiv)
  {
    s_deviceConfig.m_glGetVertexArrayiv (vaobj, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayIndexediv

void  glew::gl::glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
  // GL_VERSION_4_5 - glGetVertexArrayIndexediv
  if (s_deviceConfig.m_glGetVertexArrayIndexediv)
  {
    s_deviceConfig.m_glGetVertexArrayIndexediv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayIndexed64iv

void  glew::gl::glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param)
{
  // GL_VERSION_4_5 - glGetVertexArrayIndexed64iv
  if (s_deviceConfig.m_glGetVertexArrayIndexed64iv)
  {
    s_deviceConfig.m_glGetVertexArrayIndexed64iv (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateSamplers

void  glew::gl::glCreateSamplers (GLsizei n, GLuint * samplers)
{
  // GL_VERSION_4_5 - glCreateSamplers
  if (s_deviceConfig.m_glCreateSamplers)
  {
    s_deviceConfig.m_glCreateSamplers (n, samplers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateProgramPipelines

void  glew::gl::glCreateProgramPipelines (GLsizei n, GLuint * pipelines)
{
  // GL_VERSION_4_5 - glCreateProgramPipelines
  if (s_deviceConfig.m_glCreateProgramPipelines)
  {
    s_deviceConfig.m_glCreateProgramPipelines (n, pipelines);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateQueries

void  glew::gl::glCreateQueries (GLenum target, GLsizei n, GLuint * ids)
{
  // GL_VERSION_4_5 - glCreateQueries
  if (s_deviceConfig.m_glCreateQueries)
  {
    s_deviceConfig.m_glCreateQueries (target, n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryBufferObjecti64v

void  glew::gl::glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_VERSION_4_5 - glGetQueryBufferObjecti64v
  if (s_deviceConfig.m_glGetQueryBufferObjecti64v)
  {
    s_deviceConfig.m_glGetQueryBufferObjecti64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryBufferObjectiv

void  glew::gl::glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_VERSION_4_5 - glGetQueryBufferObjectiv
  if (s_deviceConfig.m_glGetQueryBufferObjectiv)
  {
    s_deviceConfig.m_glGetQueryBufferObjectiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryBufferObjectui64v

void  glew::gl::glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_VERSION_4_5 - glGetQueryBufferObjectui64v
  if (s_deviceConfig.m_glGetQueryBufferObjectui64v)
  {
    s_deviceConfig.m_glGetQueryBufferObjectui64v (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryBufferObjectuiv

void  glew::gl::glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
  // GL_VERSION_4_5 - glGetQueryBufferObjectuiv
  if (s_deviceConfig.m_glGetQueryBufferObjectuiv)
  {
    s_deviceConfig.m_glGetQueryBufferObjectuiv (id, buffer, pname, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMemoryBarrierByRegion

void  glew::gl::glMemoryBarrierByRegion (GLbitfield barriers)
{
  // GL_VERSION_4_5 - glMemoryBarrierByRegion
  if (s_deviceConfig.m_glMemoryBarrierByRegion)
  {
    s_deviceConfig.m_glMemoryBarrierByRegion (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureSubImage

void  glew::gl::glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetTextureSubImage
  if (s_deviceConfig.m_glGetTextureSubImage)
  {
    s_deviceConfig.m_glGetTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedTextureSubImage

void  glew::gl::glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetCompressedTextureSubImage
  if (s_deviceConfig.m_glGetCompressedTextureSubImage)
  {
    s_deviceConfig.m_glGetCompressedTextureSubImage (texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetGraphicsResetStatus

GLenum glew::gl::glGetGraphicsResetStatus ()
{
  // GL_VERSION_4_5 - glGetGraphicsResetStatus
  if (s_deviceConfig.m_glGetGraphicsResetStatus)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatus ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnCompressedTexImage

void  glew::gl::glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetnCompressedTexImage
  if (s_deviceConfig.m_glGetnCompressedTexImage)
  {
    s_deviceConfig.m_glGetnCompressedTexImage (target, lod, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnTexImage

void  glew::gl::glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
  // GL_VERSION_4_5 - glGetnTexImage
  if (s_deviceConfig.m_glGetnTexImage)
  {
    s_deviceConfig.m_glGetnTexImage (target, level, format, type, bufSize, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformdv

void  glew::gl::glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
  // GL_VERSION_4_5 - glGetnUniformdv
  if (s_deviceConfig.m_glGetnUniformdv)
  {
    s_deviceConfig.m_glGetnUniformdv (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformfv

void  glew::gl::glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_VERSION_4_5 - glGetnUniformfv
  if (s_deviceConfig.m_glGetnUniformfv)
  {
    s_deviceConfig.m_glGetnUniformfv (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformiv

void  glew::gl::glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_VERSION_4_5 - glGetnUniformiv
  if (s_deviceConfig.m_glGetnUniformiv)
  {
    s_deviceConfig.m_glGetnUniformiv (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformuiv

void  glew::gl::glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_VERSION_4_5 - glGetnUniformuiv
  if (s_deviceConfig.m_glGetnUniformuiv)
  {
    s_deviceConfig.m_glGetnUniformuiv (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadnPixels

void  glew::gl::glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_VERSION_4_5 - glReadnPixels
  if (s_deviceConfig.m_glReadnPixels)
  {
    s_deviceConfig.m_glReadnPixels (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapdv

void  glew::gl::glGetnMapdv (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v)
{
  // GL_VERSION_4_5 - glGetnMapdv
  if (s_deviceConfig.m_glGetnMapdv)
  {
    s_deviceConfig.m_glGetnMapdv (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapfv

void  glew::gl::glGetnMapfv (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v)
{
  // GL_VERSION_4_5 - glGetnMapfv
  if (s_deviceConfig.m_glGetnMapfv)
  {
    s_deviceConfig.m_glGetnMapfv (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapiv

void  glew::gl::glGetnMapiv (GLenum target, GLenum query, GLsizei bufSize, GLint * v)
{
  // GL_VERSION_4_5 - glGetnMapiv
  if (s_deviceConfig.m_glGetnMapiv)
  {
    s_deviceConfig.m_glGetnMapiv (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapfv

void  glew::gl::glGetnPixelMapfv (GLenum map, GLsizei bufSize, GLfloat * values)
{
  // GL_VERSION_4_5 - glGetnPixelMapfv
  if (s_deviceConfig.m_glGetnPixelMapfv)
  {
    s_deviceConfig.m_glGetnPixelMapfv (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapuiv

void  glew::gl::glGetnPixelMapuiv (GLenum map, GLsizei bufSize, GLuint * values)
{
  // GL_VERSION_4_5 - glGetnPixelMapuiv
  if (s_deviceConfig.m_glGetnPixelMapuiv)
  {
    s_deviceConfig.m_glGetnPixelMapuiv (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapusv

void  glew::gl::glGetnPixelMapusv (GLenum map, GLsizei bufSize, GLushort * values)
{
  // GL_VERSION_4_5 - glGetnPixelMapusv
  if (s_deviceConfig.m_glGetnPixelMapusv)
  {
    s_deviceConfig.m_glGetnPixelMapusv (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPolygonStipple

void  glew::gl::glGetnPolygonStipple (GLsizei bufSize, GLubyte * pattern)
{
  // GL_VERSION_4_5 - glGetnPolygonStipple
  if (s_deviceConfig.m_glGetnPolygonStipple)
  {
    s_deviceConfig.m_glGetnPolygonStipple (bufSize, pattern);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnColorTable

void  glew::gl::glGetnColorTable (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table)
{
  // GL_VERSION_4_5 - glGetnColorTable
  if (s_deviceConfig.m_glGetnColorTable)
  {
    s_deviceConfig.m_glGetnColorTable (target, format, type, bufSize, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnConvolutionFilter

void  glew::gl::glGetnConvolutionFilter (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image)
{
  // GL_VERSION_4_5 - glGetnConvolutionFilter
  if (s_deviceConfig.m_glGetnConvolutionFilter)
  {
    s_deviceConfig.m_glGetnConvolutionFilter (target, format, type, bufSize, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnSeparableFilter

void  glew::gl::glGetnSeparableFilter (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span)
{
  // GL_VERSION_4_5 - glGetnSeparableFilter
  if (s_deviceConfig.m_glGetnSeparableFilter)
  {
    s_deviceConfig.m_glGetnSeparableFilter (target, format, type, rowBufSize, row, columnBufSize, column, span);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnHistogram

void  glew::gl::glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
  // GL_VERSION_4_5 - glGetnHistogram
  if (s_deviceConfig.m_glGetnHistogram)
  {
    s_deviceConfig.m_glGetnHistogram (target, reset, format, type, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMinmax

void  glew::gl::glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
  // GL_VERSION_4_5 - glGetnMinmax
  if (s_deviceConfig.m_glGetnMinmax)
  {
    s_deviceConfig.m_glGetnMinmax (target, reset, format, type, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBarrier

void  glew::gl::glTextureBarrier ()
{
  // GL_VERSION_4_5 - glTextureBarrier
  if (s_deviceConfig.m_glTextureBarrier)
  {
    s_deviceConfig.m_glTextureBarrier ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTbufferMask3DFX

void  glew::gl::glTbufferMask3DFX (GLuint mask)
{
  // GL_3DFX_tbuffer - glTbufferMask3DFX
  if (s_deviceConfig.m_glTbufferMask3DFX)
  {
    s_deviceConfig.m_glTbufferMask3DFX (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageEnableAMD

void  glew::gl::glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_AMD_debug_output - glDebugMessageEnableAMD
  if (s_deviceConfig.m_glDebugMessageEnableAMD)
  {
    s_deviceConfig.m_glDebugMessageEnableAMD (category, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageInsertAMD

void  glew::gl::glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf)
{
  // GL_AMD_debug_output - glDebugMessageInsertAMD
  if (s_deviceConfig.m_glDebugMessageInsertAMD)
  {
    s_deviceConfig.m_glDebugMessageInsertAMD (category, severity, id, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageCallbackAMD

void  glew::gl::glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, void * userParam)
{
  // GL_AMD_debug_output - glDebugMessageCallbackAMD
  if (s_deviceConfig.m_glDebugMessageCallbackAMD)
  {
    s_deviceConfig.m_glDebugMessageCallbackAMD (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDebugMessageLogAMD

GLuint glew::gl::glGetDebugMessageLogAMD (GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message)
{
  // GL_AMD_debug_output - glGetDebugMessageLogAMD
  if (s_deviceConfig.m_glGetDebugMessageLogAMD)
  {
    return s_deviceConfig.m_glGetDebugMessageLogAMD (count, bufsize, categories, severities, ids, lengths, message);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncIndexedAMD

void  glew::gl::glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst)
{
  // GL_AMD_draw_buffers_blend - glBlendFuncIndexedAMD
  if (s_deviceConfig.m_glBlendFuncIndexedAMD)
  {
    s_deviceConfig.m_glBlendFuncIndexedAMD (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateIndexedAMD

void  glew::gl::glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_AMD_draw_buffers_blend - glBlendFuncSeparateIndexedAMD
  if (s_deviceConfig.m_glBlendFuncSeparateIndexedAMD)
  {
    s_deviceConfig.m_glBlendFuncSeparateIndexedAMD (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationIndexedAMD

void  glew::gl::glBlendEquationIndexedAMD (GLuint buf, GLenum mode)
{
  // GL_AMD_draw_buffers_blend - glBlendEquationIndexedAMD
  if (s_deviceConfig.m_glBlendEquationIndexedAMD)
  {
    s_deviceConfig.m_glBlendEquationIndexedAMD (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparateIndexedAMD

void  glew::gl::glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_AMD_draw_buffers_blend - glBlendEquationSeparateIndexedAMD
  if (s_deviceConfig.m_glBlendEquationSeparateIndexedAMD)
  {
    s_deviceConfig.m_glBlendEquationSeparateIndexedAMD (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1i64NV

void  glew::gl::glUniform1i64NV (GLint location, GLint64EXT x)
{
  // GL_AMD_gpu_shader_int64 - glUniform1i64NV
  if (s_deviceConfig.m_glUniform1i64NV)
  {
    s_deviceConfig.m_glUniform1i64NV (location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2i64NV

void  glew::gl::glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y)
{
  // GL_AMD_gpu_shader_int64 - glUniform2i64NV
  if (s_deviceConfig.m_glUniform2i64NV)
  {
    s_deviceConfig.m_glUniform2i64NV (location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3i64NV

void  glew::gl::glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  // GL_AMD_gpu_shader_int64 - glUniform3i64NV
  if (s_deviceConfig.m_glUniform3i64NV)
  {
    s_deviceConfig.m_glUniform3i64NV (location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4i64NV

void  glew::gl::glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  // GL_AMD_gpu_shader_int64 - glUniform4i64NV
  if (s_deviceConfig.m_glUniform4i64NV)
  {
    s_deviceConfig.m_glUniform4i64NV (location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1i64vNV

void  glew::gl::glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform1i64vNV
  if (s_deviceConfig.m_glUniform1i64vNV)
  {
    s_deviceConfig.m_glUniform1i64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2i64vNV

void  glew::gl::glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform2i64vNV
  if (s_deviceConfig.m_glUniform2i64vNV)
  {
    s_deviceConfig.m_glUniform2i64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3i64vNV

void  glew::gl::glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform3i64vNV
  if (s_deviceConfig.m_glUniform3i64vNV)
  {
    s_deviceConfig.m_glUniform3i64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4i64vNV

void  glew::gl::glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform4i64vNV
  if (s_deviceConfig.m_glUniform4i64vNV)
  {
    s_deviceConfig.m_glUniform4i64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1ui64NV

void  glew::gl::glUniform1ui64NV (GLint location, GLuint64EXT x)
{
  // GL_AMD_gpu_shader_int64 - glUniform1ui64NV
  if (s_deviceConfig.m_glUniform1ui64NV)
  {
    s_deviceConfig.m_glUniform1ui64NV (location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2ui64NV

void  glew::gl::glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y)
{
  // GL_AMD_gpu_shader_int64 - glUniform2ui64NV
  if (s_deviceConfig.m_glUniform2ui64NV)
  {
    s_deviceConfig.m_glUniform2ui64NV (location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3ui64NV

void  glew::gl::glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  // GL_AMD_gpu_shader_int64 - glUniform3ui64NV
  if (s_deviceConfig.m_glUniform3ui64NV)
  {
    s_deviceConfig.m_glUniform3ui64NV (location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4ui64NV

void  glew::gl::glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  // GL_AMD_gpu_shader_int64 - glUniform4ui64NV
  if (s_deviceConfig.m_glUniform4ui64NV)
  {
    s_deviceConfig.m_glUniform4ui64NV (location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1ui64vNV

void  glew::gl::glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform1ui64vNV
  if (s_deviceConfig.m_glUniform1ui64vNV)
  {
    s_deviceConfig.m_glUniform1ui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2ui64vNV

void  glew::gl::glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform2ui64vNV
  if (s_deviceConfig.m_glUniform2ui64vNV)
  {
    s_deviceConfig.m_glUniform2ui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3ui64vNV

void  glew::gl::glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform3ui64vNV
  if (s_deviceConfig.m_glUniform3ui64vNV)
  {
    s_deviceConfig.m_glUniform3ui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4ui64vNV

void  glew::gl::glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glUniform4ui64vNV
  if (s_deviceConfig.m_glUniform4ui64vNV)
  {
    s_deviceConfig.m_glUniform4ui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformi64vNV

void  glew::gl::glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT * params)
{
  // GL_AMD_gpu_shader_int64 - glGetUniformi64vNV
  if (s_deviceConfig.m_glGetUniformi64vNV)
  {
    s_deviceConfig.m_glGetUniformi64vNV (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformui64vNV

void  glew::gl::glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT * params)
{
  // GL_AMD_gpu_shader_int64 - glGetUniformui64vNV
  if (s_deviceConfig.m_glGetUniformui64vNV)
  {
    s_deviceConfig.m_glGetUniformui64vNV (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1i64NV

void  glew::gl::glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform1i64NV
  if (s_deviceConfig.m_glProgramUniform1i64NV)
  {
    s_deviceConfig.m_glProgramUniform1i64NV (program, location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2i64NV

void  glew::gl::glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform2i64NV
  if (s_deviceConfig.m_glProgramUniform2i64NV)
  {
    s_deviceConfig.m_glProgramUniform2i64NV (program, location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3i64NV

void  glew::gl::glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform3i64NV
  if (s_deviceConfig.m_glProgramUniform3i64NV)
  {
    s_deviceConfig.m_glProgramUniform3i64NV (program, location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4i64NV

void  glew::gl::glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform4i64NV
  if (s_deviceConfig.m_glProgramUniform4i64NV)
  {
    s_deviceConfig.m_glProgramUniform4i64NV (program, location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1i64vNV

void  glew::gl::glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform1i64vNV
  if (s_deviceConfig.m_glProgramUniform1i64vNV)
  {
    s_deviceConfig.m_glProgramUniform1i64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2i64vNV

void  glew::gl::glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform2i64vNV
  if (s_deviceConfig.m_glProgramUniform2i64vNV)
  {
    s_deviceConfig.m_glProgramUniform2i64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3i64vNV

void  glew::gl::glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform3i64vNV
  if (s_deviceConfig.m_glProgramUniform3i64vNV)
  {
    s_deviceConfig.m_glProgramUniform3i64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4i64vNV

void  glew::gl::glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform4i64vNV
  if (s_deviceConfig.m_glProgramUniform4i64vNV)
  {
    s_deviceConfig.m_glProgramUniform4i64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ui64NV

void  glew::gl::glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform1ui64NV
  if (s_deviceConfig.m_glProgramUniform1ui64NV)
  {
    s_deviceConfig.m_glProgramUniform1ui64NV (program, location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ui64NV

void  glew::gl::glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform2ui64NV
  if (s_deviceConfig.m_glProgramUniform2ui64NV)
  {
    s_deviceConfig.m_glProgramUniform2ui64NV (program, location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ui64NV

void  glew::gl::glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform3ui64NV
  if (s_deviceConfig.m_glProgramUniform3ui64NV)
  {
    s_deviceConfig.m_glProgramUniform3ui64NV (program, location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ui64NV

void  glew::gl::glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform4ui64NV
  if (s_deviceConfig.m_glProgramUniform4ui64NV)
  {
    s_deviceConfig.m_glProgramUniform4ui64NV (program, location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ui64vNV

void  glew::gl::glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform1ui64vNV
  if (s_deviceConfig.m_glProgramUniform1ui64vNV)
  {
    s_deviceConfig.m_glProgramUniform1ui64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ui64vNV

void  glew::gl::glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform2ui64vNV
  if (s_deviceConfig.m_glProgramUniform2ui64vNV)
  {
    s_deviceConfig.m_glProgramUniform2ui64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ui64vNV

void  glew::gl::glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform3ui64vNV
  if (s_deviceConfig.m_glProgramUniform3ui64vNV)
  {
    s_deviceConfig.m_glProgramUniform3ui64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ui64vNV

void  glew::gl::glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_AMD_gpu_shader_int64 - glProgramUniform4ui64vNV
  if (s_deviceConfig.m_glProgramUniform4ui64vNV)
  {
    s_deviceConfig.m_glProgramUniform4ui64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribParameteriAMD

void  glew::gl::glVertexAttribParameteriAMD (GLuint index, GLenum pname, GLint param)
{
  // GL_AMD_interleaved_elements - glVertexAttribParameteriAMD
  if (s_deviceConfig.m_glVertexAttribParameteriAMD)
  {
    s_deviceConfig.m_glVertexAttribParameteriAMD (index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirectAMD

void  glew::gl::glMultiDrawArraysIndirectAMD (GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride)
{
  // GL_AMD_multi_draw_indirect - glMultiDrawArraysIndirectAMD
  if (s_deviceConfig.m_glMultiDrawArraysIndirectAMD)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectAMD (mode, indirect, primcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirectAMD

void  glew::gl::glMultiDrawElementsIndirectAMD (GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride)
{
  // GL_AMD_multi_draw_indirect - glMultiDrawElementsIndirectAMD
  if (s_deviceConfig.m_glMultiDrawElementsIndirectAMD)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectAMD (mode, type, indirect, primcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenNamesAMD

void  glew::gl::glGenNamesAMD (GLenum identifier, GLuint num, GLuint * names)
{
  // GL_AMD_name_gen_delete - glGenNamesAMD
  if (s_deviceConfig.m_glGenNamesAMD)
  {
    s_deviceConfig.m_glGenNamesAMD (identifier, num, names);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteNamesAMD

void  glew::gl::glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint * names)
{
  // GL_AMD_name_gen_delete - glDeleteNamesAMD
  if (s_deviceConfig.m_glDeleteNamesAMD)
  {
    s_deviceConfig.m_glDeleteNamesAMD (identifier, num, names);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsNameAMD

GLboolean glew::gl::glIsNameAMD (GLenum identifier, GLuint name)
{
  // GL_AMD_name_gen_delete - glIsNameAMD
  if (s_deviceConfig.m_glIsNameAMD)
  {
    return s_deviceConfig.m_glIsNameAMD (identifier, name);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glQueryObjectParameteruiAMD

void  glew::gl::glQueryObjectParameteruiAMD (GLenum target, GLuint id, GLenum pname, GLuint param)
{
  // GL_AMD_occlusion_query_event - glQueryObjectParameteruiAMD
  if (s_deviceConfig.m_glQueryObjectParameteruiAMD)
  {
    s_deviceConfig.m_glQueryObjectParameteruiAMD (target, id, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorGroupsAMD

void  glew::gl::glGetPerfMonitorGroupsAMD (GLint * numGroups, GLsizei groupsSize, GLuint * groups)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupsAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupsAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD (numGroups, groupsSize, groups);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCountersAMD

void  glew::gl::glGetPerfMonitorCountersAMD (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCountersAMD
  if (s_deviceConfig.m_glGetPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCountersAMD (group, numCounters, maxActiveCounters, counterSize, counters);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorGroupStringAMD

void  glew::gl::glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorGroupStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorGroupStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD (group, bufSize, length, groupString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterStringAMD

void  glew::gl::glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterStringAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterStringAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD (group, counter, bufSize, length, counterString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterInfoAMD

void  glew::gl::glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void * data)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterInfoAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD (group, counter, pname, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenPerfMonitorsAMD

void  glew::gl::glGenPerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glGenPerfMonitorsAMD
  if (s_deviceConfig.m_glGenPerfMonitorsAMD)
  {
    s_deviceConfig.m_glGenPerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePerfMonitorsAMD

void  glew::gl::glDeletePerfMonitorsAMD (GLsizei n, GLuint * monitors)
{
  // GL_AMD_performance_monitor - glDeletePerfMonitorsAMD
  if (s_deviceConfig.m_glDeletePerfMonitorsAMD)
  {
    s_deviceConfig.m_glDeletePerfMonitorsAMD (n, monitors);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSelectPerfMonitorCountersAMD

void  glew::gl::glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList)
{
  // GL_AMD_performance_monitor - glSelectPerfMonitorCountersAMD
  if (s_deviceConfig.m_glSelectPerfMonitorCountersAMD)
  {
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD (monitor, enable, group, numCounters, counterList);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginPerfMonitorAMD

void  glew::gl::glBeginPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glBeginPerfMonitorAMD
  if (s_deviceConfig.m_glBeginPerfMonitorAMD)
  {
    s_deviceConfig.m_glBeginPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndPerfMonitorAMD

void  glew::gl::glEndPerfMonitorAMD (GLuint monitor)
{
  // GL_AMD_performance_monitor - glEndPerfMonitorAMD
  if (s_deviceConfig.m_glEndPerfMonitorAMD)
  {
    s_deviceConfig.m_glEndPerfMonitorAMD (monitor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfMonitorCounterDataAMD

void  glew::gl::glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten)
{
  // GL_AMD_performance_monitor - glGetPerfMonitorCounterDataAMD
  if (s_deviceConfig.m_glGetPerfMonitorCounterDataAMD)
  {
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD (monitor, pname, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetMultisamplefvAMD

void  glew::gl::glSetMultisamplefvAMD (GLenum pname, GLuint index, const GLfloat * val)
{
  // GL_AMD_sample_positions - glSetMultisamplefvAMD
  if (s_deviceConfig.m_glSetMultisamplefvAMD)
  {
    s_deviceConfig.m_glSetMultisamplefvAMD (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexStorageSparseAMD

void  glew::gl::glTexStorageSparseAMD (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  // GL_AMD_sparse_texture - glTexStorageSparseAMD
  if (s_deviceConfig.m_glTexStorageSparseAMD)
  {
    s_deviceConfig.m_glTexStorageSparseAMD (target, internalFormat, width, height, depth, layers, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorageSparseAMD

void  glew::gl::glTextureStorageSparseAMD (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  // GL_AMD_sparse_texture - glTextureStorageSparseAMD
  if (s_deviceConfig.m_glTextureStorageSparseAMD)
  {
    s_deviceConfig.m_glTextureStorageSparseAMD (texture, target, internalFormat, width, height, depth, layers, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilOpValueAMD

void  glew::gl::glStencilOpValueAMD (GLenum face, GLuint value)
{
  // GL_AMD_stencil_operation_extended - glStencilOpValueAMD
  if (s_deviceConfig.m_glStencilOpValueAMD)
  {
    s_deviceConfig.m_glStencilOpValueAMD (face, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTessellationFactorAMD

void  glew::gl::glTessellationFactorAMD (GLfloat factor)
{
  // GL_AMD_vertex_shader_tessellator - glTessellationFactorAMD
  if (s_deviceConfig.m_glTessellationFactorAMD)
  {
    s_deviceConfig.m_glTessellationFactorAMD (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTessellationModeAMD

void  glew::gl::glTessellationModeAMD (GLenum mode)
{
  // GL_AMD_vertex_shader_tessellator - glTessellationModeAMD
  if (s_deviceConfig.m_glTessellationModeAMD)
  {
    s_deviceConfig.m_glTessellationModeAMD (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glElementPointerAPPLE

void  glew::gl::glElementPointerAPPLE (GLenum type, const void * pointer)
{
  // GL_APPLE_element_array - glElementPointerAPPLE
  if (s_deviceConfig.m_glElementPointerAPPLE)
  {
    s_deviceConfig.m_glElementPointerAPPLE (type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementArrayAPPLE

void  glew::gl::glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count)
{
  // GL_APPLE_element_array - glDrawElementArrayAPPLE
  if (s_deviceConfig.m_glDrawElementArrayAPPLE)
  {
    s_deviceConfig.m_glDrawElementArrayAPPLE (mode, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementArrayAPPLE

void  glew::gl::glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  // GL_APPLE_element_array - glDrawRangeElementArrayAPPLE
  if (s_deviceConfig.m_glDrawRangeElementArrayAPPLE)
  {
    s_deviceConfig.m_glDrawRangeElementArrayAPPLE (mode, start, end, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementArrayAPPLE

void  glew::gl::glMultiDrawElementArrayAPPLE (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_APPLE_element_array - glMultiDrawElementArrayAPPLE
  if (s_deviceConfig.m_glMultiDrawElementArrayAPPLE)
  {
    s_deviceConfig.m_glMultiDrawElementArrayAPPLE (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawRangeElementArrayAPPLE

void  glew::gl::glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_APPLE_element_array - glMultiDrawRangeElementArrayAPPLE
  if (s_deviceConfig.m_glMultiDrawRangeElementArrayAPPLE)
  {
    s_deviceConfig.m_glMultiDrawRangeElementArrayAPPLE (mode, start, end, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFencesAPPLE

void  glew::gl::glGenFencesAPPLE (GLsizei n, GLuint * fences)
{
  // GL_APPLE_fence - glGenFencesAPPLE
  if (s_deviceConfig.m_glGenFencesAPPLE)
  {
    s_deviceConfig.m_glGenFencesAPPLE (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFencesAPPLE

void  glew::gl::glDeleteFencesAPPLE (GLsizei n, const GLuint * fences)
{
  // GL_APPLE_fence - glDeleteFencesAPPLE
  if (s_deviceConfig.m_glDeleteFencesAPPLE)
  {
    s_deviceConfig.m_glDeleteFencesAPPLE (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetFenceAPPLE

void  glew::gl::glSetFenceAPPLE (GLuint fence)
{
  // GL_APPLE_fence - glSetFenceAPPLE
  if (s_deviceConfig.m_glSetFenceAPPLE)
  {
    s_deviceConfig.m_glSetFenceAPPLE (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsFenceAPPLE

GLboolean glew::gl::glIsFenceAPPLE (GLuint fence)
{
  // GL_APPLE_fence - glIsFenceAPPLE
  if (s_deviceConfig.m_glIsFenceAPPLE)
  {
    return s_deviceConfig.m_glIsFenceAPPLE (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTestFenceAPPLE

GLboolean glew::gl::glTestFenceAPPLE (GLuint fence)
{
  // GL_APPLE_fence - glTestFenceAPPLE
  if (s_deviceConfig.m_glTestFenceAPPLE)
  {
    return s_deviceConfig.m_glTestFenceAPPLE (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishFenceAPPLE

void  glew::gl::glFinishFenceAPPLE (GLuint fence)
{
  // GL_APPLE_fence - glFinishFenceAPPLE
  if (s_deviceConfig.m_glFinishFenceAPPLE)
  {
    s_deviceConfig.m_glFinishFenceAPPLE (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTestObjectAPPLE

GLboolean glew::gl::glTestObjectAPPLE (GLenum object, GLuint name)
{
  // GL_APPLE_fence - glTestObjectAPPLE
  if (s_deviceConfig.m_glTestObjectAPPLE)
  {
    return s_deviceConfig.m_glTestObjectAPPLE (object, name);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishObjectAPPLE

void  glew::gl::glFinishObjectAPPLE (GLenum object, GLint name)
{
  // GL_APPLE_fence - glFinishObjectAPPLE
  if (s_deviceConfig.m_glFinishObjectAPPLE)
  {
    s_deviceConfig.m_glFinishObjectAPPLE (object, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferParameteriAPPLE

void  glew::gl::glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param)
{
  // GL_APPLE_flush_buffer_range - glBufferParameteriAPPLE
  if (s_deviceConfig.m_glBufferParameteriAPPLE)
  {
    s_deviceConfig.m_glBufferParameteriAPPLE (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedBufferRangeAPPLE

void  glew::gl::glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size)
{
  // GL_APPLE_flush_buffer_range - glFlushMappedBufferRangeAPPLE
  if (s_deviceConfig.m_glFlushMappedBufferRangeAPPLE)
  {
    s_deviceConfig.m_glFlushMappedBufferRangeAPPLE (target, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectPurgeableAPPLE

GLenum glew::gl::glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option)
{
  // GL_APPLE_object_purgeable - glObjectPurgeableAPPLE
  if (s_deviceConfig.m_glObjectPurgeableAPPLE)
  {
    return s_deviceConfig.m_glObjectPurgeableAPPLE (objectType, name, option);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glObjectUnpurgeableAPPLE

GLenum glew::gl::glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option)
{
  // GL_APPLE_object_purgeable - glObjectUnpurgeableAPPLE
  if (s_deviceConfig.m_glObjectUnpurgeableAPPLE)
  {
    return s_deviceConfig.m_glObjectUnpurgeableAPPLE (objectType, name, option);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectParameterivAPPLE

void  glew::gl::glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint * params)
{
  // GL_APPLE_object_purgeable - glGetObjectParameterivAPPLE
  if (s_deviceConfig.m_glGetObjectParameterivAPPLE)
  {
    s_deviceConfig.m_glGetObjectParameterivAPPLE (objectType, name, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureRangeAPPLE

void  glew::gl::glTextureRangeAPPLE (GLenum target, GLsizei length, const void * pointer)
{
  // GL_APPLE_texture_range - glTextureRangeAPPLE
  if (s_deviceConfig.m_glTextureRangeAPPLE)
  {
    s_deviceConfig.m_glTextureRangeAPPLE (target, length, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterPointervAPPLE

void  glew::gl::glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, void ** params)
{
  // GL_APPLE_texture_range - glGetTexParameterPointervAPPLE
  if (s_deviceConfig.m_glGetTexParameterPointervAPPLE)
  {
    s_deviceConfig.m_glGetTexParameterPointervAPPLE (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexArrayAPPLE

void  glew::gl::glBindVertexArrayAPPLE (GLuint array)
{
  // GL_APPLE_vertex_array_object - glBindVertexArrayAPPLE
  if (s_deviceConfig.m_glBindVertexArrayAPPLE)
  {
    s_deviceConfig.m_glBindVertexArrayAPPLE (array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteVertexArraysAPPLE

void  glew::gl::glDeleteVertexArraysAPPLE (GLsizei n, const GLuint * arrays)
{
  // GL_APPLE_vertex_array_object - glDeleteVertexArraysAPPLE
  if (s_deviceConfig.m_glDeleteVertexArraysAPPLE)
  {
    s_deviceConfig.m_glDeleteVertexArraysAPPLE (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenVertexArraysAPPLE

void  glew::gl::glGenVertexArraysAPPLE (GLsizei n, GLuint * arrays)
{
  // GL_APPLE_vertex_array_object - glGenVertexArraysAPPLE
  if (s_deviceConfig.m_glGenVertexArraysAPPLE)
  {
    s_deviceConfig.m_glGenVertexArraysAPPLE (n, arrays);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVertexArrayAPPLE

GLboolean glew::gl::glIsVertexArrayAPPLE (GLuint array)
{
  // GL_APPLE_vertex_array_object - glIsVertexArrayAPPLE
  if (s_deviceConfig.m_glIsVertexArrayAPPLE)
  {
    return s_deviceConfig.m_glIsVertexArrayAPPLE (array);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayRangeAPPLE

void  glew::gl::glVertexArrayRangeAPPLE (GLsizei length, void * pointer)
{
  // GL_APPLE_vertex_array_range - glVertexArrayRangeAPPLE
  if (s_deviceConfig.m_glVertexArrayRangeAPPLE)
  {
    s_deviceConfig.m_glVertexArrayRangeAPPLE (length, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushVertexArrayRangeAPPLE

void  glew::gl::glFlushVertexArrayRangeAPPLE (GLsizei length, void * pointer)
{
  // GL_APPLE_vertex_array_range - glFlushVertexArrayRangeAPPLE
  if (s_deviceConfig.m_glFlushVertexArrayRangeAPPLE)
  {
    s_deviceConfig.m_glFlushVertexArrayRangeAPPLE (length, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayParameteriAPPLE

void  glew::gl::glVertexArrayParameteriAPPLE (GLenum pname, GLint param)
{
  // GL_APPLE_vertex_array_range - glVertexArrayParameteriAPPLE
  if (s_deviceConfig.m_glVertexArrayParameteriAPPLE)
  {
    s_deviceConfig.m_glVertexArrayParameteriAPPLE (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexAttribAPPLE

void  glew::gl::glEnableVertexAttribAPPLE (GLuint index, GLenum pname)
{
  // GL_APPLE_vertex_program_evaluators - glEnableVertexAttribAPPLE
  if (s_deviceConfig.m_glEnableVertexAttribAPPLE)
  {
    s_deviceConfig.m_glEnableVertexAttribAPPLE (index, pname);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexAttribAPPLE

void  glew::gl::glDisableVertexAttribAPPLE (GLuint index, GLenum pname)
{
  // GL_APPLE_vertex_program_evaluators - glDisableVertexAttribAPPLE
  if (s_deviceConfig.m_glDisableVertexAttribAPPLE)
  {
    s_deviceConfig.m_glDisableVertexAttribAPPLE (index, pname);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVertexAttribEnabledAPPLE

GLboolean glew::gl::glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname)
{
  // GL_APPLE_vertex_program_evaluators - glIsVertexAttribEnabledAPPLE
  if (s_deviceConfig.m_glIsVertexAttribEnabledAPPLE)
  {
    return s_deviceConfig.m_glIsVertexAttribEnabledAPPLE (index, pname);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapVertexAttrib1dAPPLE

void  glew::gl::glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)
{
  // GL_APPLE_vertex_program_evaluators - glMapVertexAttrib1dAPPLE
  if (s_deviceConfig.m_glMapVertexAttrib1dAPPLE)
  {
    s_deviceConfig.m_glMapVertexAttrib1dAPPLE (index, size, u1, u2, stride, order, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapVertexAttrib1fAPPLE

void  glew::gl::glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)
{
  // GL_APPLE_vertex_program_evaluators - glMapVertexAttrib1fAPPLE
  if (s_deviceConfig.m_glMapVertexAttrib1fAPPLE)
  {
    s_deviceConfig.m_glMapVertexAttrib1fAPPLE (index, size, u1, u2, stride, order, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapVertexAttrib2dAPPLE

void  glew::gl::glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)
{
  // GL_APPLE_vertex_program_evaluators - glMapVertexAttrib2dAPPLE
  if (s_deviceConfig.m_glMapVertexAttrib2dAPPLE)
  {
    s_deviceConfig.m_glMapVertexAttrib2dAPPLE (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapVertexAttrib2fAPPLE

void  glew::gl::glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)
{
  // GL_APPLE_vertex_program_evaluators - glMapVertexAttrib2fAPPLE
  if (s_deviceConfig.m_glMapVertexAttrib2fAPPLE)
  {
    s_deviceConfig.m_glMapVertexAttrib2fAPPLE (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureHandleARB

GLuint64 glew::gl::glGetTextureHandleARB (GLuint texture)
{
  // GL_ARB_bindless_texture - glGetTextureHandleARB
  if (s_deviceConfig.m_glGetTextureHandleARB)
  {
    return s_deviceConfig.m_glGetTextureHandleARB (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureSamplerHandleARB

GLuint64 glew::gl::glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler)
{
  // GL_ARB_bindless_texture - glGetTextureSamplerHandleARB
  if (s_deviceConfig.m_glGetTextureSamplerHandleARB)
  {
    return s_deviceConfig.m_glGetTextureSamplerHandleARB (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleResidentARB

void  glew::gl::glMakeTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleResidentARB
  if (s_deviceConfig.m_glMakeTextureHandleResidentARB)
  {
    s_deviceConfig.m_glMakeTextureHandleResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleNonResidentARB

void  glew::gl::glMakeTextureHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeTextureHandleNonResidentARB
  if (s_deviceConfig.m_glMakeTextureHandleNonResidentARB)
  {
    s_deviceConfig.m_glMakeTextureHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetImageHandleARB

GLuint64 glew::gl::glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_ARB_bindless_texture - glGetImageHandleARB
  if (s_deviceConfig.m_glGetImageHandleARB)
  {
    return s_deviceConfig.m_glGetImageHandleARB (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleResidentARB

void  glew::gl::glMakeImageHandleResidentARB (GLuint64 handle, GLenum access)
{
  // GL_ARB_bindless_texture - glMakeImageHandleResidentARB
  if (s_deviceConfig.m_glMakeImageHandleResidentARB)
  {
    s_deviceConfig.m_glMakeImageHandleResidentARB (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleNonResidentARB

void  glew::gl::glMakeImageHandleNonResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glMakeImageHandleNonResidentARB
  if (s_deviceConfig.m_glMakeImageHandleNonResidentARB)
  {
    s_deviceConfig.m_glMakeImageHandleNonResidentARB (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64ARB

void  glew::gl::glUniformHandleui64ARB (GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64ARB
  if (s_deviceConfig.m_glUniformHandleui64ARB)
  {
    s_deviceConfig.m_glUniformHandleui64ARB (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64vARB

void  glew::gl::glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_ARB_bindless_texture - glUniformHandleui64vARB
  if (s_deviceConfig.m_glUniformHandleui64vARB)
  {
    s_deviceConfig.m_glUniformHandleui64vARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64ARB

void  glew::gl::glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64ARB
  if (s_deviceConfig.m_glProgramUniformHandleui64ARB)
  {
    s_deviceConfig.m_glProgramUniformHandleui64ARB (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64vARB

void  glew::gl::glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_ARB_bindless_texture - glProgramUniformHandleui64vARB
  if (s_deviceConfig.m_glProgramUniformHandleui64vARB)
  {
    s_deviceConfig.m_glProgramUniformHandleui64vARB (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTextureHandleResidentARB

GLboolean glew::gl::glIsTextureHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsTextureHandleResidentARB
  if (s_deviceConfig.m_glIsTextureHandleResidentARB)
  {
    return s_deviceConfig.m_glIsTextureHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsImageHandleResidentARB

GLboolean glew::gl::glIsImageHandleResidentARB (GLuint64 handle)
{
  // GL_ARB_bindless_texture - glIsImageHandleResidentARB
  if (s_deviceConfig.m_glIsImageHandleResidentARB)
  {
    return s_deviceConfig.m_glIsImageHandleResidentARB (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1ui64ARB

void  glew::gl::glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64ARB
  if (s_deviceConfig.m_glVertexAttribL1ui64ARB)
  {
    s_deviceConfig.m_glVertexAttribL1ui64ARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1ui64vARB

void  glew::gl::glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT * v)
{
  // GL_ARB_bindless_texture - glVertexAttribL1ui64vARB
  if (s_deviceConfig.m_glVertexAttribL1ui64vARB)
  {
    s_deviceConfig.m_glVertexAttribL1ui64vARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribLui64vARB

void  glew::gl::glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT * params)
{
  // GL_ARB_bindless_texture - glGetVertexAttribLui64vARB
  if (s_deviceConfig.m_glGetVertexAttribLui64vARB)
  {
    s_deviceConfig.m_glGetVertexAttribLui64vARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateSyncFromCLeventARB

GLsync glew::gl::glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags)
{
  // GL_ARB_cl_event - glCreateSyncFromCLeventARB
  if (s_deviceConfig.m_glCreateSyncFromCLeventARB)
  {
    return s_deviceConfig.m_glCreateSyncFromCLeventARB (context, event, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClampColorARB

void  glew::gl::glClampColorARB (GLenum target, GLenum clamp)
{
  // GL_ARB_color_buffer_float - glClampColorARB
  if (s_deviceConfig.m_glClampColorARB)
  {
    s_deviceConfig.m_glClampColorARB (target, clamp);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDispatchComputeGroupSizeARB

void  glew::gl::glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  // GL_ARB_compute_variable_group_size - glDispatchComputeGroupSizeARB
  if (s_deviceConfig.m_glDispatchComputeGroupSizeARB)
  {
    s_deviceConfig.m_glDispatchComputeGroupSizeARB (num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageControlARB

void  glew::gl::glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
  // GL_ARB_debug_output - glDebugMessageControlARB
  if (s_deviceConfig.m_glDebugMessageControlARB)
  {
    s_deviceConfig.m_glDebugMessageControlARB (source, type, severity, count, ids, enabled);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageInsertARB

void  glew::gl::glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
  // GL_ARB_debug_output - glDebugMessageInsertARB
  if (s_deviceConfig.m_glDebugMessageInsertARB)
  {
    s_deviceConfig.m_glDebugMessageInsertARB (source, type, id, severity, length, buf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDebugMessageCallbackARB

void  glew::gl::glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void * userParam)
{
  // GL_ARB_debug_output - glDebugMessageCallbackARB
  if (s_deviceConfig.m_glDebugMessageCallbackARB)
  {
    s_deviceConfig.m_glDebugMessageCallbackARB (callback, userParam);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDebugMessageLogARB

GLuint glew::gl::glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
  // GL_ARB_debug_output - glGetDebugMessageLogARB
  if (s_deviceConfig.m_glGetDebugMessageLogARB)
  {
    return s_deviceConfig.m_glGetDebugMessageLogARB (count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffersARB

void  glew::gl::glDrawBuffersARB (GLsizei n, const GLenum * bufs)
{
  // GL_ARB_draw_buffers - glDrawBuffersARB
  if (s_deviceConfig.m_glDrawBuffersARB)
  {
    s_deviceConfig.m_glDrawBuffersARB (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationiARB

void  glew::gl::glBlendEquationiARB (GLuint buf, GLenum mode)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationiARB
  if (s_deviceConfig.m_glBlendEquationiARB)
  {
    s_deviceConfig.m_glBlendEquationiARB (buf, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparateiARB

void  glew::gl::glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendEquationSeparateiARB
  if (s_deviceConfig.m_glBlendEquationSeparateiARB)
  {
    s_deviceConfig.m_glBlendEquationSeparateiARB (buf, modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFunciARB

void  glew::gl::glBlendFunciARB (GLuint buf, GLenum src, GLenum dst)
{
  // GL_ARB_draw_buffers_blend - glBlendFunciARB
  if (s_deviceConfig.m_glBlendFunciARB)
  {
    s_deviceConfig.m_glBlendFunciARB (buf, src, dst);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateiARB

void  glew::gl::glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  // GL_ARB_draw_buffers_blend - glBlendFuncSeparateiARB
  if (s_deviceConfig.m_glBlendFuncSeparateiARB)
  {
    s_deviceConfig.m_glBlendFuncSeparateiARB (buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedARB

void  glew::gl::glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  // GL_ARB_draw_instanced - glDrawArraysInstancedARB
  if (s_deviceConfig.m_glDrawArraysInstancedARB)
  {
    s_deviceConfig.m_glDrawArraysInstancedARB (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedARB

void  glew::gl::glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_ARB_draw_instanced - glDrawElementsInstancedARB
  if (s_deviceConfig.m_glDrawElementsInstancedARB)
  {
    s_deviceConfig.m_glDrawElementsInstancedARB (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramStringARB

void  glew::gl::glProgramStringARB (GLenum target, GLenum format, GLsizei len, const void * string)
{
  // GL_ARB_fragment_program - glProgramStringARB
  if (s_deviceConfig.m_glProgramStringARB)
  {
    s_deviceConfig.m_glProgramStringARB (target, format, len, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindProgramARB

void  glew::gl::glBindProgramARB (GLenum target, GLuint program)
{
  // GL_ARB_fragment_program - glBindProgramARB
  if (s_deviceConfig.m_glBindProgramARB)
  {
    s_deviceConfig.m_glBindProgramARB (target, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgramsARB

void  glew::gl::glDeleteProgramsARB (GLsizei n, const GLuint * programs)
{
  // GL_ARB_fragment_program - glDeleteProgramsARB
  if (s_deviceConfig.m_glDeleteProgramsARB)
  {
    s_deviceConfig.m_glDeleteProgramsARB (n, programs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenProgramsARB

void  glew::gl::glGenProgramsARB (GLsizei n, GLuint * programs)
{
  // GL_ARB_fragment_program - glGenProgramsARB
  if (s_deviceConfig.m_glGenProgramsARB)
  {
    s_deviceConfig.m_glGenProgramsARB (n, programs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameter4dARB

void  glew::gl::glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_fragment_program - glProgramEnvParameter4dARB
  if (s_deviceConfig.m_glProgramEnvParameter4dARB)
  {
    s_deviceConfig.m_glProgramEnvParameter4dARB (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameter4dvARB

void  glew::gl::glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble * params)
{
  // GL_ARB_fragment_program - glProgramEnvParameter4dvARB
  if (s_deviceConfig.m_glProgramEnvParameter4dvARB)
  {
    s_deviceConfig.m_glProgramEnvParameter4dvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameter4fARB

void  glew::gl::glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ARB_fragment_program - glProgramEnvParameter4fARB
  if (s_deviceConfig.m_glProgramEnvParameter4fARB)
  {
    s_deviceConfig.m_glProgramEnvParameter4fARB (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameter4fvARB

void  glew::gl::glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat * params)
{
  // GL_ARB_fragment_program - glProgramEnvParameter4fvARB
  if (s_deviceConfig.m_glProgramEnvParameter4fvARB)
  {
    s_deviceConfig.m_glProgramEnvParameter4fvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameter4dARB

void  glew::gl::glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_fragment_program - glProgramLocalParameter4dARB
  if (s_deviceConfig.m_glProgramLocalParameter4dARB)
  {
    s_deviceConfig.m_glProgramLocalParameter4dARB (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameter4dvARB

void  glew::gl::glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble * params)
{
  // GL_ARB_fragment_program - glProgramLocalParameter4dvARB
  if (s_deviceConfig.m_glProgramLocalParameter4dvARB)
  {
    s_deviceConfig.m_glProgramLocalParameter4dvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameter4fARB

void  glew::gl::glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ARB_fragment_program - glProgramLocalParameter4fARB
  if (s_deviceConfig.m_glProgramLocalParameter4fARB)
  {
    s_deviceConfig.m_glProgramLocalParameter4fARB (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameter4fvARB

void  glew::gl::glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat * params)
{
  // GL_ARB_fragment_program - glProgramLocalParameter4fvARB
  if (s_deviceConfig.m_glProgramLocalParameter4fvARB)
  {
    s_deviceConfig.m_glProgramLocalParameter4fvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramEnvParameterdvARB

void  glew::gl::glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble * params)
{
  // GL_ARB_fragment_program - glGetProgramEnvParameterdvARB
  if (s_deviceConfig.m_glGetProgramEnvParameterdvARB)
  {
    s_deviceConfig.m_glGetProgramEnvParameterdvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramEnvParameterfvARB

void  glew::gl::glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat * params)
{
  // GL_ARB_fragment_program - glGetProgramEnvParameterfvARB
  if (s_deviceConfig.m_glGetProgramEnvParameterfvARB)
  {
    s_deviceConfig.m_glGetProgramEnvParameterfvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramLocalParameterdvARB

void  glew::gl::glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble * params)
{
  // GL_ARB_fragment_program - glGetProgramLocalParameterdvARB
  if (s_deviceConfig.m_glGetProgramLocalParameterdvARB)
  {
    s_deviceConfig.m_glGetProgramLocalParameterdvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramLocalParameterfvARB

void  glew::gl::glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat * params)
{
  // GL_ARB_fragment_program - glGetProgramLocalParameterfvARB
  if (s_deviceConfig.m_glGetProgramLocalParameterfvARB)
  {
    s_deviceConfig.m_glGetProgramLocalParameterfvARB (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramivARB

void  glew::gl::glGetProgramivARB (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_fragment_program - glGetProgramivARB
  if (s_deviceConfig.m_glGetProgramivARB)
  {
    s_deviceConfig.m_glGetProgramivARB (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramStringARB

void  glew::gl::glGetProgramStringARB (GLenum target, GLenum pname, void * string)
{
  // GL_ARB_fragment_program - glGetProgramStringARB
  if (s_deviceConfig.m_glGetProgramStringARB)
  {
    s_deviceConfig.m_glGetProgramStringARB (target, pname, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgramARB

GLboolean glew::gl::glIsProgramARB (GLuint program)
{
  // GL_ARB_fragment_program - glIsProgramARB
  if (s_deviceConfig.m_glIsProgramARB)
  {
    return s_deviceConfig.m_glIsProgramARB (program);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameteriARB

void  glew::gl::glProgramParameteriARB (GLuint program, GLenum pname, GLint value)
{
  // GL_ARB_geometry_shader4 - glProgramParameteriARB
  if (s_deviceConfig.m_glProgramParameteriARB)
  {
    s_deviceConfig.m_glProgramParameteriARB (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureARB

void  glew::gl::glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_ARB_geometry_shader4 - glFramebufferTextureARB
  if (s_deviceConfig.m_glFramebufferTextureARB)
  {
    s_deviceConfig.m_glFramebufferTextureARB (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureLayerARB

void  glew::gl::glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_ARB_geometry_shader4 - glFramebufferTextureLayerARB
  if (s_deviceConfig.m_glFramebufferTextureLayerARB)
  {
    s_deviceConfig.m_glFramebufferTextureLayerARB (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureFaceARB

void  glew::gl::glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  // GL_ARB_geometry_shader4 - glFramebufferTextureFaceARB
  if (s_deviceConfig.m_glFramebufferTextureFaceARB)
  {
    s_deviceConfig.m_glFramebufferTextureFaceARB (target, attachment, texture, level, face);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTable

void  glew::gl::glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table)
{
  // GL_ARB_imaging - glColorTable
  if (s_deviceConfig.m_glColorTable)
  {
    s_deviceConfig.m_glColorTable (target, internalformat, width, format, type, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableParameterfv

void  glew::gl::glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_ARB_imaging - glColorTableParameterfv
  if (s_deviceConfig.m_glColorTableParameterfv)
  {
    s_deviceConfig.m_glColorTableParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableParameteriv

void  glew::gl::glColorTableParameteriv (GLenum target, GLenum pname, const GLint * params)
{
  // GL_ARB_imaging - glColorTableParameteriv
  if (s_deviceConfig.m_glColorTableParameteriv)
  {
    s_deviceConfig.m_glColorTableParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyColorTable

void  glew::gl::glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  // GL_ARB_imaging - glCopyColorTable
  if (s_deviceConfig.m_glCopyColorTable)
  {
    s_deviceConfig.m_glCopyColorTable (target, internalformat, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTable

void  glew::gl::glGetColorTable (GLenum target, GLenum format, GLenum type, void * table)
{
  // GL_ARB_imaging - glGetColorTable
  if (s_deviceConfig.m_glGetColorTable)
  {
    s_deviceConfig.m_glGetColorTable (target, format, type, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameterfv

void  glew::gl::glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ARB_imaging - glGetColorTableParameterfv
  if (s_deviceConfig.m_glGetColorTableParameterfv)
  {
    s_deviceConfig.m_glGetColorTableParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameteriv

void  glew::gl::glGetColorTableParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_imaging - glGetColorTableParameteriv
  if (s_deviceConfig.m_glGetColorTableParameteriv)
  {
    s_deviceConfig.m_glGetColorTableParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorSubTable

void  glew::gl::glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data)
{
  // GL_ARB_imaging - glColorSubTable
  if (s_deviceConfig.m_glColorSubTable)
  {
    s_deviceConfig.m_glColorSubTable (target, start, count, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyColorSubTable

void  glew::gl::glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  // GL_ARB_imaging - glCopyColorSubTable
  if (s_deviceConfig.m_glCopyColorSubTable)
  {
    s_deviceConfig.m_glCopyColorSubTable (target, start, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionFilter1D

void  glew::gl::glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image)
{
  // GL_ARB_imaging - glConvolutionFilter1D
  if (s_deviceConfig.m_glConvolutionFilter1D)
  {
    s_deviceConfig.m_glConvolutionFilter1D (target, internalformat, width, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionFilter2D

void  glew::gl::glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image)
{
  // GL_ARB_imaging - glConvolutionFilter2D
  if (s_deviceConfig.m_glConvolutionFilter2D)
  {
    s_deviceConfig.m_glConvolutionFilter2D (target, internalformat, width, height, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterf

void  glew::gl::glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params)
{
  // GL_ARB_imaging - glConvolutionParameterf
  if (s_deviceConfig.m_glConvolutionParameterf)
  {
    s_deviceConfig.m_glConvolutionParameterf (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterfv

void  glew::gl::glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_ARB_imaging - glConvolutionParameterfv
  if (s_deviceConfig.m_glConvolutionParameterfv)
  {
    s_deviceConfig.m_glConvolutionParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameteri

void  glew::gl::glConvolutionParameteri (GLenum target, GLenum pname, GLint params)
{
  // GL_ARB_imaging - glConvolutionParameteri
  if (s_deviceConfig.m_glConvolutionParameteri)
  {
    s_deviceConfig.m_glConvolutionParameteri (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameteriv

void  glew::gl::glConvolutionParameteriv (GLenum target, GLenum pname, const GLint * params)
{
  // GL_ARB_imaging - glConvolutionParameteriv
  if (s_deviceConfig.m_glConvolutionParameteriv)
  {
    s_deviceConfig.m_glConvolutionParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyConvolutionFilter1D

void  glew::gl::glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  // GL_ARB_imaging - glCopyConvolutionFilter1D
  if (s_deviceConfig.m_glCopyConvolutionFilter1D)
  {
    s_deviceConfig.m_glCopyConvolutionFilter1D (target, internalformat, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyConvolutionFilter2D

void  glew::gl::glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_ARB_imaging - glCopyConvolutionFilter2D
  if (s_deviceConfig.m_glCopyConvolutionFilter2D)
  {
    s_deviceConfig.m_glCopyConvolutionFilter2D (target, internalformat, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionFilter

void  glew::gl::glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, void * image)
{
  // GL_ARB_imaging - glGetConvolutionFilter
  if (s_deviceConfig.m_glGetConvolutionFilter)
  {
    s_deviceConfig.m_glGetConvolutionFilter (target, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionParameterfv

void  glew::gl::glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ARB_imaging - glGetConvolutionParameterfv
  if (s_deviceConfig.m_glGetConvolutionParameterfv)
  {
    s_deviceConfig.m_glGetConvolutionParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionParameteriv

void  glew::gl::glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_imaging - glGetConvolutionParameteriv
  if (s_deviceConfig.m_glGetConvolutionParameteriv)
  {
    s_deviceConfig.m_glGetConvolutionParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSeparableFilter

void  glew::gl::glGetSeparableFilter (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span)
{
  // GL_ARB_imaging - glGetSeparableFilter
  if (s_deviceConfig.m_glGetSeparableFilter)
  {
    s_deviceConfig.m_glGetSeparableFilter (target, format, type, row, column, span);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSeparableFilter2D

void  glew::gl::glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column)
{
  // GL_ARB_imaging - glSeparableFilter2D
  if (s_deviceConfig.m_glSeparableFilter2D)
  {
    s_deviceConfig.m_glSeparableFilter2D (target, internalformat, width, height, format, type, row, column);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogram

void  glew::gl::glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
  // GL_ARB_imaging - glGetHistogram
  if (s_deviceConfig.m_glGetHistogram)
  {
    s_deviceConfig.m_glGetHistogram (target, reset, format, type, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramParameterfv

void  glew::gl::glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ARB_imaging - glGetHistogramParameterfv
  if (s_deviceConfig.m_glGetHistogramParameterfv)
  {
    s_deviceConfig.m_glGetHistogramParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramParameteriv

void  glew::gl::glGetHistogramParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_imaging - glGetHistogramParameteriv
  if (s_deviceConfig.m_glGetHistogramParameteriv)
  {
    s_deviceConfig.m_glGetHistogramParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmax

void  glew::gl::glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
  // GL_ARB_imaging - glGetMinmax
  if (s_deviceConfig.m_glGetMinmax)
  {
    s_deviceConfig.m_glGetMinmax (target, reset, format, type, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmaxParameterfv

void  glew::gl::glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_ARB_imaging - glGetMinmaxParameterfv
  if (s_deviceConfig.m_glGetMinmaxParameterfv)
  {
    s_deviceConfig.m_glGetMinmaxParameterfv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmaxParameteriv

void  glew::gl::glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_imaging - glGetMinmaxParameteriv
  if (s_deviceConfig.m_glGetMinmaxParameteriv)
  {
    s_deviceConfig.m_glGetMinmaxParameteriv (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glHistogram

void  glew::gl::glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  // GL_ARB_imaging - glHistogram
  if (s_deviceConfig.m_glHistogram)
  {
    s_deviceConfig.m_glHistogram (target, width, internalformat, sink);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMinmax

void  glew::gl::glMinmax (GLenum target, GLenum internalformat, GLboolean sink)
{
  // GL_ARB_imaging - glMinmax
  if (s_deviceConfig.m_glMinmax)
  {
    s_deviceConfig.m_glMinmax (target, internalformat, sink);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResetHistogram

void  glew::gl::glResetHistogram (GLenum target)
{
  // GL_ARB_imaging - glResetHistogram
  if (s_deviceConfig.m_glResetHistogram)
  {
    s_deviceConfig.m_glResetHistogram (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResetMinmax

void  glew::gl::glResetMinmax (GLenum target)
{
  // GL_ARB_imaging - glResetMinmax
  if (s_deviceConfig.m_glResetMinmax)
  {
    s_deviceConfig.m_glResetMinmax (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirectCountARB

void  glew::gl::glMultiDrawArraysIndirectCountARB (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawArraysIndirectCountARB
  if (s_deviceConfig.m_glMultiDrawArraysIndirectCountARB)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectCountARB (mode, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirectCountARB

void  glew::gl::glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  // GL_ARB_indirect_parameters - glMultiDrawElementsIndirectCountARB
  if (s_deviceConfig.m_glMultiDrawElementsIndirectCountARB)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectCountARB (mode, type, indirect, drawcount, maxdrawcount, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribDivisorARB

void  glew::gl::glVertexAttribDivisorARB (GLuint index, GLuint divisor)
{
  // GL_ARB_instanced_arrays - glVertexAttribDivisorARB
  if (s_deviceConfig.m_glVertexAttribDivisorARB)
  {
    s_deviceConfig.m_glVertexAttribDivisorARB (index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCurrentPaletteMatrixARB

void  glew::gl::glCurrentPaletteMatrixARB (GLint index)
{
  // GL_ARB_matrix_palette - glCurrentPaletteMatrixARB
  if (s_deviceConfig.m_glCurrentPaletteMatrixARB)
  {
    s_deviceConfig.m_glCurrentPaletteMatrixARB (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixIndexubvARB

void  glew::gl::glMatrixIndexubvARB (GLint size, const GLubyte * indices)
{
  // GL_ARB_matrix_palette - glMatrixIndexubvARB
  if (s_deviceConfig.m_glMatrixIndexubvARB)
  {
    s_deviceConfig.m_glMatrixIndexubvARB (size, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixIndexusvARB

void  glew::gl::glMatrixIndexusvARB (GLint size, const GLushort * indices)
{
  // GL_ARB_matrix_palette - glMatrixIndexusvARB
  if (s_deviceConfig.m_glMatrixIndexusvARB)
  {
    s_deviceConfig.m_glMatrixIndexusvARB (size, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixIndexuivARB

void  glew::gl::glMatrixIndexuivARB (GLint size, const GLuint * indices)
{
  // GL_ARB_matrix_palette - glMatrixIndexuivARB
  if (s_deviceConfig.m_glMatrixIndexuivARB)
  {
    s_deviceConfig.m_glMatrixIndexuivARB (size, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixIndexPointerARB

void  glew::gl::glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ARB_matrix_palette - glMatrixIndexPointerARB
  if (s_deviceConfig.m_glMatrixIndexPointerARB)
  {
    s_deviceConfig.m_glMatrixIndexPointerARB (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleCoverageARB

void  glew::gl::glSampleCoverageARB (GLfloat value, GLboolean invert)
{
  // GL_ARB_multisample - glSampleCoverageARB
  if (s_deviceConfig.m_glSampleCoverageARB)
  {
    s_deviceConfig.m_glSampleCoverageARB (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveTextureARB

void  glew::gl::glActiveTextureARB (GLenum texture)
{
  // GL_ARB_multitexture - glActiveTextureARB
  if (s_deviceConfig.m_glActiveTextureARB)
  {
    s_deviceConfig.m_glActiveTextureARB (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientActiveTextureARB

void  glew::gl::glClientActiveTextureARB (GLenum texture)
{
  // GL_ARB_multitexture - glClientActiveTextureARB
  if (s_deviceConfig.m_glClientActiveTextureARB)
  {
    s_deviceConfig.m_glClientActiveTextureARB (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1dARB

void  glew::gl::glMultiTexCoord1dARB (GLenum target, GLdouble s)
{
  // GL_ARB_multitexture - glMultiTexCoord1dARB
  if (s_deviceConfig.m_glMultiTexCoord1dARB)
  {
    s_deviceConfig.m_glMultiTexCoord1dARB (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1dvARB

void  glew::gl::glMultiTexCoord1dvARB (GLenum target, const GLdouble * v)
{
  // GL_ARB_multitexture - glMultiTexCoord1dvARB
  if (s_deviceConfig.m_glMultiTexCoord1dvARB)
  {
    s_deviceConfig.m_glMultiTexCoord1dvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1fARB

void  glew::gl::glMultiTexCoord1fARB (GLenum target, GLfloat s)
{
  // GL_ARB_multitexture - glMultiTexCoord1fARB
  if (s_deviceConfig.m_glMultiTexCoord1fARB)
  {
    s_deviceConfig.m_glMultiTexCoord1fARB (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1fvARB

void  glew::gl::glMultiTexCoord1fvARB (GLenum target, const GLfloat * v)
{
  // GL_ARB_multitexture - glMultiTexCoord1fvARB
  if (s_deviceConfig.m_glMultiTexCoord1fvARB)
  {
    s_deviceConfig.m_glMultiTexCoord1fvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1iARB

void  glew::gl::glMultiTexCoord1iARB (GLenum target, GLint s)
{
  // GL_ARB_multitexture - glMultiTexCoord1iARB
  if (s_deviceConfig.m_glMultiTexCoord1iARB)
  {
    s_deviceConfig.m_glMultiTexCoord1iARB (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1ivARB

void  glew::gl::glMultiTexCoord1ivARB (GLenum target, const GLint * v)
{
  // GL_ARB_multitexture - glMultiTexCoord1ivARB
  if (s_deviceConfig.m_glMultiTexCoord1ivARB)
  {
    s_deviceConfig.m_glMultiTexCoord1ivARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1sARB

void  glew::gl::glMultiTexCoord1sARB (GLenum target, GLshort s)
{
  // GL_ARB_multitexture - glMultiTexCoord1sARB
  if (s_deviceConfig.m_glMultiTexCoord1sARB)
  {
    s_deviceConfig.m_glMultiTexCoord1sARB (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1svARB

void  glew::gl::glMultiTexCoord1svARB (GLenum target, const GLshort * v)
{
  // GL_ARB_multitexture - glMultiTexCoord1svARB
  if (s_deviceConfig.m_glMultiTexCoord1svARB)
  {
    s_deviceConfig.m_glMultiTexCoord1svARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2dARB

void  glew::gl::glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t)
{
  // GL_ARB_multitexture - glMultiTexCoord2dARB
  if (s_deviceConfig.m_glMultiTexCoord2dARB)
  {
    s_deviceConfig.m_glMultiTexCoord2dARB (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2dvARB

void  glew::gl::glMultiTexCoord2dvARB (GLenum target, const GLdouble * v)
{
  // GL_ARB_multitexture - glMultiTexCoord2dvARB
  if (s_deviceConfig.m_glMultiTexCoord2dvARB)
  {
    s_deviceConfig.m_glMultiTexCoord2dvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2fARB

void  glew::gl::glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t)
{
  // GL_ARB_multitexture - glMultiTexCoord2fARB
  if (s_deviceConfig.m_glMultiTexCoord2fARB)
  {
    s_deviceConfig.m_glMultiTexCoord2fARB (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2fvARB

void  glew::gl::glMultiTexCoord2fvARB (GLenum target, const GLfloat * v)
{
  // GL_ARB_multitexture - glMultiTexCoord2fvARB
  if (s_deviceConfig.m_glMultiTexCoord2fvARB)
  {
    s_deviceConfig.m_glMultiTexCoord2fvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2iARB

void  glew::gl::glMultiTexCoord2iARB (GLenum target, GLint s, GLint t)
{
  // GL_ARB_multitexture - glMultiTexCoord2iARB
  if (s_deviceConfig.m_glMultiTexCoord2iARB)
  {
    s_deviceConfig.m_glMultiTexCoord2iARB (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2ivARB

void  glew::gl::glMultiTexCoord2ivARB (GLenum target, const GLint * v)
{
  // GL_ARB_multitexture - glMultiTexCoord2ivARB
  if (s_deviceConfig.m_glMultiTexCoord2ivARB)
  {
    s_deviceConfig.m_glMultiTexCoord2ivARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2sARB

void  glew::gl::glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t)
{
  // GL_ARB_multitexture - glMultiTexCoord2sARB
  if (s_deviceConfig.m_glMultiTexCoord2sARB)
  {
    s_deviceConfig.m_glMultiTexCoord2sARB (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2svARB

void  glew::gl::glMultiTexCoord2svARB (GLenum target, const GLshort * v)
{
  // GL_ARB_multitexture - glMultiTexCoord2svARB
  if (s_deviceConfig.m_glMultiTexCoord2svARB)
  {
    s_deviceConfig.m_glMultiTexCoord2svARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3dARB

void  glew::gl::glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  // GL_ARB_multitexture - glMultiTexCoord3dARB
  if (s_deviceConfig.m_glMultiTexCoord3dARB)
  {
    s_deviceConfig.m_glMultiTexCoord3dARB (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3dvARB

void  glew::gl::glMultiTexCoord3dvARB (GLenum target, const GLdouble * v)
{
  // GL_ARB_multitexture - glMultiTexCoord3dvARB
  if (s_deviceConfig.m_glMultiTexCoord3dvARB)
  {
    s_deviceConfig.m_glMultiTexCoord3dvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3fARB

void  glew::gl::glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  // GL_ARB_multitexture - glMultiTexCoord3fARB
  if (s_deviceConfig.m_glMultiTexCoord3fARB)
  {
    s_deviceConfig.m_glMultiTexCoord3fARB (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3fvARB

void  glew::gl::glMultiTexCoord3fvARB (GLenum target, const GLfloat * v)
{
  // GL_ARB_multitexture - glMultiTexCoord3fvARB
  if (s_deviceConfig.m_glMultiTexCoord3fvARB)
  {
    s_deviceConfig.m_glMultiTexCoord3fvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3iARB

void  glew::gl::glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r)
{
  // GL_ARB_multitexture - glMultiTexCoord3iARB
  if (s_deviceConfig.m_glMultiTexCoord3iARB)
  {
    s_deviceConfig.m_glMultiTexCoord3iARB (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3ivARB

void  glew::gl::glMultiTexCoord3ivARB (GLenum target, const GLint * v)
{
  // GL_ARB_multitexture - glMultiTexCoord3ivARB
  if (s_deviceConfig.m_glMultiTexCoord3ivARB)
  {
    s_deviceConfig.m_glMultiTexCoord3ivARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3sARB

void  glew::gl::glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r)
{
  // GL_ARB_multitexture - glMultiTexCoord3sARB
  if (s_deviceConfig.m_glMultiTexCoord3sARB)
  {
    s_deviceConfig.m_glMultiTexCoord3sARB (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3svARB

void  glew::gl::glMultiTexCoord3svARB (GLenum target, const GLshort * v)
{
  // GL_ARB_multitexture - glMultiTexCoord3svARB
  if (s_deviceConfig.m_glMultiTexCoord3svARB)
  {
    s_deviceConfig.m_glMultiTexCoord3svARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4dARB

void  glew::gl::glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  // GL_ARB_multitexture - glMultiTexCoord4dARB
  if (s_deviceConfig.m_glMultiTexCoord4dARB)
  {
    s_deviceConfig.m_glMultiTexCoord4dARB (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4dvARB

void  glew::gl::glMultiTexCoord4dvARB (GLenum target, const GLdouble * v)
{
  // GL_ARB_multitexture - glMultiTexCoord4dvARB
  if (s_deviceConfig.m_glMultiTexCoord4dvARB)
  {
    s_deviceConfig.m_glMultiTexCoord4dvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4fARB

void  glew::gl::glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  // GL_ARB_multitexture - glMultiTexCoord4fARB
  if (s_deviceConfig.m_glMultiTexCoord4fARB)
  {
    s_deviceConfig.m_glMultiTexCoord4fARB (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4fvARB

void  glew::gl::glMultiTexCoord4fvARB (GLenum target, const GLfloat * v)
{
  // GL_ARB_multitexture - glMultiTexCoord4fvARB
  if (s_deviceConfig.m_glMultiTexCoord4fvARB)
  {
    s_deviceConfig.m_glMultiTexCoord4fvARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4iARB

void  glew::gl::glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  // GL_ARB_multitexture - glMultiTexCoord4iARB
  if (s_deviceConfig.m_glMultiTexCoord4iARB)
  {
    s_deviceConfig.m_glMultiTexCoord4iARB (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4ivARB

void  glew::gl::glMultiTexCoord4ivARB (GLenum target, const GLint * v)
{
  // GL_ARB_multitexture - glMultiTexCoord4ivARB
  if (s_deviceConfig.m_glMultiTexCoord4ivARB)
  {
    s_deviceConfig.m_glMultiTexCoord4ivARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4sARB

void  glew::gl::glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  // GL_ARB_multitexture - glMultiTexCoord4sARB
  if (s_deviceConfig.m_glMultiTexCoord4sARB)
  {
    s_deviceConfig.m_glMultiTexCoord4sARB (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4svARB

void  glew::gl::glMultiTexCoord4svARB (GLenum target, const GLshort * v)
{
  // GL_ARB_multitexture - glMultiTexCoord4svARB
  if (s_deviceConfig.m_glMultiTexCoord4svARB)
  {
    s_deviceConfig.m_glMultiTexCoord4svARB (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenQueriesARB

void  glew::gl::glGenQueriesARB (GLsizei n, GLuint * ids)
{
  // GL_ARB_occlusion_query - glGenQueriesARB
  if (s_deviceConfig.m_glGenQueriesARB)
  {
    s_deviceConfig.m_glGenQueriesARB (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteQueriesARB

void  glew::gl::glDeleteQueriesARB (GLsizei n, const GLuint * ids)
{
  // GL_ARB_occlusion_query - glDeleteQueriesARB
  if (s_deviceConfig.m_glDeleteQueriesARB)
  {
    s_deviceConfig.m_glDeleteQueriesARB (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsQueryARB

GLboolean glew::gl::glIsQueryARB (GLuint id)
{
  // GL_ARB_occlusion_query - glIsQueryARB
  if (s_deviceConfig.m_glIsQueryARB)
  {
    return s_deviceConfig.m_glIsQueryARB (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginQueryARB

void  glew::gl::glBeginQueryARB (GLenum target, GLuint id)
{
  // GL_ARB_occlusion_query - glBeginQueryARB
  if (s_deviceConfig.m_glBeginQueryARB)
  {
    s_deviceConfig.m_glBeginQueryARB (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndQueryARB

void  glew::gl::glEndQueryARB (GLenum target)
{
  // GL_ARB_occlusion_query - glEndQueryARB
  if (s_deviceConfig.m_glEndQueryARB)
  {
    s_deviceConfig.m_glEndQueryARB (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryivARB

void  glew::gl::glGetQueryivARB (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_occlusion_query - glGetQueryivARB
  if (s_deviceConfig.m_glGetQueryivARB)
  {
    s_deviceConfig.m_glGetQueryivARB (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectivARB

void  glew::gl::glGetQueryObjectivARB (GLuint id, GLenum pname, GLint * params)
{
  // GL_ARB_occlusion_query - glGetQueryObjectivARB
  if (s_deviceConfig.m_glGetQueryObjectivARB)
  {
    s_deviceConfig.m_glGetQueryObjectivARB (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectuivARB

void  glew::gl::glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint * params)
{
  // GL_ARB_occlusion_query - glGetQueryObjectuivARB
  if (s_deviceConfig.m_glGetQueryObjectuivARB)
  {
    s_deviceConfig.m_glGetQueryObjectuivARB (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfARB

void  glew::gl::glPointParameterfARB (GLenum pname, GLfloat param)
{
  // GL_ARB_point_parameters - glPointParameterfARB
  if (s_deviceConfig.m_glPointParameterfARB)
  {
    s_deviceConfig.m_glPointParameterfARB (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfvARB

void  glew::gl::glPointParameterfvARB (GLenum pname, const GLfloat * params)
{
  // GL_ARB_point_parameters - glPointParameterfvARB
  if (s_deviceConfig.m_glPointParameterfvARB)
  {
    s_deviceConfig.m_glPointParameterfvARB (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetGraphicsResetStatusARB

GLenum glew::gl::glGetGraphicsResetStatusARB ()
{
  // GL_ARB_robustness - glGetGraphicsResetStatusARB
  if (s_deviceConfig.m_glGetGraphicsResetStatusARB)
  {
    return s_deviceConfig.m_glGetGraphicsResetStatusARB ();
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnTexImageARB

void  glew::gl::glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnTexImageARB
  if (s_deviceConfig.m_glGetnTexImageARB)
  {
    s_deviceConfig.m_glGetnTexImageARB (target, level, format, type, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadnPixelsARB

void  glew::gl::glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
  // GL_ARB_robustness - glReadnPixelsARB
  if (s_deviceConfig.m_glReadnPixelsARB)
  {
    s_deviceConfig.m_glReadnPixelsARB (x, y, width, height, format, type, bufSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnCompressedTexImageARB

void  glew::gl::glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void * img)
{
  // GL_ARB_robustness - glGetnCompressedTexImageARB
  if (s_deviceConfig.m_glGetnCompressedTexImageARB)
  {
    s_deviceConfig.m_glGetnCompressedTexImageARB (target, lod, bufSize, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformfvARB

void  glew::gl::glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
  // GL_ARB_robustness - glGetnUniformfvARB
  if (s_deviceConfig.m_glGetnUniformfvARB)
  {
    s_deviceConfig.m_glGetnUniformfvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformivARB

void  glew::gl::glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
  // GL_ARB_robustness - glGetnUniformivARB
  if (s_deviceConfig.m_glGetnUniformivARB)
  {
    s_deviceConfig.m_glGetnUniformivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformuivARB

void  glew::gl::glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
  // GL_ARB_robustness - glGetnUniformuivARB
  if (s_deviceConfig.m_glGetnUniformuivARB)
  {
    s_deviceConfig.m_glGetnUniformuivARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnUniformdvARB

void  glew::gl::glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
  // GL_ARB_robustness - glGetnUniformdvARB
  if (s_deviceConfig.m_glGetnUniformdvARB)
  {
    s_deviceConfig.m_glGetnUniformdvARB (program, location, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapdvARB

void  glew::gl::glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v)
{
  // GL_ARB_robustness - glGetnMapdvARB
  if (s_deviceConfig.m_glGetnMapdvARB)
  {
    s_deviceConfig.m_glGetnMapdvARB (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapfvARB

void  glew::gl::glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v)
{
  // GL_ARB_robustness - glGetnMapfvARB
  if (s_deviceConfig.m_glGetnMapfvARB)
  {
    s_deviceConfig.m_glGetnMapfvARB (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMapivARB

void  glew::gl::glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint * v)
{
  // GL_ARB_robustness - glGetnMapivARB
  if (s_deviceConfig.m_glGetnMapivARB)
  {
    s_deviceConfig.m_glGetnMapivARB (target, query, bufSize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapfvARB

void  glew::gl::glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat * values)
{
  // GL_ARB_robustness - glGetnPixelMapfvARB
  if (s_deviceConfig.m_glGetnPixelMapfvARB)
  {
    s_deviceConfig.m_glGetnPixelMapfvARB (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapuivARB

void  glew::gl::glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint * values)
{
  // GL_ARB_robustness - glGetnPixelMapuivARB
  if (s_deviceConfig.m_glGetnPixelMapuivARB)
  {
    s_deviceConfig.m_glGetnPixelMapuivARB (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPixelMapusvARB

void  glew::gl::glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort * values)
{
  // GL_ARB_robustness - glGetnPixelMapusvARB
  if (s_deviceConfig.m_glGetnPixelMapusvARB)
  {
    s_deviceConfig.m_glGetnPixelMapusvARB (map, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnPolygonStippleARB

void  glew::gl::glGetnPolygonStippleARB (GLsizei bufSize, GLubyte * pattern)
{
  // GL_ARB_robustness - glGetnPolygonStippleARB
  if (s_deviceConfig.m_glGetnPolygonStippleARB)
  {
    s_deviceConfig.m_glGetnPolygonStippleARB (bufSize, pattern);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnColorTableARB

void  glew::gl::glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table)
{
  // GL_ARB_robustness - glGetnColorTableARB
  if (s_deviceConfig.m_glGetnColorTableARB)
  {
    s_deviceConfig.m_glGetnColorTableARB (target, format, type, bufSize, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnConvolutionFilterARB

void  glew::gl::glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image)
{
  // GL_ARB_robustness - glGetnConvolutionFilterARB
  if (s_deviceConfig.m_glGetnConvolutionFilterARB)
  {
    s_deviceConfig.m_glGetnConvolutionFilterARB (target, format, type, bufSize, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnSeparableFilterARB

void  glew::gl::glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span)
{
  // GL_ARB_robustness - glGetnSeparableFilterARB
  if (s_deviceConfig.m_glGetnSeparableFilterARB)
  {
    s_deviceConfig.m_glGetnSeparableFilterARB (target, format, type, rowBufSize, row, columnBufSize, column, span);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnHistogramARB

void  glew::gl::glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
  // GL_ARB_robustness - glGetnHistogramARB
  if (s_deviceConfig.m_glGetnHistogramARB)
  {
    s_deviceConfig.m_glGetnHistogramARB (target, reset, format, type, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetnMinmaxARB

void  glew::gl::glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values)
{
  // GL_ARB_robustness - glGetnMinmaxARB
  if (s_deviceConfig.m_glGetnMinmaxARB)
  {
    s_deviceConfig.m_glGetnMinmaxARB (target, reset, format, type, bufSize, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMinSampleShadingARB

void  glew::gl::glMinSampleShadingARB (GLfloat value)
{
  // GL_ARB_sample_shading - glMinSampleShadingARB
  if (s_deviceConfig.m_glMinSampleShadingARB)
  {
    s_deviceConfig.m_glMinSampleShadingARB (value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteObjectARB

void  glew::gl::glDeleteObjectARB (GLhandleARB obj)
{
  // GL_ARB_shader_objects - glDeleteObjectARB
  if (s_deviceConfig.m_glDeleteObjectARB)
  {
    s_deviceConfig.m_glDeleteObjectARB (obj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHandleARB

GLhandleARB glew::gl::glGetHandleARB (GLenum pname)
{
  // GL_ARB_shader_objects - glGetHandleARB
  if (s_deviceConfig.m_glGetHandleARB)
  {
    return s_deviceConfig.m_glGetHandleARB (pname);
  }
  return ((GLhandleARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDetachObjectARB

void  glew::gl::glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj)
{
  // GL_ARB_shader_objects - glDetachObjectARB
  if (s_deviceConfig.m_glDetachObjectARB)
  {
    s_deviceConfig.m_glDetachObjectARB (containerObj, attachedObj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShaderObjectARB

GLhandleARB glew::gl::glCreateShaderObjectARB (GLenum shaderType)
{
  // GL_ARB_shader_objects - glCreateShaderObjectARB
  if (s_deviceConfig.m_glCreateShaderObjectARB)
  {
    return s_deviceConfig.m_glCreateShaderObjectARB (shaderType);
  }
  return ((GLhandleARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderSourceARB

void  glew::gl::glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length)
{
  // GL_ARB_shader_objects - glShaderSourceARB
  if (s_deviceConfig.m_glShaderSourceARB)
  {
    s_deviceConfig.m_glShaderSourceARB (shaderObj, count, string, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompileShaderARB

void  glew::gl::glCompileShaderARB (GLhandleARB shaderObj)
{
  // GL_ARB_shader_objects - glCompileShaderARB
  if (s_deviceConfig.m_glCompileShaderARB)
  {
    s_deviceConfig.m_glCompileShaderARB (shaderObj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateProgramObjectARB

GLhandleARB glew::gl::glCreateProgramObjectARB ()
{
  // GL_ARB_shader_objects - glCreateProgramObjectARB
  if (s_deviceConfig.m_glCreateProgramObjectARB)
  {
    return s_deviceConfig.m_glCreateProgramObjectARB ();
  }
  return ((GLhandleARB)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAttachObjectARB

void  glew::gl::glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj)
{
  // GL_ARB_shader_objects - glAttachObjectARB
  if (s_deviceConfig.m_glAttachObjectARB)
  {
    s_deviceConfig.m_glAttachObjectARB (containerObj, obj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLinkProgramARB

void  glew::gl::glLinkProgramARB (GLhandleARB programObj)
{
  // GL_ARB_shader_objects - glLinkProgramARB
  if (s_deviceConfig.m_glLinkProgramARB)
  {
    s_deviceConfig.m_glLinkProgramARB (programObj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseProgramObjectARB

void  glew::gl::glUseProgramObjectARB (GLhandleARB programObj)
{
  // GL_ARB_shader_objects - glUseProgramObjectARB
  if (s_deviceConfig.m_glUseProgramObjectARB)
  {
    s_deviceConfig.m_glUseProgramObjectARB (programObj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glValidateProgramARB

void  glew::gl::glValidateProgramARB (GLhandleARB programObj)
{
  // GL_ARB_shader_objects - glValidateProgramARB
  if (s_deviceConfig.m_glValidateProgramARB)
  {
    s_deviceConfig.m_glValidateProgramARB (programObj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1fARB

void  glew::gl::glUniform1fARB (GLint location, GLfloat v0)
{
  // GL_ARB_shader_objects - glUniform1fARB
  if (s_deviceConfig.m_glUniform1fARB)
  {
    s_deviceConfig.m_glUniform1fARB (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2fARB

void  glew::gl::glUniform2fARB (GLint location, GLfloat v0, GLfloat v1)
{
  // GL_ARB_shader_objects - glUniform2fARB
  if (s_deviceConfig.m_glUniform2fARB)
  {
    s_deviceConfig.m_glUniform2fARB (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3fARB

void  glew::gl::glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_ARB_shader_objects - glUniform3fARB
  if (s_deviceConfig.m_glUniform3fARB)
  {
    s_deviceConfig.m_glUniform3fARB (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4fARB

void  glew::gl::glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_ARB_shader_objects - glUniform4fARB
  if (s_deviceConfig.m_glUniform4fARB)
  {
    s_deviceConfig.m_glUniform4fARB (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1iARB

void  glew::gl::glUniform1iARB (GLint location, GLint v0)
{
  // GL_ARB_shader_objects - glUniform1iARB
  if (s_deviceConfig.m_glUniform1iARB)
  {
    s_deviceConfig.m_glUniform1iARB (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2iARB

void  glew::gl::glUniform2iARB (GLint location, GLint v0, GLint v1)
{
  // GL_ARB_shader_objects - glUniform2iARB
  if (s_deviceConfig.m_glUniform2iARB)
  {
    s_deviceConfig.m_glUniform2iARB (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3iARB

void  glew::gl::glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_ARB_shader_objects - glUniform3iARB
  if (s_deviceConfig.m_glUniform3iARB)
  {
    s_deviceConfig.m_glUniform3iARB (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4iARB

void  glew::gl::glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_ARB_shader_objects - glUniform4iARB
  if (s_deviceConfig.m_glUniform4iARB)
  {
    s_deviceConfig.m_glUniform4iARB (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1fvARB

void  glew::gl::glUniform1fvARB (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniform1fvARB
  if (s_deviceConfig.m_glUniform1fvARB)
  {
    s_deviceConfig.m_glUniform1fvARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2fvARB

void  glew::gl::glUniform2fvARB (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniform2fvARB
  if (s_deviceConfig.m_glUniform2fvARB)
  {
    s_deviceConfig.m_glUniform2fvARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3fvARB

void  glew::gl::glUniform3fvARB (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniform3fvARB
  if (s_deviceConfig.m_glUniform3fvARB)
  {
    s_deviceConfig.m_glUniform3fvARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4fvARB

void  glew::gl::glUniform4fvARB (GLint location, GLsizei count, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniform4fvARB
  if (s_deviceConfig.m_glUniform4fvARB)
  {
    s_deviceConfig.m_glUniform4fvARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1ivARB

void  glew::gl::glUniform1ivARB (GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_shader_objects - glUniform1ivARB
  if (s_deviceConfig.m_glUniform1ivARB)
  {
    s_deviceConfig.m_glUniform1ivARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2ivARB

void  glew::gl::glUniform2ivARB (GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_shader_objects - glUniform2ivARB
  if (s_deviceConfig.m_glUniform2ivARB)
  {
    s_deviceConfig.m_glUniform2ivARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3ivARB

void  glew::gl::glUniform3ivARB (GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_shader_objects - glUniform3ivARB
  if (s_deviceConfig.m_glUniform3ivARB)
  {
    s_deviceConfig.m_glUniform3ivARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4ivARB

void  glew::gl::glUniform4ivARB (GLint location, GLsizei count, const GLint * value)
{
  // GL_ARB_shader_objects - glUniform4ivARB
  if (s_deviceConfig.m_glUniform4ivARB)
  {
    s_deviceConfig.m_glUniform4ivARB (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix2fvARB

void  glew::gl::glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniformMatrix2fvARB
  if (s_deviceConfig.m_glUniformMatrix2fvARB)
  {
    s_deviceConfig.m_glUniformMatrix2fvARB (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix3fvARB

void  glew::gl::glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniformMatrix3fvARB
  if (s_deviceConfig.m_glUniformMatrix3fvARB)
  {
    s_deviceConfig.m_glUniformMatrix3fvARB (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformMatrix4fvARB

void  glew::gl::glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_ARB_shader_objects - glUniformMatrix4fvARB
  if (s_deviceConfig.m_glUniformMatrix4fvARB)
  {
    s_deviceConfig.m_glUniformMatrix4fvARB (location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectParameterfvARB

void  glew::gl::glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat * params)
{
  // GL_ARB_shader_objects - glGetObjectParameterfvARB
  if (s_deviceConfig.m_glGetObjectParameterfvARB)
  {
    s_deviceConfig.m_glGetObjectParameterfvARB (obj, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectParameterivARB

void  glew::gl::glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint * params)
{
  // GL_ARB_shader_objects - glGetObjectParameterivARB
  if (s_deviceConfig.m_glGetObjectParameterivARB)
  {
    s_deviceConfig.m_glGetObjectParameterivARB (obj, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInfoLogARB

void  glew::gl::glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog)
{
  // GL_ARB_shader_objects - glGetInfoLogARB
  if (s_deviceConfig.m_glGetInfoLogARB)
  {
    s_deviceConfig.m_glGetInfoLogARB (obj, maxLength, length, infoLog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetAttachedObjectsARB

void  glew::gl::glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj)
{
  // GL_ARB_shader_objects - glGetAttachedObjectsARB
  if (s_deviceConfig.m_glGetAttachedObjectsARB)
  {
    s_deviceConfig.m_glGetAttachedObjectsARB (containerObj, maxCount, count, obj);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformLocationARB

GLint glew::gl::glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB * name)
{
  // GL_ARB_shader_objects - glGetUniformLocationARB
  if (s_deviceConfig.m_glGetUniformLocationARB)
  {
    return s_deviceConfig.m_glGetUniformLocationARB (programObj, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveUniformARB

void  glew::gl::glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name)
{
  // GL_ARB_shader_objects - glGetActiveUniformARB
  if (s_deviceConfig.m_glGetActiveUniformARB)
  {
    s_deviceConfig.m_glGetActiveUniformARB (programObj, index, maxLength, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformfvARB

void  glew::gl::glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat * params)
{
  // GL_ARB_shader_objects - glGetUniformfvARB
  if (s_deviceConfig.m_glGetUniformfvARB)
  {
    s_deviceConfig.m_glGetUniformfvARB (programObj, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformivARB

void  glew::gl::glGetUniformivARB (GLhandleARB programObj, GLint location, GLint * params)
{
  // GL_ARB_shader_objects - glGetUniformivARB
  if (s_deviceConfig.m_glGetUniformivARB)
  {
    s_deviceConfig.m_glGetUniformivARB (programObj, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetShaderSourceARB

void  glew::gl::glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source)
{
  // GL_ARB_shader_objects - glGetShaderSourceARB
  if (s_deviceConfig.m_glGetShaderSourceARB)
  {
    s_deviceConfig.m_glGetShaderSourceARB (obj, maxLength, length, source);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedStringARB

void  glew::gl::glNamedStringARB (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string)
{
  // GL_ARB_shading_language_include - glNamedStringARB
  if (s_deviceConfig.m_glNamedStringARB)
  {
    s_deviceConfig.m_glNamedStringARB (type, namelen, name, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteNamedStringARB

void  glew::gl::glDeleteNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glDeleteNamedStringARB
  if (s_deviceConfig.m_glDeleteNamedStringARB)
  {
    s_deviceConfig.m_glDeleteNamedStringARB (namelen, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompileShaderIncludeARB

void  glew::gl::glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length)
{
  // GL_ARB_shading_language_include - glCompileShaderIncludeARB
  if (s_deviceConfig.m_glCompileShaderIncludeARB)
  {
    s_deviceConfig.m_glCompileShaderIncludeARB (shader, count, path, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsNamedStringARB

GLboolean glew::gl::glIsNamedStringARB (GLint namelen, const GLchar * name)
{
  // GL_ARB_shading_language_include - glIsNamedStringARB
  if (s_deviceConfig.m_glIsNamedStringARB)
  {
    return s_deviceConfig.m_glIsNamedStringARB (namelen, name);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedStringARB

void  glew::gl::glGetNamedStringARB (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string)
{
  // GL_ARB_shading_language_include - glGetNamedStringARB
  if (s_deviceConfig.m_glGetNamedStringARB)
  {
    s_deviceConfig.m_glGetNamedStringARB (namelen, name, bufSize, stringlen, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedStringivARB

void  glew::gl::glGetNamedStringivARB (GLint namelen, const GLchar * name, GLenum pname, GLint * params)
{
  // GL_ARB_shading_language_include - glGetNamedStringivARB
  if (s_deviceConfig.m_glGetNamedStringivARB)
  {
    s_deviceConfig.m_glGetNamedStringivARB (namelen, name, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferPageCommitmentARB

void  glew::gl::glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glBufferPageCommitmentARB
  if (s_deviceConfig.m_glBufferPageCommitmentARB)
  {
    s_deviceConfig.m_glBufferPageCommitmentARB (target, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferPageCommitmentEXT

void  glew::gl::glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentEXT
  if (s_deviceConfig.m_glNamedBufferPageCommitmentEXT)
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentEXT (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferPageCommitmentARB

void  glew::gl::glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
  // GL_ARB_sparse_buffer - glNamedBufferPageCommitmentARB
  if (s_deviceConfig.m_glNamedBufferPageCommitmentARB)
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentARB (buffer, offset, size, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexPageCommitmentARB

void  glew::gl::glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_ARB_sparse_texture - glTexPageCommitmentARB
  if (s_deviceConfig.m_glTexPageCommitmentARB)
  {
    s_deviceConfig.m_glTexPageCommitmentARB (target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferARB

void  glew::gl::glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_ARB_texture_buffer_object - glTexBufferARB
  if (s_deviceConfig.m_glTexBufferARB)
  {
    s_deviceConfig.m_glTexBufferARB (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage3DARB

void  glew::gl::glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexImage3DARB
  if (s_deviceConfig.m_glCompressedTexImage3DARB)
  {
    s_deviceConfig.m_glCompressedTexImage3DARB (target, level, internalformat, width, height, depth, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage2DARB

void  glew::gl::glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexImage2DARB
  if (s_deviceConfig.m_glCompressedTexImage2DARB)
  {
    s_deviceConfig.m_glCompressedTexImage2DARB (target, level, internalformat, width, height, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexImage1DARB

void  glew::gl::glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexImage1DARB
  if (s_deviceConfig.m_glCompressedTexImage1DARB)
  {
    s_deviceConfig.m_glCompressedTexImage1DARB (target, level, internalformat, width, border, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage3DARB

void  glew::gl::glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexSubImage3DARB
  if (s_deviceConfig.m_glCompressedTexSubImage3DARB)
  {
    s_deviceConfig.m_glCompressedTexSubImage3DARB (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage2DARB

void  glew::gl::glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexSubImage2DARB
  if (s_deviceConfig.m_glCompressedTexSubImage2DARB)
  {
    s_deviceConfig.m_glCompressedTexSubImage2DARB (target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTexSubImage1DARB

void  glew::gl::glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
  // GL_ARB_texture_compression - glCompressedTexSubImage1DARB
  if (s_deviceConfig.m_glCompressedTexSubImage1DARB)
  {
    s_deviceConfig.m_glCompressedTexSubImage1DARB (target, level, xoffset, width, format, imageSize, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedTexImageARB

void  glew::gl::glGetCompressedTexImageARB (GLenum target, GLint level, void * img)
{
  // GL_ARB_texture_compression - glGetCompressedTexImageARB
  if (s_deviceConfig.m_glGetCompressedTexImageARB)
  {
    s_deviceConfig.m_glGetCompressedTexImageARB (target, level, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadTransposeMatrixfARB

void  glew::gl::glLoadTransposeMatrixfARB (const GLfloat * m)
{
  // GL_ARB_transpose_matrix - glLoadTransposeMatrixfARB
  if (s_deviceConfig.m_glLoadTransposeMatrixfARB)
  {
    s_deviceConfig.m_glLoadTransposeMatrixfARB (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadTransposeMatrixdARB

void  glew::gl::glLoadTransposeMatrixdARB (const GLdouble * m)
{
  // GL_ARB_transpose_matrix - glLoadTransposeMatrixdARB
  if (s_deviceConfig.m_glLoadTransposeMatrixdARB)
  {
    s_deviceConfig.m_glLoadTransposeMatrixdARB (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultTransposeMatrixfARB

void  glew::gl::glMultTransposeMatrixfARB (const GLfloat * m)
{
  // GL_ARB_transpose_matrix - glMultTransposeMatrixfARB
  if (s_deviceConfig.m_glMultTransposeMatrixfARB)
  {
    s_deviceConfig.m_glMultTransposeMatrixfARB (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultTransposeMatrixdARB

void  glew::gl::glMultTransposeMatrixdARB (const GLdouble * m)
{
  // GL_ARB_transpose_matrix - glMultTransposeMatrixdARB
  if (s_deviceConfig.m_glMultTransposeMatrixdARB)
  {
    s_deviceConfig.m_glMultTransposeMatrixdARB (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightbvARB

void  glew::gl::glWeightbvARB (GLint size, const GLbyte * weights)
{
  // GL_ARB_vertex_blend - glWeightbvARB
  if (s_deviceConfig.m_glWeightbvARB)
  {
    s_deviceConfig.m_glWeightbvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightsvARB

void  glew::gl::glWeightsvARB (GLint size, const GLshort * weights)
{
  // GL_ARB_vertex_blend - glWeightsvARB
  if (s_deviceConfig.m_glWeightsvARB)
  {
    s_deviceConfig.m_glWeightsvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightivARB

void  glew::gl::glWeightivARB (GLint size, const GLint * weights)
{
  // GL_ARB_vertex_blend - glWeightivARB
  if (s_deviceConfig.m_glWeightivARB)
  {
    s_deviceConfig.m_glWeightivARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightfvARB

void  glew::gl::glWeightfvARB (GLint size, const GLfloat * weights)
{
  // GL_ARB_vertex_blend - glWeightfvARB
  if (s_deviceConfig.m_glWeightfvARB)
  {
    s_deviceConfig.m_glWeightfvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightdvARB

void  glew::gl::glWeightdvARB (GLint size, const GLdouble * weights)
{
  // GL_ARB_vertex_blend - glWeightdvARB
  if (s_deviceConfig.m_glWeightdvARB)
  {
    s_deviceConfig.m_glWeightdvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightubvARB

void  glew::gl::glWeightubvARB (GLint size, const GLubyte * weights)
{
  // GL_ARB_vertex_blend - glWeightubvARB
  if (s_deviceConfig.m_glWeightubvARB)
  {
    s_deviceConfig.m_glWeightubvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightusvARB

void  glew::gl::glWeightusvARB (GLint size, const GLushort * weights)
{
  // GL_ARB_vertex_blend - glWeightusvARB
  if (s_deviceConfig.m_glWeightusvARB)
  {
    s_deviceConfig.m_glWeightusvARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightuivARB

void  glew::gl::glWeightuivARB (GLint size, const GLuint * weights)
{
  // GL_ARB_vertex_blend - glWeightuivARB
  if (s_deviceConfig.m_glWeightuivARB)
  {
    s_deviceConfig.m_glWeightuivARB (size, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightPointerARB

void  glew::gl::glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_ARB_vertex_blend - glWeightPointerARB
  if (s_deviceConfig.m_glWeightPointerARB)
  {
    s_deviceConfig.m_glWeightPointerARB (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexBlendARB

void  glew::gl::glVertexBlendARB (GLint count)
{
  // GL_ARB_vertex_blend - glVertexBlendARB
  if (s_deviceConfig.m_glVertexBlendARB)
  {
    s_deviceConfig.m_glVertexBlendARB (count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferARB

void  glew::gl::glBindBufferARB (GLenum target, GLuint buffer)
{
  // GL_ARB_vertex_buffer_object - glBindBufferARB
  if (s_deviceConfig.m_glBindBufferARB)
  {
    s_deviceConfig.m_glBindBufferARB (target, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteBuffersARB

void  glew::gl::glDeleteBuffersARB (GLsizei n, const GLuint * buffers)
{
  // GL_ARB_vertex_buffer_object - glDeleteBuffersARB
  if (s_deviceConfig.m_glDeleteBuffersARB)
  {
    s_deviceConfig.m_glDeleteBuffersARB (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenBuffersARB

void  glew::gl::glGenBuffersARB (GLsizei n, GLuint * buffers)
{
  // GL_ARB_vertex_buffer_object - glGenBuffersARB
  if (s_deviceConfig.m_glGenBuffersARB)
  {
    s_deviceConfig.m_glGenBuffersARB (n, buffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsBufferARB

GLboolean glew::gl::glIsBufferARB (GLuint buffer)
{
  // GL_ARB_vertex_buffer_object - glIsBufferARB
  if (s_deviceConfig.m_glIsBufferARB)
  {
    return s_deviceConfig.m_glIsBufferARB (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferDataARB

void  glew::gl::glBufferDataARB (GLenum target, GLsizeiptrARB size, const void * data, GLenum usage)
{
  // GL_ARB_vertex_buffer_object - glBufferDataARB
  if (s_deviceConfig.m_glBufferDataARB)
  {
    s_deviceConfig.m_glBufferDataARB (target, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferSubDataARB

void  glew::gl::glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data)
{
  // GL_ARB_vertex_buffer_object - glBufferSubDataARB
  if (s_deviceConfig.m_glBufferSubDataARB)
  {
    s_deviceConfig.m_glBufferSubDataARB (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferSubDataARB

void  glew::gl::glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data)
{
  // GL_ARB_vertex_buffer_object - glGetBufferSubDataARB
  if (s_deviceConfig.m_glGetBufferSubDataARB)
  {
    s_deviceConfig.m_glGetBufferSubDataARB (target, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapBufferARB

void * glew::gl::glMapBufferARB (GLenum target, GLenum access)
{
  // GL_ARB_vertex_buffer_object - glMapBufferARB
  if (s_deviceConfig.m_glMapBufferARB)
  {
    return s_deviceConfig.m_glMapBufferARB (target, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapBufferARB

GLboolean glew::gl::glUnmapBufferARB (GLenum target)
{
  // GL_ARB_vertex_buffer_object - glUnmapBufferARB
  if (s_deviceConfig.m_glUnmapBufferARB)
  {
    return s_deviceConfig.m_glUnmapBufferARB (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferParameterivARB

void  glew::gl::glGetBufferParameterivARB (GLenum target, GLenum pname, GLint * params)
{
  // GL_ARB_vertex_buffer_object - glGetBufferParameterivARB
  if (s_deviceConfig.m_glGetBufferParameterivARB)
  {
    s_deviceConfig.m_glGetBufferParameterivARB (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferPointervARB

void  glew::gl::glGetBufferPointervARB (GLenum target, GLenum pname, void ** params)
{
  // GL_ARB_vertex_buffer_object - glGetBufferPointervARB
  if (s_deviceConfig.m_glGetBufferPointervARB)
  {
    s_deviceConfig.m_glGetBufferPointervARB (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1dARB

void  glew::gl::glVertexAttrib1dARB (GLuint index, GLdouble x)
{
  // GL_ARB_vertex_program - glVertexAttrib1dARB
  if (s_deviceConfig.m_glVertexAttrib1dARB)
  {
    s_deviceConfig.m_glVertexAttrib1dARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1dvARB

void  glew::gl::glVertexAttrib1dvARB (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_program - glVertexAttrib1dvARB
  if (s_deviceConfig.m_glVertexAttrib1dvARB)
  {
    s_deviceConfig.m_glVertexAttrib1dvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1fARB

void  glew::gl::glVertexAttrib1fARB (GLuint index, GLfloat x)
{
  // GL_ARB_vertex_program - glVertexAttrib1fARB
  if (s_deviceConfig.m_glVertexAttrib1fARB)
  {
    s_deviceConfig.m_glVertexAttrib1fARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1fvARB

void  glew::gl::glVertexAttrib1fvARB (GLuint index, const GLfloat * v)
{
  // GL_ARB_vertex_program - glVertexAttrib1fvARB
  if (s_deviceConfig.m_glVertexAttrib1fvARB)
  {
    s_deviceConfig.m_glVertexAttrib1fvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1sARB

void  glew::gl::glVertexAttrib1sARB (GLuint index, GLshort x)
{
  // GL_ARB_vertex_program - glVertexAttrib1sARB
  if (s_deviceConfig.m_glVertexAttrib1sARB)
  {
    s_deviceConfig.m_glVertexAttrib1sARB (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1svARB

void  glew::gl::glVertexAttrib1svARB (GLuint index, const GLshort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib1svARB
  if (s_deviceConfig.m_glVertexAttrib1svARB)
  {
    s_deviceConfig.m_glVertexAttrib1svARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2dARB

void  glew::gl::glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y)
{
  // GL_ARB_vertex_program - glVertexAttrib2dARB
  if (s_deviceConfig.m_glVertexAttrib2dARB)
  {
    s_deviceConfig.m_glVertexAttrib2dARB (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2dvARB

void  glew::gl::glVertexAttrib2dvARB (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_program - glVertexAttrib2dvARB
  if (s_deviceConfig.m_glVertexAttrib2dvARB)
  {
    s_deviceConfig.m_glVertexAttrib2dvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2fARB

void  glew::gl::glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y)
{
  // GL_ARB_vertex_program - glVertexAttrib2fARB
  if (s_deviceConfig.m_glVertexAttrib2fARB)
  {
    s_deviceConfig.m_glVertexAttrib2fARB (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2fvARB

void  glew::gl::glVertexAttrib2fvARB (GLuint index, const GLfloat * v)
{
  // GL_ARB_vertex_program - glVertexAttrib2fvARB
  if (s_deviceConfig.m_glVertexAttrib2fvARB)
  {
    s_deviceConfig.m_glVertexAttrib2fvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2sARB

void  glew::gl::glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y)
{
  // GL_ARB_vertex_program - glVertexAttrib2sARB
  if (s_deviceConfig.m_glVertexAttrib2sARB)
  {
    s_deviceConfig.m_glVertexAttrib2sARB (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2svARB

void  glew::gl::glVertexAttrib2svARB (GLuint index, const GLshort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib2svARB
  if (s_deviceConfig.m_glVertexAttrib2svARB)
  {
    s_deviceConfig.m_glVertexAttrib2svARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3dARB

void  glew::gl::glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_vertex_program - glVertexAttrib3dARB
  if (s_deviceConfig.m_glVertexAttrib3dARB)
  {
    s_deviceConfig.m_glVertexAttrib3dARB (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3dvARB

void  glew::gl::glVertexAttrib3dvARB (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_program - glVertexAttrib3dvARB
  if (s_deviceConfig.m_glVertexAttrib3dvARB)
  {
    s_deviceConfig.m_glVertexAttrib3dvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3fARB

void  glew::gl::glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_ARB_vertex_program - glVertexAttrib3fARB
  if (s_deviceConfig.m_glVertexAttrib3fARB)
  {
    s_deviceConfig.m_glVertexAttrib3fARB (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3fvARB

void  glew::gl::glVertexAttrib3fvARB (GLuint index, const GLfloat * v)
{
  // GL_ARB_vertex_program - glVertexAttrib3fvARB
  if (s_deviceConfig.m_glVertexAttrib3fvARB)
  {
    s_deviceConfig.m_glVertexAttrib3fvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3sARB

void  glew::gl::glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z)
{
  // GL_ARB_vertex_program - glVertexAttrib3sARB
  if (s_deviceConfig.m_glVertexAttrib3sARB)
  {
    s_deviceConfig.m_glVertexAttrib3sARB (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3svARB

void  glew::gl::glVertexAttrib3svARB (GLuint index, const GLshort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib3svARB
  if (s_deviceConfig.m_glVertexAttrib3svARB)
  {
    s_deviceConfig.m_glVertexAttrib3svARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NbvARB

void  glew::gl::glVertexAttrib4NbvARB (GLuint index, const GLbyte * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NbvARB
  if (s_deviceConfig.m_glVertexAttrib4NbvARB)
  {
    s_deviceConfig.m_glVertexAttrib4NbvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NivARB

void  glew::gl::glVertexAttrib4NivARB (GLuint index, const GLint * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NivARB
  if (s_deviceConfig.m_glVertexAttrib4NivARB)
  {
    s_deviceConfig.m_glVertexAttrib4NivARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NsvARB

void  glew::gl::glVertexAttrib4NsvARB (GLuint index, const GLshort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NsvARB
  if (s_deviceConfig.m_glVertexAttrib4NsvARB)
  {
    s_deviceConfig.m_glVertexAttrib4NsvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NubARB

void  glew::gl::glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  // GL_ARB_vertex_program - glVertexAttrib4NubARB
  if (s_deviceConfig.m_glVertexAttrib4NubARB)
  {
    s_deviceConfig.m_glVertexAttrib4NubARB (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NubvARB

void  glew::gl::glVertexAttrib4NubvARB (GLuint index, const GLubyte * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NubvARB
  if (s_deviceConfig.m_glVertexAttrib4NubvARB)
  {
    s_deviceConfig.m_glVertexAttrib4NubvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NuivARB

void  glew::gl::glVertexAttrib4NuivARB (GLuint index, const GLuint * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NuivARB
  if (s_deviceConfig.m_glVertexAttrib4NuivARB)
  {
    s_deviceConfig.m_glVertexAttrib4NuivARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4NusvARB

void  glew::gl::glVertexAttrib4NusvARB (GLuint index, const GLushort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4NusvARB
  if (s_deviceConfig.m_glVertexAttrib4NusvARB)
  {
    s_deviceConfig.m_glVertexAttrib4NusvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4bvARB

void  glew::gl::glVertexAttrib4bvARB (GLuint index, const GLbyte * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4bvARB
  if (s_deviceConfig.m_glVertexAttrib4bvARB)
  {
    s_deviceConfig.m_glVertexAttrib4bvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4dARB

void  glew::gl::glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ARB_vertex_program - glVertexAttrib4dARB
  if (s_deviceConfig.m_glVertexAttrib4dARB)
  {
    s_deviceConfig.m_glVertexAttrib4dARB (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4dvARB

void  glew::gl::glVertexAttrib4dvARB (GLuint index, const GLdouble * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4dvARB
  if (s_deviceConfig.m_glVertexAttrib4dvARB)
  {
    s_deviceConfig.m_glVertexAttrib4dvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4fARB

void  glew::gl::glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ARB_vertex_program - glVertexAttrib4fARB
  if (s_deviceConfig.m_glVertexAttrib4fARB)
  {
    s_deviceConfig.m_glVertexAttrib4fARB (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4fvARB

void  glew::gl::glVertexAttrib4fvARB (GLuint index, const GLfloat * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4fvARB
  if (s_deviceConfig.m_glVertexAttrib4fvARB)
  {
    s_deviceConfig.m_glVertexAttrib4fvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4ivARB

void  glew::gl::glVertexAttrib4ivARB (GLuint index, const GLint * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4ivARB
  if (s_deviceConfig.m_glVertexAttrib4ivARB)
  {
    s_deviceConfig.m_glVertexAttrib4ivARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4sARB

void  glew::gl::glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  // GL_ARB_vertex_program - glVertexAttrib4sARB
  if (s_deviceConfig.m_glVertexAttrib4sARB)
  {
    s_deviceConfig.m_glVertexAttrib4sARB (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4svARB

void  glew::gl::glVertexAttrib4svARB (GLuint index, const GLshort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4svARB
  if (s_deviceConfig.m_glVertexAttrib4svARB)
  {
    s_deviceConfig.m_glVertexAttrib4svARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4ubvARB

void  glew::gl::glVertexAttrib4ubvARB (GLuint index, const GLubyte * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4ubvARB
  if (s_deviceConfig.m_glVertexAttrib4ubvARB)
  {
    s_deviceConfig.m_glVertexAttrib4ubvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4uivARB

void  glew::gl::glVertexAttrib4uivARB (GLuint index, const GLuint * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4uivARB
  if (s_deviceConfig.m_glVertexAttrib4uivARB)
  {
    s_deviceConfig.m_glVertexAttrib4uivARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4usvARB

void  glew::gl::glVertexAttrib4usvARB (GLuint index, const GLushort * v)
{
  // GL_ARB_vertex_program - glVertexAttrib4usvARB
  if (s_deviceConfig.m_glVertexAttrib4usvARB)
  {
    s_deviceConfig.m_glVertexAttrib4usvARB (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribPointerARB

void  glew::gl::glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer)
{
  // GL_ARB_vertex_program - glVertexAttribPointerARB
  if (s_deviceConfig.m_glVertexAttribPointerARB)
  {
    s_deviceConfig.m_glVertexAttribPointerARB (index, size, type, normalized, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexAttribArrayARB

void  glew::gl::glEnableVertexAttribArrayARB (GLuint index)
{
  // GL_ARB_vertex_program - glEnableVertexAttribArrayARB
  if (s_deviceConfig.m_glEnableVertexAttribArrayARB)
  {
    s_deviceConfig.m_glEnableVertexAttribArrayARB (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexAttribArrayARB

void  glew::gl::glDisableVertexAttribArrayARB (GLuint index)
{
  // GL_ARB_vertex_program - glDisableVertexAttribArrayARB
  if (s_deviceConfig.m_glDisableVertexAttribArrayARB)
  {
    s_deviceConfig.m_glDisableVertexAttribArrayARB (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribdvARB

void  glew::gl::glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_ARB_vertex_program - glGetVertexAttribdvARB
  if (s_deviceConfig.m_glGetVertexAttribdvARB)
  {
    s_deviceConfig.m_glGetVertexAttribdvARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribfvARB

void  glew::gl::glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_ARB_vertex_program - glGetVertexAttribfvARB
  if (s_deviceConfig.m_glGetVertexAttribfvARB)
  {
    s_deviceConfig.m_glGetVertexAttribfvARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribivARB

void  glew::gl::glGetVertexAttribivARB (GLuint index, GLenum pname, GLint * params)
{
  // GL_ARB_vertex_program - glGetVertexAttribivARB
  if (s_deviceConfig.m_glGetVertexAttribivARB)
  {
    s_deviceConfig.m_glGetVertexAttribivARB (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribPointervARB

void  glew::gl::glGetVertexAttribPointervARB (GLuint index, GLenum pname, void ** pointer)
{
  // GL_ARB_vertex_program - glGetVertexAttribPointervARB
  if (s_deviceConfig.m_glGetVertexAttribPointervARB)
  {
    s_deviceConfig.m_glGetVertexAttribPointervARB (index, pname, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindAttribLocationARB

void  glew::gl::glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB * name)
{
  // GL_ARB_vertex_shader - glBindAttribLocationARB
  if (s_deviceConfig.m_glBindAttribLocationARB)
  {
    s_deviceConfig.m_glBindAttribLocationARB (programObj, index, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveAttribARB

void  glew::gl::glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name)
{
  // GL_ARB_vertex_shader - glGetActiveAttribARB
  if (s_deviceConfig.m_glGetActiveAttribARB)
  {
    s_deviceConfig.m_glGetActiveAttribARB (programObj, index, maxLength, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetAttribLocationARB

GLint glew::gl::glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB * name)
{
  // GL_ARB_vertex_shader - glGetAttribLocationARB
  if (s_deviceConfig.m_glGetAttribLocationARB)
  {
    return s_deviceConfig.m_glGetAttribLocationARB (programObj, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2dARB

void  glew::gl::glWindowPos2dARB (GLdouble x, GLdouble y)
{
  // GL_ARB_window_pos - glWindowPos2dARB
  if (s_deviceConfig.m_glWindowPos2dARB)
  {
    s_deviceConfig.m_glWindowPos2dARB (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2dvARB

void  glew::gl::glWindowPos2dvARB (const GLdouble * v)
{
  // GL_ARB_window_pos - glWindowPos2dvARB
  if (s_deviceConfig.m_glWindowPos2dvARB)
  {
    s_deviceConfig.m_glWindowPos2dvARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2fARB

void  glew::gl::glWindowPos2fARB (GLfloat x, GLfloat y)
{
  // GL_ARB_window_pos - glWindowPos2fARB
  if (s_deviceConfig.m_glWindowPos2fARB)
  {
    s_deviceConfig.m_glWindowPos2fARB (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2fvARB

void  glew::gl::glWindowPos2fvARB (const GLfloat * v)
{
  // GL_ARB_window_pos - glWindowPos2fvARB
  if (s_deviceConfig.m_glWindowPos2fvARB)
  {
    s_deviceConfig.m_glWindowPos2fvARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2iARB

void  glew::gl::glWindowPos2iARB (GLint x, GLint y)
{
  // GL_ARB_window_pos - glWindowPos2iARB
  if (s_deviceConfig.m_glWindowPos2iARB)
  {
    s_deviceConfig.m_glWindowPos2iARB (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2ivARB

void  glew::gl::glWindowPos2ivARB (const GLint * v)
{
  // GL_ARB_window_pos - glWindowPos2ivARB
  if (s_deviceConfig.m_glWindowPos2ivARB)
  {
    s_deviceConfig.m_glWindowPos2ivARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2sARB

void  glew::gl::glWindowPos2sARB (GLshort x, GLshort y)
{
  // GL_ARB_window_pos - glWindowPos2sARB
  if (s_deviceConfig.m_glWindowPos2sARB)
  {
    s_deviceConfig.m_glWindowPos2sARB (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2svARB

void  glew::gl::glWindowPos2svARB (const GLshort * v)
{
  // GL_ARB_window_pos - glWindowPos2svARB
  if (s_deviceConfig.m_glWindowPos2svARB)
  {
    s_deviceConfig.m_glWindowPos2svARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3dARB

void  glew::gl::glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ARB_window_pos - glWindowPos3dARB
  if (s_deviceConfig.m_glWindowPos3dARB)
  {
    s_deviceConfig.m_glWindowPos3dARB (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3dvARB

void  glew::gl::glWindowPos3dvARB (const GLdouble * v)
{
  // GL_ARB_window_pos - glWindowPos3dvARB
  if (s_deviceConfig.m_glWindowPos3dvARB)
  {
    s_deviceConfig.m_glWindowPos3dvARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3fARB

void  glew::gl::glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z)
{
  // GL_ARB_window_pos - glWindowPos3fARB
  if (s_deviceConfig.m_glWindowPos3fARB)
  {
    s_deviceConfig.m_glWindowPos3fARB (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3fvARB

void  glew::gl::glWindowPos3fvARB (const GLfloat * v)
{
  // GL_ARB_window_pos - glWindowPos3fvARB
  if (s_deviceConfig.m_glWindowPos3fvARB)
  {
    s_deviceConfig.m_glWindowPos3fvARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3iARB

void  glew::gl::glWindowPos3iARB (GLint x, GLint y, GLint z)
{
  // GL_ARB_window_pos - glWindowPos3iARB
  if (s_deviceConfig.m_glWindowPos3iARB)
  {
    s_deviceConfig.m_glWindowPos3iARB (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3ivARB

void  glew::gl::glWindowPos3ivARB (const GLint * v)
{
  // GL_ARB_window_pos - glWindowPos3ivARB
  if (s_deviceConfig.m_glWindowPos3ivARB)
  {
    s_deviceConfig.m_glWindowPos3ivARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3sARB

void  glew::gl::glWindowPos3sARB (GLshort x, GLshort y, GLshort z)
{
  // GL_ARB_window_pos - glWindowPos3sARB
  if (s_deviceConfig.m_glWindowPos3sARB)
  {
    s_deviceConfig.m_glWindowPos3sARB (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3svARB

void  glew::gl::glWindowPos3svARB (const GLshort * v)
{
  // GL_ARB_window_pos - glWindowPos3svARB
  if (s_deviceConfig.m_glWindowPos3svARB)
  {
    s_deviceConfig.m_glWindowPos3svARB (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawBuffersATI

void  glew::gl::glDrawBuffersATI (GLsizei n, const GLenum * bufs)
{
  // GL_ATI_draw_buffers - glDrawBuffersATI
  if (s_deviceConfig.m_glDrawBuffersATI)
  {
    s_deviceConfig.m_glDrawBuffersATI (n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glElementPointerATI

void  glew::gl::glElementPointerATI (GLenum type, const void * pointer)
{
  // GL_ATI_element_array - glElementPointerATI
  if (s_deviceConfig.m_glElementPointerATI)
  {
    s_deviceConfig.m_glElementPointerATI (type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementArrayATI

void  glew::gl::glDrawElementArrayATI (GLenum mode, GLsizei count)
{
  // GL_ATI_element_array - glDrawElementArrayATI
  if (s_deviceConfig.m_glDrawElementArrayATI)
  {
    s_deviceConfig.m_glDrawElementArrayATI (mode, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementArrayATI

void  glew::gl::glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  // GL_ATI_element_array - glDrawRangeElementArrayATI
  if (s_deviceConfig.m_glDrawRangeElementArrayATI)
  {
    s_deviceConfig.m_glDrawRangeElementArrayATI (mode, start, end, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBumpParameterivATI

void  glew::gl::glTexBumpParameterivATI (GLenum pname, const GLint * param)
{
  // GL_ATI_envmap_bumpmap - glTexBumpParameterivATI
  if (s_deviceConfig.m_glTexBumpParameterivATI)
  {
    s_deviceConfig.m_glTexBumpParameterivATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBumpParameterfvATI

void  glew::gl::glTexBumpParameterfvATI (GLenum pname, const GLfloat * param)
{
  // GL_ATI_envmap_bumpmap - glTexBumpParameterfvATI
  if (s_deviceConfig.m_glTexBumpParameterfvATI)
  {
    s_deviceConfig.m_glTexBumpParameterfvATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexBumpParameterivATI

void  glew::gl::glGetTexBumpParameterivATI (GLenum pname, GLint * param)
{
  // GL_ATI_envmap_bumpmap - glGetTexBumpParameterivATI
  if (s_deviceConfig.m_glGetTexBumpParameterivATI)
  {
    s_deviceConfig.m_glGetTexBumpParameterivATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexBumpParameterfvATI

void  glew::gl::glGetTexBumpParameterfvATI (GLenum pname, GLfloat * param)
{
  // GL_ATI_envmap_bumpmap - glGetTexBumpParameterfvATI
  if (s_deviceConfig.m_glGetTexBumpParameterfvATI)
  {
    s_deviceConfig.m_glGetTexBumpParameterfvATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFragmentShadersATI

GLuint glew::gl::glGenFragmentShadersATI (GLuint range)
{
  // GL_ATI_fragment_shader - glGenFragmentShadersATI
  if (s_deviceConfig.m_glGenFragmentShadersATI)
  {
    return s_deviceConfig.m_glGenFragmentShadersATI (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFragmentShaderATI

void  glew::gl::glBindFragmentShaderATI (GLuint id)
{
  // GL_ATI_fragment_shader - glBindFragmentShaderATI
  if (s_deviceConfig.m_glBindFragmentShaderATI)
  {
    s_deviceConfig.m_glBindFragmentShaderATI (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFragmentShaderATI

void  glew::gl::glDeleteFragmentShaderATI (GLuint id)
{
  // GL_ATI_fragment_shader - glDeleteFragmentShaderATI
  if (s_deviceConfig.m_glDeleteFragmentShaderATI)
  {
    s_deviceConfig.m_glDeleteFragmentShaderATI (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginFragmentShaderATI

void  glew::gl::glBeginFragmentShaderATI ()
{
  // GL_ATI_fragment_shader - glBeginFragmentShaderATI
  if (s_deviceConfig.m_glBeginFragmentShaderATI)
  {
    s_deviceConfig.m_glBeginFragmentShaderATI ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndFragmentShaderATI

void  glew::gl::glEndFragmentShaderATI ()
{
  // GL_ATI_fragment_shader - glEndFragmentShaderATI
  if (s_deviceConfig.m_glEndFragmentShaderATI)
  {
    s_deviceConfig.m_glEndFragmentShaderATI ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPassTexCoordATI

void  glew::gl::glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle)
{
  // GL_ATI_fragment_shader - glPassTexCoordATI
  if (s_deviceConfig.m_glPassTexCoordATI)
  {
    s_deviceConfig.m_glPassTexCoordATI (dst, coord, swizzle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMapATI

void  glew::gl::glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle)
{
  // GL_ATI_fragment_shader - glSampleMapATI
  if (s_deviceConfig.m_glSampleMapATI)
  {
    s_deviceConfig.m_glSampleMapATI (dst, interp, swizzle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorFragmentOp1ATI

void  glew::gl::glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  // GL_ATI_fragment_shader - glColorFragmentOp1ATI
  if (s_deviceConfig.m_glColorFragmentOp1ATI)
  {
    s_deviceConfig.m_glColorFragmentOp1ATI (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorFragmentOp2ATI

void  glew::gl::glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  // GL_ATI_fragment_shader - glColorFragmentOp2ATI
  if (s_deviceConfig.m_glColorFragmentOp2ATI)
  {
    s_deviceConfig.m_glColorFragmentOp2ATI (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorFragmentOp3ATI

void  glew::gl::glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  // GL_ATI_fragment_shader - glColorFragmentOp3ATI
  if (s_deviceConfig.m_glColorFragmentOp3ATI)
  {
    s_deviceConfig.m_glColorFragmentOp3ATI (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAlphaFragmentOp1ATI

void  glew::gl::glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  // GL_ATI_fragment_shader - glAlphaFragmentOp1ATI
  if (s_deviceConfig.m_glAlphaFragmentOp1ATI)
  {
    s_deviceConfig.m_glAlphaFragmentOp1ATI (op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAlphaFragmentOp2ATI

void  glew::gl::glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  // GL_ATI_fragment_shader - glAlphaFragmentOp2ATI
  if (s_deviceConfig.m_glAlphaFragmentOp2ATI)
  {
    s_deviceConfig.m_glAlphaFragmentOp2ATI (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAlphaFragmentOp3ATI

void  glew::gl::glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  // GL_ATI_fragment_shader - glAlphaFragmentOp3ATI
  if (s_deviceConfig.m_glAlphaFragmentOp3ATI)
  {
    s_deviceConfig.m_glAlphaFragmentOp3ATI (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetFragmentShaderConstantATI

void  glew::gl::glSetFragmentShaderConstantATI (GLuint dst, const GLfloat * value)
{
  // GL_ATI_fragment_shader - glSetFragmentShaderConstantATI
  if (s_deviceConfig.m_glSetFragmentShaderConstantATI)
  {
    s_deviceConfig.m_glSetFragmentShaderConstantATI (dst, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapObjectBufferATI

void * glew::gl::glMapObjectBufferATI (GLuint buffer)
{
  // GL_ATI_map_object_buffer - glMapObjectBufferATI
  if (s_deviceConfig.m_glMapObjectBufferATI)
  {
    return s_deviceConfig.m_glMapObjectBufferATI (buffer);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapObjectBufferATI

void  glew::gl::glUnmapObjectBufferATI (GLuint buffer)
{
  // GL_ATI_map_object_buffer - glUnmapObjectBufferATI
  if (s_deviceConfig.m_glUnmapObjectBufferATI)
  {
    s_deviceConfig.m_glUnmapObjectBufferATI (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPNTrianglesiATI

void  glew::gl::glPNTrianglesiATI (GLenum pname, GLint param)
{
  // GL_ATI_pn_triangles - glPNTrianglesiATI
  if (s_deviceConfig.m_glPNTrianglesiATI)
  {
    s_deviceConfig.m_glPNTrianglesiATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPNTrianglesfATI

void  glew::gl::glPNTrianglesfATI (GLenum pname, GLfloat param)
{
  // GL_ATI_pn_triangles - glPNTrianglesfATI
  if (s_deviceConfig.m_glPNTrianglesfATI)
  {
    s_deviceConfig.m_glPNTrianglesfATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilOpSeparateATI

void  glew::gl::glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  // GL_ATI_separate_stencil - glStencilOpSeparateATI
  if (s_deviceConfig.m_glStencilOpSeparateATI)
  {
    s_deviceConfig.m_glStencilOpSeparateATI (face, sfail, dpfail, dppass);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFuncSeparateATI

void  glew::gl::glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  // GL_ATI_separate_stencil - glStencilFuncSeparateATI
  if (s_deviceConfig.m_glStencilFuncSeparateATI)
  {
    s_deviceConfig.m_glStencilFuncSeparateATI (frontfunc, backfunc, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNewObjectBufferATI

GLuint glew::gl::glNewObjectBufferATI (GLsizei size, const void * pointer, GLenum usage)
{
  // GL_ATI_vertex_array_object - glNewObjectBufferATI
  if (s_deviceConfig.m_glNewObjectBufferATI)
  {
    return s_deviceConfig.m_glNewObjectBufferATI (size, pointer, usage);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsObjectBufferATI

GLboolean glew::gl::glIsObjectBufferATI (GLuint buffer)
{
  // GL_ATI_vertex_array_object - glIsObjectBufferATI
  if (s_deviceConfig.m_glIsObjectBufferATI)
  {
    return s_deviceConfig.m_glIsObjectBufferATI (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUpdateObjectBufferATI

void  glew::gl::glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve)
{
  // GL_ATI_vertex_array_object - glUpdateObjectBufferATI
  if (s_deviceConfig.m_glUpdateObjectBufferATI)
  {
    s_deviceConfig.m_glUpdateObjectBufferATI (buffer, offset, size, pointer, preserve);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectBufferfvATI

void  glew::gl::glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat * params)
{
  // GL_ATI_vertex_array_object - glGetObjectBufferfvATI
  if (s_deviceConfig.m_glGetObjectBufferfvATI)
  {
    s_deviceConfig.m_glGetObjectBufferfvATI (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectBufferivATI

void  glew::gl::glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint * params)
{
  // GL_ATI_vertex_array_object - glGetObjectBufferivATI
  if (s_deviceConfig.m_glGetObjectBufferivATI)
  {
    s_deviceConfig.m_glGetObjectBufferivATI (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFreeObjectBufferATI

void  glew::gl::glFreeObjectBufferATI (GLuint buffer)
{
  // GL_ATI_vertex_array_object - glFreeObjectBufferATI
  if (s_deviceConfig.m_glFreeObjectBufferATI)
  {
    s_deviceConfig.m_glFreeObjectBufferATI (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glArrayObjectATI

void  glew::gl::glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  // GL_ATI_vertex_array_object - glArrayObjectATI
  if (s_deviceConfig.m_glArrayObjectATI)
  {
    s_deviceConfig.m_glArrayObjectATI (array, size, type, stride, buffer, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetArrayObjectfvATI

void  glew::gl::glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat * params)
{
  // GL_ATI_vertex_array_object - glGetArrayObjectfvATI
  if (s_deviceConfig.m_glGetArrayObjectfvATI)
  {
    s_deviceConfig.m_glGetArrayObjectfvATI (array, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetArrayObjectivATI

void  glew::gl::glGetArrayObjectivATI (GLenum array, GLenum pname, GLint * params)
{
  // GL_ATI_vertex_array_object - glGetArrayObjectivATI
  if (s_deviceConfig.m_glGetArrayObjectivATI)
  {
    s_deviceConfig.m_glGetArrayObjectivATI (array, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantArrayObjectATI

void  glew::gl::glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  // GL_ATI_vertex_array_object - glVariantArrayObjectATI
  if (s_deviceConfig.m_glVariantArrayObjectATI)
  {
    s_deviceConfig.m_glVariantArrayObjectATI (id, type, stride, buffer, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantArrayObjectfvATI

void  glew::gl::glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat * params)
{
  // GL_ATI_vertex_array_object - glGetVariantArrayObjectfvATI
  if (s_deviceConfig.m_glGetVariantArrayObjectfvATI)
  {
    s_deviceConfig.m_glGetVariantArrayObjectfvATI (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantArrayObjectivATI

void  glew::gl::glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint * params)
{
  // GL_ATI_vertex_array_object - glGetVariantArrayObjectivATI
  if (s_deviceConfig.m_glGetVariantArrayObjectivATI)
  {
    s_deviceConfig.m_glGetVariantArrayObjectivATI (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribArrayObjectATI

void  glew::gl::glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  // GL_ATI_vertex_attrib_array_object - glVertexAttribArrayObjectATI
  if (s_deviceConfig.m_glVertexAttribArrayObjectATI)
  {
    s_deviceConfig.m_glVertexAttribArrayObjectATI (index, size, type, normalized, stride, buffer, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribArrayObjectfvATI

void  glew::gl::glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_ATI_vertex_attrib_array_object - glGetVertexAttribArrayObjectfvATI
  if (s_deviceConfig.m_glGetVertexAttribArrayObjectfvATI)
  {
    s_deviceConfig.m_glGetVertexAttribArrayObjectfvATI (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribArrayObjectivATI

void  glew::gl::glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint * params)
{
  // GL_ATI_vertex_attrib_array_object - glGetVertexAttribArrayObjectivATI
  if (s_deviceConfig.m_glGetVertexAttribArrayObjectivATI)
  {
    s_deviceConfig.m_glGetVertexAttribArrayObjectivATI (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1sATI

void  glew::gl::glVertexStream1sATI (GLenum stream, GLshort x)
{
  // GL_ATI_vertex_streams - glVertexStream1sATI
  if (s_deviceConfig.m_glVertexStream1sATI)
  {
    s_deviceConfig.m_glVertexStream1sATI (stream, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1svATI

void  glew::gl::glVertexStream1svATI (GLenum stream, const GLshort * coords)
{
  // GL_ATI_vertex_streams - glVertexStream1svATI
  if (s_deviceConfig.m_glVertexStream1svATI)
  {
    s_deviceConfig.m_glVertexStream1svATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1iATI

void  glew::gl::glVertexStream1iATI (GLenum stream, GLint x)
{
  // GL_ATI_vertex_streams - glVertexStream1iATI
  if (s_deviceConfig.m_glVertexStream1iATI)
  {
    s_deviceConfig.m_glVertexStream1iATI (stream, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1ivATI

void  glew::gl::glVertexStream1ivATI (GLenum stream, const GLint * coords)
{
  // GL_ATI_vertex_streams - glVertexStream1ivATI
  if (s_deviceConfig.m_glVertexStream1ivATI)
  {
    s_deviceConfig.m_glVertexStream1ivATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1fATI

void  glew::gl::glVertexStream1fATI (GLenum stream, GLfloat x)
{
  // GL_ATI_vertex_streams - glVertexStream1fATI
  if (s_deviceConfig.m_glVertexStream1fATI)
  {
    s_deviceConfig.m_glVertexStream1fATI (stream, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1fvATI

void  glew::gl::glVertexStream1fvATI (GLenum stream, const GLfloat * coords)
{
  // GL_ATI_vertex_streams - glVertexStream1fvATI
  if (s_deviceConfig.m_glVertexStream1fvATI)
  {
    s_deviceConfig.m_glVertexStream1fvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1dATI

void  glew::gl::glVertexStream1dATI (GLenum stream, GLdouble x)
{
  // GL_ATI_vertex_streams - glVertexStream1dATI
  if (s_deviceConfig.m_glVertexStream1dATI)
  {
    s_deviceConfig.m_glVertexStream1dATI (stream, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream1dvATI

void  glew::gl::glVertexStream1dvATI (GLenum stream, const GLdouble * coords)
{
  // GL_ATI_vertex_streams - glVertexStream1dvATI
  if (s_deviceConfig.m_glVertexStream1dvATI)
  {
    s_deviceConfig.m_glVertexStream1dvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2sATI

void  glew::gl::glVertexStream2sATI (GLenum stream, GLshort x, GLshort y)
{
  // GL_ATI_vertex_streams - glVertexStream2sATI
  if (s_deviceConfig.m_glVertexStream2sATI)
  {
    s_deviceConfig.m_glVertexStream2sATI (stream, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2svATI

void  glew::gl::glVertexStream2svATI (GLenum stream, const GLshort * coords)
{
  // GL_ATI_vertex_streams - glVertexStream2svATI
  if (s_deviceConfig.m_glVertexStream2svATI)
  {
    s_deviceConfig.m_glVertexStream2svATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2iATI

void  glew::gl::glVertexStream2iATI (GLenum stream, GLint x, GLint y)
{
  // GL_ATI_vertex_streams - glVertexStream2iATI
  if (s_deviceConfig.m_glVertexStream2iATI)
  {
    s_deviceConfig.m_glVertexStream2iATI (stream, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2ivATI

void  glew::gl::glVertexStream2ivATI (GLenum stream, const GLint * coords)
{
  // GL_ATI_vertex_streams - glVertexStream2ivATI
  if (s_deviceConfig.m_glVertexStream2ivATI)
  {
    s_deviceConfig.m_glVertexStream2ivATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2fATI

void  glew::gl::glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y)
{
  // GL_ATI_vertex_streams - glVertexStream2fATI
  if (s_deviceConfig.m_glVertexStream2fATI)
  {
    s_deviceConfig.m_glVertexStream2fATI (stream, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2fvATI

void  glew::gl::glVertexStream2fvATI (GLenum stream, const GLfloat * coords)
{
  // GL_ATI_vertex_streams - glVertexStream2fvATI
  if (s_deviceConfig.m_glVertexStream2fvATI)
  {
    s_deviceConfig.m_glVertexStream2fvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2dATI

void  glew::gl::glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y)
{
  // GL_ATI_vertex_streams - glVertexStream2dATI
  if (s_deviceConfig.m_glVertexStream2dATI)
  {
    s_deviceConfig.m_glVertexStream2dATI (stream, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream2dvATI

void  glew::gl::glVertexStream2dvATI (GLenum stream, const GLdouble * coords)
{
  // GL_ATI_vertex_streams - glVertexStream2dvATI
  if (s_deviceConfig.m_glVertexStream2dvATI)
  {
    s_deviceConfig.m_glVertexStream2dvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3sATI

void  glew::gl::glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z)
{
  // GL_ATI_vertex_streams - glVertexStream3sATI
  if (s_deviceConfig.m_glVertexStream3sATI)
  {
    s_deviceConfig.m_glVertexStream3sATI (stream, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3svATI

void  glew::gl::glVertexStream3svATI (GLenum stream, const GLshort * coords)
{
  // GL_ATI_vertex_streams - glVertexStream3svATI
  if (s_deviceConfig.m_glVertexStream3svATI)
  {
    s_deviceConfig.m_glVertexStream3svATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3iATI

void  glew::gl::glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z)
{
  // GL_ATI_vertex_streams - glVertexStream3iATI
  if (s_deviceConfig.m_glVertexStream3iATI)
  {
    s_deviceConfig.m_glVertexStream3iATI (stream, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3ivATI

void  glew::gl::glVertexStream3ivATI (GLenum stream, const GLint * coords)
{
  // GL_ATI_vertex_streams - glVertexStream3ivATI
  if (s_deviceConfig.m_glVertexStream3ivATI)
  {
    s_deviceConfig.m_glVertexStream3ivATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3fATI

void  glew::gl::glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_ATI_vertex_streams - glVertexStream3fATI
  if (s_deviceConfig.m_glVertexStream3fATI)
  {
    s_deviceConfig.m_glVertexStream3fATI (stream, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3fvATI

void  glew::gl::glVertexStream3fvATI (GLenum stream, const GLfloat * coords)
{
  // GL_ATI_vertex_streams - glVertexStream3fvATI
  if (s_deviceConfig.m_glVertexStream3fvATI)
  {
    s_deviceConfig.m_glVertexStream3fvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3dATI

void  glew::gl::glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_ATI_vertex_streams - glVertexStream3dATI
  if (s_deviceConfig.m_glVertexStream3dATI)
  {
    s_deviceConfig.m_glVertexStream3dATI (stream, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream3dvATI

void  glew::gl::glVertexStream3dvATI (GLenum stream, const GLdouble * coords)
{
  // GL_ATI_vertex_streams - glVertexStream3dvATI
  if (s_deviceConfig.m_glVertexStream3dvATI)
  {
    s_deviceConfig.m_glVertexStream3dvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4sATI

void  glew::gl::glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  // GL_ATI_vertex_streams - glVertexStream4sATI
  if (s_deviceConfig.m_glVertexStream4sATI)
  {
    s_deviceConfig.m_glVertexStream4sATI (stream, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4svATI

void  glew::gl::glVertexStream4svATI (GLenum stream, const GLshort * coords)
{
  // GL_ATI_vertex_streams - glVertexStream4svATI
  if (s_deviceConfig.m_glVertexStream4svATI)
  {
    s_deviceConfig.m_glVertexStream4svATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4iATI

void  glew::gl::glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  // GL_ATI_vertex_streams - glVertexStream4iATI
  if (s_deviceConfig.m_glVertexStream4iATI)
  {
    s_deviceConfig.m_glVertexStream4iATI (stream, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4ivATI

void  glew::gl::glVertexStream4ivATI (GLenum stream, const GLint * coords)
{
  // GL_ATI_vertex_streams - glVertexStream4ivATI
  if (s_deviceConfig.m_glVertexStream4ivATI)
  {
    s_deviceConfig.m_glVertexStream4ivATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4fATI

void  glew::gl::glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_ATI_vertex_streams - glVertexStream4fATI
  if (s_deviceConfig.m_glVertexStream4fATI)
  {
    s_deviceConfig.m_glVertexStream4fATI (stream, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4fvATI

void  glew::gl::glVertexStream4fvATI (GLenum stream, const GLfloat * coords)
{
  // GL_ATI_vertex_streams - glVertexStream4fvATI
  if (s_deviceConfig.m_glVertexStream4fvATI)
  {
    s_deviceConfig.m_glVertexStream4fvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4dATI

void  glew::gl::glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_ATI_vertex_streams - glVertexStream4dATI
  if (s_deviceConfig.m_glVertexStream4dATI)
  {
    s_deviceConfig.m_glVertexStream4dATI (stream, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexStream4dvATI

void  glew::gl::glVertexStream4dvATI (GLenum stream, const GLdouble * coords)
{
  // GL_ATI_vertex_streams - glVertexStream4dvATI
  if (s_deviceConfig.m_glVertexStream4dvATI)
  {
    s_deviceConfig.m_glVertexStream4dvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3bATI

void  glew::gl::glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
{
  // GL_ATI_vertex_streams - glNormalStream3bATI
  if (s_deviceConfig.m_glNormalStream3bATI)
  {
    s_deviceConfig.m_glNormalStream3bATI (stream, nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3bvATI

void  glew::gl::glNormalStream3bvATI (GLenum stream, const GLbyte * coords)
{
  // GL_ATI_vertex_streams - glNormalStream3bvATI
  if (s_deviceConfig.m_glNormalStream3bvATI)
  {
    s_deviceConfig.m_glNormalStream3bvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3sATI

void  glew::gl::glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz)
{
  // GL_ATI_vertex_streams - glNormalStream3sATI
  if (s_deviceConfig.m_glNormalStream3sATI)
  {
    s_deviceConfig.m_glNormalStream3sATI (stream, nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3svATI

void  glew::gl::glNormalStream3svATI (GLenum stream, const GLshort * coords)
{
  // GL_ATI_vertex_streams - glNormalStream3svATI
  if (s_deviceConfig.m_glNormalStream3svATI)
  {
    s_deviceConfig.m_glNormalStream3svATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3iATI

void  glew::gl::glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz)
{
  // GL_ATI_vertex_streams - glNormalStream3iATI
  if (s_deviceConfig.m_glNormalStream3iATI)
  {
    s_deviceConfig.m_glNormalStream3iATI (stream, nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3ivATI

void  glew::gl::glNormalStream3ivATI (GLenum stream, const GLint * coords)
{
  // GL_ATI_vertex_streams - glNormalStream3ivATI
  if (s_deviceConfig.m_glNormalStream3ivATI)
  {
    s_deviceConfig.m_glNormalStream3ivATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3fATI

void  glew::gl::glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
{
  // GL_ATI_vertex_streams - glNormalStream3fATI
  if (s_deviceConfig.m_glNormalStream3fATI)
  {
    s_deviceConfig.m_glNormalStream3fATI (stream, nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3fvATI

void  glew::gl::glNormalStream3fvATI (GLenum stream, const GLfloat * coords)
{
  // GL_ATI_vertex_streams - glNormalStream3fvATI
  if (s_deviceConfig.m_glNormalStream3fvATI)
  {
    s_deviceConfig.m_glNormalStream3fvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3dATI

void  glew::gl::glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
{
  // GL_ATI_vertex_streams - glNormalStream3dATI
  if (s_deviceConfig.m_glNormalStream3dATI)
  {
    s_deviceConfig.m_glNormalStream3dATI (stream, nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalStream3dvATI

void  glew::gl::glNormalStream3dvATI (GLenum stream, const GLdouble * coords)
{
  // GL_ATI_vertex_streams - glNormalStream3dvATI
  if (s_deviceConfig.m_glNormalStream3dvATI)
  {
    s_deviceConfig.m_glNormalStream3dvATI (stream, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientActiveVertexStreamATI

void  glew::gl::glClientActiveVertexStreamATI (GLenum stream)
{
  // GL_ATI_vertex_streams - glClientActiveVertexStreamATI
  if (s_deviceConfig.m_glClientActiveVertexStreamATI)
  {
    s_deviceConfig.m_glClientActiveVertexStreamATI (stream);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexBlendEnviATI

void  glew::gl::glVertexBlendEnviATI (GLenum pname, GLint param)
{
  // GL_ATI_vertex_streams - glVertexBlendEnviATI
  if (s_deviceConfig.m_glVertexBlendEnviATI)
  {
    s_deviceConfig.m_glVertexBlendEnviATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexBlendEnvfATI

void  glew::gl::glVertexBlendEnvfATI (GLenum pname, GLfloat param)
{
  // GL_ATI_vertex_streams - glVertexBlendEnvfATI
  if (s_deviceConfig.m_glVertexBlendEnvfATI)
  {
    s_deviceConfig.m_glVertexBlendEnvfATI (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformBufferEXT

void  glew::gl::glUniformBufferEXT (GLuint program, GLint location, GLuint buffer)
{
  // GL_EXT_bindable_uniform - glUniformBufferEXT
  if (s_deviceConfig.m_glUniformBufferEXT)
  {
    s_deviceConfig.m_glUniformBufferEXT (program, location, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformBufferSizeEXT

GLint glew::gl::glGetUniformBufferSizeEXT (GLuint program, GLint location)
{
  // GL_EXT_bindable_uniform - glGetUniformBufferSizeEXT
  if (s_deviceConfig.m_glGetUniformBufferSizeEXT)
  {
    return s_deviceConfig.m_glGetUniformBufferSizeEXT (program, location);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformOffsetEXT

GLintptr glew::gl::glGetUniformOffsetEXT (GLuint program, GLint location)
{
  // GL_EXT_bindable_uniform - glGetUniformOffsetEXT
  if (s_deviceConfig.m_glGetUniformOffsetEXT)
  {
    return s_deviceConfig.m_glGetUniformOffsetEXT (program, location);
  }
  return ((GLintptr)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendColorEXT

void  glew::gl::glBlendColorEXT (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  // GL_EXT_blend_color - glBlendColorEXT
  if (s_deviceConfig.m_glBlendColorEXT)
  {
    s_deviceConfig.m_glBlendColorEXT (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationSeparateEXT

void  glew::gl::glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha)
{
  // GL_EXT_blend_equation_separate - glBlendEquationSeparateEXT
  if (s_deviceConfig.m_glBlendEquationSeparateEXT)
  {
    s_deviceConfig.m_glBlendEquationSeparateEXT (modeRGB, modeAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateEXT

void  glew::gl::glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  // GL_EXT_blend_func_separate - glBlendFuncSeparateEXT
  if (s_deviceConfig.m_glBlendFuncSeparateEXT)
  {
    s_deviceConfig.m_glBlendFuncSeparateEXT (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendEquationEXT

void  glew::gl::glBlendEquationEXT (GLenum mode)
{
  // GL_EXT_blend_minmax - glBlendEquationEXT
  if (s_deviceConfig.m_glBlendEquationEXT)
  {
    s_deviceConfig.m_glBlendEquationEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorSubTableEXT

void  glew::gl::glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data)
{
  // GL_EXT_color_subtable - glColorSubTableEXT
  if (s_deviceConfig.m_glColorSubTableEXT)
  {
    s_deviceConfig.m_glColorSubTableEXT (target, start, count, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyColorSubTableEXT

void  glew::gl::glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  // GL_EXT_color_subtable - glCopyColorSubTableEXT
  if (s_deviceConfig.m_glCopyColorSubTableEXT)
  {
    s_deviceConfig.m_glCopyColorSubTableEXT (target, start, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLockArraysEXT

void  glew::gl::glLockArraysEXT (GLint first, GLsizei count)
{
  // GL_EXT_compiled_vertex_array - glLockArraysEXT
  if (s_deviceConfig.m_glLockArraysEXT)
  {
    s_deviceConfig.m_glLockArraysEXT (first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnlockArraysEXT

void  glew::gl::glUnlockArraysEXT ()
{
  // GL_EXT_compiled_vertex_array - glUnlockArraysEXT
  if (s_deviceConfig.m_glUnlockArraysEXT)
  {
    s_deviceConfig.m_glUnlockArraysEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionFilter1DEXT

void  glew::gl::glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image)
{
  // GL_EXT_convolution - glConvolutionFilter1DEXT
  if (s_deviceConfig.m_glConvolutionFilter1DEXT)
  {
    s_deviceConfig.m_glConvolutionFilter1DEXT (target, internalformat, width, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionFilter2DEXT

void  glew::gl::glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image)
{
  // GL_EXT_convolution - glConvolutionFilter2DEXT
  if (s_deviceConfig.m_glConvolutionFilter2DEXT)
  {
    s_deviceConfig.m_glConvolutionFilter2DEXT (target, internalformat, width, height, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterfEXT

void  glew::gl::glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params)
{
  // GL_EXT_convolution - glConvolutionParameterfEXT
  if (s_deviceConfig.m_glConvolutionParameterfEXT)
  {
    s_deviceConfig.m_glConvolutionParameterfEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterfvEXT

void  glew::gl::glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_EXT_convolution - glConvolutionParameterfvEXT
  if (s_deviceConfig.m_glConvolutionParameterfvEXT)
  {
    s_deviceConfig.m_glConvolutionParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameteriEXT

void  glew::gl::glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params)
{
  // GL_EXT_convolution - glConvolutionParameteriEXT
  if (s_deviceConfig.m_glConvolutionParameteriEXT)
  {
    s_deviceConfig.m_glConvolutionParameteriEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterivEXT

void  glew::gl::glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_convolution - glConvolutionParameterivEXT
  if (s_deviceConfig.m_glConvolutionParameterivEXT)
  {
    s_deviceConfig.m_glConvolutionParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyConvolutionFilter1DEXT

void  glew::gl::glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  // GL_EXT_convolution - glCopyConvolutionFilter1DEXT
  if (s_deviceConfig.m_glCopyConvolutionFilter1DEXT)
  {
    s_deviceConfig.m_glCopyConvolutionFilter1DEXT (target, internalformat, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyConvolutionFilter2DEXT

void  glew::gl::glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_convolution - glCopyConvolutionFilter2DEXT
  if (s_deviceConfig.m_glCopyConvolutionFilter2DEXT)
  {
    s_deviceConfig.m_glCopyConvolutionFilter2DEXT (target, internalformat, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionFilterEXT

void  glew::gl::glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, void * image)
{
  // GL_EXT_convolution - glGetConvolutionFilterEXT
  if (s_deviceConfig.m_glGetConvolutionFilterEXT)
  {
    s_deviceConfig.m_glGetConvolutionFilterEXT (target, format, type, image);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionParameterfvEXT

void  glew::gl::glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_convolution - glGetConvolutionParameterfvEXT
  if (s_deviceConfig.m_glGetConvolutionParameterfvEXT)
  {
    s_deviceConfig.m_glGetConvolutionParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionParameterivEXT

void  glew::gl::glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_convolution - glGetConvolutionParameterivEXT
  if (s_deviceConfig.m_glGetConvolutionParameterivEXT)
  {
    s_deviceConfig.m_glGetConvolutionParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSeparableFilterEXT

void  glew::gl::glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span)
{
  // GL_EXT_convolution - glGetSeparableFilterEXT
  if (s_deviceConfig.m_glGetSeparableFilterEXT)
  {
    s_deviceConfig.m_glGetSeparableFilterEXT (target, format, type, row, column, span);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSeparableFilter2DEXT

void  glew::gl::glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column)
{
  // GL_EXT_convolution - glSeparableFilter2DEXT
  if (s_deviceConfig.m_glSeparableFilter2DEXT)
  {
    s_deviceConfig.m_glSeparableFilter2DEXT (target, internalformat, width, height, format, type, row, column);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3bEXT

void  glew::gl::glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz)
{
  // GL_EXT_coordinate_frame - glTangent3bEXT
  if (s_deviceConfig.m_glTangent3bEXT)
  {
    s_deviceConfig.m_glTangent3bEXT (tx, ty, tz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3bvEXT

void  glew::gl::glTangent3bvEXT (const GLbyte * v)
{
  // GL_EXT_coordinate_frame - glTangent3bvEXT
  if (s_deviceConfig.m_glTangent3bvEXT)
  {
    s_deviceConfig.m_glTangent3bvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3dEXT

void  glew::gl::glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz)
{
  // GL_EXT_coordinate_frame - glTangent3dEXT
  if (s_deviceConfig.m_glTangent3dEXT)
  {
    s_deviceConfig.m_glTangent3dEXT (tx, ty, tz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3dvEXT

void  glew::gl::glTangent3dvEXT (const GLdouble * v)
{
  // GL_EXT_coordinate_frame - glTangent3dvEXT
  if (s_deviceConfig.m_glTangent3dvEXT)
  {
    s_deviceConfig.m_glTangent3dvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3fEXT

void  glew::gl::glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz)
{
  // GL_EXT_coordinate_frame - glTangent3fEXT
  if (s_deviceConfig.m_glTangent3fEXT)
  {
    s_deviceConfig.m_glTangent3fEXT (tx, ty, tz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3fvEXT

void  glew::gl::glTangent3fvEXT (const GLfloat * v)
{
  // GL_EXT_coordinate_frame - glTangent3fvEXT
  if (s_deviceConfig.m_glTangent3fvEXT)
  {
    s_deviceConfig.m_glTangent3fvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3iEXT

void  glew::gl::glTangent3iEXT (GLint tx, GLint ty, GLint tz)
{
  // GL_EXT_coordinate_frame - glTangent3iEXT
  if (s_deviceConfig.m_glTangent3iEXT)
  {
    s_deviceConfig.m_glTangent3iEXT (tx, ty, tz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3ivEXT

void  glew::gl::glTangent3ivEXT (const GLint * v)
{
  // GL_EXT_coordinate_frame - glTangent3ivEXT
  if (s_deviceConfig.m_glTangent3ivEXT)
  {
    s_deviceConfig.m_glTangent3ivEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3sEXT

void  glew::gl::glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz)
{
  // GL_EXT_coordinate_frame - glTangent3sEXT
  if (s_deviceConfig.m_glTangent3sEXT)
  {
    s_deviceConfig.m_glTangent3sEXT (tx, ty, tz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangent3svEXT

void  glew::gl::glTangent3svEXT (const GLshort * v)
{
  // GL_EXT_coordinate_frame - glTangent3svEXT
  if (s_deviceConfig.m_glTangent3svEXT)
  {
    s_deviceConfig.m_glTangent3svEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3bEXT

void  glew::gl::glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz)
{
  // GL_EXT_coordinate_frame - glBinormal3bEXT
  if (s_deviceConfig.m_glBinormal3bEXT)
  {
    s_deviceConfig.m_glBinormal3bEXT (bx, by, bz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3bvEXT

void  glew::gl::glBinormal3bvEXT (const GLbyte * v)
{
  // GL_EXT_coordinate_frame - glBinormal3bvEXT
  if (s_deviceConfig.m_glBinormal3bvEXT)
  {
    s_deviceConfig.m_glBinormal3bvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3dEXT

void  glew::gl::glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz)
{
  // GL_EXT_coordinate_frame - glBinormal3dEXT
  if (s_deviceConfig.m_glBinormal3dEXT)
  {
    s_deviceConfig.m_glBinormal3dEXT (bx, by, bz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3dvEXT

void  glew::gl::glBinormal3dvEXT (const GLdouble * v)
{
  // GL_EXT_coordinate_frame - glBinormal3dvEXT
  if (s_deviceConfig.m_glBinormal3dvEXT)
  {
    s_deviceConfig.m_glBinormal3dvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3fEXT

void  glew::gl::glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz)
{
  // GL_EXT_coordinate_frame - glBinormal3fEXT
  if (s_deviceConfig.m_glBinormal3fEXT)
  {
    s_deviceConfig.m_glBinormal3fEXT (bx, by, bz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3fvEXT

void  glew::gl::glBinormal3fvEXT (const GLfloat * v)
{
  // GL_EXT_coordinate_frame - glBinormal3fvEXT
  if (s_deviceConfig.m_glBinormal3fvEXT)
  {
    s_deviceConfig.m_glBinormal3fvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3iEXT

void  glew::gl::glBinormal3iEXT (GLint bx, GLint by, GLint bz)
{
  // GL_EXT_coordinate_frame - glBinormal3iEXT
  if (s_deviceConfig.m_glBinormal3iEXT)
  {
    s_deviceConfig.m_glBinormal3iEXT (bx, by, bz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3ivEXT

void  glew::gl::glBinormal3ivEXT (const GLint * v)
{
  // GL_EXT_coordinate_frame - glBinormal3ivEXT
  if (s_deviceConfig.m_glBinormal3ivEXT)
  {
    s_deviceConfig.m_glBinormal3ivEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3sEXT

void  glew::gl::glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz)
{
  // GL_EXT_coordinate_frame - glBinormal3sEXT
  if (s_deviceConfig.m_glBinormal3sEXT)
  {
    s_deviceConfig.m_glBinormal3sEXT (bx, by, bz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormal3svEXT

void  glew::gl::glBinormal3svEXT (const GLshort * v)
{
  // GL_EXT_coordinate_frame - glBinormal3svEXT
  if (s_deviceConfig.m_glBinormal3svEXT)
  {
    s_deviceConfig.m_glBinormal3svEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTangentPointerEXT

void  glew::gl::glTangentPointerEXT (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_coordinate_frame - glTangentPointerEXT
  if (s_deviceConfig.m_glTangentPointerEXT)
  {
    s_deviceConfig.m_glTangentPointerEXT (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBinormalPointerEXT

void  glew::gl::glBinormalPointerEXT (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_coordinate_frame - glBinormalPointerEXT
  if (s_deviceConfig.m_glBinormalPointerEXT)
  {
    s_deviceConfig.m_glBinormalPointerEXT (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexImage1DEXT

void  glew::gl::glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  // GL_EXT_copy_texture - glCopyTexImage1DEXT
  if (s_deviceConfig.m_glCopyTexImage1DEXT)
  {
    s_deviceConfig.m_glCopyTexImage1DEXT (target, level, internalformat, x, y, width, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexImage2DEXT

void  glew::gl::glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_EXT_copy_texture - glCopyTexImage2DEXT
  if (s_deviceConfig.m_glCopyTexImage2DEXT)
  {
    s_deviceConfig.m_glCopyTexImage2DEXT (target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage1DEXT

void  glew::gl::glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_EXT_copy_texture - glCopyTexSubImage1DEXT
  if (s_deviceConfig.m_glCopyTexSubImage1DEXT)
  {
    s_deviceConfig.m_glCopyTexSubImage1DEXT (target, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage2DEXT

void  glew::gl::glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_copy_texture - glCopyTexSubImage2DEXT
  if (s_deviceConfig.m_glCopyTexSubImage2DEXT)
  {
    s_deviceConfig.m_glCopyTexSubImage2DEXT (target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTexSubImage3DEXT

void  glew::gl::glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_copy_texture - glCopyTexSubImage3DEXT
  if (s_deviceConfig.m_glCopyTexSubImage3DEXT)
  {
    s_deviceConfig.m_glCopyTexSubImage3DEXT (target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCullParameterdvEXT

void  glew::gl::glCullParameterdvEXT (GLenum pname, GLdouble * params)
{
  // GL_EXT_cull_vertex - glCullParameterdvEXT
  if (s_deviceConfig.m_glCullParameterdvEXT)
  {
    s_deviceConfig.m_glCullParameterdvEXT (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCullParameterfvEXT

void  glew::gl::glCullParameterfvEXT (GLenum pname, GLfloat * params)
{
  // GL_EXT_cull_vertex - glCullParameterfvEXT
  if (s_deviceConfig.m_glCullParameterfvEXT)
  {
    s_deviceConfig.m_glCullParameterfvEXT (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLabelObjectEXT

void  glew::gl::glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar * label)
{
  // GL_EXT_debug_label - glLabelObjectEXT
  if (s_deviceConfig.m_glLabelObjectEXT)
  {
    s_deviceConfig.m_glLabelObjectEXT (type, object, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetObjectLabelEXT

void  glew::gl::glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label)
{
  // GL_EXT_debug_label - glGetObjectLabelEXT
  if (s_deviceConfig.m_glGetObjectLabelEXT)
  {
    s_deviceConfig.m_glGetObjectLabelEXT (type, object, bufSize, length, label);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInsertEventMarkerEXT

void  glew::gl::glInsertEventMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glInsertEventMarkerEXT
  if (s_deviceConfig.m_glInsertEventMarkerEXT)
  {
    s_deviceConfig.m_glInsertEventMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushGroupMarkerEXT

void  glew::gl::glPushGroupMarkerEXT (GLsizei length, const GLchar * marker)
{
  // GL_EXT_debug_marker - glPushGroupMarkerEXT
  if (s_deviceConfig.m_glPushGroupMarkerEXT)
  {
    s_deviceConfig.m_glPushGroupMarkerEXT (length, marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPopGroupMarkerEXT

void  glew::gl::glPopGroupMarkerEXT ()
{
  // GL_EXT_debug_marker - glPopGroupMarkerEXT
  if (s_deviceConfig.m_glPopGroupMarkerEXT)
  {
    s_deviceConfig.m_glPopGroupMarkerEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthBoundsEXT

void  glew::gl::glDepthBoundsEXT (GLclampd zmin, GLclampd zmax)
{
  // GL_EXT_depth_bounds_test - glDepthBoundsEXT
  if (s_deviceConfig.m_glDepthBoundsEXT)
  {
    s_deviceConfig.m_glDepthBoundsEXT (zmin, zmax);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadfEXT

void  glew::gl::glMatrixLoadfEXT (GLenum mode, const GLfloat * m)
{
  // GL_EXT_direct_state_access - glMatrixLoadfEXT
  if (s_deviceConfig.m_glMatrixLoadfEXT)
  {
    s_deviceConfig.m_glMatrixLoadfEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoaddEXT

void  glew::gl::glMatrixLoaddEXT (GLenum mode, const GLdouble * m)
{
  // GL_EXT_direct_state_access - glMatrixLoaddEXT
  if (s_deviceConfig.m_glMatrixLoaddEXT)
  {
    s_deviceConfig.m_glMatrixLoaddEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultfEXT

void  glew::gl::glMatrixMultfEXT (GLenum mode, const GLfloat * m)
{
  // GL_EXT_direct_state_access - glMatrixMultfEXT
  if (s_deviceConfig.m_glMatrixMultfEXT)
  {
    s_deviceConfig.m_glMatrixMultfEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultdEXT

void  glew::gl::glMatrixMultdEXT (GLenum mode, const GLdouble * m)
{
  // GL_EXT_direct_state_access - glMatrixMultdEXT
  if (s_deviceConfig.m_glMatrixMultdEXT)
  {
    s_deviceConfig.m_glMatrixMultdEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadIdentityEXT

void  glew::gl::glMatrixLoadIdentityEXT (GLenum mode)
{
  // GL_EXT_direct_state_access - glMatrixLoadIdentityEXT
  if (s_deviceConfig.m_glMatrixLoadIdentityEXT)
  {
    s_deviceConfig.m_glMatrixLoadIdentityEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixRotatefEXT

void  glew::gl::glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_EXT_direct_state_access - glMatrixRotatefEXT
  if (s_deviceConfig.m_glMatrixRotatefEXT)
  {
    s_deviceConfig.m_glMatrixRotatefEXT (mode, angle, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixRotatedEXT

void  glew::gl::glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_EXT_direct_state_access - glMatrixRotatedEXT
  if (s_deviceConfig.m_glMatrixRotatedEXT)
  {
    s_deviceConfig.m_glMatrixRotatedEXT (mode, angle, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixScalefEXT

void  glew::gl::glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_EXT_direct_state_access - glMatrixScalefEXT
  if (s_deviceConfig.m_glMatrixScalefEXT)
  {
    s_deviceConfig.m_glMatrixScalefEXT (mode, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixScaledEXT

void  glew::gl::glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_EXT_direct_state_access - glMatrixScaledEXT
  if (s_deviceConfig.m_glMatrixScaledEXT)
  {
    s_deviceConfig.m_glMatrixScaledEXT (mode, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixTranslatefEXT

void  glew::gl::glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_EXT_direct_state_access - glMatrixTranslatefEXT
  if (s_deviceConfig.m_glMatrixTranslatefEXT)
  {
    s_deviceConfig.m_glMatrixTranslatefEXT (mode, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixTranslatedEXT

void  glew::gl::glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_EXT_direct_state_access - glMatrixTranslatedEXT
  if (s_deviceConfig.m_glMatrixTranslatedEXT)
  {
    s_deviceConfig.m_glMatrixTranslatedEXT (mode, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixFrustumEXT

void  glew::gl::glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  // GL_EXT_direct_state_access - glMatrixFrustumEXT
  if (s_deviceConfig.m_glMatrixFrustumEXT)
  {
    s_deviceConfig.m_glMatrixFrustumEXT (mode, left, right, bottom, top, zNear, zFar);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixOrthoEXT

void  glew::gl::glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  // GL_EXT_direct_state_access - glMatrixOrthoEXT
  if (s_deviceConfig.m_glMatrixOrthoEXT)
  {
    s_deviceConfig.m_glMatrixOrthoEXT (mode, left, right, bottom, top, zNear, zFar);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixPopEXT

void  glew::gl::glMatrixPopEXT (GLenum mode)
{
  // GL_EXT_direct_state_access - glMatrixPopEXT
  if (s_deviceConfig.m_glMatrixPopEXT)
  {
    s_deviceConfig.m_glMatrixPopEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixPushEXT

void  glew::gl::glMatrixPushEXT (GLenum mode)
{
  // GL_EXT_direct_state_access - glMatrixPushEXT
  if (s_deviceConfig.m_glMatrixPushEXT)
  {
    s_deviceConfig.m_glMatrixPushEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClientAttribDefaultEXT

void  glew::gl::glClientAttribDefaultEXT (GLbitfield mask)
{
  // GL_EXT_direct_state_access - glClientAttribDefaultEXT
  if (s_deviceConfig.m_glClientAttribDefaultEXT)
  {
    s_deviceConfig.m_glClientAttribDefaultEXT (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPushClientAttribDefaultEXT

void  glew::gl::glPushClientAttribDefaultEXT (GLbitfield mask)
{
  // GL_EXT_direct_state_access - glPushClientAttribDefaultEXT
  if (s_deviceConfig.m_glPushClientAttribDefaultEXT)
  {
    s_deviceConfig.m_glPushClientAttribDefaultEXT (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterfEXT

void  glew::gl::glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  // GL_EXT_direct_state_access - glTextureParameterfEXT
  if (s_deviceConfig.m_glTextureParameterfEXT)
  {
    s_deviceConfig.m_glTextureParameterfEXT (texture, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterfvEXT

void  glew::gl::glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glTextureParameterfvEXT
  if (s_deviceConfig.m_glTextureParameterfvEXT)
  {
    s_deviceConfig.m_glTextureParameterfvEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameteriEXT

void  glew::gl::glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param)
{
  // GL_EXT_direct_state_access - glTextureParameteriEXT
  if (s_deviceConfig.m_glTextureParameteriEXT)
  {
    s_deviceConfig.m_glTextureParameteriEXT (texture, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterivEXT

void  glew::gl::glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glTextureParameterivEXT
  if (s_deviceConfig.m_glTextureParameterivEXT)
  {
    s_deviceConfig.m_glTextureParameterivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage1DEXT

void  glew::gl::glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureImage1DEXT
  if (s_deviceConfig.m_glTextureImage1DEXT)
  {
    s_deviceConfig.m_glTextureImage1DEXT (texture, target, level, internalformat, width, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage2DEXT

void  glew::gl::glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureImage2DEXT
  if (s_deviceConfig.m_glTextureImage2DEXT)
  {
    s_deviceConfig.m_glTextureImage2DEXT (texture, target, level, internalformat, width, height, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage1DEXT

void  glew::gl::glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureSubImage1DEXT
  if (s_deviceConfig.m_glTextureSubImage1DEXT)
  {
    s_deviceConfig.m_glTextureSubImage1DEXT (texture, target, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage2DEXT

void  glew::gl::glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureSubImage2DEXT
  if (s_deviceConfig.m_glTextureSubImage2DEXT)
  {
    s_deviceConfig.m_glTextureSubImage2DEXT (texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureImage1DEXT

void  glew::gl::glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  // GL_EXT_direct_state_access - glCopyTextureImage1DEXT
  if (s_deviceConfig.m_glCopyTextureImage1DEXT)
  {
    s_deviceConfig.m_glCopyTextureImage1DEXT (texture, target, level, internalformat, x, y, width, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureImage2DEXT

void  glew::gl::glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_EXT_direct_state_access - glCopyTextureImage2DEXT
  if (s_deviceConfig.m_glCopyTextureImage2DEXT)
  {
    s_deviceConfig.m_glCopyTextureImage2DEXT (texture, target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage1DEXT

void  glew::gl::glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_EXT_direct_state_access - glCopyTextureSubImage1DEXT
  if (s_deviceConfig.m_glCopyTextureSubImage1DEXT)
  {
    s_deviceConfig.m_glCopyTextureSubImage1DEXT (texture, target, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage2DEXT

void  glew::gl::glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glCopyTextureSubImage2DEXT
  if (s_deviceConfig.m_glCopyTextureSubImage2DEXT)
  {
    s_deviceConfig.m_glCopyTextureSubImage2DEXT (texture, target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureImageEXT

void  glew::gl::glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels)
{
  // GL_EXT_direct_state_access - glGetTextureImageEXT
  if (s_deviceConfig.m_glGetTextureImageEXT)
  {
    s_deviceConfig.m_glGetTextureImageEXT (texture, target, level, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterfvEXT

void  glew::gl::glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetTextureParameterfvEXT
  if (s_deviceConfig.m_glGetTextureParameterfvEXT)
  {
    s_deviceConfig.m_glGetTextureParameterfvEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterivEXT

void  glew::gl::glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetTextureParameterivEXT
  if (s_deviceConfig.m_glGetTextureParameterivEXT)
  {
    s_deviceConfig.m_glGetTextureParameterivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureLevelParameterfvEXT

void  glew::gl::glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetTextureLevelParameterfvEXT
  if (s_deviceConfig.m_glGetTextureLevelParameterfvEXT)
  {
    s_deviceConfig.m_glGetTextureLevelParameterfvEXT (texture, target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureLevelParameterivEXT

void  glew::gl::glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetTextureLevelParameterivEXT
  if (s_deviceConfig.m_glGetTextureLevelParameterivEXT)
  {
    s_deviceConfig.m_glGetTextureLevelParameterivEXT (texture, target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage3DEXT

void  glew::gl::glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureImage3DEXT
  if (s_deviceConfig.m_glTextureImage3DEXT)
  {
    s_deviceConfig.m_glTextureImage3DEXT (texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureSubImage3DEXT

void  glew::gl::glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glTextureSubImage3DEXT
  if (s_deviceConfig.m_glTextureSubImage3DEXT)
  {
    s_deviceConfig.m_glTextureSubImage3DEXT (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyTextureSubImage3DEXT

void  glew::gl::glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glCopyTextureSubImage3DEXT
  if (s_deviceConfig.m_glCopyTextureSubImage3DEXT)
  {
    s_deviceConfig.m_glCopyTextureSubImage3DEXT (texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindMultiTextureEXT

void  glew::gl::glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture)
{
  // GL_EXT_direct_state_access - glBindMultiTextureEXT
  if (s_deviceConfig.m_glBindMultiTextureEXT)
  {
    s_deviceConfig.m_glBindMultiTextureEXT (texunit, target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoordPointerEXT

void  glew::gl::glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_direct_state_access - glMultiTexCoordPointerEXT
  if (s_deviceConfig.m_glMultiTexCoordPointerEXT)
  {
    s_deviceConfig.m_glMultiTexCoordPointerEXT (texunit, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexEnvfEXT

void  glew::gl::glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  // GL_EXT_direct_state_access - glMultiTexEnvfEXT
  if (s_deviceConfig.m_glMultiTexEnvfEXT)
  {
    s_deviceConfig.m_glMultiTexEnvfEXT (texunit, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexEnvfvEXT

void  glew::gl::glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glMultiTexEnvfvEXT
  if (s_deviceConfig.m_glMultiTexEnvfvEXT)
  {
    s_deviceConfig.m_glMultiTexEnvfvEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexEnviEXT

void  glew::gl::glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  // GL_EXT_direct_state_access - glMultiTexEnviEXT
  if (s_deviceConfig.m_glMultiTexEnviEXT)
  {
    s_deviceConfig.m_glMultiTexEnviEXT (texunit, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexEnvivEXT

void  glew::gl::glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glMultiTexEnvivEXT
  if (s_deviceConfig.m_glMultiTexEnvivEXT)
  {
    s_deviceConfig.m_glMultiTexEnvivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGendEXT

void  glew::gl::glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  // GL_EXT_direct_state_access - glMultiTexGendEXT
  if (s_deviceConfig.m_glMultiTexGendEXT)
  {
    s_deviceConfig.m_glMultiTexGendEXT (texunit, coord, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGendvEXT

void  glew::gl::glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params)
{
  // GL_EXT_direct_state_access - glMultiTexGendvEXT
  if (s_deviceConfig.m_glMultiTexGendvEXT)
  {
    s_deviceConfig.m_glMultiTexGendvEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGenfEXT

void  glew::gl::glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  // GL_EXT_direct_state_access - glMultiTexGenfEXT
  if (s_deviceConfig.m_glMultiTexGenfEXT)
  {
    s_deviceConfig.m_glMultiTexGenfEXT (texunit, coord, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGenfvEXT

void  glew::gl::glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glMultiTexGenfvEXT
  if (s_deviceConfig.m_glMultiTexGenfvEXT)
  {
    s_deviceConfig.m_glMultiTexGenfvEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGeniEXT

void  glew::gl::glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  // GL_EXT_direct_state_access - glMultiTexGeniEXT
  if (s_deviceConfig.m_glMultiTexGeniEXT)
  {
    s_deviceConfig.m_glMultiTexGeniEXT (texunit, coord, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexGenivEXT

void  glew::gl::glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glMultiTexGenivEXT
  if (s_deviceConfig.m_glMultiTexGenivEXT)
  {
    s_deviceConfig.m_glMultiTexGenivEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexEnvfvEXT

void  glew::gl::glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexEnvfvEXT
  if (s_deviceConfig.m_glGetMultiTexEnvfvEXT)
  {
    s_deviceConfig.m_glGetMultiTexEnvfvEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexEnvivEXT

void  glew::gl::glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexEnvivEXT
  if (s_deviceConfig.m_glGetMultiTexEnvivEXT)
  {
    s_deviceConfig.m_glGetMultiTexEnvivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexGendvEXT

void  glew::gl::glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexGendvEXT
  if (s_deviceConfig.m_glGetMultiTexGendvEXT)
  {
    s_deviceConfig.m_glGetMultiTexGendvEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexGenfvEXT

void  glew::gl::glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexGenfvEXT
  if (s_deviceConfig.m_glGetMultiTexGenfvEXT)
  {
    s_deviceConfig.m_glGetMultiTexGenfvEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexGenivEXT

void  glew::gl::glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexGenivEXT
  if (s_deviceConfig.m_glGetMultiTexGenivEXT)
  {
    s_deviceConfig.m_glGetMultiTexGenivEXT (texunit, coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameteriEXT

void  glew::gl::glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  // GL_EXT_direct_state_access - glMultiTexParameteriEXT
  if (s_deviceConfig.m_glMultiTexParameteriEXT)
  {
    s_deviceConfig.m_glMultiTexParameteriEXT (texunit, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameterivEXT

void  glew::gl::glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glMultiTexParameterivEXT
  if (s_deviceConfig.m_glMultiTexParameterivEXT)
  {
    s_deviceConfig.m_glMultiTexParameterivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameterfEXT

void  glew::gl::glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  // GL_EXT_direct_state_access - glMultiTexParameterfEXT
  if (s_deviceConfig.m_glMultiTexParameterfEXT)
  {
    s_deviceConfig.m_glMultiTexParameterfEXT (texunit, target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameterfvEXT

void  glew::gl::glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glMultiTexParameterfvEXT
  if (s_deviceConfig.m_glMultiTexParameterfvEXT)
  {
    s_deviceConfig.m_glMultiTexParameterfvEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexImage1DEXT

void  glew::gl::glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexImage1DEXT
  if (s_deviceConfig.m_glMultiTexImage1DEXT)
  {
    s_deviceConfig.m_glMultiTexImage1DEXT (texunit, target, level, internalformat, width, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexImage2DEXT

void  glew::gl::glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexImage2DEXT
  if (s_deviceConfig.m_glMultiTexImage2DEXT)
  {
    s_deviceConfig.m_glMultiTexImage2DEXT (texunit, target, level, internalformat, width, height, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexSubImage1DEXT

void  glew::gl::glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexSubImage1DEXT
  if (s_deviceConfig.m_glMultiTexSubImage1DEXT)
  {
    s_deviceConfig.m_glMultiTexSubImage1DEXT (texunit, target, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexSubImage2DEXT

void  glew::gl::glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexSubImage2DEXT
  if (s_deviceConfig.m_glMultiTexSubImage2DEXT)
  {
    s_deviceConfig.m_glMultiTexSubImage2DEXT (texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyMultiTexImage1DEXT

void  glew::gl::glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  // GL_EXT_direct_state_access - glCopyMultiTexImage1DEXT
  if (s_deviceConfig.m_glCopyMultiTexImage1DEXT)
  {
    s_deviceConfig.m_glCopyMultiTexImage1DEXT (texunit, target, level, internalformat, x, y, width, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyMultiTexImage2DEXT

void  glew::gl::glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  // GL_EXT_direct_state_access - glCopyMultiTexImage2DEXT
  if (s_deviceConfig.m_glCopyMultiTexImage2DEXT)
  {
    s_deviceConfig.m_glCopyMultiTexImage2DEXT (texunit, target, level, internalformat, x, y, width, height, border);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyMultiTexSubImage1DEXT

void  glew::gl::glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  // GL_EXT_direct_state_access - glCopyMultiTexSubImage1DEXT
  if (s_deviceConfig.m_glCopyMultiTexSubImage1DEXT)
  {
    s_deviceConfig.m_glCopyMultiTexSubImage1DEXT (texunit, target, level, xoffset, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyMultiTexSubImage2DEXT

void  glew::gl::glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glCopyMultiTexSubImage2DEXT
  if (s_deviceConfig.m_glCopyMultiTexSubImage2DEXT)
  {
    s_deviceConfig.m_glCopyMultiTexSubImage2DEXT (texunit, target, level, xoffset, yoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexImageEXT

void  glew::gl::glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels)
{
  // GL_EXT_direct_state_access - glGetMultiTexImageEXT
  if (s_deviceConfig.m_glGetMultiTexImageEXT)
  {
    s_deviceConfig.m_glGetMultiTexImageEXT (texunit, target, level, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexParameterfvEXT

void  glew::gl::glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexParameterfvEXT
  if (s_deviceConfig.m_glGetMultiTexParameterfvEXT)
  {
    s_deviceConfig.m_glGetMultiTexParameterfvEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexParameterivEXT

void  glew::gl::glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexParameterivEXT
  if (s_deviceConfig.m_glGetMultiTexParameterivEXT)
  {
    s_deviceConfig.m_glGetMultiTexParameterivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexLevelParameterfvEXT

void  glew::gl::glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexLevelParameterfvEXT
  if (s_deviceConfig.m_glGetMultiTexLevelParameterfvEXT)
  {
    s_deviceConfig.m_glGetMultiTexLevelParameterfvEXT (texunit, target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexLevelParameterivEXT

void  glew::gl::glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexLevelParameterivEXT
  if (s_deviceConfig.m_glGetMultiTexLevelParameterivEXT)
  {
    s_deviceConfig.m_glGetMultiTexLevelParameterivEXT (texunit, target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexImage3DEXT

void  glew::gl::glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexImage3DEXT
  if (s_deviceConfig.m_glMultiTexImage3DEXT)
  {
    s_deviceConfig.m_glMultiTexImage3DEXT (texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexSubImage3DEXT

void  glew::gl::glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_direct_state_access - glMultiTexSubImage3DEXT
  if (s_deviceConfig.m_glMultiTexSubImage3DEXT)
  {
    s_deviceConfig.m_glMultiTexSubImage3DEXT (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyMultiTexSubImage3DEXT

void  glew::gl::glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glCopyMultiTexSubImage3DEXT
  if (s_deviceConfig.m_glCopyMultiTexSubImage3DEXT)
  {
    s_deviceConfig.m_glCopyMultiTexSubImage3DEXT (texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableClientStateIndexedEXT

void  glew::gl::glEnableClientStateIndexedEXT (GLenum array, GLuint index)
{
  // GL_EXT_direct_state_access - glEnableClientStateIndexedEXT
  if (s_deviceConfig.m_glEnableClientStateIndexedEXT)
  {
    s_deviceConfig.m_glEnableClientStateIndexedEXT (array, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableClientStateIndexedEXT

void  glew::gl::glDisableClientStateIndexedEXT (GLenum array, GLuint index)
{
  // GL_EXT_direct_state_access - glDisableClientStateIndexedEXT
  if (s_deviceConfig.m_glDisableClientStateIndexedEXT)
  {
    s_deviceConfig.m_glDisableClientStateIndexedEXT (array, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFloatIndexedvEXT

void  glew::gl::glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat * data)
{
  // GL_EXT_direct_state_access - glGetFloatIndexedvEXT
  if (s_deviceConfig.m_glGetFloatIndexedvEXT)
  {
    s_deviceConfig.m_glGetFloatIndexedvEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDoubleIndexedvEXT

void  glew::gl::glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble * data)
{
  // GL_EXT_direct_state_access - glGetDoubleIndexedvEXT
  if (s_deviceConfig.m_glGetDoubleIndexedvEXT)
  {
    s_deviceConfig.m_glGetDoubleIndexedvEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPointerIndexedvEXT

void  glew::gl::glGetPointerIndexedvEXT (GLenum target, GLuint index, void ** data)
{
  // GL_EXT_direct_state_access - glGetPointerIndexedvEXT
  if (s_deviceConfig.m_glGetPointerIndexedvEXT)
  {
    s_deviceConfig.m_glGetPointerIndexedvEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableIndexedEXT

void  glew::gl::glEnableIndexedEXT (GLenum target, GLuint index)
{
  // GL_EXT_direct_state_access - glEnableIndexedEXT
  if (s_deviceConfig.m_glEnableIndexedEXT)
  {
    s_deviceConfig.m_glEnableIndexedEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableIndexedEXT

void  glew::gl::glDisableIndexedEXT (GLenum target, GLuint index)
{
  // GL_EXT_direct_state_access - glDisableIndexedEXT
  if (s_deviceConfig.m_glDisableIndexedEXT)
  {
    s_deviceConfig.m_glDisableIndexedEXT (target, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsEnabledIndexedEXT

GLboolean glew::gl::glIsEnabledIndexedEXT (GLenum target, GLuint index)
{
  // GL_EXT_direct_state_access - glIsEnabledIndexedEXT
  if (s_deviceConfig.m_glIsEnabledIndexedEXT)
  {
    return s_deviceConfig.m_glIsEnabledIndexedEXT (target, index);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegerIndexedvEXT

void  glew::gl::glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint * data)
{
  // GL_EXT_direct_state_access - glGetIntegerIndexedvEXT
  if (s_deviceConfig.m_glGetIntegerIndexedvEXT)
  {
    s_deviceConfig.m_glGetIntegerIndexedvEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBooleanIndexedvEXT

void  glew::gl::glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean * data)
{
  // GL_EXT_direct_state_access - glGetBooleanIndexedvEXT
  if (s_deviceConfig.m_glGetBooleanIndexedvEXT)
  {
    s_deviceConfig.m_glGetBooleanIndexedvEXT (target, index, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureImage3DEXT

void  glew::gl::glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureImage3DEXT
  if (s_deviceConfig.m_glCompressedTextureImage3DEXT)
  {
    s_deviceConfig.m_glCompressedTextureImage3DEXT (texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureImage2DEXT

void  glew::gl::glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureImage2DEXT
  if (s_deviceConfig.m_glCompressedTextureImage2DEXT)
  {
    s_deviceConfig.m_glCompressedTextureImage2DEXT (texture, target, level, internalformat, width, height, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureImage1DEXT

void  glew::gl::glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureImage1DEXT
  if (s_deviceConfig.m_glCompressedTextureImage1DEXT)
  {
    s_deviceConfig.m_glCompressedTextureImage1DEXT (texture, target, level, internalformat, width, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage3DEXT

void  glew::gl::glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureSubImage3DEXT
  if (s_deviceConfig.m_glCompressedTextureSubImage3DEXT)
  {
    s_deviceConfig.m_glCompressedTextureSubImage3DEXT (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage2DEXT

void  glew::gl::glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureSubImage2DEXT
  if (s_deviceConfig.m_glCompressedTextureSubImage2DEXT)
  {
    s_deviceConfig.m_glCompressedTextureSubImage2DEXT (texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedTextureSubImage1DEXT

void  glew::gl::glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedTextureSubImage1DEXT
  if (s_deviceConfig.m_glCompressedTextureSubImage1DEXT)
  {
    s_deviceConfig.m_glCompressedTextureSubImage1DEXT (texture, target, level, xoffset, width, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedTextureImageEXT

void  glew::gl::glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void * img)
{
  // GL_EXT_direct_state_access - glGetCompressedTextureImageEXT
  if (s_deviceConfig.m_glGetCompressedTextureImageEXT)
  {
    s_deviceConfig.m_glGetCompressedTextureImageEXT (texture, target, lod, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexImage3DEXT

void  glew::gl::glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexImage3DEXT
  if (s_deviceConfig.m_glCompressedMultiTexImage3DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexImage3DEXT (texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexImage2DEXT

void  glew::gl::glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexImage2DEXT
  if (s_deviceConfig.m_glCompressedMultiTexImage2DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexImage2DEXT (texunit, target, level, internalformat, width, height, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexImage1DEXT

void  glew::gl::glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexImage1DEXT
  if (s_deviceConfig.m_glCompressedMultiTexImage1DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexImage1DEXT (texunit, target, level, internalformat, width, border, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexSubImage3DEXT

void  glew::gl::glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexSubImage3DEXT
  if (s_deviceConfig.m_glCompressedMultiTexSubImage3DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexSubImage3DEXT (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexSubImage2DEXT

void  glew::gl::glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexSubImage2DEXT
  if (s_deviceConfig.m_glCompressedMultiTexSubImage2DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexSubImage2DEXT (texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompressedMultiTexSubImage1DEXT

void  glew::gl::glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits)
{
  // GL_EXT_direct_state_access - glCompressedMultiTexSubImage1DEXT
  if (s_deviceConfig.m_glCompressedMultiTexSubImage1DEXT)
  {
    s_deviceConfig.m_glCompressedMultiTexSubImage1DEXT (texunit, target, level, xoffset, width, format, imageSize, bits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCompressedMultiTexImageEXT

void  glew::gl::glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void * img)
{
  // GL_EXT_direct_state_access - glGetCompressedMultiTexImageEXT
  if (s_deviceConfig.m_glGetCompressedMultiTexImageEXT)
  {
    s_deviceConfig.m_glGetCompressedMultiTexImageEXT (texunit, target, lod, img);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadTransposefEXT

void  glew::gl::glMatrixLoadTransposefEXT (GLenum mode, const GLfloat * m)
{
  // GL_EXT_direct_state_access - glMatrixLoadTransposefEXT
  if (s_deviceConfig.m_glMatrixLoadTransposefEXT)
  {
    s_deviceConfig.m_glMatrixLoadTransposefEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadTransposedEXT

void  glew::gl::glMatrixLoadTransposedEXT (GLenum mode, const GLdouble * m)
{
  // GL_EXT_direct_state_access - glMatrixLoadTransposedEXT
  if (s_deviceConfig.m_glMatrixLoadTransposedEXT)
  {
    s_deviceConfig.m_glMatrixLoadTransposedEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultTransposefEXT

void  glew::gl::glMatrixMultTransposefEXT (GLenum mode, const GLfloat * m)
{
  // GL_EXT_direct_state_access - glMatrixMultTransposefEXT
  if (s_deviceConfig.m_glMatrixMultTransposefEXT)
  {
    s_deviceConfig.m_glMatrixMultTransposefEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultTransposedEXT

void  glew::gl::glMatrixMultTransposedEXT (GLenum mode, const GLdouble * m)
{
  // GL_EXT_direct_state_access - glMatrixMultTransposedEXT
  if (s_deviceConfig.m_glMatrixMultTransposedEXT)
  {
    s_deviceConfig.m_glMatrixMultTransposedEXT (mode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferDataEXT

void  glew::gl::glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
  // GL_EXT_direct_state_access - glNamedBufferDataEXT
  if (s_deviceConfig.m_glNamedBufferDataEXT)
  {
    s_deviceConfig.m_glNamedBufferDataEXT (buffer, size, data, usage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferSubDataEXT

void  glew::gl::glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
  // GL_EXT_direct_state_access - glNamedBufferSubDataEXT
  if (s_deviceConfig.m_glNamedBufferSubDataEXT)
  {
    s_deviceConfig.m_glNamedBufferSubDataEXT (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapNamedBufferEXT

void * glew::gl::glMapNamedBufferEXT (GLuint buffer, GLenum access)
{
  // GL_EXT_direct_state_access - glMapNamedBufferEXT
  if (s_deviceConfig.m_glMapNamedBufferEXT)
  {
    return s_deviceConfig.m_glMapNamedBufferEXT (buffer, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapNamedBufferEXT

GLboolean glew::gl::glUnmapNamedBufferEXT (GLuint buffer)
{
  // GL_EXT_direct_state_access - glUnmapNamedBufferEXT
  if (s_deviceConfig.m_glUnmapNamedBufferEXT)
  {
    return s_deviceConfig.m_glUnmapNamedBufferEXT (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferParameterivEXT

void  glew::gl::glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedBufferParameterivEXT
  if (s_deviceConfig.m_glGetNamedBufferParameterivEXT)
  {
    s_deviceConfig.m_glGetNamedBufferParameterivEXT (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferPointervEXT

void  glew::gl::glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void ** params)
{
  // GL_EXT_direct_state_access - glGetNamedBufferPointervEXT
  if (s_deviceConfig.m_glGetNamedBufferPointervEXT)
  {
    s_deviceConfig.m_glGetNamedBufferPointervEXT (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferSubDataEXT

void  glew::gl::glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
  // GL_EXT_direct_state_access - glGetNamedBufferSubDataEXT
  if (s_deviceConfig.m_glGetNamedBufferSubDataEXT)
  {
    s_deviceConfig.m_glGetNamedBufferSubDataEXT (buffer, offset, size, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fEXT

void  glew::gl::glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0)
{
  // GL_EXT_direct_state_access - glProgramUniform1fEXT
  if (s_deviceConfig.m_glProgramUniform1fEXT)
  {
    s_deviceConfig.m_glProgramUniform1fEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fEXT

void  glew::gl::glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  // GL_EXT_direct_state_access - glProgramUniform2fEXT
  if (s_deviceConfig.m_glProgramUniform2fEXT)
  {
    s_deviceConfig.m_glProgramUniform2fEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fEXT

void  glew::gl::glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  // GL_EXT_direct_state_access - glProgramUniform3fEXT
  if (s_deviceConfig.m_glProgramUniform3fEXT)
  {
    s_deviceConfig.m_glProgramUniform3fEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fEXT

void  glew::gl::glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  // GL_EXT_direct_state_access - glProgramUniform4fEXT
  if (s_deviceConfig.m_glProgramUniform4fEXT)
  {
    s_deviceConfig.m_glProgramUniform4fEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1iEXT

void  glew::gl::glProgramUniform1iEXT (GLuint program, GLint location, GLint v0)
{
  // GL_EXT_direct_state_access - glProgramUniform1iEXT
  if (s_deviceConfig.m_glProgramUniform1iEXT)
  {
    s_deviceConfig.m_glProgramUniform1iEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2iEXT

void  glew::gl::glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1)
{
  // GL_EXT_direct_state_access - glProgramUniform2iEXT
  if (s_deviceConfig.m_glProgramUniform2iEXT)
  {
    s_deviceConfig.m_glProgramUniform2iEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3iEXT

void  glew::gl::glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  // GL_EXT_direct_state_access - glProgramUniform3iEXT
  if (s_deviceConfig.m_glProgramUniform3iEXT)
  {
    s_deviceConfig.m_glProgramUniform3iEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4iEXT

void  glew::gl::glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  // GL_EXT_direct_state_access - glProgramUniform4iEXT
  if (s_deviceConfig.m_glProgramUniform4iEXT)
  {
    s_deviceConfig.m_glProgramUniform4iEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1fvEXT

void  glew::gl::glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniform1fvEXT
  if (s_deviceConfig.m_glProgramUniform1fvEXT)
  {
    s_deviceConfig.m_glProgramUniform1fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2fvEXT

void  glew::gl::glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniform2fvEXT
  if (s_deviceConfig.m_glProgramUniform2fvEXT)
  {
    s_deviceConfig.m_glProgramUniform2fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3fvEXT

void  glew::gl::glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniform3fvEXT
  if (s_deviceConfig.m_glProgramUniform3fvEXT)
  {
    s_deviceConfig.m_glProgramUniform3fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4fvEXT

void  glew::gl::glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniform4fvEXT
  if (s_deviceConfig.m_glProgramUniform4fvEXT)
  {
    s_deviceConfig.m_glProgramUniform4fvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1ivEXT

void  glew::gl::glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform1ivEXT
  if (s_deviceConfig.m_glProgramUniform1ivEXT)
  {
    s_deviceConfig.m_glProgramUniform1ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2ivEXT

void  glew::gl::glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform2ivEXT
  if (s_deviceConfig.m_glProgramUniform2ivEXT)
  {
    s_deviceConfig.m_glProgramUniform2ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3ivEXT

void  glew::gl::glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform3ivEXT
  if (s_deviceConfig.m_glProgramUniform3ivEXT)
  {
    s_deviceConfig.m_glProgramUniform3ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4ivEXT

void  glew::gl::glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform4ivEXT
  if (s_deviceConfig.m_glProgramUniform4ivEXT)
  {
    s_deviceConfig.m_glProgramUniform4ivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2fvEXT

void  glew::gl::glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3fvEXT

void  glew::gl::glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4fvEXT

void  glew::gl::glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3fvEXT

void  glew::gl::glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2fvEXT

void  glew::gl::glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4fvEXT

void  glew::gl::glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2fvEXT

void  glew::gl::glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4x2fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4fvEXT

void  glew::gl::glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3x4fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3fvEXT

void  glew::gl::glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4x3fvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBufferEXT

void  glew::gl::glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_direct_state_access - glTextureBufferEXT
  if (s_deviceConfig.m_glTextureBufferEXT)
  {
    s_deviceConfig.m_glTextureBufferEXT (texture, target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexBufferEXT

void  glew::gl::glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_direct_state_access - glMultiTexBufferEXT
  if (s_deviceConfig.m_glMultiTexBufferEXT)
  {
    s_deviceConfig.m_glMultiTexBufferEXT (texunit, target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterIivEXT

void  glew::gl::glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glTextureParameterIivEXT
  if (s_deviceConfig.m_glTextureParameterIivEXT)
  {
    s_deviceConfig.m_glTextureParameterIivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureParameterIuivEXT

void  glew::gl::glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_direct_state_access - glTextureParameterIuivEXT
  if (s_deviceConfig.m_glTextureParameterIuivEXT)
  {
    s_deviceConfig.m_glTextureParameterIuivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterIivEXT

void  glew::gl::glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetTextureParameterIivEXT
  if (s_deviceConfig.m_glGetTextureParameterIivEXT)
  {
    s_deviceConfig.m_glGetTextureParameterIivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureParameterIuivEXT

void  glew::gl::glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_direct_state_access - glGetTextureParameterIuivEXT
  if (s_deviceConfig.m_glGetTextureParameterIuivEXT)
  {
    s_deviceConfig.m_glGetTextureParameterIuivEXT (texture, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameterIivEXT

void  glew::gl::glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_direct_state_access - glMultiTexParameterIivEXT
  if (s_deviceConfig.m_glMultiTexParameterIivEXT)
  {
    s_deviceConfig.m_glMultiTexParameterIivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexParameterIuivEXT

void  glew::gl::glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_direct_state_access - glMultiTexParameterIuivEXT
  if (s_deviceConfig.m_glMultiTexParameterIuivEXT)
  {
    s_deviceConfig.m_glMultiTexParameterIuivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexParameterIivEXT

void  glew::gl::glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexParameterIivEXT
  if (s_deviceConfig.m_glGetMultiTexParameterIivEXT)
  {
    s_deviceConfig.m_glGetMultiTexParameterIivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultiTexParameterIuivEXT

void  glew::gl::glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_direct_state_access - glGetMultiTexParameterIuivEXT
  if (s_deviceConfig.m_glGetMultiTexParameterIuivEXT)
  {
    s_deviceConfig.m_glGetMultiTexParameterIuivEXT (texunit, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uiEXT

void  glew::gl::glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0)
{
  // GL_EXT_direct_state_access - glProgramUniform1uiEXT
  if (s_deviceConfig.m_glProgramUniform1uiEXT)
  {
    s_deviceConfig.m_glProgramUniform1uiEXT (program, location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uiEXT

void  glew::gl::glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1)
{
  // GL_EXT_direct_state_access - glProgramUniform2uiEXT
  if (s_deviceConfig.m_glProgramUniform2uiEXT)
  {
    s_deviceConfig.m_glProgramUniform2uiEXT (program, location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uiEXT

void  glew::gl::glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_EXT_direct_state_access - glProgramUniform3uiEXT
  if (s_deviceConfig.m_glProgramUniform3uiEXT)
  {
    s_deviceConfig.m_glProgramUniform3uiEXT (program, location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uiEXT

void  glew::gl::glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_EXT_direct_state_access - glProgramUniform4uiEXT
  if (s_deviceConfig.m_glProgramUniform4uiEXT)
  {
    s_deviceConfig.m_glProgramUniform4uiEXT (program, location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1uivEXT

void  glew::gl::glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform1uivEXT
  if (s_deviceConfig.m_glProgramUniform1uivEXT)
  {
    s_deviceConfig.m_glProgramUniform1uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2uivEXT

void  glew::gl::glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform2uivEXT
  if (s_deviceConfig.m_glProgramUniform2uivEXT)
  {
    s_deviceConfig.m_glProgramUniform2uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3uivEXT

void  glew::gl::glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform3uivEXT
  if (s_deviceConfig.m_glProgramUniform3uivEXT)
  {
    s_deviceConfig.m_glProgramUniform3uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4uivEXT

void  glew::gl::glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_direct_state_access - glProgramUniform4uivEXT
  if (s_deviceConfig.m_glProgramUniform4uivEXT)
  {
    s_deviceConfig.m_glProgramUniform4uivEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameters4fvEXT

void  glew::gl::glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameters4fvEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameters4fvEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameters4fvEXT (program, target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameterI4iEXT

void  glew::gl::glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameterI4iEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameterI4iEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameterI4iEXT (program, target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameterI4ivEXT

void  glew::gl::glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameterI4ivEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameterI4ivEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameterI4ivEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParametersI4ivEXT

void  glew::gl::glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParametersI4ivEXT
  if (s_deviceConfig.m_glNamedProgramLocalParametersI4ivEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParametersI4ivEXT (program, target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameterI4uiEXT

void  glew::gl::glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameterI4uiEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameterI4uiEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameterI4uiEXT (program, target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameterI4uivEXT

void  glew::gl::glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameterI4uivEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameterI4uivEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameterI4uivEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParametersI4uivEXT

void  glew::gl::glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParametersI4uivEXT
  if (s_deviceConfig.m_glNamedProgramLocalParametersI4uivEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParametersI4uivEXT (program, target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramLocalParameterIivEXT

void  glew::gl::glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedProgramLocalParameterIivEXT
  if (s_deviceConfig.m_glGetNamedProgramLocalParameterIivEXT)
  {
    s_deviceConfig.m_glGetNamedProgramLocalParameterIivEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramLocalParameterIuivEXT

void  glew::gl::glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint * params)
{
  // GL_EXT_direct_state_access - glGetNamedProgramLocalParameterIuivEXT
  if (s_deviceConfig.m_glGetNamedProgramLocalParameterIuivEXT)
  {
    s_deviceConfig.m_glGetNamedProgramLocalParameterIuivEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableClientStateiEXT

void  glew::gl::glEnableClientStateiEXT (GLenum array, GLuint index)
{
  // GL_EXT_direct_state_access - glEnableClientStateiEXT
  if (s_deviceConfig.m_glEnableClientStateiEXT)
  {
    s_deviceConfig.m_glEnableClientStateiEXT (array, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableClientStateiEXT

void  glew::gl::glDisableClientStateiEXT (GLenum array, GLuint index)
{
  // GL_EXT_direct_state_access - glDisableClientStateiEXT
  if (s_deviceConfig.m_glDisableClientStateiEXT)
  {
    s_deviceConfig.m_glDisableClientStateiEXT (array, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFloati_vEXT

void  glew::gl::glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetFloati_vEXT
  if (s_deviceConfig.m_glGetFloati_vEXT)
  {
    s_deviceConfig.m_glGetFloati_vEXT (pname, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDoublei_vEXT

void  glew::gl::glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble * params)
{
  // GL_EXT_direct_state_access - glGetDoublei_vEXT
  if (s_deviceConfig.m_glGetDoublei_vEXT)
  {
    s_deviceConfig.m_glGetDoublei_vEXT (pname, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPointeri_vEXT

void  glew::gl::glGetPointeri_vEXT (GLenum pname, GLuint index, void ** params)
{
  // GL_EXT_direct_state_access - glGetPointeri_vEXT
  if (s_deviceConfig.m_glGetPointeri_vEXT)
  {
    s_deviceConfig.m_glGetPointeri_vEXT (pname, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramStringEXT

void  glew::gl::glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void * string)
{
  // GL_EXT_direct_state_access - glNamedProgramStringEXT
  if (s_deviceConfig.m_glNamedProgramStringEXT)
  {
    s_deviceConfig.m_glNamedProgramStringEXT (program, target, format, len, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameter4dEXT

void  glew::gl::glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameter4dEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameter4dEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameter4dEXT (program, target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameter4dvEXT

void  glew::gl::glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameter4dvEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameter4dvEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameter4dvEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameter4fEXT

void  glew::gl::glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameter4fEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameter4fEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameter4fEXT (program, target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedProgramLocalParameter4fvEXT

void  glew::gl::glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat * params)
{
  // GL_EXT_direct_state_access - glNamedProgramLocalParameter4fvEXT
  if (s_deviceConfig.m_glNamedProgramLocalParameter4fvEXT)
  {
    s_deviceConfig.m_glNamedProgramLocalParameter4fvEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramLocalParameterdvEXT

void  glew::gl::glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble * params)
{
  // GL_EXT_direct_state_access - glGetNamedProgramLocalParameterdvEXT
  if (s_deviceConfig.m_glGetNamedProgramLocalParameterdvEXT)
  {
    s_deviceConfig.m_glGetNamedProgramLocalParameterdvEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramLocalParameterfvEXT

void  glew::gl::glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat * params)
{
  // GL_EXT_direct_state_access - glGetNamedProgramLocalParameterfvEXT
  if (s_deviceConfig.m_glGetNamedProgramLocalParameterfvEXT)
  {
    s_deviceConfig.m_glGetNamedProgramLocalParameterfvEXT (program, target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramivEXT

void  glew::gl::glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedProgramivEXT
  if (s_deviceConfig.m_glGetNamedProgramivEXT)
  {
    s_deviceConfig.m_glGetNamedProgramivEXT (program, target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedProgramStringEXT

void  glew::gl::glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void * string)
{
  // GL_EXT_direct_state_access - glGetNamedProgramStringEXT
  if (s_deviceConfig.m_glGetNamedProgramStringEXT)
  {
    s_deviceConfig.m_glGetNamedProgramStringEXT (program, target, pname, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedRenderbufferStorageEXT

void  glew::gl::glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glNamedRenderbufferStorageEXT
  if (s_deviceConfig.m_glNamedRenderbufferStorageEXT)
  {
    s_deviceConfig.m_glNamedRenderbufferStorageEXT (renderbuffer, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedRenderbufferParameterivEXT

void  glew::gl::glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedRenderbufferParameterivEXT
  if (s_deviceConfig.m_glGetNamedRenderbufferParameterivEXT)
  {
    s_deviceConfig.m_glGetNamedRenderbufferParameterivEXT (renderbuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedRenderbufferStorageMultisampleEXT

void  glew::gl::glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glNamedRenderbufferStorageMultisampleEXT
  if (s_deviceConfig.m_glNamedRenderbufferStorageMultisampleEXT)
  {
    s_deviceConfig.m_glNamedRenderbufferStorageMultisampleEXT (renderbuffer, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedRenderbufferStorageMultisampleCoverageEXT

void  glew::gl::glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glNamedRenderbufferStorageMultisampleCoverageEXT
  if (s_deviceConfig.m_glNamedRenderbufferStorageMultisampleCoverageEXT)
  {
    s_deviceConfig.m_glNamedRenderbufferStorageMultisampleCoverageEXT (renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCheckNamedFramebufferStatusEXT

GLenum glew::gl::glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target)
{
  // GL_EXT_direct_state_access - glCheckNamedFramebufferStatusEXT
  if (s_deviceConfig.m_glCheckNamedFramebufferStatusEXT)
  {
    return s_deviceConfig.m_glCheckNamedFramebufferStatusEXT (framebuffer, target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTexture1DEXT

void  glew::gl::glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTexture1DEXT
  if (s_deviceConfig.m_glNamedFramebufferTexture1DEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTexture1DEXT (framebuffer, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTexture2DEXT

void  glew::gl::glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTexture2DEXT
  if (s_deviceConfig.m_glNamedFramebufferTexture2DEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTexture2DEXT (framebuffer, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTexture3DEXT

void  glew::gl::glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTexture3DEXT
  if (s_deviceConfig.m_glNamedFramebufferTexture3DEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTexture3DEXT (framebuffer, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferRenderbufferEXT

void  glew::gl::glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_EXT_direct_state_access - glNamedFramebufferRenderbufferEXT
  if (s_deviceConfig.m_glNamedFramebufferRenderbufferEXT)
  {
    s_deviceConfig.m_glNamedFramebufferRenderbufferEXT (framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedFramebufferAttachmentParameterivEXT

void  glew::gl::glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedFramebufferAttachmentParameterivEXT
  if (s_deviceConfig.m_glGetNamedFramebufferAttachmentParameterivEXT)
  {
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameterivEXT (framebuffer, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenerateTextureMipmapEXT

void  glew::gl::glGenerateTextureMipmapEXT (GLuint texture, GLenum target)
{
  // GL_EXT_direct_state_access - glGenerateTextureMipmapEXT
  if (s_deviceConfig.m_glGenerateTextureMipmapEXT)
  {
    s_deviceConfig.m_glGenerateTextureMipmapEXT (texture, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenerateMultiTexMipmapEXT

void  glew::gl::glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target)
{
  // GL_EXT_direct_state_access - glGenerateMultiTexMipmapEXT
  if (s_deviceConfig.m_glGenerateMultiTexMipmapEXT)
  {
    s_deviceConfig.m_glGenerateMultiTexMipmapEXT (texunit, target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferDrawBufferEXT

void  glew::gl::glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode)
{
  // GL_EXT_direct_state_access - glFramebufferDrawBufferEXT
  if (s_deviceConfig.m_glFramebufferDrawBufferEXT)
  {
    s_deviceConfig.m_glFramebufferDrawBufferEXT (framebuffer, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferDrawBuffersEXT

void  glew::gl::glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
  // GL_EXT_direct_state_access - glFramebufferDrawBuffersEXT
  if (s_deviceConfig.m_glFramebufferDrawBuffersEXT)
  {
    s_deviceConfig.m_glFramebufferDrawBuffersEXT (framebuffer, n, bufs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferReadBufferEXT

void  glew::gl::glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode)
{
  // GL_EXT_direct_state_access - glFramebufferReadBufferEXT
  if (s_deviceConfig.m_glFramebufferReadBufferEXT)
  {
    s_deviceConfig.m_glFramebufferReadBufferEXT (framebuffer, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFramebufferParameterivEXT

void  glew::gl::glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetFramebufferParameterivEXT
  if (s_deviceConfig.m_glGetFramebufferParameterivEXT)
  {
    s_deviceConfig.m_glGetFramebufferParameterivEXT (framebuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedCopyBufferSubDataEXT

void  glew::gl::glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GL_EXT_direct_state_access - glNamedCopyBufferSubDataEXT
  if (s_deviceConfig.m_glNamedCopyBufferSubDataEXT)
  {
    s_deviceConfig.m_glNamedCopyBufferSubDataEXT (readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTextureEXT

void  glew::gl::glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTextureEXT
  if (s_deviceConfig.m_glNamedFramebufferTextureEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTextureEXT (framebuffer, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTextureLayerEXT

void  glew::gl::glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTextureLayerEXT
  if (s_deviceConfig.m_glNamedFramebufferTextureLayerEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTextureLayerEXT (framebuffer, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferTextureFaceEXT

void  glew::gl::glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  // GL_EXT_direct_state_access - glNamedFramebufferTextureFaceEXT
  if (s_deviceConfig.m_glNamedFramebufferTextureFaceEXT)
  {
    s_deviceConfig.m_glNamedFramebufferTextureFaceEXT (framebuffer, attachment, texture, level, face);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureRenderbufferEXT

void  glew::gl::glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer)
{
  // GL_EXT_direct_state_access - glTextureRenderbufferEXT
  if (s_deviceConfig.m_glTextureRenderbufferEXT)
  {
    s_deviceConfig.m_glTextureRenderbufferEXT (texture, target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexRenderbufferEXT

void  glew::gl::glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer)
{
  // GL_EXT_direct_state_access - glMultiTexRenderbufferEXT
  if (s_deviceConfig.m_glMultiTexRenderbufferEXT)
  {
    s_deviceConfig.m_glMultiTexRenderbufferEXT (texunit, target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexOffsetEXT

void  glew::gl::glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexOffsetEXT
  if (s_deviceConfig.m_glVertexArrayVertexOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexOffsetEXT (vaobj, buffer, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayColorOffsetEXT

void  glew::gl::glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayColorOffsetEXT
  if (s_deviceConfig.m_glVertexArrayColorOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayColorOffsetEXT (vaobj, buffer, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayEdgeFlagOffsetEXT

void  glew::gl::glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayEdgeFlagOffsetEXT
  if (s_deviceConfig.m_glVertexArrayEdgeFlagOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayEdgeFlagOffsetEXT (vaobj, buffer, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayIndexOffsetEXT

void  glew::gl::glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayIndexOffsetEXT
  if (s_deviceConfig.m_glVertexArrayIndexOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayIndexOffsetEXT (vaobj, buffer, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayNormalOffsetEXT

void  glew::gl::glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayNormalOffsetEXT
  if (s_deviceConfig.m_glVertexArrayNormalOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayNormalOffsetEXT (vaobj, buffer, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayTexCoordOffsetEXT

void  glew::gl::glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayTexCoordOffsetEXT
  if (s_deviceConfig.m_glVertexArrayTexCoordOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayTexCoordOffsetEXT (vaobj, buffer, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayMultiTexCoordOffsetEXT

void  glew::gl::glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayMultiTexCoordOffsetEXT
  if (s_deviceConfig.m_glVertexArrayMultiTexCoordOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayMultiTexCoordOffsetEXT (vaobj, buffer, texunit, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayFogCoordOffsetEXT

void  glew::gl::glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayFogCoordOffsetEXT
  if (s_deviceConfig.m_glVertexArrayFogCoordOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayFogCoordOffsetEXT (vaobj, buffer, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArraySecondaryColorOffsetEXT

void  glew::gl::glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArraySecondaryColorOffsetEXT
  if (s_deviceConfig.m_glVertexArraySecondaryColorOffsetEXT)
  {
    s_deviceConfig.m_glVertexArraySecondaryColorOffsetEXT (vaobj, buffer, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribOffsetEXT

void  glew::gl::glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribOffsetEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribOffsetEXT (vaobj, buffer, index, size, type, normalized, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribIOffsetEXT

void  glew::gl::glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribIOffsetEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribIOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribIOffsetEXT (vaobj, buffer, index, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexArrayEXT

void  glew::gl::glEnableVertexArrayEXT (GLuint vaobj, GLenum array)
{
  // GL_EXT_direct_state_access - glEnableVertexArrayEXT
  if (s_deviceConfig.m_glEnableVertexArrayEXT)
  {
    s_deviceConfig.m_glEnableVertexArrayEXT (vaobj, array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexArrayEXT

void  glew::gl::glDisableVertexArrayEXT (GLuint vaobj, GLenum array)
{
  // GL_EXT_direct_state_access - glDisableVertexArrayEXT
  if (s_deviceConfig.m_glDisableVertexArrayEXT)
  {
    s_deviceConfig.m_glDisableVertexArrayEXT (vaobj, array);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVertexArrayAttribEXT

void  glew::gl::glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index)
{
  // GL_EXT_direct_state_access - glEnableVertexArrayAttribEXT
  if (s_deviceConfig.m_glEnableVertexArrayAttribEXT)
  {
    s_deviceConfig.m_glEnableVertexArrayAttribEXT (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVertexArrayAttribEXT

void  glew::gl::glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index)
{
  // GL_EXT_direct_state_access - glDisableVertexArrayAttribEXT
  if (s_deviceConfig.m_glDisableVertexArrayAttribEXT)
  {
    s_deviceConfig.m_glDisableVertexArrayAttribEXT (vaobj, index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayIntegervEXT

void  glew::gl::glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint * param)
{
  // GL_EXT_direct_state_access - glGetVertexArrayIntegervEXT
  if (s_deviceConfig.m_glGetVertexArrayIntegervEXT)
  {
    s_deviceConfig.m_glGetVertexArrayIntegervEXT (vaobj, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayPointervEXT

void  glew::gl::glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void ** param)
{
  // GL_EXT_direct_state_access - glGetVertexArrayPointervEXT
  if (s_deviceConfig.m_glGetVertexArrayPointervEXT)
  {
    s_deviceConfig.m_glGetVertexArrayPointervEXT (vaobj, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayIntegeri_vEXT

void  glew::gl::glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
  // GL_EXT_direct_state_access - glGetVertexArrayIntegeri_vEXT
  if (s_deviceConfig.m_glGetVertexArrayIntegeri_vEXT)
  {
    s_deviceConfig.m_glGetVertexArrayIntegeri_vEXT (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexArrayPointeri_vEXT

void  glew::gl::glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void ** param)
{
  // GL_EXT_direct_state_access - glGetVertexArrayPointeri_vEXT
  if (s_deviceConfig.m_glGetVertexArrayPointeri_vEXT)
  {
    s_deviceConfig.m_glGetVertexArrayPointeri_vEXT (vaobj, index, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapNamedBufferRangeEXT

void * glew::gl::glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  // GL_EXT_direct_state_access - glMapNamedBufferRangeEXT
  if (s_deviceConfig.m_glMapNamedBufferRangeEXT)
  {
    return s_deviceConfig.m_glMapNamedBufferRangeEXT (buffer, offset, length, access);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushMappedNamedBufferRangeEXT

void  glew::gl::glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  // GL_EXT_direct_state_access - glFlushMappedNamedBufferRangeEXT
  if (s_deviceConfig.m_glFlushMappedNamedBufferRangeEXT)
  {
    s_deviceConfig.m_glFlushMappedNamedBufferRangeEXT (buffer, offset, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedBufferStorageEXT

void  glew::gl::glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
  // GL_EXT_direct_state_access - glNamedBufferStorageEXT
  if (s_deviceConfig.m_glNamedBufferStorageEXT)
  {
    s_deviceConfig.m_glNamedBufferStorageEXT (buffer, size, data, flags);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedBufferDataEXT

void  glew::gl::glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
  // GL_EXT_direct_state_access - glClearNamedBufferDataEXT
  if (s_deviceConfig.m_glClearNamedBufferDataEXT)
  {
    s_deviceConfig.m_glClearNamedBufferDataEXT (buffer, internalformat, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearNamedBufferSubDataEXT

void  glew::gl::glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
  // GL_EXT_direct_state_access - glClearNamedBufferSubDataEXT
  if (s_deviceConfig.m_glClearNamedBufferSubDataEXT)
  {
    s_deviceConfig.m_glClearNamedBufferSubDataEXT (buffer, internalformat, offset, size, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferParameteriEXT

void  glew::gl::glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param)
{
  // GL_EXT_direct_state_access - glNamedFramebufferParameteriEXT
  if (s_deviceConfig.m_glNamedFramebufferParameteriEXT)
  {
    s_deviceConfig.m_glNamedFramebufferParameteriEXT (framebuffer, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedFramebufferParameterivEXT

void  glew::gl::glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint * params)
{
  // GL_EXT_direct_state_access - glGetNamedFramebufferParameterivEXT
  if (s_deviceConfig.m_glGetNamedFramebufferParameterivEXT)
  {
    s_deviceConfig.m_glGetNamedFramebufferParameterivEXT (framebuffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1dEXT

void  glew::gl::glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x)
{
  // GL_EXT_direct_state_access - glProgramUniform1dEXT
  if (s_deviceConfig.m_glProgramUniform1dEXT)
  {
    s_deviceConfig.m_glProgramUniform1dEXT (program, location, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2dEXT

void  glew::gl::glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y)
{
  // GL_EXT_direct_state_access - glProgramUniform2dEXT
  if (s_deviceConfig.m_glProgramUniform2dEXT)
  {
    s_deviceConfig.m_glProgramUniform2dEXT (program, location, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3dEXT

void  glew::gl::glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_EXT_direct_state_access - glProgramUniform3dEXT
  if (s_deviceConfig.m_glProgramUniform3dEXT)
  {
    s_deviceConfig.m_glProgramUniform3dEXT (program, location, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4dEXT

void  glew::gl::glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_EXT_direct_state_access - glProgramUniform4dEXT
  if (s_deviceConfig.m_glProgramUniform4dEXT)
  {
    s_deviceConfig.m_glProgramUniform4dEXT (program, location, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform1dvEXT

void  glew::gl::glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniform1dvEXT
  if (s_deviceConfig.m_glProgramUniform1dvEXT)
  {
    s_deviceConfig.m_glProgramUniform1dvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform2dvEXT

void  glew::gl::glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniform2dvEXT
  if (s_deviceConfig.m_glProgramUniform2dvEXT)
  {
    s_deviceConfig.m_glProgramUniform2dvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform3dvEXT

void  glew::gl::glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniform3dvEXT
  if (s_deviceConfig.m_glProgramUniform3dvEXT)
  {
    s_deviceConfig.m_glProgramUniform3dvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniform4dvEXT

void  glew::gl::glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniform4dvEXT
  if (s_deviceConfig.m_glProgramUniform4dvEXT)
  {
    s_deviceConfig.m_glProgramUniform4dvEXT (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2dvEXT

void  glew::gl::glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3dvEXT

void  glew::gl::glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4dvEXT

void  glew::gl::glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x3dvEXT

void  glew::gl::glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2x3dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x3dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix2x4dvEXT

void  glew::gl::glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix2x4dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix2x4dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix2x4dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x2dvEXT

void  glew::gl::glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3x2dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x2dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x2dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix3x4dvEXT

void  glew::gl::glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix3x4dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix3x4dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix3x4dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x2dvEXT

void  glew::gl::glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4x2dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x2dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x2dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformMatrix4x3dvEXT

void  glew::gl::glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
  // GL_EXT_direct_state_access - glProgramUniformMatrix4x3dvEXT
  if (s_deviceConfig.m_glProgramUniformMatrix4x3dvEXT)
  {
    s_deviceConfig.m_glProgramUniformMatrix4x3dvEXT (program, location, count, transpose, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBufferRangeEXT

void  glew::gl::glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_EXT_direct_state_access - glTextureBufferRangeEXT
  if (s_deviceConfig.m_glTextureBufferRangeEXT)
  {
    s_deviceConfig.m_glTextureBufferRangeEXT (texture, target, internalformat, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage1DEXT

void  glew::gl::glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  // GL_EXT_direct_state_access - glTextureStorage1DEXT
  if (s_deviceConfig.m_glTextureStorage1DEXT)
  {
    s_deviceConfig.m_glTextureStorage1DEXT (texture, target, levels, internalformat, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage2DEXT

void  glew::gl::glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_direct_state_access - glTextureStorage2DEXT
  if (s_deviceConfig.m_glTextureStorage2DEXT)
  {
    s_deviceConfig.m_glTextureStorage2DEXT (texture, target, levels, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage3DEXT

void  glew::gl::glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_EXT_direct_state_access - glTextureStorage3DEXT
  if (s_deviceConfig.m_glTextureStorage3DEXT)
  {
    s_deviceConfig.m_glTextureStorage3DEXT (texture, target, levels, internalformat, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage2DMultisampleEXT

void  glew::gl::glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  // GL_EXT_direct_state_access - glTextureStorage2DMultisampleEXT
  if (s_deviceConfig.m_glTextureStorage2DMultisampleEXT)
  {
    s_deviceConfig.m_glTextureStorage2DMultisampleEXT (texture, target, samples, internalformat, width, height, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureStorage3DMultisampleEXT

void  glew::gl::glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  // GL_EXT_direct_state_access - glTextureStorage3DMultisampleEXT
  if (s_deviceConfig.m_glTextureStorage3DMultisampleEXT)
  {
    s_deviceConfig.m_glTextureStorage3DMultisampleEXT (texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayBindVertexBufferEXT

void  glew::gl::glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  // GL_EXT_direct_state_access - glVertexArrayBindVertexBufferEXT
  if (s_deviceConfig.m_glVertexArrayBindVertexBufferEXT)
  {
    s_deviceConfig.m_glVertexArrayBindVertexBufferEXT (vaobj, bindingindex, buffer, offset, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribFormatEXT

void  glew::gl::glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribFormatEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribFormatEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribFormatEXT (vaobj, attribindex, size, type, normalized, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribIFormatEXT

void  glew::gl::glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribIFormatEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribIFormatEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribIFormatEXT (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribLFormatEXT

void  glew::gl::glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribLFormatEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribLFormatEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribLFormatEXT (vaobj, attribindex, size, type, relativeoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribBindingEXT

void  glew::gl::glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribBindingEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribBindingEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribBindingEXT (vaobj, attribindex, bindingindex);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexBindingDivisorEXT

void  glew::gl::glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexBindingDivisorEXT
  if (s_deviceConfig.m_glVertexArrayVertexBindingDivisorEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexBindingDivisorEXT (vaobj, bindingindex, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribLOffsetEXT

void  glew::gl::glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribLOffsetEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribLOffsetEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribLOffsetEXT (vaobj, buffer, index, size, type, stride, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexturePageCommitmentEXT

void  glew::gl::glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  // GL_EXT_direct_state_access - glTexturePageCommitmentEXT
  if (s_deviceConfig.m_glTexturePageCommitmentEXT)
  {
    s_deviceConfig.m_glTexturePageCommitmentEXT (texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayVertexAttribDivisorEXT

void  glew::gl::glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor)
{
  // GL_EXT_direct_state_access - glVertexArrayVertexAttribDivisorEXT
  if (s_deviceConfig.m_glVertexArrayVertexAttribDivisorEXT)
  {
    s_deviceConfig.m_glVertexArrayVertexAttribDivisorEXT (vaobj, index, divisor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorMaskIndexedEXT

void  glew::gl::glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  // GL_EXT_draw_buffers2 - glColorMaskIndexedEXT
  if (s_deviceConfig.m_glColorMaskIndexedEXT)
  {
    s_deviceConfig.m_glColorMaskIndexedEXT (index, r, g, b, a);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysInstancedEXT

void  glew::gl::glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawArraysInstancedEXT
  if (s_deviceConfig.m_glDrawArraysInstancedEXT)
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT (mode, start, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawElementsInstancedEXT

void  glew::gl::glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount)
{
  // GL_EXT_draw_instanced - glDrawElementsInstancedEXT
  if (s_deviceConfig.m_glDrawElementsInstancedEXT)
  {
    s_deviceConfig.m_glDrawElementsInstancedEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawRangeElementsEXT

void  glew::gl::glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices)
{
  // GL_EXT_draw_range_elements - glDrawRangeElementsEXT
  if (s_deviceConfig.m_glDrawRangeElementsEXT)
  {
    s_deviceConfig.m_glDrawRangeElementsEXT (mode, start, end, count, type, indices);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordfEXT

void  glew::gl::glFogCoordfEXT (GLfloat coord)
{
  // GL_EXT_fog_coord - glFogCoordfEXT
  if (s_deviceConfig.m_glFogCoordfEXT)
  {
    s_deviceConfig.m_glFogCoordfEXT (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordfvEXT

void  glew::gl::glFogCoordfvEXT (const GLfloat * coord)
{
  // GL_EXT_fog_coord - glFogCoordfvEXT
  if (s_deviceConfig.m_glFogCoordfvEXT)
  {
    s_deviceConfig.m_glFogCoordfvEXT (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoorddEXT

void  glew::gl::glFogCoorddEXT (GLdouble coord)
{
  // GL_EXT_fog_coord - glFogCoorddEXT
  if (s_deviceConfig.m_glFogCoorddEXT)
  {
    s_deviceConfig.m_glFogCoorddEXT (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoorddvEXT

void  glew::gl::glFogCoorddvEXT (const GLdouble * coord)
{
  // GL_EXT_fog_coord - glFogCoorddvEXT
  if (s_deviceConfig.m_glFogCoorddvEXT)
  {
    s_deviceConfig.m_glFogCoorddvEXT (coord);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordPointerEXT

void  glew::gl::glFogCoordPointerEXT (GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_fog_coord - glFogCoordPointerEXT
  if (s_deviceConfig.m_glFogCoordPointerEXT)
  {
    s_deviceConfig.m_glFogCoordPointerEXT (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlitFramebufferEXT

void  glew::gl::glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GL_EXT_framebuffer_blit - glBlitFramebufferEXT
  if (s_deviceConfig.m_glBlitFramebufferEXT)
  {
    s_deviceConfig.m_glBlitFramebufferEXT (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleEXT

void  glew::gl::glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_framebuffer_multisample - glRenderbufferStorageMultisampleEXT
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleEXT)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT (target, samples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsRenderbufferEXT

GLboolean glew::gl::glIsRenderbufferEXT (GLuint renderbuffer)
{
  // GL_EXT_framebuffer_object - glIsRenderbufferEXT
  if (s_deviceConfig.m_glIsRenderbufferEXT)
  {
    return s_deviceConfig.m_glIsRenderbufferEXT (renderbuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindRenderbufferEXT

void  glew::gl::glBindRenderbufferEXT (GLenum target, GLuint renderbuffer)
{
  // GL_EXT_framebuffer_object - glBindRenderbufferEXT
  if (s_deviceConfig.m_glBindRenderbufferEXT)
  {
    s_deviceConfig.m_glBindRenderbufferEXT (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteRenderbuffersEXT

void  glew::gl::glDeleteRenderbuffersEXT (GLsizei n, const GLuint * renderbuffers)
{
  // GL_EXT_framebuffer_object - glDeleteRenderbuffersEXT
  if (s_deviceConfig.m_glDeleteRenderbuffersEXT)
  {
    s_deviceConfig.m_glDeleteRenderbuffersEXT (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenRenderbuffersEXT

void  glew::gl::glGenRenderbuffersEXT (GLsizei n, GLuint * renderbuffers)
{
  // GL_EXT_framebuffer_object - glGenRenderbuffersEXT
  if (s_deviceConfig.m_glGenRenderbuffersEXT)
  {
    s_deviceConfig.m_glGenRenderbuffersEXT (n, renderbuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageEXT

void  glew::gl::glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_EXT_framebuffer_object - glRenderbufferStorageEXT
  if (s_deviceConfig.m_glRenderbufferStorageEXT)
  {
    s_deviceConfig.m_glRenderbufferStorageEXT (target, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetRenderbufferParameterivEXT

void  glew::gl::glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_framebuffer_object - glGetRenderbufferParameterivEXT
  if (s_deviceConfig.m_glGetRenderbufferParameterivEXT)
  {
    s_deviceConfig.m_glGetRenderbufferParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsFramebufferEXT

GLboolean glew::gl::glIsFramebufferEXT (GLuint framebuffer)
{
  // GL_EXT_framebuffer_object - glIsFramebufferEXT
  if (s_deviceConfig.m_glIsFramebufferEXT)
  {
    return s_deviceConfig.m_glIsFramebufferEXT (framebuffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFramebufferEXT

void  glew::gl::glBindFramebufferEXT (GLenum target, GLuint framebuffer)
{
  // GL_EXT_framebuffer_object - glBindFramebufferEXT
  if (s_deviceConfig.m_glBindFramebufferEXT)
  {
    s_deviceConfig.m_glBindFramebufferEXT (target, framebuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFramebuffersEXT

void  glew::gl::glDeleteFramebuffersEXT (GLsizei n, const GLuint * framebuffers)
{
  // GL_EXT_framebuffer_object - glDeleteFramebuffersEXT
  if (s_deviceConfig.m_glDeleteFramebuffersEXT)
  {
    s_deviceConfig.m_glDeleteFramebuffersEXT (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFramebuffersEXT

void  glew::gl::glGenFramebuffersEXT (GLsizei n, GLuint * framebuffers)
{
  // GL_EXT_framebuffer_object - glGenFramebuffersEXT
  if (s_deviceConfig.m_glGenFramebuffersEXT)
  {
    s_deviceConfig.m_glGenFramebuffersEXT (n, framebuffers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCheckFramebufferStatusEXT

GLenum glew::gl::glCheckFramebufferStatusEXT (GLenum target)
{
  // GL_EXT_framebuffer_object - glCheckFramebufferStatusEXT
  if (s_deviceConfig.m_glCheckFramebufferStatusEXT)
  {
    return s_deviceConfig.m_glCheckFramebufferStatusEXT (target);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture1DEXT

void  glew::gl::glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_EXT_framebuffer_object - glFramebufferTexture1DEXT
  if (s_deviceConfig.m_glFramebufferTexture1DEXT)
  {
    s_deviceConfig.m_glFramebufferTexture1DEXT (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture2DEXT

void  glew::gl::glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  // GL_EXT_framebuffer_object - glFramebufferTexture2DEXT
  if (s_deviceConfig.m_glFramebufferTexture2DEXT)
  {
    s_deviceConfig.m_glFramebufferTexture2DEXT (target, attachment, textarget, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTexture3DEXT

void  glew::gl::glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  // GL_EXT_framebuffer_object - glFramebufferTexture3DEXT
  if (s_deviceConfig.m_glFramebufferTexture3DEXT)
  {
    s_deviceConfig.m_glFramebufferTexture3DEXT (target, attachment, textarget, texture, level, zoffset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferRenderbufferEXT

void  glew::gl::glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  // GL_EXT_framebuffer_object - glFramebufferRenderbufferEXT
  if (s_deviceConfig.m_glFramebufferRenderbufferEXT)
  {
    s_deviceConfig.m_glFramebufferRenderbufferEXT (target, attachment, renderbuffertarget, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFramebufferAttachmentParameterivEXT

void  glew::gl::glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint * params)
{
  // GL_EXT_framebuffer_object - glGetFramebufferAttachmentParameterivEXT
  if (s_deviceConfig.m_glGetFramebufferAttachmentParameterivEXT)
  {
    s_deviceConfig.m_glGetFramebufferAttachmentParameterivEXT (target, attachment, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenerateMipmapEXT

void  glew::gl::glGenerateMipmapEXT (GLenum target)
{
  // GL_EXT_framebuffer_object - glGenerateMipmapEXT
  if (s_deviceConfig.m_glGenerateMipmapEXT)
  {
    s_deviceConfig.m_glGenerateMipmapEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameteriEXT

void  glew::gl::glProgramParameteriEXT (GLuint program, GLenum pname, GLint value)
{
  // GL_EXT_geometry_shader4 - glProgramParameteriEXT
  if (s_deviceConfig.m_glProgramParameteriEXT)
  {
    s_deviceConfig.m_glProgramParameteriEXT (program, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameters4fvEXT

void  glew::gl::glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
  // GL_EXT_gpu_program_parameters - glProgramEnvParameters4fvEXT
  if (s_deviceConfig.m_glProgramEnvParameters4fvEXT)
  {
    s_deviceConfig.m_glProgramEnvParameters4fvEXT (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameters4fvEXT

void  glew::gl::glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat * params)
{
  // GL_EXT_gpu_program_parameters - glProgramLocalParameters4fvEXT
  if (s_deviceConfig.m_glProgramLocalParameters4fvEXT)
  {
    s_deviceConfig.m_glProgramLocalParameters4fvEXT (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetUniformuivEXT

void  glew::gl::glGetUniformuivEXT (GLuint program, GLint location, GLuint * params)
{
  // GL_EXT_gpu_shader4 - glGetUniformuivEXT
  if (s_deviceConfig.m_glGetUniformuivEXT)
  {
    s_deviceConfig.m_glGetUniformuivEXT (program, location, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindFragDataLocationEXT

void  glew::gl::glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar * name)
{
  // GL_EXT_gpu_shader4 - glBindFragDataLocationEXT
  if (s_deviceConfig.m_glBindFragDataLocationEXT)
  {
    s_deviceConfig.m_glBindFragDataLocationEXT (program, color, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragDataLocationEXT

GLint glew::gl::glGetFragDataLocationEXT (GLuint program, const GLchar * name)
{
  // GL_EXT_gpu_shader4 - glGetFragDataLocationEXT
  if (s_deviceConfig.m_glGetFragDataLocationEXT)
  {
    return s_deviceConfig.m_glGetFragDataLocationEXT (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1uiEXT

void  glew::gl::glUniform1uiEXT (GLint location, GLuint v0)
{
  // GL_EXT_gpu_shader4 - glUniform1uiEXT
  if (s_deviceConfig.m_glUniform1uiEXT)
  {
    s_deviceConfig.m_glUniform1uiEXT (location, v0);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2uiEXT

void  glew::gl::glUniform2uiEXT (GLint location, GLuint v0, GLuint v1)
{
  // GL_EXT_gpu_shader4 - glUniform2uiEXT
  if (s_deviceConfig.m_glUniform2uiEXT)
  {
    s_deviceConfig.m_glUniform2uiEXT (location, v0, v1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3uiEXT

void  glew::gl::glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  // GL_EXT_gpu_shader4 - glUniform3uiEXT
  if (s_deviceConfig.m_glUniform3uiEXT)
  {
    s_deviceConfig.m_glUniform3uiEXT (location, v0, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4uiEXT

void  glew::gl::glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  // GL_EXT_gpu_shader4 - glUniform4uiEXT
  if (s_deviceConfig.m_glUniform4uiEXT)
  {
    s_deviceConfig.m_glUniform4uiEXT (location, v0, v1, v2, v3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform1uivEXT

void  glew::gl::glUniform1uivEXT (GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_gpu_shader4 - glUniform1uivEXT
  if (s_deviceConfig.m_glUniform1uivEXT)
  {
    s_deviceConfig.m_glUniform1uivEXT (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform2uivEXT

void  glew::gl::glUniform2uivEXT (GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_gpu_shader4 - glUniform2uivEXT
  if (s_deviceConfig.m_glUniform2uivEXT)
  {
    s_deviceConfig.m_glUniform2uivEXT (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform3uivEXT

void  glew::gl::glUniform3uivEXT (GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_gpu_shader4 - glUniform3uivEXT
  if (s_deviceConfig.m_glUniform3uivEXT)
  {
    s_deviceConfig.m_glUniform3uivEXT (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniform4uivEXT

void  glew::gl::glUniform4uivEXT (GLint location, GLsizei count, const GLuint * value)
{
  // GL_EXT_gpu_shader4 - glUniform4uivEXT
  if (s_deviceConfig.m_glUniform4uivEXT)
  {
    s_deviceConfig.m_glUniform4uivEXT (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramEXT

void  glew::gl::glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
  // GL_EXT_histogram - glGetHistogramEXT
  if (s_deviceConfig.m_glGetHistogramEXT)
  {
    s_deviceConfig.m_glGetHistogramEXT (target, reset, format, type, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramParameterfvEXT

void  glew::gl::glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_histogram - glGetHistogramParameterfvEXT
  if (s_deviceConfig.m_glGetHistogramParameterfvEXT)
  {
    s_deviceConfig.m_glGetHistogramParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramParameterivEXT

void  glew::gl::glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_histogram - glGetHistogramParameterivEXT
  if (s_deviceConfig.m_glGetHistogramParameterivEXT)
  {
    s_deviceConfig.m_glGetHistogramParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmaxEXT

void  glew::gl::glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values)
{
  // GL_EXT_histogram - glGetMinmaxEXT
  if (s_deviceConfig.m_glGetMinmaxEXT)
  {
    s_deviceConfig.m_glGetMinmaxEXT (target, reset, format, type, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmaxParameterfvEXT

void  glew::gl::glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_histogram - glGetMinmaxParameterfvEXT
  if (s_deviceConfig.m_glGetMinmaxParameterfvEXT)
  {
    s_deviceConfig.m_glGetMinmaxParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMinmaxParameterivEXT

void  glew::gl::glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_histogram - glGetMinmaxParameterivEXT
  if (s_deviceConfig.m_glGetMinmaxParameterivEXT)
  {
    s_deviceConfig.m_glGetMinmaxParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glHistogramEXT

void  glew::gl::glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  // GL_EXT_histogram - glHistogramEXT
  if (s_deviceConfig.m_glHistogramEXT)
  {
    s_deviceConfig.m_glHistogramEXT (target, width, internalformat, sink);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMinmaxEXT

void  glew::gl::glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink)
{
  // GL_EXT_histogram - glMinmaxEXT
  if (s_deviceConfig.m_glMinmaxEXT)
  {
    s_deviceConfig.m_glMinmaxEXT (target, internalformat, sink);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResetHistogramEXT

void  glew::gl::glResetHistogramEXT (GLenum target)
{
  // GL_EXT_histogram - glResetHistogramEXT
  if (s_deviceConfig.m_glResetHistogramEXT)
  {
    s_deviceConfig.m_glResetHistogramEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResetMinmaxEXT

void  glew::gl::glResetMinmaxEXT (GLenum target)
{
  // GL_EXT_histogram - glResetMinmaxEXT
  if (s_deviceConfig.m_glResetMinmaxEXT)
  {
    s_deviceConfig.m_glResetMinmaxEXT (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexFuncEXT

void  glew::gl::glIndexFuncEXT (GLenum func, GLclampf ref)
{
  // GL_EXT_index_func - glIndexFuncEXT
  if (s_deviceConfig.m_glIndexFuncEXT)
  {
    s_deviceConfig.m_glIndexFuncEXT (func, ref);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexMaterialEXT

void  glew::gl::glIndexMaterialEXT (GLenum face, GLenum mode)
{
  // GL_EXT_index_material - glIndexMaterialEXT
  if (s_deviceConfig.m_glIndexMaterialEXT)
  {
    s_deviceConfig.m_glIndexMaterialEXT (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glApplyTextureEXT

void  glew::gl::glApplyTextureEXT (GLenum mode)
{
  // GL_EXT_light_texture - glApplyTextureEXT
  if (s_deviceConfig.m_glApplyTextureEXT)
  {
    s_deviceConfig.m_glApplyTextureEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureLightEXT

void  glew::gl::glTextureLightEXT (GLenum pname)
{
  // GL_EXT_light_texture - glTextureLightEXT
  if (s_deviceConfig.m_glTextureLightEXT)
  {
    s_deviceConfig.m_glTextureLightEXT (pname);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureMaterialEXT

void  glew::gl::glTextureMaterialEXT (GLenum face, GLenum mode)
{
  // GL_EXT_light_texture - glTextureMaterialEXT
  if (s_deviceConfig.m_glTextureMaterialEXT)
  {
    s_deviceConfig.m_glTextureMaterialEXT (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysEXT

void  glew::gl::glMultiDrawArraysEXT (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawArraysEXT
  if (s_deviceConfig.m_glMultiDrawArraysEXT)
  {
    s_deviceConfig.m_glMultiDrawArraysEXT (mode, first, count, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsEXT

void  glew::gl::glMultiDrawElementsEXT (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount)
{
  // GL_EXT_multi_draw_arrays - glMultiDrawElementsEXT
  if (s_deviceConfig.m_glMultiDrawElementsEXT)
  {
    s_deviceConfig.m_glMultiDrawElementsEXT (mode, count, type, indices, primcount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMaskEXT

void  glew::gl::glSampleMaskEXT (GLclampf value, GLboolean invert)
{
  // GL_EXT_multisample - glSampleMaskEXT
  if (s_deviceConfig.m_glSampleMaskEXT)
  {
    s_deviceConfig.m_glSampleMaskEXT (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplePatternEXT

void  glew::gl::glSamplePatternEXT (GLenum pattern)
{
  // GL_EXT_multisample - glSamplePatternEXT
  if (s_deviceConfig.m_glSamplePatternEXT)
  {
    s_deviceConfig.m_glSamplePatternEXT (pattern);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableEXT

void  glew::gl::glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table)
{
  // GL_EXT_paletted_texture - glColorTableEXT
  if (s_deviceConfig.m_glColorTableEXT)
  {
    s_deviceConfig.m_glColorTableEXT (target, internalFormat, width, format, type, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableEXT

void  glew::gl::glGetColorTableEXT (GLenum target, GLenum format, GLenum type, void * data)
{
  // GL_EXT_paletted_texture - glGetColorTableEXT
  if (s_deviceConfig.m_glGetColorTableEXT)
  {
    s_deviceConfig.m_glGetColorTableEXT (target, format, type, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameterivEXT

void  glew::gl::glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_paletted_texture - glGetColorTableParameterivEXT
  if (s_deviceConfig.m_glGetColorTableParameterivEXT)
  {
    s_deviceConfig.m_glGetColorTableParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameterfvEXT

void  glew::gl::glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_paletted_texture - glGetColorTableParameterfvEXT
  if (s_deviceConfig.m_glGetColorTableParameterfvEXT)
  {
    s_deviceConfig.m_glGetColorTableParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTransformParameteriEXT

void  glew::gl::glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param)
{
  // GL_EXT_pixel_transform - glPixelTransformParameteriEXT
  if (s_deviceConfig.m_glPixelTransformParameteriEXT)
  {
    s_deviceConfig.m_glPixelTransformParameteriEXT (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTransformParameterfEXT

void  glew::gl::glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param)
{
  // GL_EXT_pixel_transform - glPixelTransformParameterfEXT
  if (s_deviceConfig.m_glPixelTransformParameterfEXT)
  {
    s_deviceConfig.m_glPixelTransformParameterfEXT (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTransformParameterivEXT

void  glew::gl::glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_pixel_transform - glPixelTransformParameterivEXT
  if (s_deviceConfig.m_glPixelTransformParameterivEXT)
  {
    s_deviceConfig.m_glPixelTransformParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTransformParameterfvEXT

void  glew::gl::glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_EXT_pixel_transform - glPixelTransformParameterfvEXT
  if (s_deviceConfig.m_glPixelTransformParameterfvEXT)
  {
    s_deviceConfig.m_glPixelTransformParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPixelTransformParameterivEXT

void  glew::gl::glGetPixelTransformParameterivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_pixel_transform - glGetPixelTransformParameterivEXT
  if (s_deviceConfig.m_glGetPixelTransformParameterivEXT)
  {
    s_deviceConfig.m_glGetPixelTransformParameterivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPixelTransformParameterfvEXT

void  glew::gl::glGetPixelTransformParameterfvEXT (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_EXT_pixel_transform - glGetPixelTransformParameterfvEXT
  if (s_deviceConfig.m_glGetPixelTransformParameterfvEXT)
  {
    s_deviceConfig.m_glGetPixelTransformParameterfvEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfEXT

void  glew::gl::glPointParameterfEXT (GLenum pname, GLfloat param)
{
  // GL_EXT_point_parameters - glPointParameterfEXT
  if (s_deviceConfig.m_glPointParameterfEXT)
  {
    s_deviceConfig.m_glPointParameterfEXT (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfvEXT

void  glew::gl::glPointParameterfvEXT (GLenum pname, const GLfloat * params)
{
  // GL_EXT_point_parameters - glPointParameterfvEXT
  if (s_deviceConfig.m_glPointParameterfvEXT)
  {
    s_deviceConfig.m_glPointParameterfvEXT (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPolygonOffsetEXT

void  glew::gl::glPolygonOffsetEXT (GLfloat factor, GLfloat bias)
{
  // GL_EXT_polygon_offset - glPolygonOffsetEXT
  if (s_deviceConfig.m_glPolygonOffsetEXT)
  {
    s_deviceConfig.m_glPolygonOffsetEXT (factor, bias);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPolygonOffsetClampEXT

void  glew::gl::glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp)
{
  // GL_EXT_polygon_offset_clamp - glPolygonOffsetClampEXT
  if (s_deviceConfig.m_glPolygonOffsetClampEXT)
  {
    s_deviceConfig.m_glPolygonOffsetClampEXT (factor, units, clamp);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProvokingVertexEXT

void  glew::gl::glProvokingVertexEXT (GLenum mode)
{
  // GL_EXT_provoking_vertex - glProvokingVertexEXT
  if (s_deviceConfig.m_glProvokingVertexEXT)
  {
    s_deviceConfig.m_glProvokingVertexEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterSamplesEXT

void  glew::gl::glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations)
{
  // GL_EXT_raster_multisample - glRasterSamplesEXT
  if (s_deviceConfig.m_glRasterSamplesEXT)
  {
    s_deviceConfig.m_glRasterSamplesEXT (samples, fixedsamplelocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3bEXT

void  glew::gl::glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3bEXT
  if (s_deviceConfig.m_glSecondaryColor3bEXT)
  {
    s_deviceConfig.m_glSecondaryColor3bEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3bvEXT

void  glew::gl::glSecondaryColor3bvEXT (const GLbyte * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3bvEXT
  if (s_deviceConfig.m_glSecondaryColor3bvEXT)
  {
    s_deviceConfig.m_glSecondaryColor3bvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3dEXT

void  glew::gl::glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3dEXT
  if (s_deviceConfig.m_glSecondaryColor3dEXT)
  {
    s_deviceConfig.m_glSecondaryColor3dEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3dvEXT

void  glew::gl::glSecondaryColor3dvEXT (const GLdouble * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3dvEXT
  if (s_deviceConfig.m_glSecondaryColor3dvEXT)
  {
    s_deviceConfig.m_glSecondaryColor3dvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3fEXT

void  glew::gl::glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3fEXT
  if (s_deviceConfig.m_glSecondaryColor3fEXT)
  {
    s_deviceConfig.m_glSecondaryColor3fEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3fvEXT

void  glew::gl::glSecondaryColor3fvEXT (const GLfloat * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3fvEXT
  if (s_deviceConfig.m_glSecondaryColor3fvEXT)
  {
    s_deviceConfig.m_glSecondaryColor3fvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3iEXT

void  glew::gl::glSecondaryColor3iEXT (GLint red, GLint green, GLint blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3iEXT
  if (s_deviceConfig.m_glSecondaryColor3iEXT)
  {
    s_deviceConfig.m_glSecondaryColor3iEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ivEXT

void  glew::gl::glSecondaryColor3ivEXT (const GLint * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3ivEXT
  if (s_deviceConfig.m_glSecondaryColor3ivEXT)
  {
    s_deviceConfig.m_glSecondaryColor3ivEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3sEXT

void  glew::gl::glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3sEXT
  if (s_deviceConfig.m_glSecondaryColor3sEXT)
  {
    s_deviceConfig.m_glSecondaryColor3sEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3svEXT

void  glew::gl::glSecondaryColor3svEXT (const GLshort * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3svEXT
  if (s_deviceConfig.m_glSecondaryColor3svEXT)
  {
    s_deviceConfig.m_glSecondaryColor3svEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ubEXT

void  glew::gl::glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3ubEXT
  if (s_deviceConfig.m_glSecondaryColor3ubEXT)
  {
    s_deviceConfig.m_glSecondaryColor3ubEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3ubvEXT

void  glew::gl::glSecondaryColor3ubvEXT (const GLubyte * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3ubvEXT
  if (s_deviceConfig.m_glSecondaryColor3ubvEXT)
  {
    s_deviceConfig.m_glSecondaryColor3ubvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3uiEXT

void  glew::gl::glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3uiEXT
  if (s_deviceConfig.m_glSecondaryColor3uiEXT)
  {
    s_deviceConfig.m_glSecondaryColor3uiEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3uivEXT

void  glew::gl::glSecondaryColor3uivEXT (const GLuint * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3uivEXT
  if (s_deviceConfig.m_glSecondaryColor3uivEXT)
  {
    s_deviceConfig.m_glSecondaryColor3uivEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3usEXT

void  glew::gl::glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue)
{
  // GL_EXT_secondary_color - glSecondaryColor3usEXT
  if (s_deviceConfig.m_glSecondaryColor3usEXT)
  {
    s_deviceConfig.m_glSecondaryColor3usEXT (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3usvEXT

void  glew::gl::glSecondaryColor3usvEXT (const GLushort * v)
{
  // GL_EXT_secondary_color - glSecondaryColor3usvEXT
  if (s_deviceConfig.m_glSecondaryColor3usvEXT)
  {
    s_deviceConfig.m_glSecondaryColor3usvEXT (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorPointerEXT

void  glew::gl::glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_secondary_color - glSecondaryColorPointerEXT
  if (s_deviceConfig.m_glSecondaryColorPointerEXT)
  {
    s_deviceConfig.m_glSecondaryColorPointerEXT (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUseShaderProgramEXT

void  glew::gl::glUseShaderProgramEXT (GLenum type, GLuint program)
{
  // GL_EXT_separate_shader_objects - glUseShaderProgramEXT
  if (s_deviceConfig.m_glUseShaderProgramEXT)
  {
    s_deviceConfig.m_glUseShaderProgramEXT (type, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveProgramEXT

void  glew::gl::glActiveProgramEXT (GLuint program)
{
  // GL_EXT_separate_shader_objects - glActiveProgramEXT
  if (s_deviceConfig.m_glActiveProgramEXT)
  {
    s_deviceConfig.m_glActiveProgramEXT (program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateShaderProgramEXT

GLuint glew::gl::glCreateShaderProgramEXT (GLenum type, const GLchar * string)
{
  // GL_EXT_separate_shader_objects - glCreateShaderProgramEXT
  if (s_deviceConfig.m_glCreateShaderProgramEXT)
  {
    return s_deviceConfig.m_glCreateShaderProgramEXT (type, string);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindImageTextureEXT

void  glew::gl::glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  // GL_EXT_shader_image_load_store - glBindImageTextureEXT
  if (s_deviceConfig.m_glBindImageTextureEXT)
  {
    s_deviceConfig.m_glBindImageTextureEXT (index, texture, level, layered, layer, access, format);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMemoryBarrierEXT

void  glew::gl::glMemoryBarrierEXT (GLbitfield barriers)
{
  // GL_EXT_shader_image_load_store - glMemoryBarrierEXT
  if (s_deviceConfig.m_glMemoryBarrierEXT)
  {
    s_deviceConfig.m_glMemoryBarrierEXT (barriers);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilClearTagEXT

void  glew::gl::glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag)
{
  // GL_EXT_stencil_clear_tag - glStencilClearTagEXT
  if (s_deviceConfig.m_glStencilClearTagEXT)
  {
    s_deviceConfig.m_glStencilClearTagEXT (stencilTagBits, stencilClearTag);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveStencilFaceEXT

void  glew::gl::glActiveStencilFaceEXT (GLenum face)
{
  // GL_EXT_stencil_two_side - glActiveStencilFaceEXT
  if (s_deviceConfig.m_glActiveStencilFaceEXT)
  {
    s_deviceConfig.m_glActiveStencilFaceEXT (face);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage1DEXT

void  glew::gl::glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_subtexture - glTexSubImage1DEXT
  if (s_deviceConfig.m_glTexSubImage1DEXT)
  {
    s_deviceConfig.m_glTexSubImage1DEXT (target, level, xoffset, width, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage2DEXT

void  glew::gl::glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_subtexture - glTexSubImage2DEXT
  if (s_deviceConfig.m_glTexSubImage2DEXT)
  {
    s_deviceConfig.m_glTexSubImage2DEXT (target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3DEXT

void  glew::gl::glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_texture3D - glTexImage3DEXT
  if (s_deviceConfig.m_glTexImage3DEXT)
  {
    s_deviceConfig.m_glTexImage3DEXT (target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage3DEXT

void  glew::gl::glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
  // GL_EXT_texture3D - glTexSubImage3DEXT
  if (s_deviceConfig.m_glTexSubImage3DEXT)
  {
    s_deviceConfig.m_glTexSubImage3DEXT (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureLayerEXT

void  glew::gl::glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  // GL_EXT_texture_array - glFramebufferTextureLayerEXT
  if (s_deviceConfig.m_glFramebufferTextureLayerEXT)
  {
    s_deviceConfig.m_glFramebufferTextureLayerEXT (target, attachment, texture, level, layer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexBufferEXT

void  glew::gl::glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer)
{
  // GL_EXT_texture_buffer_object - glTexBufferEXT
  if (s_deviceConfig.m_glTexBufferEXT)
  {
    s_deviceConfig.m_glTexBufferEXT (target, internalformat, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIivEXT

void  glew::gl::glTexParameterIivEXT (GLenum target, GLenum pname, const GLint * params)
{
  // GL_EXT_texture_integer - glTexParameterIivEXT
  if (s_deviceConfig.m_glTexParameterIivEXT)
  {
    s_deviceConfig.m_glTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterIuivEXT

void  glew::gl::glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint * params)
{
  // GL_EXT_texture_integer - glTexParameterIuivEXT
  if (s_deviceConfig.m_glTexParameterIuivEXT)
  {
    s_deviceConfig.m_glTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIivEXT

void  glew::gl::glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint * params)
{
  // GL_EXT_texture_integer - glGetTexParameterIivEXT
  if (s_deviceConfig.m_glGetTexParameterIivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterIuivEXT

void  glew::gl::glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint * params)
{
  // GL_EXT_texture_integer - glGetTexParameterIuivEXT
  if (s_deviceConfig.m_glGetTexParameterIuivEXT)
  {
    s_deviceConfig.m_glGetTexParameterIuivEXT (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearColorIiEXT

void  glew::gl::glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha)
{
  // GL_EXT_texture_integer - glClearColorIiEXT
  if (s_deviceConfig.m_glClearColorIiEXT)
  {
    s_deviceConfig.m_glClearColorIiEXT (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearColorIuiEXT

void  glew::gl::glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  // GL_EXT_texture_integer - glClearColorIuiEXT
  if (s_deviceConfig.m_glClearColorIuiEXT)
  {
    s_deviceConfig.m_glClearColorIuiEXT (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAreTexturesResidentEXT

GLboolean glew::gl::glAreTexturesResidentEXT (GLsizei n, const GLuint * textures, GLboolean * residences)
{
  // GL_EXT_texture_object - glAreTexturesResidentEXT
  if (s_deviceConfig.m_glAreTexturesResidentEXT)
  {
    return s_deviceConfig.m_glAreTexturesResidentEXT (n, textures, residences);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTextureEXT

void  glew::gl::glBindTextureEXT (GLenum target, GLuint texture)
{
  // GL_EXT_texture_object - glBindTextureEXT
  if (s_deviceConfig.m_glBindTextureEXT)
  {
    s_deviceConfig.m_glBindTextureEXT (target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteTexturesEXT

void  glew::gl::glDeleteTexturesEXT (GLsizei n, const GLuint * textures)
{
  // GL_EXT_texture_object - glDeleteTexturesEXT
  if (s_deviceConfig.m_glDeleteTexturesEXT)
  {
    s_deviceConfig.m_glDeleteTexturesEXT (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenTexturesEXT

void  glew::gl::glGenTexturesEXT (GLsizei n, GLuint * textures)
{
  // GL_EXT_texture_object - glGenTexturesEXT
  if (s_deviceConfig.m_glGenTexturesEXT)
  {
    s_deviceConfig.m_glGenTexturesEXT (n, textures);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTextureEXT

GLboolean glew::gl::glIsTextureEXT (GLuint texture)
{
  // GL_EXT_texture_object - glIsTextureEXT
  if (s_deviceConfig.m_glIsTextureEXT)
  {
    return s_deviceConfig.m_glIsTextureEXT (texture);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrioritizeTexturesEXT

void  glew::gl::glPrioritizeTexturesEXT (GLsizei n, const GLuint * textures, const GLclampf * priorities)
{
  // GL_EXT_texture_object - glPrioritizeTexturesEXT
  if (s_deviceConfig.m_glPrioritizeTexturesEXT)
  {
    s_deviceConfig.m_glPrioritizeTexturesEXT (n, textures, priorities);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureNormalEXT

void  glew::gl::glTextureNormalEXT (GLenum mode)
{
  // GL_EXT_texture_perturb_normal - glTextureNormalEXT
  if (s_deviceConfig.m_glTextureNormalEXT)
  {
    s_deviceConfig.m_glTextureNormalEXT (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjecti64vEXT

void  glew::gl::glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64 * params)
{
  // GL_EXT_timer_query - glGetQueryObjecti64vEXT
  if (s_deviceConfig.m_glGetQueryObjecti64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjecti64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetQueryObjectui64vEXT

void  glew::gl::glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64 * params)
{
  // GL_EXT_timer_query - glGetQueryObjectui64vEXT
  if (s_deviceConfig.m_glGetQueryObjectui64vEXT)
  {
    s_deviceConfig.m_glGetQueryObjectui64vEXT (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginTransformFeedbackEXT

void  glew::gl::glBeginTransformFeedbackEXT (GLenum primitiveMode)
{
  // GL_EXT_transform_feedback - glBeginTransformFeedbackEXT
  if (s_deviceConfig.m_glBeginTransformFeedbackEXT)
  {
    s_deviceConfig.m_glBeginTransformFeedbackEXT (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndTransformFeedbackEXT

void  glew::gl::glEndTransformFeedbackEXT ()
{
  // GL_EXT_transform_feedback - glEndTransformFeedbackEXT
  if (s_deviceConfig.m_glEndTransformFeedbackEXT)
  {
    s_deviceConfig.m_glEndTransformFeedbackEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferRangeEXT

void  glew::gl::glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_EXT_transform_feedback - glBindBufferRangeEXT
  if (s_deviceConfig.m_glBindBufferRangeEXT)
  {
    s_deviceConfig.m_glBindBufferRangeEXT (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferOffsetEXT

void  glew::gl::glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  // GL_EXT_transform_feedback - glBindBufferOffsetEXT
  if (s_deviceConfig.m_glBindBufferOffsetEXT)
  {
    s_deviceConfig.m_glBindBufferOffsetEXT (target, index, buffer, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferBaseEXT

void  glew::gl::glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer)
{
  // GL_EXT_transform_feedback - glBindBufferBaseEXT
  if (s_deviceConfig.m_glBindBufferBaseEXT)
  {
    s_deviceConfig.m_glBindBufferBaseEXT (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackVaryingsEXT

void  glew::gl::glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode)
{
  // GL_EXT_transform_feedback - glTransformFeedbackVaryingsEXT
  if (s_deviceConfig.m_glTransformFeedbackVaryingsEXT)
  {
    s_deviceConfig.m_glTransformFeedbackVaryingsEXT (program, count, varyings, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbackVaryingEXT

void  glew::gl::glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_EXT_transform_feedback - glGetTransformFeedbackVaryingEXT
  if (s_deviceConfig.m_glGetTransformFeedbackVaryingEXT)
  {
    s_deviceConfig.m_glGetTransformFeedbackVaryingEXT (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glArrayElementEXT

void  glew::gl::glArrayElementEXT (GLint i)
{
  // GL_EXT_vertex_array - glArrayElementEXT
  if (s_deviceConfig.m_glArrayElementEXT)
  {
    s_deviceConfig.m_glArrayElementEXT (i);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorPointerEXT

void  glew::gl::glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
  // GL_EXT_vertex_array - glColorPointerEXT
  if (s_deviceConfig.m_glColorPointerEXT)
  {
    s_deviceConfig.m_glColorPointerEXT (size, type, stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawArraysEXT

void  glew::gl::glDrawArraysEXT (GLenum mode, GLint first, GLsizei count)
{
  // GL_EXT_vertex_array - glDrawArraysEXT
  if (s_deviceConfig.m_glDrawArraysEXT)
  {
    s_deviceConfig.m_glDrawArraysEXT (mode, first, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEdgeFlagPointerEXT

void  glew::gl::glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean * pointer)
{
  // GL_EXT_vertex_array - glEdgeFlagPointerEXT
  if (s_deviceConfig.m_glEdgeFlagPointerEXT)
  {
    s_deviceConfig.m_glEdgeFlagPointerEXT (stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPointervEXT

void  glew::gl::glGetPointervEXT (GLenum pname, void ** params)
{
  // GL_EXT_vertex_array - glGetPointervEXT
  if (s_deviceConfig.m_glGetPointervEXT)
  {
    s_deviceConfig.m_glGetPointervEXT (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexPointerEXT

void  glew::gl::glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
  // GL_EXT_vertex_array - glIndexPointerEXT
  if (s_deviceConfig.m_glIndexPointerEXT)
  {
    s_deviceConfig.m_glIndexPointerEXT (type, stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalPointerEXT

void  glew::gl::glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
  // GL_EXT_vertex_array - glNormalPointerEXT
  if (s_deviceConfig.m_glNormalPointerEXT)
  {
    s_deviceConfig.m_glNormalPointerEXT (type, stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordPointerEXT

void  glew::gl::glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
  // GL_EXT_vertex_array - glTexCoordPointerEXT
  if (s_deviceConfig.m_glTexCoordPointerEXT)
  {
    s_deviceConfig.m_glTexCoordPointerEXT (size, type, stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexPointerEXT

void  glew::gl::glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer)
{
  // GL_EXT_vertex_array - glVertexPointerEXT
  if (s_deviceConfig.m_glVertexPointerEXT)
  {
    s_deviceConfig.m_glVertexPointerEXT (size, type, stride, count, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1dEXT

void  glew::gl::glVertexAttribL1dEXT (GLuint index, GLdouble x)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL1dEXT
  if (s_deviceConfig.m_glVertexAttribL1dEXT)
  {
    s_deviceConfig.m_glVertexAttribL1dEXT (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2dEXT

void  glew::gl::glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL2dEXT
  if (s_deviceConfig.m_glVertexAttribL2dEXT)
  {
    s_deviceConfig.m_glVertexAttribL2dEXT (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3dEXT

void  glew::gl::glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL3dEXT
  if (s_deviceConfig.m_glVertexAttribL3dEXT)
  {
    s_deviceConfig.m_glVertexAttribL3dEXT (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4dEXT

void  glew::gl::glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL4dEXT
  if (s_deviceConfig.m_glVertexAttribL4dEXT)
  {
    s_deviceConfig.m_glVertexAttribL4dEXT (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1dvEXT

void  glew::gl::glVertexAttribL1dvEXT (GLuint index, const GLdouble * v)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL1dvEXT
  if (s_deviceConfig.m_glVertexAttribL1dvEXT)
  {
    s_deviceConfig.m_glVertexAttribL1dvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2dvEXT

void  glew::gl::glVertexAttribL2dvEXT (GLuint index, const GLdouble * v)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL2dvEXT
  if (s_deviceConfig.m_glVertexAttribL2dvEXT)
  {
    s_deviceConfig.m_glVertexAttribL2dvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3dvEXT

void  glew::gl::glVertexAttribL3dvEXT (GLuint index, const GLdouble * v)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL3dvEXT
  if (s_deviceConfig.m_glVertexAttribL3dvEXT)
  {
    s_deviceConfig.m_glVertexAttribL3dvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4dvEXT

void  glew::gl::glVertexAttribL4dvEXT (GLuint index, const GLdouble * v)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribL4dvEXT
  if (s_deviceConfig.m_glVertexAttribL4dvEXT)
  {
    s_deviceConfig.m_glVertexAttribL4dvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribLPointerEXT

void  glew::gl::glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_vertex_attrib_64bit - glVertexAttribLPointerEXT
  if (s_deviceConfig.m_glVertexAttribLPointerEXT)
  {
    s_deviceConfig.m_glVertexAttribLPointerEXT (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribLdvEXT

void  glew::gl::glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_EXT_vertex_attrib_64bit - glGetVertexAttribLdvEXT
  if (s_deviceConfig.m_glGetVertexAttribLdvEXT)
  {
    s_deviceConfig.m_glGetVertexAttribLdvEXT (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginVertexShaderEXT

void  glew::gl::glBeginVertexShaderEXT ()
{
  // GL_EXT_vertex_shader - glBeginVertexShaderEXT
  if (s_deviceConfig.m_glBeginVertexShaderEXT)
  {
    s_deviceConfig.m_glBeginVertexShaderEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndVertexShaderEXT

void  glew::gl::glEndVertexShaderEXT ()
{
  // GL_EXT_vertex_shader - glEndVertexShaderEXT
  if (s_deviceConfig.m_glEndVertexShaderEXT)
  {
    s_deviceConfig.m_glEndVertexShaderEXT ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVertexShaderEXT

void  glew::gl::glBindVertexShaderEXT (GLuint id)
{
  // GL_EXT_vertex_shader - glBindVertexShaderEXT
  if (s_deviceConfig.m_glBindVertexShaderEXT)
  {
    s_deviceConfig.m_glBindVertexShaderEXT (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenVertexShadersEXT

GLuint glew::gl::glGenVertexShadersEXT (GLuint range)
{
  // GL_EXT_vertex_shader - glGenVertexShadersEXT
  if (s_deviceConfig.m_glGenVertexShadersEXT)
  {
    return s_deviceConfig.m_glGenVertexShadersEXT (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteVertexShaderEXT

void  glew::gl::glDeleteVertexShaderEXT (GLuint id)
{
  // GL_EXT_vertex_shader - glDeleteVertexShaderEXT
  if (s_deviceConfig.m_glDeleteVertexShaderEXT)
  {
    s_deviceConfig.m_glDeleteVertexShaderEXT (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderOp1EXT

void  glew::gl::glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1)
{
  // GL_EXT_vertex_shader - glShaderOp1EXT
  if (s_deviceConfig.m_glShaderOp1EXT)
  {
    s_deviceConfig.m_glShaderOp1EXT (op, res, arg1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderOp2EXT

void  glew::gl::glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  // GL_EXT_vertex_shader - glShaderOp2EXT
  if (s_deviceConfig.m_glShaderOp2EXT)
  {
    s_deviceConfig.m_glShaderOp2EXT (op, res, arg1, arg2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glShaderOp3EXT

void  glew::gl::glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  // GL_EXT_vertex_shader - glShaderOp3EXT
  if (s_deviceConfig.m_glShaderOp3EXT)
  {
    s_deviceConfig.m_glShaderOp3EXT (op, res, arg1, arg2, arg3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSwizzleEXT

void  glew::gl::glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  // GL_EXT_vertex_shader - glSwizzleEXT
  if (s_deviceConfig.m_glSwizzleEXT)
  {
    s_deviceConfig.m_glSwizzleEXT (res, in, outX, outY, outZ, outW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWriteMaskEXT

void  glew::gl::glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  // GL_EXT_vertex_shader - glWriteMaskEXT
  if (s_deviceConfig.m_glWriteMaskEXT)
  {
    s_deviceConfig.m_glWriteMaskEXT (res, in, outX, outY, outZ, outW);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInsertComponentEXT

void  glew::gl::glInsertComponentEXT (GLuint res, GLuint src, GLuint num)
{
  // GL_EXT_vertex_shader - glInsertComponentEXT
  if (s_deviceConfig.m_glInsertComponentEXT)
  {
    s_deviceConfig.m_glInsertComponentEXT (res, src, num);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExtractComponentEXT

void  glew::gl::glExtractComponentEXT (GLuint res, GLuint src, GLuint num)
{
  // GL_EXT_vertex_shader - glExtractComponentEXT
  if (s_deviceConfig.m_glExtractComponentEXT)
  {
    s_deviceConfig.m_glExtractComponentEXT (res, src, num);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenSymbolsEXT

GLuint glew::gl::glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  // GL_EXT_vertex_shader - glGenSymbolsEXT
  if (s_deviceConfig.m_glGenSymbolsEXT)
  {
    return s_deviceConfig.m_glGenSymbolsEXT (datatype, storagetype, range, components);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetInvariantEXT

void  glew::gl::glSetInvariantEXT (GLuint id, GLenum type, const void * addr)
{
  // GL_EXT_vertex_shader - glSetInvariantEXT
  if (s_deviceConfig.m_glSetInvariantEXT)
  {
    s_deviceConfig.m_glSetInvariantEXT (id, type, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetLocalConstantEXT

void  glew::gl::glSetLocalConstantEXT (GLuint id, GLenum type, const void * addr)
{
  // GL_EXT_vertex_shader - glSetLocalConstantEXT
  if (s_deviceConfig.m_glSetLocalConstantEXT)
  {
    s_deviceConfig.m_glSetLocalConstantEXT (id, type, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantbvEXT

void  glew::gl::glVariantbvEXT (GLuint id, const GLbyte * addr)
{
  // GL_EXT_vertex_shader - glVariantbvEXT
  if (s_deviceConfig.m_glVariantbvEXT)
  {
    s_deviceConfig.m_glVariantbvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantsvEXT

void  glew::gl::glVariantsvEXT (GLuint id, const GLshort * addr)
{
  // GL_EXT_vertex_shader - glVariantsvEXT
  if (s_deviceConfig.m_glVariantsvEXT)
  {
    s_deviceConfig.m_glVariantsvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantivEXT

void  glew::gl::glVariantivEXT (GLuint id, const GLint * addr)
{
  // GL_EXT_vertex_shader - glVariantivEXT
  if (s_deviceConfig.m_glVariantivEXT)
  {
    s_deviceConfig.m_glVariantivEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantfvEXT

void  glew::gl::glVariantfvEXT (GLuint id, const GLfloat * addr)
{
  // GL_EXT_vertex_shader - glVariantfvEXT
  if (s_deviceConfig.m_glVariantfvEXT)
  {
    s_deviceConfig.m_glVariantfvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantdvEXT

void  glew::gl::glVariantdvEXT (GLuint id, const GLdouble * addr)
{
  // GL_EXT_vertex_shader - glVariantdvEXT
  if (s_deviceConfig.m_glVariantdvEXT)
  {
    s_deviceConfig.m_glVariantdvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantubvEXT

void  glew::gl::glVariantubvEXT (GLuint id, const GLubyte * addr)
{
  // GL_EXT_vertex_shader - glVariantubvEXT
  if (s_deviceConfig.m_glVariantubvEXT)
  {
    s_deviceConfig.m_glVariantubvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantusvEXT

void  glew::gl::glVariantusvEXT (GLuint id, const GLushort * addr)
{
  // GL_EXT_vertex_shader - glVariantusvEXT
  if (s_deviceConfig.m_glVariantusvEXT)
  {
    s_deviceConfig.m_glVariantusvEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantuivEXT

void  glew::gl::glVariantuivEXT (GLuint id, const GLuint * addr)
{
  // GL_EXT_vertex_shader - glVariantuivEXT
  if (s_deviceConfig.m_glVariantuivEXT)
  {
    s_deviceConfig.m_glVariantuivEXT (id, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVariantPointerEXT

void  glew::gl::glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const void * addr)
{
  // GL_EXT_vertex_shader - glVariantPointerEXT
  if (s_deviceConfig.m_glVariantPointerEXT)
  {
    s_deviceConfig.m_glVariantPointerEXT (id, type, stride, addr);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEnableVariantClientStateEXT

void  glew::gl::glEnableVariantClientStateEXT (GLuint id)
{
  // GL_EXT_vertex_shader - glEnableVariantClientStateEXT
  if (s_deviceConfig.m_glEnableVariantClientStateEXT)
  {
    s_deviceConfig.m_glEnableVariantClientStateEXT (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDisableVariantClientStateEXT

void  glew::gl::glDisableVariantClientStateEXT (GLuint id)
{
  // GL_EXT_vertex_shader - glDisableVariantClientStateEXT
  if (s_deviceConfig.m_glDisableVariantClientStateEXT)
  {
    s_deviceConfig.m_glDisableVariantClientStateEXT (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindLightParameterEXT

GLuint glew::gl::glBindLightParameterEXT (GLenum light, GLenum value)
{
  // GL_EXT_vertex_shader - glBindLightParameterEXT
  if (s_deviceConfig.m_glBindLightParameterEXT)
  {
    return s_deviceConfig.m_glBindLightParameterEXT (light, value);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindMaterialParameterEXT

GLuint glew::gl::glBindMaterialParameterEXT (GLenum face, GLenum value)
{
  // GL_EXT_vertex_shader - glBindMaterialParameterEXT
  if (s_deviceConfig.m_glBindMaterialParameterEXT)
  {
    return s_deviceConfig.m_glBindMaterialParameterEXT (face, value);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTexGenParameterEXT

GLuint glew::gl::glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value)
{
  // GL_EXT_vertex_shader - glBindTexGenParameterEXT
  if (s_deviceConfig.m_glBindTexGenParameterEXT)
  {
    return s_deviceConfig.m_glBindTexGenParameterEXT (unit, coord, value);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTextureUnitParameterEXT

GLuint glew::gl::glBindTextureUnitParameterEXT (GLenum unit, GLenum value)
{
  // GL_EXT_vertex_shader - glBindTextureUnitParameterEXT
  if (s_deviceConfig.m_glBindTextureUnitParameterEXT)
  {
    return s_deviceConfig.m_glBindTextureUnitParameterEXT (unit, value);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindParameterEXT

GLuint glew::gl::glBindParameterEXT (GLenum value)
{
  // GL_EXT_vertex_shader - glBindParameterEXT
  if (s_deviceConfig.m_glBindParameterEXT)
  {
    return s_deviceConfig.m_glBindParameterEXT (value);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsVariantEnabledEXT

GLboolean glew::gl::glIsVariantEnabledEXT (GLuint id, GLenum cap)
{
  // GL_EXT_vertex_shader - glIsVariantEnabledEXT
  if (s_deviceConfig.m_glIsVariantEnabledEXT)
  {
    return s_deviceConfig.m_glIsVariantEnabledEXT (id, cap);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantBooleanvEXT

void  glew::gl::glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean * data)
{
  // GL_EXT_vertex_shader - glGetVariantBooleanvEXT
  if (s_deviceConfig.m_glGetVariantBooleanvEXT)
  {
    s_deviceConfig.m_glGetVariantBooleanvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantIntegervEXT

void  glew::gl::glGetVariantIntegervEXT (GLuint id, GLenum value, GLint * data)
{
  // GL_EXT_vertex_shader - glGetVariantIntegervEXT
  if (s_deviceConfig.m_glGetVariantIntegervEXT)
  {
    s_deviceConfig.m_glGetVariantIntegervEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantFloatvEXT

void  glew::gl::glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat * data)
{
  // GL_EXT_vertex_shader - glGetVariantFloatvEXT
  if (s_deviceConfig.m_glGetVariantFloatvEXT)
  {
    s_deviceConfig.m_glGetVariantFloatvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVariantPointervEXT

void  glew::gl::glGetVariantPointervEXT (GLuint id, GLenum value, void ** data)
{
  // GL_EXT_vertex_shader - glGetVariantPointervEXT
  if (s_deviceConfig.m_glGetVariantPointervEXT)
  {
    s_deviceConfig.m_glGetVariantPointervEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInvariantBooleanvEXT

void  glew::gl::glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean * data)
{
  // GL_EXT_vertex_shader - glGetInvariantBooleanvEXT
  if (s_deviceConfig.m_glGetInvariantBooleanvEXT)
  {
    s_deviceConfig.m_glGetInvariantBooleanvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInvariantIntegervEXT

void  glew::gl::glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint * data)
{
  // GL_EXT_vertex_shader - glGetInvariantIntegervEXT
  if (s_deviceConfig.m_glGetInvariantIntegervEXT)
  {
    s_deviceConfig.m_glGetInvariantIntegervEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInvariantFloatvEXT

void  glew::gl::glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat * data)
{
  // GL_EXT_vertex_shader - glGetInvariantFloatvEXT
  if (s_deviceConfig.m_glGetInvariantFloatvEXT)
  {
    s_deviceConfig.m_glGetInvariantFloatvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetLocalConstantBooleanvEXT

void  glew::gl::glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean * data)
{
  // GL_EXT_vertex_shader - glGetLocalConstantBooleanvEXT
  if (s_deviceConfig.m_glGetLocalConstantBooleanvEXT)
  {
    s_deviceConfig.m_glGetLocalConstantBooleanvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetLocalConstantIntegervEXT

void  glew::gl::glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint * data)
{
  // GL_EXT_vertex_shader - glGetLocalConstantIntegervEXT
  if (s_deviceConfig.m_glGetLocalConstantIntegervEXT)
  {
    s_deviceConfig.m_glGetLocalConstantIntegervEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetLocalConstantFloatvEXT

void  glew::gl::glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat * data)
{
  // GL_EXT_vertex_shader - glGetLocalConstantFloatvEXT
  if (s_deviceConfig.m_glGetLocalConstantFloatvEXT)
  {
    s_deviceConfig.m_glGetLocalConstantFloatvEXT (id, value, data);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexWeightfEXT

void  glew::gl::glVertexWeightfEXT (GLfloat weight)
{
  // GL_EXT_vertex_weighting - glVertexWeightfEXT
  if (s_deviceConfig.m_glVertexWeightfEXT)
  {
    s_deviceConfig.m_glVertexWeightfEXT (weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexWeightfvEXT

void  glew::gl::glVertexWeightfvEXT (const GLfloat * weight)
{
  // GL_EXT_vertex_weighting - glVertexWeightfvEXT
  if (s_deviceConfig.m_glVertexWeightfvEXT)
  {
    s_deviceConfig.m_glVertexWeightfvEXT (weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexWeightPointerEXT

void  glew::gl::glVertexWeightPointerEXT (GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_EXT_vertex_weighting - glVertexWeightPointerEXT
  if (s_deviceConfig.m_glVertexWeightPointerEXT)
  {
    s_deviceConfig.m_glVertexWeightPointerEXT (size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glImportSyncEXT

GLsync glew::gl::glImportSyncEXT (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  // GL_EXT_x11_sync_object - glImportSyncEXT
  if (s_deviceConfig.m_glImportSyncEXT)
  {
    return s_deviceConfig.m_glImportSyncEXT (external_sync_type, external_sync, flags);
  }
  return ((GLsync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFrameTerminatorGREMEDY

void  glew::gl::glFrameTerminatorGREMEDY ()
{
  // GL_GREMEDY_frame_terminator - glFrameTerminatorGREMEDY
  if (s_deviceConfig.m_glFrameTerminatorGREMEDY)
  {
    s_deviceConfig.m_glFrameTerminatorGREMEDY ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStringMarkerGREMEDY

void  glew::gl::glStringMarkerGREMEDY (GLsizei len, const void * string)
{
  // GL_GREMEDY_string_marker - glStringMarkerGREMEDY
  if (s_deviceConfig.m_glStringMarkerGREMEDY)
  {
    s_deviceConfig.m_glStringMarkerGREMEDY (len, string);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glImageTransformParameteriHP

void  glew::gl::glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param)
{
  // GL_HP_image_transform - glImageTransformParameteriHP
  if (s_deviceConfig.m_glImageTransformParameteriHP)
  {
    s_deviceConfig.m_glImageTransformParameteriHP (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glImageTransformParameterfHP

void  glew::gl::glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param)
{
  // GL_HP_image_transform - glImageTransformParameterfHP
  if (s_deviceConfig.m_glImageTransformParameterfHP)
  {
    s_deviceConfig.m_glImageTransformParameterfHP (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glImageTransformParameterivHP

void  glew::gl::glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint * params)
{
  // GL_HP_image_transform - glImageTransformParameterivHP
  if (s_deviceConfig.m_glImageTransformParameterivHP)
  {
    s_deviceConfig.m_glImageTransformParameterivHP (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glImageTransformParameterfvHP

void  glew::gl::glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_HP_image_transform - glImageTransformParameterfvHP
  if (s_deviceConfig.m_glImageTransformParameterfvHP)
  {
    s_deviceConfig.m_glImageTransformParameterfvHP (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetImageTransformParameterivHP

void  glew::gl::glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint * params)
{
  // GL_HP_image_transform - glGetImageTransformParameterivHP
  if (s_deviceConfig.m_glGetImageTransformParameterivHP)
  {
    s_deviceConfig.m_glGetImageTransformParameterivHP (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetImageTransformParameterfvHP

void  glew::gl::glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_HP_image_transform - glGetImageTransformParameterfvHP
  if (s_deviceConfig.m_glGetImageTransformParameterfvHP)
  {
    s_deviceConfig.m_glGetImageTransformParameterfvHP (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiModeDrawArraysIBM

void  glew::gl::glMultiModeDrawArraysIBM (const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride)
{
  // GL_IBM_multimode_draw_arrays - glMultiModeDrawArraysIBM
  if (s_deviceConfig.m_glMultiModeDrawArraysIBM)
  {
    s_deviceConfig.m_glMultiModeDrawArraysIBM (mode, first, count, primcount, modestride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiModeDrawElementsIBM

void  glew::gl::glMultiModeDrawElementsIBM (const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride)
{
  // GL_IBM_multimode_draw_arrays - glMultiModeDrawElementsIBM
  if (s_deviceConfig.m_glMultiModeDrawElementsIBM)
  {
    s_deviceConfig.m_glMultiModeDrawElementsIBM (mode, count, type, indices, primcount, modestride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushStaticDataIBM

void  glew::gl::glFlushStaticDataIBM (GLenum target)
{
  // GL_IBM_static_data - glFlushStaticDataIBM
  if (s_deviceConfig.m_glFlushStaticDataIBM)
  {
    s_deviceConfig.m_glFlushStaticDataIBM (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorPointerListIBM

void  glew::gl::glColorPointerListIBM (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glColorPointerListIBM
  if (s_deviceConfig.m_glColorPointerListIBM)
  {
    s_deviceConfig.m_glColorPointerListIBM (size, type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorPointerListIBM

void  glew::gl::glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glSecondaryColorPointerListIBM
  if (s_deviceConfig.m_glSecondaryColorPointerListIBM)
  {
    s_deviceConfig.m_glSecondaryColorPointerListIBM (size, type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEdgeFlagPointerListIBM

void  glew::gl::glEdgeFlagPointerListIBM (GLint stride, const GLboolean ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glEdgeFlagPointerListIBM
  if (s_deviceConfig.m_glEdgeFlagPointerListIBM)
  {
    s_deviceConfig.m_glEdgeFlagPointerListIBM (stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordPointerListIBM

void  glew::gl::glFogCoordPointerListIBM (GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glFogCoordPointerListIBM
  if (s_deviceConfig.m_glFogCoordPointerListIBM)
  {
    s_deviceConfig.m_glFogCoordPointerListIBM (type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexPointerListIBM

void  glew::gl::glIndexPointerListIBM (GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glIndexPointerListIBM
  if (s_deviceConfig.m_glIndexPointerListIBM)
  {
    s_deviceConfig.m_glIndexPointerListIBM (type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalPointerListIBM

void  glew::gl::glNormalPointerListIBM (GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glNormalPointerListIBM
  if (s_deviceConfig.m_glNormalPointerListIBM)
  {
    s_deviceConfig.m_glNormalPointerListIBM (type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordPointerListIBM

void  glew::gl::glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glTexCoordPointerListIBM
  if (s_deviceConfig.m_glTexCoordPointerListIBM)
  {
    s_deviceConfig.m_glTexCoordPointerListIBM (size, type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexPointerListIBM

void  glew::gl::glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride)
{
  // GL_IBM_vertex_array_lists - glVertexPointerListIBM
  if (s_deviceConfig.m_glVertexPointerListIBM)
  {
    s_deviceConfig.m_glVertexPointerListIBM (size, type, stride, pointer, ptrstride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendFuncSeparateINGR

void  glew::gl::glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  // GL_INGR_blend_func_separate - glBlendFuncSeparateINGR
  if (s_deviceConfig.m_glBlendFuncSeparateINGR)
  {
    s_deviceConfig.m_glBlendFuncSeparateINGR (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSyncTextureINTEL

void  glew::gl::glSyncTextureINTEL (GLuint texture)
{
  // GL_INTEL_map_texture - glSyncTextureINTEL
  if (s_deviceConfig.m_glSyncTextureINTEL)
  {
    s_deviceConfig.m_glSyncTextureINTEL (texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUnmapTexture2DINTEL

void  glew::gl::glUnmapTexture2DINTEL (GLuint texture, GLint level)
{
  // GL_INTEL_map_texture - glUnmapTexture2DINTEL
  if (s_deviceConfig.m_glUnmapTexture2DINTEL)
  {
    s_deviceConfig.m_glUnmapTexture2DINTEL (texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapTexture2DINTEL

void * glew::gl::glMapTexture2DINTEL (GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout)
{
  // GL_INTEL_map_texture - glMapTexture2DINTEL
  if (s_deviceConfig.m_glMapTexture2DINTEL)
  {
    return s_deviceConfig.m_glMapTexture2DINTEL (texture, level, access, stride, layout);
  }
  return ((void *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexPointervINTEL

void  glew::gl::glVertexPointervINTEL (GLint size, GLenum type, const void ** pointer)
{
  // GL_INTEL_parallel_arrays - glVertexPointervINTEL
  if (s_deviceConfig.m_glVertexPointervINTEL)
  {
    s_deviceConfig.m_glVertexPointervINTEL (size, type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalPointervINTEL

void  glew::gl::glNormalPointervINTEL (GLenum type, const void ** pointer)
{
  // GL_INTEL_parallel_arrays - glNormalPointervINTEL
  if (s_deviceConfig.m_glNormalPointervINTEL)
  {
    s_deviceConfig.m_glNormalPointervINTEL (type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorPointervINTEL

void  glew::gl::glColorPointervINTEL (GLint size, GLenum type, const void ** pointer)
{
  // GL_INTEL_parallel_arrays - glColorPointervINTEL
  if (s_deviceConfig.m_glColorPointervINTEL)
  {
    s_deviceConfig.m_glColorPointervINTEL (size, type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordPointervINTEL

void  glew::gl::glTexCoordPointervINTEL (GLint size, GLenum type, const void ** pointer)
{
  // GL_INTEL_parallel_arrays - glTexCoordPointervINTEL
  if (s_deviceConfig.m_glTexCoordPointervINTEL)
  {
    s_deviceConfig.m_glTexCoordPointervINTEL (size, type, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginPerfQueryINTEL

void  glew::gl::glBeginPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glBeginPerfQueryINTEL
  if (s_deviceConfig.m_glBeginPerfQueryINTEL)
  {
    s_deviceConfig.m_glBeginPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreatePerfQueryINTEL

void  glew::gl::glCreatePerfQueryINTEL (GLuint queryId, GLuint * queryHandle)
{
  // GL_INTEL_performance_query - glCreatePerfQueryINTEL
  if (s_deviceConfig.m_glCreatePerfQueryINTEL)
  {
    s_deviceConfig.m_glCreatePerfQueryINTEL (queryId, queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePerfQueryINTEL

void  glew::gl::glDeletePerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glDeletePerfQueryINTEL
  if (s_deviceConfig.m_glDeletePerfQueryINTEL)
  {
    s_deviceConfig.m_glDeletePerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndPerfQueryINTEL

void  glew::gl::glEndPerfQueryINTEL (GLuint queryHandle)
{
  // GL_INTEL_performance_query - glEndPerfQueryINTEL
  if (s_deviceConfig.m_glEndPerfQueryINTEL)
  {
    s_deviceConfig.m_glEndPerfQueryINTEL (queryHandle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFirstPerfQueryIdINTEL

void  glew::gl::glGetFirstPerfQueryIdINTEL (GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetFirstPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetFirstPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL (queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNextPerfQueryIdINTEL

void  glew::gl::glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint * nextQueryId)
{
  // GL_INTEL_performance_query - glGetNextPerfQueryIdINTEL
  if (s_deviceConfig.m_glGetNextPerfQueryIdINTEL)
  {
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL (queryId, nextQueryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfCounterInfoINTEL

void  glew::gl::glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue)
{
  // GL_INTEL_performance_query - glGetPerfCounterInfoINTEL
  if (s_deviceConfig.m_glGetPerfCounterInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfCounterInfoINTEL (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryDataINTEL

void  glew::gl::glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten)
{
  // GL_INTEL_performance_query - glGetPerfQueryDataINTEL
  if (s_deviceConfig.m_glGetPerfQueryDataINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryDataINTEL (queryHandle, flags, dataSize, data, bytesWritten);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryIdByNameINTEL

void  glew::gl::glGetPerfQueryIdByNameINTEL (GLchar * queryName, GLuint * queryId)
{
  // GL_INTEL_performance_query - glGetPerfQueryIdByNameINTEL
  if (s_deviceConfig.m_glGetPerfQueryIdByNameINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL (queryName, queryId);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPerfQueryInfoINTEL

void  glew::gl::glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask)
{
  // GL_INTEL_performance_query - glGetPerfQueryInfoINTEL
  if (s_deviceConfig.m_glGetPerfQueryInfoINTEL)
  {
    s_deviceConfig.m_glGetPerfQueryInfoINTEL (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendBarrierKHR

void  glew::gl::glBlendBarrierKHR ()
{
  // GL_KHR_blend_equation_advanced - glBlendBarrierKHR
  if (s_deviceConfig.m_glBlendBarrierKHR)
  {
    s_deviceConfig.m_glBlendBarrierKHR ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResizeBuffersMESA

void  glew::gl::glResizeBuffersMESA ()
{
  // GL_MESA_resize_buffers - glResizeBuffersMESA
  if (s_deviceConfig.m_glResizeBuffersMESA)
  {
    s_deviceConfig.m_glResizeBuffersMESA ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2dMESA

void  glew::gl::glWindowPos2dMESA (GLdouble x, GLdouble y)
{
  // GL_MESA_window_pos - glWindowPos2dMESA
  if (s_deviceConfig.m_glWindowPos2dMESA)
  {
    s_deviceConfig.m_glWindowPos2dMESA (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2dvMESA

void  glew::gl::glWindowPos2dvMESA (const GLdouble * v)
{
  // GL_MESA_window_pos - glWindowPos2dvMESA
  if (s_deviceConfig.m_glWindowPos2dvMESA)
  {
    s_deviceConfig.m_glWindowPos2dvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2fMESA

void  glew::gl::glWindowPos2fMESA (GLfloat x, GLfloat y)
{
  // GL_MESA_window_pos - glWindowPos2fMESA
  if (s_deviceConfig.m_glWindowPos2fMESA)
  {
    s_deviceConfig.m_glWindowPos2fMESA (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2fvMESA

void  glew::gl::glWindowPos2fvMESA (const GLfloat * v)
{
  // GL_MESA_window_pos - glWindowPos2fvMESA
  if (s_deviceConfig.m_glWindowPos2fvMESA)
  {
    s_deviceConfig.m_glWindowPos2fvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2iMESA

void  glew::gl::glWindowPos2iMESA (GLint x, GLint y)
{
  // GL_MESA_window_pos - glWindowPos2iMESA
  if (s_deviceConfig.m_glWindowPos2iMESA)
  {
    s_deviceConfig.m_glWindowPos2iMESA (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2ivMESA

void  glew::gl::glWindowPos2ivMESA (const GLint * v)
{
  // GL_MESA_window_pos - glWindowPos2ivMESA
  if (s_deviceConfig.m_glWindowPos2ivMESA)
  {
    s_deviceConfig.m_glWindowPos2ivMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2sMESA

void  glew::gl::glWindowPos2sMESA (GLshort x, GLshort y)
{
  // GL_MESA_window_pos - glWindowPos2sMESA
  if (s_deviceConfig.m_glWindowPos2sMESA)
  {
    s_deviceConfig.m_glWindowPos2sMESA (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos2svMESA

void  glew::gl::glWindowPos2svMESA (const GLshort * v)
{
  // GL_MESA_window_pos - glWindowPos2svMESA
  if (s_deviceConfig.m_glWindowPos2svMESA)
  {
    s_deviceConfig.m_glWindowPos2svMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3dMESA

void  glew::gl::glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z)
{
  // GL_MESA_window_pos - glWindowPos3dMESA
  if (s_deviceConfig.m_glWindowPos3dMESA)
  {
    s_deviceConfig.m_glWindowPos3dMESA (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3dvMESA

void  glew::gl::glWindowPos3dvMESA (const GLdouble * v)
{
  // GL_MESA_window_pos - glWindowPos3dvMESA
  if (s_deviceConfig.m_glWindowPos3dvMESA)
  {
    s_deviceConfig.m_glWindowPos3dvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3fMESA

void  glew::gl::glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z)
{
  // GL_MESA_window_pos - glWindowPos3fMESA
  if (s_deviceConfig.m_glWindowPos3fMESA)
  {
    s_deviceConfig.m_glWindowPos3fMESA (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3fvMESA

void  glew::gl::glWindowPos3fvMESA (const GLfloat * v)
{
  // GL_MESA_window_pos - glWindowPos3fvMESA
  if (s_deviceConfig.m_glWindowPos3fvMESA)
  {
    s_deviceConfig.m_glWindowPos3fvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3iMESA

void  glew::gl::glWindowPos3iMESA (GLint x, GLint y, GLint z)
{
  // GL_MESA_window_pos - glWindowPos3iMESA
  if (s_deviceConfig.m_glWindowPos3iMESA)
  {
    s_deviceConfig.m_glWindowPos3iMESA (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3ivMESA

void  glew::gl::glWindowPos3ivMESA (const GLint * v)
{
  // GL_MESA_window_pos - glWindowPos3ivMESA
  if (s_deviceConfig.m_glWindowPos3ivMESA)
  {
    s_deviceConfig.m_glWindowPos3ivMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3sMESA

void  glew::gl::glWindowPos3sMESA (GLshort x, GLshort y, GLshort z)
{
  // GL_MESA_window_pos - glWindowPos3sMESA
  if (s_deviceConfig.m_glWindowPos3sMESA)
  {
    s_deviceConfig.m_glWindowPos3sMESA (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos3svMESA

void  glew::gl::glWindowPos3svMESA (const GLshort * v)
{
  // GL_MESA_window_pos - glWindowPos3svMESA
  if (s_deviceConfig.m_glWindowPos3svMESA)
  {
    s_deviceConfig.m_glWindowPos3svMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4dMESA

void  glew::gl::glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_MESA_window_pos - glWindowPos4dMESA
  if (s_deviceConfig.m_glWindowPos4dMESA)
  {
    s_deviceConfig.m_glWindowPos4dMESA (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4dvMESA

void  glew::gl::glWindowPos4dvMESA (const GLdouble * v)
{
  // GL_MESA_window_pos - glWindowPos4dvMESA
  if (s_deviceConfig.m_glWindowPos4dvMESA)
  {
    s_deviceConfig.m_glWindowPos4dvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4fMESA

void  glew::gl::glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_MESA_window_pos - glWindowPos4fMESA
  if (s_deviceConfig.m_glWindowPos4fMESA)
  {
    s_deviceConfig.m_glWindowPos4fMESA (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4fvMESA

void  glew::gl::glWindowPos4fvMESA (const GLfloat * v)
{
  // GL_MESA_window_pos - glWindowPos4fvMESA
  if (s_deviceConfig.m_glWindowPos4fvMESA)
  {
    s_deviceConfig.m_glWindowPos4fvMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4iMESA

void  glew::gl::glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w)
{
  // GL_MESA_window_pos - glWindowPos4iMESA
  if (s_deviceConfig.m_glWindowPos4iMESA)
  {
    s_deviceConfig.m_glWindowPos4iMESA (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4ivMESA

void  glew::gl::glWindowPos4ivMESA (const GLint * v)
{
  // GL_MESA_window_pos - glWindowPos4ivMESA
  if (s_deviceConfig.m_glWindowPos4ivMESA)
  {
    s_deviceConfig.m_glWindowPos4ivMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4sMESA

void  glew::gl::glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w)
{
  // GL_MESA_window_pos - glWindowPos4sMESA
  if (s_deviceConfig.m_glWindowPos4sMESA)
  {
    s_deviceConfig.m_glWindowPos4sMESA (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWindowPos4svMESA

void  glew::gl::glWindowPos4svMESA (const GLshort * v)
{
  // GL_MESA_window_pos - glWindowPos4svMESA
  if (s_deviceConfig.m_glWindowPos4svMESA)
  {
    s_deviceConfig.m_glWindowPos4svMESA (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginConditionalRenderNVX

void  glew::gl::glBeginConditionalRenderNVX (GLuint id)
{
  // GL_NVX_conditional_render - glBeginConditionalRenderNVX
  if (s_deviceConfig.m_glBeginConditionalRenderNVX)
  {
    s_deviceConfig.m_glBeginConditionalRenderNVX (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndConditionalRenderNVX

void  glew::gl::glEndConditionalRenderNVX ()
{
  // GL_NVX_conditional_render - glEndConditionalRenderNVX
  if (s_deviceConfig.m_glEndConditionalRenderNVX)
  {
    s_deviceConfig.m_glEndConditionalRenderNVX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirectBindlessNV

void  glew::gl::glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
{
  // GL_NV_bindless_multi_draw_indirect - glMultiDrawArraysIndirectBindlessNV
  if (s_deviceConfig.m_glMultiDrawArraysIndirectBindlessNV)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectBindlessNV (mode, indirect, drawCount, stride, vertexBufferCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirectBindlessNV

void  glew::gl::glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
{
  // GL_NV_bindless_multi_draw_indirect - glMultiDrawElementsIndirectBindlessNV
  if (s_deviceConfig.m_glMultiDrawElementsIndirectBindlessNV)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectBindlessNV (mode, type, indirect, drawCount, stride, vertexBufferCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawArraysIndirectBindlessCountNV

void  glew::gl::glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
{
  // GL_NV_bindless_multi_draw_indirect_count - glMultiDrawArraysIndirectBindlessCountNV
  if (s_deviceConfig.m_glMultiDrawArraysIndirectBindlessCountNV)
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectBindlessCountNV (mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiDrawElementsIndirectBindlessCountNV

void  glew::gl::glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
{
  // GL_NV_bindless_multi_draw_indirect_count - glMultiDrawElementsIndirectBindlessCountNV
  if (s_deviceConfig.m_glMultiDrawElementsIndirectBindlessCountNV)
  {
    s_deviceConfig.m_glMultiDrawElementsIndirectBindlessCountNV (mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureHandleNV

GLuint64 glew::gl::glGetTextureHandleNV (GLuint texture)
{
  // GL_NV_bindless_texture - glGetTextureHandleNV
  if (s_deviceConfig.m_glGetTextureHandleNV)
  {
    return s_deviceConfig.m_glGetTextureHandleNV (texture);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTextureSamplerHandleNV

GLuint64 glew::gl::glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler)
{
  // GL_NV_bindless_texture - glGetTextureSamplerHandleNV
  if (s_deviceConfig.m_glGetTextureSamplerHandleNV)
  {
    return s_deviceConfig.m_glGetTextureSamplerHandleNV (texture, sampler);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleResidentNV

void  glew::gl::glMakeTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeTextureHandleNonResidentNV

void  glew::gl::glMakeTextureHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeTextureHandleNonResidentNV
  if (s_deviceConfig.m_glMakeTextureHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetImageHandleNV

GLuint64 glew::gl::glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  // GL_NV_bindless_texture - glGetImageHandleNV
  if (s_deviceConfig.m_glGetImageHandleNV)
  {
    return s_deviceConfig.m_glGetImageHandleNV (texture, level, layered, layer, format);
  }
  return ((GLuint64)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleResidentNV

void  glew::gl::glMakeImageHandleResidentNV (GLuint64 handle, GLenum access)
{
  // GL_NV_bindless_texture - glMakeImageHandleResidentNV
  if (s_deviceConfig.m_glMakeImageHandleResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleResidentNV (handle, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeImageHandleNonResidentNV

void  glew::gl::glMakeImageHandleNonResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glMakeImageHandleNonResidentNV
  if (s_deviceConfig.m_glMakeImageHandleNonResidentNV)
  {
    s_deviceConfig.m_glMakeImageHandleNonResidentNV (handle);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64NV

void  glew::gl::glUniformHandleui64NV (GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glUniformHandleui64NV
  if (s_deviceConfig.m_glUniformHandleui64NV)
  {
    s_deviceConfig.m_glUniformHandleui64NV (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformHandleui64vNV

void  glew::gl::glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 * value)
{
  // GL_NV_bindless_texture - glUniformHandleui64vNV
  if (s_deviceConfig.m_glUniformHandleui64vNV)
  {
    s_deviceConfig.m_glUniformHandleui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64NV

void  glew::gl::glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64NV
  if (s_deviceConfig.m_glProgramUniformHandleui64NV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64NV (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformHandleui64vNV

void  glew::gl::glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 * values)
{
  // GL_NV_bindless_texture - glProgramUniformHandleui64vNV
  if (s_deviceConfig.m_glProgramUniformHandleui64vNV)
  {
    s_deviceConfig.m_glProgramUniformHandleui64vNV (program, location, count, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTextureHandleResidentNV

GLboolean glew::gl::glIsTextureHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsTextureHandleResidentNV
  if (s_deviceConfig.m_glIsTextureHandleResidentNV)
  {
    return s_deviceConfig.m_glIsTextureHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsImageHandleResidentNV

GLboolean glew::gl::glIsImageHandleResidentNV (GLuint64 handle)
{
  // GL_NV_bindless_texture - glIsImageHandleResidentNV
  if (s_deviceConfig.m_glIsImageHandleResidentNV)
  {
    return s_deviceConfig.m_glIsImageHandleResidentNV (handle);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendParameteriNV

void  glew::gl::glBlendParameteriNV (GLenum pname, GLint value)
{
  // GL_NV_blend_equation_advanced - glBlendParameteriNV
  if (s_deviceConfig.m_glBlendParameteriNV)
  {
    s_deviceConfig.m_glBlendParameteriNV (pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendBarrierNV

void  glew::gl::glBlendBarrierNV ()
{
  // GL_NV_blend_equation_advanced - glBlendBarrierNV
  if (s_deviceConfig.m_glBlendBarrierNV)
  {
    s_deviceConfig.m_glBlendBarrierNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateStatesNV

void  glew::gl::glCreateStatesNV (GLsizei n, GLuint * states)
{
  // GL_NV_command_list - glCreateStatesNV
  if (s_deviceConfig.m_glCreateStatesNV)
  {
    s_deviceConfig.m_glCreateStatesNV (n, states);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteStatesNV

void  glew::gl::glDeleteStatesNV (GLsizei n, const GLuint * states)
{
  // GL_NV_command_list - glDeleteStatesNV
  if (s_deviceConfig.m_glDeleteStatesNV)
  {
    s_deviceConfig.m_glDeleteStatesNV (n, states);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsStateNV

GLboolean glew::gl::glIsStateNV (GLuint state)
{
  // GL_NV_command_list - glIsStateNV
  if (s_deviceConfig.m_glIsStateNV)
  {
    return s_deviceConfig.m_glIsStateNV (state);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStateCaptureNV

void  glew::gl::glStateCaptureNV (GLuint state, GLenum mode)
{
  // GL_NV_command_list - glStateCaptureNV
  if (s_deviceConfig.m_glStateCaptureNV)
  {
    s_deviceConfig.m_glStateCaptureNV (state, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCommandHeaderNV

GLuint glew::gl::glGetCommandHeaderNV (GLenum tokenID, GLuint size)
{
  // GL_NV_command_list - glGetCommandHeaderNV
  if (s_deviceConfig.m_glGetCommandHeaderNV)
  {
    return s_deviceConfig.m_glGetCommandHeaderNV (tokenID, size);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetStageIndexNV

GLushort glew::gl::glGetStageIndexNV (GLenum shadertype)
{
  // GL_NV_command_list - glGetStageIndexNV
  if (s_deviceConfig.m_glGetStageIndexNV)
  {
    return s_deviceConfig.m_glGetStageIndexNV (shadertype);
  }
  return ((GLushort)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawCommandsNV

void  glew::gl::glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count)
{
  // GL_NV_command_list - glDrawCommandsNV
  if (s_deviceConfig.m_glDrawCommandsNV)
  {
    s_deviceConfig.m_glDrawCommandsNV (primitiveMode, buffer, indirects, sizes, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawCommandsAddressNV

void  glew::gl::glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count)
{
  // GL_NV_command_list - glDrawCommandsAddressNV
  if (s_deviceConfig.m_glDrawCommandsAddressNV)
  {
    s_deviceConfig.m_glDrawCommandsAddressNV (primitiveMode, indirects, sizes, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawCommandsStatesNV

void  glew::gl::glDrawCommandsStatesNV (GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count)
{
  // GL_NV_command_list - glDrawCommandsStatesNV
  if (s_deviceConfig.m_glDrawCommandsStatesNV)
  {
    s_deviceConfig.m_glDrawCommandsStatesNV (buffer, indirects, sizes, states, fbos, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawCommandsStatesAddressNV

void  glew::gl::glDrawCommandsStatesAddressNV (const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count)
{
  // GL_NV_command_list - glDrawCommandsStatesAddressNV
  if (s_deviceConfig.m_glDrawCommandsStatesAddressNV)
  {
    s_deviceConfig.m_glDrawCommandsStatesAddressNV (indirects, sizes, states, fbos, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCreateCommandListsNV

void  glew::gl::glCreateCommandListsNV (GLsizei n, GLuint * lists)
{
  // GL_NV_command_list - glCreateCommandListsNV
  if (s_deviceConfig.m_glCreateCommandListsNV)
  {
    s_deviceConfig.m_glCreateCommandListsNV (n, lists);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteCommandListsNV

void  glew::gl::glDeleteCommandListsNV (GLsizei n, const GLuint * lists)
{
  // GL_NV_command_list - glDeleteCommandListsNV
  if (s_deviceConfig.m_glDeleteCommandListsNV)
  {
    s_deviceConfig.m_glDeleteCommandListsNV (n, lists);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsCommandListNV

GLboolean glew::gl::glIsCommandListNV (GLuint list)
{
  // GL_NV_command_list - glIsCommandListNV
  if (s_deviceConfig.m_glIsCommandListNV)
  {
    return s_deviceConfig.m_glIsCommandListNV (list);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glListDrawCommandsStatesClientNV

void  glew::gl::glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count)
{
  // GL_NV_command_list - glListDrawCommandsStatesClientNV
  if (s_deviceConfig.m_glListDrawCommandsStatesClientNV)
  {
    s_deviceConfig.m_glListDrawCommandsStatesClientNV (list, segment, indirects, sizes, states, fbos, count);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCommandListSegmentsNV

void  glew::gl::glCommandListSegmentsNV (GLuint list, GLuint segments)
{
  // GL_NV_command_list - glCommandListSegmentsNV
  if (s_deviceConfig.m_glCommandListSegmentsNV)
  {
    s_deviceConfig.m_glCommandListSegmentsNV (list, segments);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCompileCommandListNV

void  glew::gl::glCompileCommandListNV (GLuint list)
{
  // GL_NV_command_list - glCompileCommandListNV
  if (s_deviceConfig.m_glCompileCommandListNV)
  {
    s_deviceConfig.m_glCompileCommandListNV (list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCallCommandListNV

void  glew::gl::glCallCommandListNV (GLuint list)
{
  // GL_NV_command_list - glCallCommandListNV
  if (s_deviceConfig.m_glCallCommandListNV)
  {
    s_deviceConfig.m_glCallCommandListNV (list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginConditionalRenderNV

void  glew::gl::glBeginConditionalRenderNV (GLuint id, GLenum mode)
{
  // GL_NV_conditional_render - glBeginConditionalRenderNV
  if (s_deviceConfig.m_glBeginConditionalRenderNV)
  {
    s_deviceConfig.m_glBeginConditionalRenderNV (id, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndConditionalRenderNV

void  glew::gl::glEndConditionalRenderNV ()
{
  // GL_NV_conditional_render - glEndConditionalRenderNV
  if (s_deviceConfig.m_glEndConditionalRenderNV)
  {
    s_deviceConfig.m_glEndConditionalRenderNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSubpixelPrecisionBiasNV

void  glew::gl::glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits)
{
  // GL_NV_conservative_raster - glSubpixelPrecisionBiasNV
  if (s_deviceConfig.m_glSubpixelPrecisionBiasNV)
  {
    s_deviceConfig.m_glSubpixelPrecisionBiasNV (xbits, ybits);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyImageSubDataNV

void  glew::gl::glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // GL_NV_copy_image - glCopyImageSubDataNV
  if (s_deviceConfig.m_glCopyImageSubDataNV)
  {
    s_deviceConfig.m_glCopyImageSubDataNV (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangedNV

void  glew::gl::glDepthRangedNV (GLdouble zNear, GLdouble zFar)
{
  // GL_NV_depth_buffer_float - glDepthRangedNV
  if (s_deviceConfig.m_glDepthRangedNV)
  {
    s_deviceConfig.m_glDepthRangedNV (zNear, zFar);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearDepthdNV

void  glew::gl::glClearDepthdNV (GLdouble depth)
{
  // GL_NV_depth_buffer_float - glClearDepthdNV
  if (s_deviceConfig.m_glClearDepthdNV)
  {
    s_deviceConfig.m_glClearDepthdNV (depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthBoundsdNV

void  glew::gl::glDepthBoundsdNV (GLdouble zmin, GLdouble zmax)
{
  // GL_NV_depth_buffer_float - glDepthBoundsdNV
  if (s_deviceConfig.m_glDepthBoundsdNV)
  {
    s_deviceConfig.m_glDepthBoundsdNV (zmin, zmax);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTextureNV

void  glew::gl::glDrawTextureNV (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
  // GL_NV_draw_texture - glDrawTextureNV
  if (s_deviceConfig.m_glDrawTextureNV)
  {
    s_deviceConfig.m_glDrawTextureNV (texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapControlPointsNV

void  glew::gl::glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points)
{
  // GL_NV_evaluators - glMapControlPointsNV
  if (s_deviceConfig.m_glMapControlPointsNV)
  {
    s_deviceConfig.m_glMapControlPointsNV (target, index, type, ustride, vstride, uorder, vorder, packed, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapParameterivNV

void  glew::gl::glMapParameterivNV (GLenum target, GLenum pname, const GLint * params)
{
  // GL_NV_evaluators - glMapParameterivNV
  if (s_deviceConfig.m_glMapParameterivNV)
  {
    s_deviceConfig.m_glMapParameterivNV (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapParameterfvNV

void  glew::gl::glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_NV_evaluators - glMapParameterfvNV
  if (s_deviceConfig.m_glMapParameterfvNV)
  {
    s_deviceConfig.m_glMapParameterfvNV (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapControlPointsNV

void  glew::gl::glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points)
{
  // GL_NV_evaluators - glGetMapControlPointsNV
  if (s_deviceConfig.m_glGetMapControlPointsNV)
  {
    s_deviceConfig.m_glGetMapControlPointsNV (target, index, type, ustride, vstride, packed, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapParameterivNV

void  glew::gl::glGetMapParameterivNV (GLenum target, GLenum pname, GLint * params)
{
  // GL_NV_evaluators - glGetMapParameterivNV
  if (s_deviceConfig.m_glGetMapParameterivNV)
  {
    s_deviceConfig.m_glGetMapParameterivNV (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapParameterfvNV

void  glew::gl::glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_NV_evaluators - glGetMapParameterfvNV
  if (s_deviceConfig.m_glGetMapParameterfvNV)
  {
    s_deviceConfig.m_glGetMapParameterfvNV (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapAttribParameterivNV

void  glew::gl::glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint * params)
{
  // GL_NV_evaluators - glGetMapAttribParameterivNV
  if (s_deviceConfig.m_glGetMapAttribParameterivNV)
  {
    s_deviceConfig.m_glGetMapAttribParameterivNV (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapAttribParameterfvNV

void  glew::gl::glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat * params)
{
  // GL_NV_evaluators - glGetMapAttribParameterfvNV
  if (s_deviceConfig.m_glGetMapAttribParameterfvNV)
  {
    s_deviceConfig.m_glGetMapAttribParameterfvNV (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEvalMapsNV

void  glew::gl::glEvalMapsNV (GLenum target, GLenum mode)
{
  // GL_NV_evaluators - glEvalMapsNV
  if (s_deviceConfig.m_glEvalMapsNV)
  {
    s_deviceConfig.m_glEvalMapsNV (target, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMultisamplefvNV

void  glew::gl::glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat * val)
{
  // GL_NV_explicit_multisample - glGetMultisamplefvNV
  if (s_deviceConfig.m_glGetMultisamplefvNV)
  {
    s_deviceConfig.m_glGetMultisamplefvNV (pname, index, val);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMaskIndexedNV

void  glew::gl::glSampleMaskIndexedNV (GLuint index, GLbitfield mask)
{
  // GL_NV_explicit_multisample - glSampleMaskIndexedNV
  if (s_deviceConfig.m_glSampleMaskIndexedNV)
  {
    s_deviceConfig.m_glSampleMaskIndexedNV (index, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexRenderbufferNV

void  glew::gl::glTexRenderbufferNV (GLenum target, GLuint renderbuffer)
{
  // GL_NV_explicit_multisample - glTexRenderbufferNV
  if (s_deviceConfig.m_glTexRenderbufferNV)
  {
    s_deviceConfig.m_glTexRenderbufferNV (target, renderbuffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteFencesNV

void  glew::gl::glDeleteFencesNV (GLsizei n, const GLuint * fences)
{
  // GL_NV_fence - glDeleteFencesNV
  if (s_deviceConfig.m_glDeleteFencesNV)
  {
    s_deviceConfig.m_glDeleteFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenFencesNV

void  glew::gl::glGenFencesNV (GLsizei n, GLuint * fences)
{
  // GL_NV_fence - glGenFencesNV
  if (s_deviceConfig.m_glGenFencesNV)
  {
    s_deviceConfig.m_glGenFencesNV (n, fences);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsFenceNV

GLboolean glew::gl::glIsFenceNV (GLuint fence)
{
  // GL_NV_fence - glIsFenceNV
  if (s_deviceConfig.m_glIsFenceNV)
  {
    return s_deviceConfig.m_glIsFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTestFenceNV

GLboolean glew::gl::glTestFenceNV (GLuint fence)
{
  // GL_NV_fence - glTestFenceNV
  if (s_deviceConfig.m_glTestFenceNV)
  {
    return s_deviceConfig.m_glTestFenceNV (fence);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFenceivNV

void  glew::gl::glGetFenceivNV (GLuint fence, GLenum pname, GLint * params)
{
  // GL_NV_fence - glGetFenceivNV
  if (s_deviceConfig.m_glGetFenceivNV)
  {
    s_deviceConfig.m_glGetFenceivNV (fence, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishFenceNV

void  glew::gl::glFinishFenceNV (GLuint fence)
{
  // GL_NV_fence - glFinishFenceNV
  if (s_deviceConfig.m_glFinishFenceNV)
  {
    s_deviceConfig.m_glFinishFenceNV (fence);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSetFenceNV

void  glew::gl::glSetFenceNV (GLuint fence, GLenum condition)
{
  // GL_NV_fence - glSetFenceNV
  if (s_deviceConfig.m_glSetFenceNV)
  {
    s_deviceConfig.m_glSetFenceNV (fence, condition);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentCoverageColorNV

void  glew::gl::glFragmentCoverageColorNV (GLuint color)
{
  // GL_NV_fragment_coverage_to_color - glFragmentCoverageColorNV
  if (s_deviceConfig.m_glFragmentCoverageColorNV)
  {
    s_deviceConfig.m_glFragmentCoverageColorNV (color);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramNamedParameter4fNV

void  glew::gl::glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_NV_fragment_program - glProgramNamedParameter4fNV
  if (s_deviceConfig.m_glProgramNamedParameter4fNV)
  {
    s_deviceConfig.m_glProgramNamedParameter4fNV (id, len, name, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramNamedParameter4fvNV

void  glew::gl::glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v)
{
  // GL_NV_fragment_program - glProgramNamedParameter4fvNV
  if (s_deviceConfig.m_glProgramNamedParameter4fvNV)
  {
    s_deviceConfig.m_glProgramNamedParameter4fvNV (id, len, name, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramNamedParameter4dNV

void  glew::gl::glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_NV_fragment_program - glProgramNamedParameter4dNV
  if (s_deviceConfig.m_glProgramNamedParameter4dNV)
  {
    s_deviceConfig.m_glProgramNamedParameter4dNV (id, len, name, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramNamedParameter4dvNV

void  glew::gl::glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v)
{
  // GL_NV_fragment_program - glProgramNamedParameter4dvNV
  if (s_deviceConfig.m_glProgramNamedParameter4dvNV)
  {
    s_deviceConfig.m_glProgramNamedParameter4dvNV (id, len, name, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramNamedParameterfvNV

void  glew::gl::glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte * name, GLfloat * params)
{
  // GL_NV_fragment_program - glGetProgramNamedParameterfvNV
  if (s_deviceConfig.m_glGetProgramNamedParameterfvNV)
  {
    s_deviceConfig.m_glGetProgramNamedParameterfvNV (id, len, name, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramNamedParameterdvNV

void  glew::gl::glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte * name, GLdouble * params)
{
  // GL_NV_fragment_program - glGetProgramNamedParameterdvNV
  if (s_deviceConfig.m_glGetProgramNamedParameterdvNV)
  {
    s_deviceConfig.m_glGetProgramNamedParameterdvNV (id, len, name, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageModulationTableNV

void  glew::gl::glCoverageModulationTableNV (GLsizei n, const GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationTableNV
  if (s_deviceConfig.m_glCoverageModulationTableNV)
  {
    s_deviceConfig.m_glCoverageModulationTableNV (n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCoverageModulationTableNV

void  glew::gl::glGetCoverageModulationTableNV (GLsizei bufsize, GLfloat * v)
{
  // GL_NV_framebuffer_mixed_samples - glGetCoverageModulationTableNV
  if (s_deviceConfig.m_glGetCoverageModulationTableNV)
  {
    s_deviceConfig.m_glGetCoverageModulationTableNV (bufsize, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverageModulationNV

void  glew::gl::glCoverageModulationNV (GLenum components)
{
  // GL_NV_framebuffer_mixed_samples - glCoverageModulationNV
  if (s_deviceConfig.m_glCoverageModulationNV)
  {
    s_deviceConfig.m_glCoverageModulationNV (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRenderbufferStorageMultisampleCoverageNV

void  glew::gl::glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  // GL_NV_framebuffer_multisample_coverage - glRenderbufferStorageMultisampleCoverageNV
  if (s_deviceConfig.m_glRenderbufferStorageMultisampleCoverageNV)
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleCoverageNV (target, coverageSamples, colorSamples, internalformat, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramVertexLimitNV

void  glew::gl::glProgramVertexLimitNV (GLenum target, GLint limit)
{
  // GL_NV_geometry_program4 - glProgramVertexLimitNV
  if (s_deviceConfig.m_glProgramVertexLimitNV)
  {
    s_deviceConfig.m_glProgramVertexLimitNV (target, limit);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureEXT

void  glew::gl::glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  // GL_NV_geometry_program4 - glFramebufferTextureEXT
  if (s_deviceConfig.m_glFramebufferTextureEXT)
  {
    s_deviceConfig.m_glFramebufferTextureEXT (target, attachment, texture, level);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureFaceEXT

void  glew::gl::glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  // GL_NV_geometry_program4 - glFramebufferTextureFaceEXT
  if (s_deviceConfig.m_glFramebufferTextureFaceEXT)
  {
    s_deviceConfig.m_glFramebufferTextureFaceEXT (target, attachment, texture, level, face);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameterI4iNV

void  glew::gl::glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_NV_gpu_program4 - glProgramLocalParameterI4iNV
  if (s_deviceConfig.m_glProgramLocalParameterI4iNV)
  {
    s_deviceConfig.m_glProgramLocalParameterI4iNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameterI4ivNV

void  glew::gl::glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint * params)
{
  // GL_NV_gpu_program4 - glProgramLocalParameterI4ivNV
  if (s_deviceConfig.m_glProgramLocalParameterI4ivNV)
  {
    s_deviceConfig.m_glProgramLocalParameterI4ivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParametersI4ivNV

void  glew::gl::glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint * params)
{
  // GL_NV_gpu_program4 - glProgramLocalParametersI4ivNV
  if (s_deviceConfig.m_glProgramLocalParametersI4ivNV)
  {
    s_deviceConfig.m_glProgramLocalParametersI4ivNV (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameterI4uiNV

void  glew::gl::glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_NV_gpu_program4 - glProgramLocalParameterI4uiNV
  if (s_deviceConfig.m_glProgramLocalParameterI4uiNV)
  {
    s_deviceConfig.m_glProgramLocalParameterI4uiNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParameterI4uivNV

void  glew::gl::glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint * params)
{
  // GL_NV_gpu_program4 - glProgramLocalParameterI4uivNV
  if (s_deviceConfig.m_glProgramLocalParameterI4uivNV)
  {
    s_deviceConfig.m_glProgramLocalParameterI4uivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramLocalParametersI4uivNV

void  glew::gl::glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
  // GL_NV_gpu_program4 - glProgramLocalParametersI4uivNV
  if (s_deviceConfig.m_glProgramLocalParametersI4uivNV)
  {
    s_deviceConfig.m_glProgramLocalParametersI4uivNV (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameterI4iNV

void  glew::gl::glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_NV_gpu_program4 - glProgramEnvParameterI4iNV
  if (s_deviceConfig.m_glProgramEnvParameterI4iNV)
  {
    s_deviceConfig.m_glProgramEnvParameterI4iNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameterI4ivNV

void  glew::gl::glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint * params)
{
  // GL_NV_gpu_program4 - glProgramEnvParameterI4ivNV
  if (s_deviceConfig.m_glProgramEnvParameterI4ivNV)
  {
    s_deviceConfig.m_glProgramEnvParameterI4ivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParametersI4ivNV

void  glew::gl::glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint * params)
{
  // GL_NV_gpu_program4 - glProgramEnvParametersI4ivNV
  if (s_deviceConfig.m_glProgramEnvParametersI4ivNV)
  {
    s_deviceConfig.m_glProgramEnvParametersI4ivNV (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameterI4uiNV

void  glew::gl::glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_NV_gpu_program4 - glProgramEnvParameterI4uiNV
  if (s_deviceConfig.m_glProgramEnvParameterI4uiNV)
  {
    s_deviceConfig.m_glProgramEnvParameterI4uiNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParameterI4uivNV

void  glew::gl::glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint * params)
{
  // GL_NV_gpu_program4 - glProgramEnvParameterI4uivNV
  if (s_deviceConfig.m_glProgramEnvParameterI4uivNV)
  {
    s_deviceConfig.m_glProgramEnvParameterI4uivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramEnvParametersI4uivNV

void  glew::gl::glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint * params)
{
  // GL_NV_gpu_program4 - glProgramEnvParametersI4uivNV
  if (s_deviceConfig.m_glProgramEnvParametersI4uivNV)
  {
    s_deviceConfig.m_glProgramEnvParametersI4uivNV (target, index, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramLocalParameterIivNV

void  glew::gl::glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint * params)
{
  // GL_NV_gpu_program4 - glGetProgramLocalParameterIivNV
  if (s_deviceConfig.m_glGetProgramLocalParameterIivNV)
  {
    s_deviceConfig.m_glGetProgramLocalParameterIivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramLocalParameterIuivNV

void  glew::gl::glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint * params)
{
  // GL_NV_gpu_program4 - glGetProgramLocalParameterIuivNV
  if (s_deviceConfig.m_glGetProgramLocalParameterIuivNV)
  {
    s_deviceConfig.m_glGetProgramLocalParameterIuivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramEnvParameterIivNV

void  glew::gl::glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint * params)
{
  // GL_NV_gpu_program4 - glGetProgramEnvParameterIivNV
  if (s_deviceConfig.m_glGetProgramEnvParameterIivNV)
  {
    s_deviceConfig.m_glGetProgramEnvParameterIivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramEnvParameterIuivNV

void  glew::gl::glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint * params)
{
  // GL_NV_gpu_program4 - glGetProgramEnvParameterIuivNV
  if (s_deviceConfig.m_glGetProgramEnvParameterIuivNV)
  {
    s_deviceConfig.m_glGetProgramEnvParameterIuivNV (target, index, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramSubroutineParametersuivNV

void  glew::gl::glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint * params)
{
  // GL_NV_gpu_program5 - glProgramSubroutineParametersuivNV
  if (s_deviceConfig.m_glProgramSubroutineParametersuivNV)
  {
    s_deviceConfig.m_glProgramSubroutineParametersuivNV (target, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramSubroutineParameteruivNV

void  glew::gl::glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint * param)
{
  // GL_NV_gpu_program5 - glGetProgramSubroutineParameteruivNV
  if (s_deviceConfig.m_glGetProgramSubroutineParameteruivNV)
  {
    s_deviceConfig.m_glGetProgramSubroutineParameteruivNV (target, index, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2hNV

void  glew::gl::glVertex2hNV (GLhalfNV x, GLhalfNV y)
{
  // GL_NV_half_float - glVertex2hNV
  if (s_deviceConfig.m_glVertex2hNV)
  {
    s_deviceConfig.m_glVertex2hNV (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2hvNV

void  glew::gl::glVertex2hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glVertex2hvNV
  if (s_deviceConfig.m_glVertex2hvNV)
  {
    s_deviceConfig.m_glVertex2hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3hNV

void  glew::gl::glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  // GL_NV_half_float - glVertex3hNV
  if (s_deviceConfig.m_glVertex3hNV)
  {
    s_deviceConfig.m_glVertex3hNV (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3hvNV

void  glew::gl::glVertex3hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glVertex3hvNV
  if (s_deviceConfig.m_glVertex3hvNV)
  {
    s_deviceConfig.m_glVertex3hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4hNV

void  glew::gl::glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  // GL_NV_half_float - glVertex4hNV
  if (s_deviceConfig.m_glVertex4hNV)
  {
    s_deviceConfig.m_glVertex4hNV (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4hvNV

void  glew::gl::glVertex4hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glVertex4hvNV
  if (s_deviceConfig.m_glVertex4hvNV)
  {
    s_deviceConfig.m_glVertex4hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3hNV

void  glew::gl::glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  // GL_NV_half_float - glNormal3hNV
  if (s_deviceConfig.m_glNormal3hNV)
  {
    s_deviceConfig.m_glNormal3hNV (nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3hvNV

void  glew::gl::glNormal3hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glNormal3hvNV
  if (s_deviceConfig.m_glNormal3hvNV)
  {
    s_deviceConfig.m_glNormal3hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3hNV

void  glew::gl::glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  // GL_NV_half_float - glColor3hNV
  if (s_deviceConfig.m_glColor3hNV)
  {
    s_deviceConfig.m_glColor3hNV (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3hvNV

void  glew::gl::glColor3hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glColor3hvNV
  if (s_deviceConfig.m_glColor3hvNV)
  {
    s_deviceConfig.m_glColor3hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4hNV

void  glew::gl::glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  // GL_NV_half_float - glColor4hNV
  if (s_deviceConfig.m_glColor4hNV)
  {
    s_deviceConfig.m_glColor4hNV (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4hvNV

void  glew::gl::glColor4hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glColor4hvNV
  if (s_deviceConfig.m_glColor4hvNV)
  {
    s_deviceConfig.m_glColor4hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1hNV

void  glew::gl::glTexCoord1hNV (GLhalfNV s)
{
  // GL_NV_half_float - glTexCoord1hNV
  if (s_deviceConfig.m_glTexCoord1hNV)
  {
    s_deviceConfig.m_glTexCoord1hNV (s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1hvNV

void  glew::gl::glTexCoord1hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glTexCoord1hvNV
  if (s_deviceConfig.m_glTexCoord1hvNV)
  {
    s_deviceConfig.m_glTexCoord1hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2hNV

void  glew::gl::glTexCoord2hNV (GLhalfNV s, GLhalfNV t)
{
  // GL_NV_half_float - glTexCoord2hNV
  if (s_deviceConfig.m_glTexCoord2hNV)
  {
    s_deviceConfig.m_glTexCoord2hNV (s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2hvNV

void  glew::gl::glTexCoord2hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glTexCoord2hvNV
  if (s_deviceConfig.m_glTexCoord2hvNV)
  {
    s_deviceConfig.m_glTexCoord2hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3hNV

void  glew::gl::glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  // GL_NV_half_float - glTexCoord3hNV
  if (s_deviceConfig.m_glTexCoord3hNV)
  {
    s_deviceConfig.m_glTexCoord3hNV (s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3hvNV

void  glew::gl::glTexCoord3hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glTexCoord3hvNV
  if (s_deviceConfig.m_glTexCoord3hvNV)
  {
    s_deviceConfig.m_glTexCoord3hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4hNV

void  glew::gl::glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  // GL_NV_half_float - glTexCoord4hNV
  if (s_deviceConfig.m_glTexCoord4hNV)
  {
    s_deviceConfig.m_glTexCoord4hNV (s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4hvNV

void  glew::gl::glTexCoord4hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glTexCoord4hvNV
  if (s_deviceConfig.m_glTexCoord4hvNV)
  {
    s_deviceConfig.m_glTexCoord4hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1hNV

void  glew::gl::glMultiTexCoord1hNV (GLenum target, GLhalfNV s)
{
  // GL_NV_half_float - glMultiTexCoord1hNV
  if (s_deviceConfig.m_glMultiTexCoord1hNV)
  {
    s_deviceConfig.m_glMultiTexCoord1hNV (target, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1hvNV

void  glew::gl::glMultiTexCoord1hvNV (GLenum target, const GLhalfNV * v)
{
  // GL_NV_half_float - glMultiTexCoord1hvNV
  if (s_deviceConfig.m_glMultiTexCoord1hvNV)
  {
    s_deviceConfig.m_glMultiTexCoord1hvNV (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2hNV

void  glew::gl::glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t)
{
  // GL_NV_half_float - glMultiTexCoord2hNV
  if (s_deviceConfig.m_glMultiTexCoord2hNV)
  {
    s_deviceConfig.m_glMultiTexCoord2hNV (target, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2hvNV

void  glew::gl::glMultiTexCoord2hvNV (GLenum target, const GLhalfNV * v)
{
  // GL_NV_half_float - glMultiTexCoord2hvNV
  if (s_deviceConfig.m_glMultiTexCoord2hvNV)
  {
    s_deviceConfig.m_glMultiTexCoord2hvNV (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3hNV

void  glew::gl::glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  // GL_NV_half_float - glMultiTexCoord3hNV
  if (s_deviceConfig.m_glMultiTexCoord3hNV)
  {
    s_deviceConfig.m_glMultiTexCoord3hNV (target, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3hvNV

void  glew::gl::glMultiTexCoord3hvNV (GLenum target, const GLhalfNV * v)
{
  // GL_NV_half_float - glMultiTexCoord3hvNV
  if (s_deviceConfig.m_glMultiTexCoord3hvNV)
  {
    s_deviceConfig.m_glMultiTexCoord3hvNV (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4hNV

void  glew::gl::glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  // GL_NV_half_float - glMultiTexCoord4hNV
  if (s_deviceConfig.m_glMultiTexCoord4hNV)
  {
    s_deviceConfig.m_glMultiTexCoord4hNV (target, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4hvNV

void  glew::gl::glMultiTexCoord4hvNV (GLenum target, const GLhalfNV * v)
{
  // GL_NV_half_float - glMultiTexCoord4hvNV
  if (s_deviceConfig.m_glMultiTexCoord4hvNV)
  {
    s_deviceConfig.m_glMultiTexCoord4hvNV (target, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordhNV

void  glew::gl::glFogCoordhNV (GLhalfNV fog)
{
  // GL_NV_half_float - glFogCoordhNV
  if (s_deviceConfig.m_glFogCoordhNV)
  {
    s_deviceConfig.m_glFogCoordhNV (fog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordhvNV

void  glew::gl::glFogCoordhvNV (const GLhalfNV * fog)
{
  // GL_NV_half_float - glFogCoordhvNV
  if (s_deviceConfig.m_glFogCoordhvNV)
  {
    s_deviceConfig.m_glFogCoordhvNV (fog);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3hNV

void  glew::gl::glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  // GL_NV_half_float - glSecondaryColor3hNV
  if (s_deviceConfig.m_glSecondaryColor3hNV)
  {
    s_deviceConfig.m_glSecondaryColor3hNV (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColor3hvNV

void  glew::gl::glSecondaryColor3hvNV (const GLhalfNV * v)
{
  // GL_NV_half_float - glSecondaryColor3hvNV
  if (s_deviceConfig.m_glSecondaryColor3hvNV)
  {
    s_deviceConfig.m_glSecondaryColor3hvNV (v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexWeighthNV

void  glew::gl::glVertexWeighthNV (GLhalfNV weight)
{
  // GL_NV_half_float - glVertexWeighthNV
  if (s_deviceConfig.m_glVertexWeighthNV)
  {
    s_deviceConfig.m_glVertexWeighthNV (weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexWeighthvNV

void  glew::gl::glVertexWeighthvNV (const GLhalfNV * weight)
{
  // GL_NV_half_float - glVertexWeighthvNV
  if (s_deviceConfig.m_glVertexWeighthvNV)
  {
    s_deviceConfig.m_glVertexWeighthvNV (weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1hNV

void  glew::gl::glVertexAttrib1hNV (GLuint index, GLhalfNV x)
{
  // GL_NV_half_float - glVertexAttrib1hNV
  if (s_deviceConfig.m_glVertexAttrib1hNV)
  {
    s_deviceConfig.m_glVertexAttrib1hNV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1hvNV

void  glew::gl::glVertexAttrib1hvNV (GLuint index, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttrib1hvNV
  if (s_deviceConfig.m_glVertexAttrib1hvNV)
  {
    s_deviceConfig.m_glVertexAttrib1hvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2hNV

void  glew::gl::glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y)
{
  // GL_NV_half_float - glVertexAttrib2hNV
  if (s_deviceConfig.m_glVertexAttrib2hNV)
  {
    s_deviceConfig.m_glVertexAttrib2hNV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2hvNV

void  glew::gl::glVertexAttrib2hvNV (GLuint index, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttrib2hvNV
  if (s_deviceConfig.m_glVertexAttrib2hvNV)
  {
    s_deviceConfig.m_glVertexAttrib2hvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3hNV

void  glew::gl::glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  // GL_NV_half_float - glVertexAttrib3hNV
  if (s_deviceConfig.m_glVertexAttrib3hNV)
  {
    s_deviceConfig.m_glVertexAttrib3hNV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3hvNV

void  glew::gl::glVertexAttrib3hvNV (GLuint index, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttrib3hvNV
  if (s_deviceConfig.m_glVertexAttrib3hvNV)
  {
    s_deviceConfig.m_glVertexAttrib3hvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4hNV

void  glew::gl::glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  // GL_NV_half_float - glVertexAttrib4hNV
  if (s_deviceConfig.m_glVertexAttrib4hNV)
  {
    s_deviceConfig.m_glVertexAttrib4hNV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4hvNV

void  glew::gl::glVertexAttrib4hvNV (GLuint index, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttrib4hvNV
  if (s_deviceConfig.m_glVertexAttrib4hvNV)
  {
    s_deviceConfig.m_glVertexAttrib4hvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs1hvNV

void  glew::gl::glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttribs1hvNV
  if (s_deviceConfig.m_glVertexAttribs1hvNV)
  {
    s_deviceConfig.m_glVertexAttribs1hvNV (index, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs2hvNV

void  glew::gl::glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttribs2hvNV
  if (s_deviceConfig.m_glVertexAttribs2hvNV)
  {
    s_deviceConfig.m_glVertexAttribs2hvNV (index, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs3hvNV

void  glew::gl::glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttribs3hvNV
  if (s_deviceConfig.m_glVertexAttribs3hvNV)
  {
    s_deviceConfig.m_glVertexAttribs3hvNV (index, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs4hvNV

void  glew::gl::glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV * v)
{
  // GL_NV_half_float - glVertexAttribs4hvNV
  if (s_deviceConfig.m_glVertexAttribs4hvNV)
  {
    s_deviceConfig.m_glVertexAttribs4hvNV (index, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInternalformatSampleivNV

void  glew::gl::glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params)
{
  // GL_NV_internalformat_sample_query - glGetInternalformatSampleivNV
  if (s_deviceConfig.m_glGetInternalformatSampleivNV)
  {
    s_deviceConfig.m_glGetInternalformatSampleivNV (target, internalformat, samples, pname, bufSize, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenOcclusionQueriesNV

void  glew::gl::glGenOcclusionQueriesNV (GLsizei n, GLuint * ids)
{
  // GL_NV_occlusion_query - glGenOcclusionQueriesNV
  if (s_deviceConfig.m_glGenOcclusionQueriesNV)
  {
    s_deviceConfig.m_glGenOcclusionQueriesNV (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteOcclusionQueriesNV

void  glew::gl::glDeleteOcclusionQueriesNV (GLsizei n, const GLuint * ids)
{
  // GL_NV_occlusion_query - glDeleteOcclusionQueriesNV
  if (s_deviceConfig.m_glDeleteOcclusionQueriesNV)
  {
    s_deviceConfig.m_glDeleteOcclusionQueriesNV (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsOcclusionQueryNV

GLboolean glew::gl::glIsOcclusionQueryNV (GLuint id)
{
  // GL_NV_occlusion_query - glIsOcclusionQueryNV
  if (s_deviceConfig.m_glIsOcclusionQueryNV)
  {
    return s_deviceConfig.m_glIsOcclusionQueryNV (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginOcclusionQueryNV

void  glew::gl::glBeginOcclusionQueryNV (GLuint id)
{
  // GL_NV_occlusion_query - glBeginOcclusionQueryNV
  if (s_deviceConfig.m_glBeginOcclusionQueryNV)
  {
    s_deviceConfig.m_glBeginOcclusionQueryNV (id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndOcclusionQueryNV

void  glew::gl::glEndOcclusionQueryNV ()
{
  // GL_NV_occlusion_query - glEndOcclusionQueryNV
  if (s_deviceConfig.m_glEndOcclusionQueryNV)
  {
    s_deviceConfig.m_glEndOcclusionQueryNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetOcclusionQueryivNV

void  glew::gl::glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint * params)
{
  // GL_NV_occlusion_query - glGetOcclusionQueryivNV
  if (s_deviceConfig.m_glGetOcclusionQueryivNV)
  {
    s_deviceConfig.m_glGetOcclusionQueryivNV (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetOcclusionQueryuivNV

void  glew::gl::glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint * params)
{
  // GL_NV_occlusion_query - glGetOcclusionQueryuivNV
  if (s_deviceConfig.m_glGetOcclusionQueryuivNV)
  {
    s_deviceConfig.m_glGetOcclusionQueryuivNV (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBufferParametersfvNV

void  glew::gl::glProgramBufferParametersfvNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params)
{
  // GL_NV_parameter_buffer_object - glProgramBufferParametersfvNV
  if (s_deviceConfig.m_glProgramBufferParametersfvNV)
  {
    s_deviceConfig.m_glProgramBufferParametersfvNV (target, bindingIndex, wordIndex, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBufferParametersIivNV

void  glew::gl::glProgramBufferParametersIivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params)
{
  // GL_NV_parameter_buffer_object - glProgramBufferParametersIivNV
  if (s_deviceConfig.m_glProgramBufferParametersIivNV)
  {
    s_deviceConfig.m_glProgramBufferParametersIivNV (target, bindingIndex, wordIndex, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramBufferParametersIuivNV

void  glew::gl::glProgramBufferParametersIuivNV (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params)
{
  // GL_NV_parameter_buffer_object - glProgramBufferParametersIuivNV
  if (s_deviceConfig.m_glProgramBufferParametersIuivNV)
  {
    s_deviceConfig.m_glProgramBufferParametersIuivNV (target, bindingIndex, wordIndex, count, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenPathsNV

GLuint glew::gl::glGenPathsNV (GLsizei range)
{
  // GL_NV_path_rendering - glGenPathsNV
  if (s_deviceConfig.m_glGenPathsNV)
  {
    return s_deviceConfig.m_glGenPathsNV (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeletePathsNV

void  glew::gl::glDeletePathsNV (GLuint path, GLsizei range)
{
  // GL_NV_path_rendering - glDeletePathsNV
  if (s_deviceConfig.m_glDeletePathsNV)
  {
    s_deviceConfig.m_glDeletePathsNV (path, range);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPathNV

GLboolean glew::gl::glIsPathNV (GLuint path)
{
  // GL_NV_path_rendering - glIsPathNV
  if (s_deviceConfig.m_glIsPathNV)
  {
    return s_deviceConfig.m_glIsPathNV (path);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCommandsNV

void  glew::gl::glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCommandsNV
  if (s_deviceConfig.m_glPathCommandsNV)
  {
    s_deviceConfig.m_glPathCommandsNV (path, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCoordsNV

void  glew::gl::glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathCoordsNV
  if (s_deviceConfig.m_glPathCoordsNV)
  {
    s_deviceConfig.m_glPathCoordsNV (path, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathSubCommandsNV

void  glew::gl::glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCommandsNV
  if (s_deviceConfig.m_glPathSubCommandsNV)
  {
    s_deviceConfig.m_glPathSubCommandsNV (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathSubCoordsNV

void  glew::gl::glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords)
{
  // GL_NV_path_rendering - glPathSubCoordsNV
  if (s_deviceConfig.m_glPathSubCoordsNV)
  {
    s_deviceConfig.m_glPathSubCoordsNV (path, coordStart, numCoords, coordType, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStringNV

void  glew::gl::glPathStringNV (GLuint path, GLenum format, GLsizei length, const void * pathString)
{
  // GL_NV_path_rendering - glPathStringNV
  if (s_deviceConfig.m_glPathStringNV)
  {
    s_deviceConfig.m_glPathStringNV (path, format, length, pathString);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphsNV

void  glew::gl::glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphsNV
  if (s_deviceConfig.m_glPathGlyphsNV)
  {
    s_deviceConfig.m_glPathGlyphsNV (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphRangeNV

void  glew::gl::glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphRangeNV
  if (s_deviceConfig.m_glPathGlyphRangeNV)
  {
    s_deviceConfig.m_glPathGlyphRangeNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glWeightPathsNV

void  glew::gl::glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights)
{
  // GL_NV_path_rendering - glWeightPathsNV
  if (s_deviceConfig.m_glWeightPathsNV)
  {
    s_deviceConfig.m_glWeightPathsNV (resultPath, numPaths, paths, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyPathNV

void  glew::gl::glCopyPathNV (GLuint resultPath, GLuint srcPath)
{
  // GL_NV_path_rendering - glCopyPathNV
  if (s_deviceConfig.m_glCopyPathNV)
  {
    s_deviceConfig.m_glCopyPathNV (resultPath, srcPath);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInterpolatePathsNV

void  glew::gl::glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  // GL_NV_path_rendering - glInterpolatePathsNV
  if (s_deviceConfig.m_glInterpolatePathsNV)
  {
    s_deviceConfig.m_glInterpolatePathsNV (resultPath, pathA, pathB, weight);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformPathNV

void  glew::gl::glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glTransformPathNV
  if (s_deviceConfig.m_glTransformPathNV)
  {
    s_deviceConfig.m_glTransformPathNV (resultPath, srcPath, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterivNV

void  glew::gl::glPathParameterivNV (GLuint path, GLenum pname, const GLint * value)
{
  // GL_NV_path_rendering - glPathParameterivNV
  if (s_deviceConfig.m_glPathParameterivNV)
  {
    s_deviceConfig.m_glPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameteriNV

void  glew::gl::glPathParameteriNV (GLuint path, GLenum pname, GLint value)
{
  // GL_NV_path_rendering - glPathParameteriNV
  if (s_deviceConfig.m_glPathParameteriNV)
  {
    s_deviceConfig.m_glPathParameteriNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterfvNV

void  glew::gl::glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat * value)
{
  // GL_NV_path_rendering - glPathParameterfvNV
  if (s_deviceConfig.m_glPathParameterfvNV)
  {
    s_deviceConfig.m_glPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathParameterfNV

void  glew::gl::glPathParameterfNV (GLuint path, GLenum pname, GLfloat value)
{
  // GL_NV_path_rendering - glPathParameterfNV
  if (s_deviceConfig.m_glPathParameterfNV)
  {
    s_deviceConfig.m_glPathParameterfNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathDashArrayNV

void  glew::gl::glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat * dashArray)
{
  // GL_NV_path_rendering - glPathDashArrayNV
  if (s_deviceConfig.m_glPathDashArrayNV)
  {
    s_deviceConfig.m_glPathDashArrayNV (path, dashCount, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStencilFuncNV

void  glew::gl::glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask)
{
  // GL_NV_path_rendering - glPathStencilFuncNV
  if (s_deviceConfig.m_glPathStencilFuncNV)
  {
    s_deviceConfig.m_glPathStencilFuncNV (func, ref, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathStencilDepthOffsetNV

void  glew::gl::glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units)
{
  // GL_NV_path_rendering - glPathStencilDepthOffsetNV
  if (s_deviceConfig.m_glPathStencilDepthOffsetNV)
  {
    s_deviceConfig.m_glPathStencilDepthOffsetNV (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFillPathNV

void  glew::gl::glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask)
{
  // GL_NV_path_rendering - glStencilFillPathNV
  if (s_deviceConfig.m_glStencilFillPathNV)
  {
    s_deviceConfig.m_glStencilFillPathNV (path, fillMode, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilStrokePathNV

void  glew::gl::glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask)
{
  // GL_NV_path_rendering - glStencilStrokePathNV
  if (s_deviceConfig.m_glStencilStrokePathNV)
  {
    s_deviceConfig.m_glStencilStrokePathNV (path, reference, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilFillPathInstancedNV

void  glew::gl::glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilFillPathInstancedNV
  if (s_deviceConfig.m_glStencilFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilStrokePathInstancedNV

void  glew::gl::glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathCoverDepthFuncNV

void  glew::gl::glPathCoverDepthFuncNV (GLenum func)
{
  // GL_NV_path_rendering - glPathCoverDepthFuncNV
  if (s_deviceConfig.m_glPathCoverDepthFuncNV)
  {
    s_deviceConfig.m_glPathCoverDepthFuncNV (func);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverFillPathNV

void  glew::gl::glCoverFillPathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverFillPathNV
  if (s_deviceConfig.m_glCoverFillPathNV)
  {
    s_deviceConfig.m_glCoverFillPathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverStrokePathNV

void  glew::gl::glCoverStrokePathNV (GLuint path, GLenum coverMode)
{
  // GL_NV_path_rendering - glCoverStrokePathNV
  if (s_deviceConfig.m_glCoverStrokePathNV)
  {
    s_deviceConfig.m_glCoverStrokePathNV (path, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverFillPathInstancedNV

void  glew::gl::glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverFillPathInstancedNV
  if (s_deviceConfig.m_glCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCoverStrokePathInstancedNV

void  glew::gl::glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathParameterivNV

void  glew::gl::glGetPathParameterivNV (GLuint path, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathParameterivNV
  if (s_deviceConfig.m_glGetPathParameterivNV)
  {
    s_deviceConfig.m_glGetPathParameterivNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathParameterfvNV

void  glew::gl::glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathParameterfvNV
  if (s_deviceConfig.m_glGetPathParameterfvNV)
  {
    s_deviceConfig.m_glGetPathParameterfvNV (path, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathCommandsNV

void  glew::gl::glGetPathCommandsNV (GLuint path, GLubyte * commands)
{
  // GL_NV_path_rendering - glGetPathCommandsNV
  if (s_deviceConfig.m_glGetPathCommandsNV)
  {
    s_deviceConfig.m_glGetPathCommandsNV (path, commands);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathCoordsNV

void  glew::gl::glGetPathCoordsNV (GLuint path, GLfloat * coords)
{
  // GL_NV_path_rendering - glGetPathCoordsNV
  if (s_deviceConfig.m_glGetPathCoordsNV)
  {
    s_deviceConfig.m_glGetPathCoordsNV (path, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathDashArrayNV

void  glew::gl::glGetPathDashArrayNV (GLuint path, GLfloat * dashArray)
{
  // GL_NV_path_rendering - glGetPathDashArrayNV
  if (s_deviceConfig.m_glGetPathDashArrayNV)
  {
    s_deviceConfig.m_glGetPathDashArrayNV (path, dashArray);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathMetricsNV

void  glew::gl::glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricsNV
  if (s_deviceConfig.m_glGetPathMetricsNV)
  {
    s_deviceConfig.m_glGetPathMetricsNV (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathMetricRangeNV

void  glew::gl::glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics)
{
  // GL_NV_path_rendering - glGetPathMetricRangeNV
  if (s_deviceConfig.m_glGetPathMetricRangeNV)
  {
    s_deviceConfig.m_glGetPathMetricRangeNV (metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathSpacingNV

void  glew::gl::glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing)
{
  // GL_NV_path_rendering - glGetPathSpacingNV
  if (s_deviceConfig.m_glGetPathSpacingNV)
  {
    s_deviceConfig.m_glGetPathSpacingNV (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPointInFillPathNV

GLboolean glew::gl::glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInFillPathNV
  if (s_deviceConfig.m_glIsPointInFillPathNV)
  {
    return s_deviceConfig.m_glIsPointInFillPathNV (path, mask, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsPointInStrokePathNV

GLboolean glew::gl::glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y)
{
  // GL_NV_path_rendering - glIsPointInStrokePathNV
  if (s_deviceConfig.m_glIsPointInStrokePathNV)
  {
    return s_deviceConfig.m_glIsPointInStrokePathNV (path, x, y);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathLengthNV

GLfloat glew::gl::glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  // GL_NV_path_rendering - glGetPathLengthNV
  if (s_deviceConfig.m_glGetPathLengthNV)
  {
    return s_deviceConfig.m_glGetPathLengthNV (path, startSegment, numSegments);
  }
  return ((GLfloat)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointAlongPathNV

GLboolean glew::gl::glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY)
{
  // GL_NV_path_rendering - glPointAlongPathNV
  if (s_deviceConfig.m_glPointAlongPathNV)
  {
    return s_deviceConfig.m_glPointAlongPathNV (path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoad3x2fNV

void  glew::gl::glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x2fNV
  if (s_deviceConfig.m_glMatrixLoad3x2fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoad3x3fNV

void  glew::gl::glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoad3x3fNV
  if (s_deviceConfig.m_glMatrixLoad3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoad3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixLoadTranspose3x3fNV

void  glew::gl::glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixLoadTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixLoadTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMult3x2fNV

void  glew::gl::glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x2fNV
  if (s_deviceConfig.m_glMatrixMult3x2fNV)
  {
    s_deviceConfig.m_glMatrixMult3x2fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMult3x3fNV

void  glew::gl::glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMult3x3fNV
  if (s_deviceConfig.m_glMatrixMult3x3fNV)
  {
    s_deviceConfig.m_glMatrixMult3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMatrixMultTranspose3x3fNV

void  glew::gl::glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat * m)
{
  // GL_NV_path_rendering - glMatrixMultTranspose3x3fNV
  if (s_deviceConfig.m_glMatrixMultTranspose3x3fNV)
  {
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV (matrixMode, m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverFillPathNV

void  glew::gl::glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathNV (path, fillMode, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverStrokePathNV

void  glew::gl::glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathNV (path, reference, mask, coverMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverFillPathInstancedNV

void  glew::gl::glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverFillPathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStencilThenCoverStrokePathInstancedNV

void  glew::gl::glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues)
{
  // GL_NV_path_rendering - glStencilThenCoverStrokePathInstancedNV
  if (s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV)
  {
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphIndexRangeNV

GLenum glew::gl::glPathGlyphIndexRangeNV (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
{
  // GL_NV_path_rendering - glPathGlyphIndexRangeNV
  if (s_deviceConfig.m_glPathGlyphIndexRangeNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexRangeNV (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathGlyphIndexArrayNV

GLenum glew::gl::glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathGlyphIndexArrayNV (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathMemoryGlyphIndexArrayNV

GLenum glew::gl::glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  // GL_NV_path_rendering - glPathMemoryGlyphIndexArrayNV
  if (s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV)
  {
    return s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramPathFragmentInputGenNV

void  glew::gl::glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glProgramPathFragmentInputGenNV
  if (s_deviceConfig.m_glProgramPathFragmentInputGenNV)
  {
    s_deviceConfig.m_glProgramPathFragmentInputGenNV (program, location, genMode, components, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramResourcefvNV

void  glew::gl::glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params)
{
  // GL_NV_path_rendering - glGetProgramResourcefvNV
  if (s_deviceConfig.m_glGetProgramResourcefvNV)
  {
    s_deviceConfig.m_glGetProgramResourcefvNV (program, programInterface, index, propCount, props, bufSize, length, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathColorGenNV

void  glew::gl::glPathColorGenNV (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glPathColorGenNV
  if (s_deviceConfig.m_glPathColorGenNV)
  {
    s_deviceConfig.m_glPathColorGenNV (color, genMode, colorFormat, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathTexGenNV

void  glew::gl::glPathTexGenNV (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs)
{
  // GL_NV_path_rendering - glPathTexGenNV
  if (s_deviceConfig.m_glPathTexGenNV)
  {
    s_deviceConfig.m_glPathTexGenNV (texCoordSet, genMode, components, coeffs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPathFogGenNV

void  glew::gl::glPathFogGenNV (GLenum genMode)
{
  // GL_NV_path_rendering - glPathFogGenNV
  if (s_deviceConfig.m_glPathFogGenNV)
  {
    s_deviceConfig.m_glPathFogGenNV (genMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathColorGenivNV

void  glew::gl::glGetPathColorGenivNV (GLenum color, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathColorGenivNV
  if (s_deviceConfig.m_glGetPathColorGenivNV)
  {
    s_deviceConfig.m_glGetPathColorGenivNV (color, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathColorGenfvNV

void  glew::gl::glGetPathColorGenfvNV (GLenum color, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathColorGenfvNV
  if (s_deviceConfig.m_glGetPathColorGenfvNV)
  {
    s_deviceConfig.m_glGetPathColorGenfvNV (color, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathTexGenivNV

void  glew::gl::glGetPathTexGenivNV (GLenum texCoordSet, GLenum pname, GLint * value)
{
  // GL_NV_path_rendering - glGetPathTexGenivNV
  if (s_deviceConfig.m_glGetPathTexGenivNV)
  {
    s_deviceConfig.m_glGetPathTexGenivNV (texCoordSet, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPathTexGenfvNV

void  glew::gl::glGetPathTexGenfvNV (GLenum texCoordSet, GLenum pname, GLfloat * value)
{
  // GL_NV_path_rendering - glGetPathTexGenfvNV
  if (s_deviceConfig.m_glGetPathTexGenfvNV)
  {
    s_deviceConfig.m_glGetPathTexGenfvNV (texCoordSet, pname, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelDataRangeNV

void  glew::gl::glPixelDataRangeNV (GLenum target, GLsizei length, const void * pointer)
{
  // GL_NV_pixel_data_range - glPixelDataRangeNV
  if (s_deviceConfig.m_glPixelDataRangeNV)
  {
    s_deviceConfig.m_glPixelDataRangeNV (target, length, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushPixelDataRangeNV

void  glew::gl::glFlushPixelDataRangeNV (GLenum target)
{
  // GL_NV_pixel_data_range - glFlushPixelDataRangeNV
  if (s_deviceConfig.m_glFlushPixelDataRangeNV)
  {
    s_deviceConfig.m_glFlushPixelDataRangeNV (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameteriNV

void  glew::gl::glPointParameteriNV (GLenum pname, GLint param)
{
  // GL_NV_point_sprite - glPointParameteriNV
  if (s_deviceConfig.m_glPointParameteriNV)
  {
    s_deviceConfig.m_glPointParameteriNV (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterivNV

void  glew::gl::glPointParameterivNV (GLenum pname, const GLint * params)
{
  // GL_NV_point_sprite - glPointParameterivNV
  if (s_deviceConfig.m_glPointParameterivNV)
  {
    s_deviceConfig.m_glPointParameterivNV (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPresentFrameKeyedNV

void  glew::gl::glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  // GL_NV_present_video - glPresentFrameKeyedNV
  if (s_deviceConfig.m_glPresentFrameKeyedNV)
  {
    s_deviceConfig.m_glPresentFrameKeyedNV (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPresentFrameDualFillNV

void  glew::gl::glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  // GL_NV_present_video - glPresentFrameDualFillNV
  if (s_deviceConfig.m_glPresentFrameDualFillNV)
  {
    s_deviceConfig.m_glPresentFrameDualFillNV (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoivNV

void  glew::gl::glGetVideoivNV (GLuint video_slot, GLenum pname, GLint * params)
{
  // GL_NV_present_video - glGetVideoivNV
  if (s_deviceConfig.m_glGetVideoivNV)
  {
    s_deviceConfig.m_glGetVideoivNV (video_slot, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideouivNV

void  glew::gl::glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint * params)
{
  // GL_NV_present_video - glGetVideouivNV
  if (s_deviceConfig.m_glGetVideouivNV)
  {
    s_deviceConfig.m_glGetVideouivNV (video_slot, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoi64vNV

void  glew::gl::glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT * params)
{
  // GL_NV_present_video - glGetVideoi64vNV
  if (s_deviceConfig.m_glGetVideoi64vNV)
  {
    s_deviceConfig.m_glGetVideoi64vNV (video_slot, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoui64vNV

void  glew::gl::glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT * params)
{
  // GL_NV_present_video - glGetVideoui64vNV
  if (s_deviceConfig.m_glGetVideoui64vNV)
  {
    s_deviceConfig.m_glGetVideoui64vNV (video_slot, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrimitiveRestartNV

void  glew::gl::glPrimitiveRestartNV ()
{
  // GL_NV_primitive_restart - glPrimitiveRestartNV
  if (s_deviceConfig.m_glPrimitiveRestartNV)
  {
    s_deviceConfig.m_glPrimitiveRestartNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrimitiveRestartIndexNV

void  glew::gl::glPrimitiveRestartIndexNV (GLuint index)
{
  // GL_NV_primitive_restart - glPrimitiveRestartIndexNV
  if (s_deviceConfig.m_glPrimitiveRestartIndexNV)
  {
    s_deviceConfig.m_glPrimitiveRestartIndexNV (index);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerParameterfvNV

void  glew::gl::glCombinerParameterfvNV (GLenum pname, const GLfloat * params)
{
  // GL_NV_register_combiners - glCombinerParameterfvNV
  if (s_deviceConfig.m_glCombinerParameterfvNV)
  {
    s_deviceConfig.m_glCombinerParameterfvNV (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerParameterfNV

void  glew::gl::glCombinerParameterfNV (GLenum pname, GLfloat param)
{
  // GL_NV_register_combiners - glCombinerParameterfNV
  if (s_deviceConfig.m_glCombinerParameterfNV)
  {
    s_deviceConfig.m_glCombinerParameterfNV (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerParameterivNV

void  glew::gl::glCombinerParameterivNV (GLenum pname, const GLint * params)
{
  // GL_NV_register_combiners - glCombinerParameterivNV
  if (s_deviceConfig.m_glCombinerParameterivNV)
  {
    s_deviceConfig.m_glCombinerParameterivNV (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerParameteriNV

void  glew::gl::glCombinerParameteriNV (GLenum pname, GLint param)
{
  // GL_NV_register_combiners - glCombinerParameteriNV
  if (s_deviceConfig.m_glCombinerParameteriNV)
  {
    s_deviceConfig.m_glCombinerParameteriNV (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerInputNV

void  glew::gl::glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  // GL_NV_register_combiners - glCombinerInputNV
  if (s_deviceConfig.m_glCombinerInputNV)
  {
    s_deviceConfig.m_glCombinerInputNV (stage, portion, variable, input, mapping, componentUsage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerOutputNV

void  glew::gl::glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  // GL_NV_register_combiners - glCombinerOutputNV
  if (s_deviceConfig.m_glCombinerOutputNV)
  {
    s_deviceConfig.m_glCombinerOutputNV (stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinalCombinerInputNV

void  glew::gl::glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  // GL_NV_register_combiners - glFinalCombinerInputNV
  if (s_deviceConfig.m_glFinalCombinerInputNV)
  {
    s_deviceConfig.m_glFinalCombinerInputNV (variable, input, mapping, componentUsage);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCombinerInputParameterfvNV

void  glew::gl::glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params)
{
  // GL_NV_register_combiners - glGetCombinerInputParameterfvNV
  if (s_deviceConfig.m_glGetCombinerInputParameterfvNV)
  {
    s_deviceConfig.m_glGetCombinerInputParameterfvNV (stage, portion, variable, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCombinerInputParameterivNV

void  glew::gl::glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params)
{
  // GL_NV_register_combiners - glGetCombinerInputParameterivNV
  if (s_deviceConfig.m_glGetCombinerInputParameterivNV)
  {
    s_deviceConfig.m_glGetCombinerInputParameterivNV (stage, portion, variable, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCombinerOutputParameterfvNV

void  glew::gl::glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat * params)
{
  // GL_NV_register_combiners - glGetCombinerOutputParameterfvNV
  if (s_deviceConfig.m_glGetCombinerOutputParameterfvNV)
  {
    s_deviceConfig.m_glGetCombinerOutputParameterfvNV (stage, portion, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCombinerOutputParameterivNV

void  glew::gl::glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint * params)
{
  // GL_NV_register_combiners - glGetCombinerOutputParameterivNV
  if (s_deviceConfig.m_glGetCombinerOutputParameterivNV)
  {
    s_deviceConfig.m_glGetCombinerOutputParameterivNV (stage, portion, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFinalCombinerInputParameterfvNV

void  glew::gl::glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat * params)
{
  // GL_NV_register_combiners - glGetFinalCombinerInputParameterfvNV
  if (s_deviceConfig.m_glGetFinalCombinerInputParameterfvNV)
  {
    s_deviceConfig.m_glGetFinalCombinerInputParameterfvNV (variable, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFinalCombinerInputParameterivNV

void  glew::gl::glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint * params)
{
  // GL_NV_register_combiners - glGetFinalCombinerInputParameterivNV
  if (s_deviceConfig.m_glGetFinalCombinerInputParameterivNV)
  {
    s_deviceConfig.m_glGetFinalCombinerInputParameterivNV (variable, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCombinerStageParameterfvNV

void  glew::gl::glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat * params)
{
  // GL_NV_register_combiners2 - glCombinerStageParameterfvNV
  if (s_deviceConfig.m_glCombinerStageParameterfvNV)
  {
    s_deviceConfig.m_glCombinerStageParameterfvNV (stage, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetCombinerStageParameterfvNV

void  glew::gl::glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat * params)
{
  // GL_NV_register_combiners2 - glGetCombinerStageParameterfvNV
  if (s_deviceConfig.m_glGetCombinerStageParameterfvNV)
  {
    s_deviceConfig.m_glGetCombinerStageParameterfvNV (stage, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferSampleLocationsfvNV

void  glew::gl::glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV (target, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNamedFramebufferSampleLocationsfvNV

void  glew::gl::glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v)
{
  // GL_NV_sample_locations - glNamedFramebufferSampleLocationsfvNV
  if (s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV)
  {
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV (framebuffer, start, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResolveDepthValuesNV

void  glew::gl::glResolveDepthValuesNV ()
{
  // GL_NV_sample_locations - glResolveDepthValuesNV
  if (s_deviceConfig.m_glResolveDepthValuesNV)
  {
    s_deviceConfig.m_glResolveDepthValuesNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeBufferResidentNV

void  glew::gl::glMakeBufferResidentNV (GLenum target, GLenum access)
{
  // GL_NV_shader_buffer_load - glMakeBufferResidentNV
  if (s_deviceConfig.m_glMakeBufferResidentNV)
  {
    s_deviceConfig.m_glMakeBufferResidentNV (target, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeBufferNonResidentNV

void  glew::gl::glMakeBufferNonResidentNV (GLenum target)
{
  // GL_NV_shader_buffer_load - glMakeBufferNonResidentNV
  if (s_deviceConfig.m_glMakeBufferNonResidentNV)
  {
    s_deviceConfig.m_glMakeBufferNonResidentNV (target);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsBufferResidentNV

GLboolean glew::gl::glIsBufferResidentNV (GLenum target)
{
  // GL_NV_shader_buffer_load - glIsBufferResidentNV
  if (s_deviceConfig.m_glIsBufferResidentNV)
  {
    return s_deviceConfig.m_glIsBufferResidentNV (target);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeNamedBufferResidentNV

void  glew::gl::glMakeNamedBufferResidentNV (GLuint buffer, GLenum access)
{
  // GL_NV_shader_buffer_load - glMakeNamedBufferResidentNV
  if (s_deviceConfig.m_glMakeNamedBufferResidentNV)
  {
    s_deviceConfig.m_glMakeNamedBufferResidentNV (buffer, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMakeNamedBufferNonResidentNV

void  glew::gl::glMakeNamedBufferNonResidentNV (GLuint buffer)
{
  // GL_NV_shader_buffer_load - glMakeNamedBufferNonResidentNV
  if (s_deviceConfig.m_glMakeNamedBufferNonResidentNV)
  {
    s_deviceConfig.m_glMakeNamedBufferNonResidentNV (buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsNamedBufferResidentNV

GLboolean glew::gl::glIsNamedBufferResidentNV (GLuint buffer)
{
  // GL_NV_shader_buffer_load - glIsNamedBufferResidentNV
  if (s_deviceConfig.m_glIsNamedBufferResidentNV)
  {
    return s_deviceConfig.m_glIsNamedBufferResidentNV (buffer);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetBufferParameterui64vNV

void  glew::gl::glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT * params)
{
  // GL_NV_shader_buffer_load - glGetBufferParameterui64vNV
  if (s_deviceConfig.m_glGetBufferParameterui64vNV)
  {
    s_deviceConfig.m_glGetBufferParameterui64vNV (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetNamedBufferParameterui64vNV

void  glew::gl::glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT * params)
{
  // GL_NV_shader_buffer_load - glGetNamedBufferParameterui64vNV
  if (s_deviceConfig.m_glGetNamedBufferParameterui64vNV)
  {
    s_deviceConfig.m_glGetNamedBufferParameterui64vNV (buffer, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegerui64vNV

void  glew::gl::glGetIntegerui64vNV (GLenum value, GLuint64EXT * result)
{
  // GL_NV_shader_buffer_load - glGetIntegerui64vNV
  if (s_deviceConfig.m_glGetIntegerui64vNV)
  {
    s_deviceConfig.m_glGetIntegerui64vNV (value, result);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformui64NV

void  glew::gl::glUniformui64NV (GLint location, GLuint64EXT value)
{
  // GL_NV_shader_buffer_load - glUniformui64NV
  if (s_deviceConfig.m_glUniformui64NV)
  {
    s_deviceConfig.m_glUniformui64NV (location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glUniformui64vNV

void  glew::gl::glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_NV_shader_buffer_load - glUniformui64vNV
  if (s_deviceConfig.m_glUniformui64vNV)
  {
    s_deviceConfig.m_glUniformui64vNV (location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformui64NV

void  glew::gl::glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value)
{
  // GL_NV_shader_buffer_load - glProgramUniformui64NV
  if (s_deviceConfig.m_glProgramUniformui64NV)
  {
    s_deviceConfig.m_glProgramUniformui64NV (program, location, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramUniformui64vNV

void  glew::gl::glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value)
{
  // GL_NV_shader_buffer_load - glProgramUniformui64vNV
  if (s_deviceConfig.m_glProgramUniformui64vNV)
  {
    s_deviceConfig.m_glProgramUniformui64vNV (program, location, count, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureBarrierNV

void  glew::gl::glTextureBarrierNV ()
{
  // GL_NV_texture_barrier - glTextureBarrierNV
  if (s_deviceConfig.m_glTextureBarrierNV)
  {
    s_deviceConfig.m_glTextureBarrierNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage2DMultisampleCoverageNV

void  glew::gl::glTexImage2DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTexImage2DMultisampleCoverageNV
  if (s_deviceConfig.m_glTexImage2DMultisampleCoverageNV)
  {
    s_deviceConfig.m_glTexImage2DMultisampleCoverageNV (target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage3DMultisampleCoverageNV

void  glew::gl::glTexImage3DMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTexImage3DMultisampleCoverageNV
  if (s_deviceConfig.m_glTexImage3DMultisampleCoverageNV)
  {
    s_deviceConfig.m_glTexImage3DMultisampleCoverageNV (target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage2DMultisampleNV

void  glew::gl::glTextureImage2DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTextureImage2DMultisampleNV
  if (s_deviceConfig.m_glTextureImage2DMultisampleNV)
  {
    s_deviceConfig.m_glTextureImage2DMultisampleNV (texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage3DMultisampleNV

void  glew::gl::glTextureImage3DMultisampleNV (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTextureImage3DMultisampleNV
  if (s_deviceConfig.m_glTextureImage3DMultisampleNV)
  {
    s_deviceConfig.m_glTextureImage3DMultisampleNV (texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage2DMultisampleCoverageNV

void  glew::gl::glTextureImage2DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTextureImage2DMultisampleCoverageNV
  if (s_deviceConfig.m_glTextureImage2DMultisampleCoverageNV)
  {
    s_deviceConfig.m_glTextureImage2DMultisampleCoverageNV (texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureImage3DMultisampleCoverageNV

void  glew::gl::glTextureImage3DMultisampleCoverageNV (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  // GL_NV_texture_multisample - glTextureImage3DMultisampleCoverageNV
  if (s_deviceConfig.m_glTextureImage3DMultisampleCoverageNV)
  {
    s_deviceConfig.m_glTextureImage3DMultisampleCoverageNV (texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginTransformFeedbackNV

void  glew::gl::glBeginTransformFeedbackNV (GLenum primitiveMode)
{
  // GL_NV_transform_feedback - glBeginTransformFeedbackNV
  if (s_deviceConfig.m_glBeginTransformFeedbackNV)
  {
    s_deviceConfig.m_glBeginTransformFeedbackNV (primitiveMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndTransformFeedbackNV

void  glew::gl::glEndTransformFeedbackNV ()
{
  // GL_NV_transform_feedback - glEndTransformFeedbackNV
  if (s_deviceConfig.m_glEndTransformFeedbackNV)
  {
    s_deviceConfig.m_glEndTransformFeedbackNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackAttribsNV

void  glew::gl::glTransformFeedbackAttribsNV (GLsizei count, const GLint * attribs, GLenum bufferMode)
{
  // GL_NV_transform_feedback - glTransformFeedbackAttribsNV
  if (s_deviceConfig.m_glTransformFeedbackAttribsNV)
  {
    s_deviceConfig.m_glTransformFeedbackAttribsNV (count, attribs, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferRangeNV

void  glew::gl::glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  // GL_NV_transform_feedback - glBindBufferRangeNV
  if (s_deviceConfig.m_glBindBufferRangeNV)
  {
    s_deviceConfig.m_glBindBufferRangeNV (target, index, buffer, offset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferOffsetNV

void  glew::gl::glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  // GL_NV_transform_feedback - glBindBufferOffsetNV
  if (s_deviceConfig.m_glBindBufferOffsetNV)
  {
    s_deviceConfig.m_glBindBufferOffsetNV (target, index, buffer, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindBufferBaseNV

void  glew::gl::glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer)
{
  // GL_NV_transform_feedback - glBindBufferBaseNV
  if (s_deviceConfig.m_glBindBufferBaseNV)
  {
    s_deviceConfig.m_glBindBufferBaseNV (target, index, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackVaryingsNV

void  glew::gl::glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode)
{
  // GL_NV_transform_feedback - glTransformFeedbackVaryingsNV
  if (s_deviceConfig.m_glTransformFeedbackVaryingsNV)
  {
    s_deviceConfig.m_glTransformFeedbackVaryingsNV (program, count, locations, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glActiveVaryingNV

void  glew::gl::glActiveVaryingNV (GLuint program, const GLchar * name)
{
  // GL_NV_transform_feedback - glActiveVaryingNV
  if (s_deviceConfig.m_glActiveVaryingNV)
  {
    s_deviceConfig.m_glActiveVaryingNV (program, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVaryingLocationNV

GLint glew::gl::glGetVaryingLocationNV (GLuint program, const GLchar * name)
{
  // GL_NV_transform_feedback - glGetVaryingLocationNV
  if (s_deviceConfig.m_glGetVaryingLocationNV)
  {
    return s_deviceConfig.m_glGetVaryingLocationNV (program, name);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetActiveVaryingNV

void  glew::gl::glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name)
{
  // GL_NV_transform_feedback - glGetActiveVaryingNV
  if (s_deviceConfig.m_glGetActiveVaryingNV)
  {
    s_deviceConfig.m_glGetActiveVaryingNV (program, index, bufSize, length, size, type, name);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTransformFeedbackVaryingNV

void  glew::gl::glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint * location)
{
  // GL_NV_transform_feedback - glGetTransformFeedbackVaryingNV
  if (s_deviceConfig.m_glGetTransformFeedbackVaryingNV)
  {
    s_deviceConfig.m_glGetTransformFeedbackVaryingNV (program, index, location);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTransformFeedbackStreamAttribsNV

void  glew::gl::glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode)
{
  // GL_NV_transform_feedback - glTransformFeedbackStreamAttribsNV
  if (s_deviceConfig.m_glTransformFeedbackStreamAttribsNV)
  {
    s_deviceConfig.m_glTransformFeedbackStreamAttribsNV (count, attribs, nbuffers, bufstreams, bufferMode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindTransformFeedbackNV

void  glew::gl::glBindTransformFeedbackNV (GLenum target, GLuint id)
{
  // GL_NV_transform_feedback2 - glBindTransformFeedbackNV
  if (s_deviceConfig.m_glBindTransformFeedbackNV)
  {
    s_deviceConfig.m_glBindTransformFeedbackNV (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteTransformFeedbacksNV

void  glew::gl::glDeleteTransformFeedbacksNV (GLsizei n, const GLuint * ids)
{
  // GL_NV_transform_feedback2 - glDeleteTransformFeedbacksNV
  if (s_deviceConfig.m_glDeleteTransformFeedbacksNV)
  {
    s_deviceConfig.m_glDeleteTransformFeedbacksNV (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenTransformFeedbacksNV

void  glew::gl::glGenTransformFeedbacksNV (GLsizei n, GLuint * ids)
{
  // GL_NV_transform_feedback2 - glGenTransformFeedbacksNV
  if (s_deviceConfig.m_glGenTransformFeedbacksNV)
  {
    s_deviceConfig.m_glGenTransformFeedbacksNV (n, ids);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsTransformFeedbackNV

GLboolean glew::gl::glIsTransformFeedbackNV (GLuint id)
{
  // GL_NV_transform_feedback2 - glIsTransformFeedbackNV
  if (s_deviceConfig.m_glIsTransformFeedbackNV)
  {
    return s_deviceConfig.m_glIsTransformFeedbackNV (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPauseTransformFeedbackNV

void  glew::gl::glPauseTransformFeedbackNV ()
{
  // GL_NV_transform_feedback2 - glPauseTransformFeedbackNV
  if (s_deviceConfig.m_glPauseTransformFeedbackNV)
  {
    s_deviceConfig.m_glPauseTransformFeedbackNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glResumeTransformFeedbackNV

void  glew::gl::glResumeTransformFeedbackNV ()
{
  // GL_NV_transform_feedback2 - glResumeTransformFeedbackNV
  if (s_deviceConfig.m_glResumeTransformFeedbackNV)
  {
    s_deviceConfig.m_glResumeTransformFeedbackNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawTransformFeedbackNV

void  glew::gl::glDrawTransformFeedbackNV (GLenum mode, GLuint id)
{
  // GL_NV_transform_feedback2 - glDrawTransformFeedbackNV
  if (s_deviceConfig.m_glDrawTransformFeedbackNV)
  {
    s_deviceConfig.m_glDrawTransformFeedbackNV (mode, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUInitNV

void  glew::gl::glVDPAUInitNV (const void * vdpDevice, const void * getProcAddress)
{
  // GL_NV_vdpau_interop - glVDPAUInitNV
  if (s_deviceConfig.m_glVDPAUInitNV)
  {
    s_deviceConfig.m_glVDPAUInitNV (vdpDevice, getProcAddress);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUFiniNV

void  glew::gl::glVDPAUFiniNV ()
{
  // GL_NV_vdpau_interop - glVDPAUFiniNV
  if (s_deviceConfig.m_glVDPAUFiniNV)
  {
    s_deviceConfig.m_glVDPAUFiniNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAURegisterVideoSurfaceNV

GLvdpauSurfaceNV glew::gl::glVDPAURegisterVideoSurfaceNV (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames)
{
  // GL_NV_vdpau_interop - glVDPAURegisterVideoSurfaceNV
  if (s_deviceConfig.m_glVDPAURegisterVideoSurfaceNV)
  {
    return s_deviceConfig.m_glVDPAURegisterVideoSurfaceNV (vdpSurface, target, numTextureNames, textureNames);
  }
  return ((GLvdpauSurfaceNV)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAURegisterOutputSurfaceNV

GLvdpauSurfaceNV glew::gl::glVDPAURegisterOutputSurfaceNV (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames)
{
  // GL_NV_vdpau_interop - glVDPAURegisterOutputSurfaceNV
  if (s_deviceConfig.m_glVDPAURegisterOutputSurfaceNV)
  {
    return s_deviceConfig.m_glVDPAURegisterOutputSurfaceNV (vdpSurface, target, numTextureNames, textureNames);
  }
  return ((GLvdpauSurfaceNV)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUIsSurfaceNV

GLboolean glew::gl::glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface)
{
  // GL_NV_vdpau_interop - glVDPAUIsSurfaceNV
  if (s_deviceConfig.m_glVDPAUIsSurfaceNV)
  {
    return s_deviceConfig.m_glVDPAUIsSurfaceNV (surface);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUUnregisterSurfaceNV

void  glew::gl::glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface)
{
  // GL_NV_vdpau_interop - glVDPAUUnregisterSurfaceNV
  if (s_deviceConfig.m_glVDPAUUnregisterSurfaceNV)
  {
    s_deviceConfig.m_glVDPAUUnregisterSurfaceNV (surface);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUGetSurfaceivNV

void  glew::gl::glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values)
{
  // GL_NV_vdpau_interop - glVDPAUGetSurfaceivNV
  if (s_deviceConfig.m_glVDPAUGetSurfaceivNV)
  {
    s_deviceConfig.m_glVDPAUGetSurfaceivNV (surface, pname, bufSize, length, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUSurfaceAccessNV

void  glew::gl::glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access)
{
  // GL_NV_vdpau_interop - glVDPAUSurfaceAccessNV
  if (s_deviceConfig.m_glVDPAUSurfaceAccessNV)
  {
    s_deviceConfig.m_glVDPAUSurfaceAccessNV (surface, access);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUMapSurfacesNV

void  glew::gl::glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces)
{
  // GL_NV_vdpau_interop - glVDPAUMapSurfacesNV
  if (s_deviceConfig.m_glVDPAUMapSurfacesNV)
  {
    s_deviceConfig.m_glVDPAUMapSurfacesNV (numSurfaces, surfaces);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVDPAUUnmapSurfacesNV

void  glew::gl::glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV * surfaces)
{
  // GL_NV_vdpau_interop - glVDPAUUnmapSurfacesNV
  if (s_deviceConfig.m_glVDPAUUnmapSurfacesNV)
  {
    s_deviceConfig.m_glVDPAUUnmapSurfacesNV (numSurface, surfaces);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushVertexArrayRangeNV

void  glew::gl::glFlushVertexArrayRangeNV ()
{
  // GL_NV_vertex_array_range - glFlushVertexArrayRangeNV
  if (s_deviceConfig.m_glFlushVertexArrayRangeNV)
  {
    s_deviceConfig.m_glFlushVertexArrayRangeNV ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexArrayRangeNV

void  glew::gl::glVertexArrayRangeNV (GLsizei length, const void * pointer)
{
  // GL_NV_vertex_array_range - glVertexArrayRangeNV
  if (s_deviceConfig.m_glVertexArrayRangeNV)
  {
    s_deviceConfig.m_glVertexArrayRangeNV (length, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1i64NV

void  glew::gl::glVertexAttribL1i64NV (GLuint index, GLint64EXT x)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL1i64NV
  if (s_deviceConfig.m_glVertexAttribL1i64NV)
  {
    s_deviceConfig.m_glVertexAttribL1i64NV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2i64NV

void  glew::gl::glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL2i64NV
  if (s_deviceConfig.m_glVertexAttribL2i64NV)
  {
    s_deviceConfig.m_glVertexAttribL2i64NV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3i64NV

void  glew::gl::glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL3i64NV
  if (s_deviceConfig.m_glVertexAttribL3i64NV)
  {
    s_deviceConfig.m_glVertexAttribL3i64NV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4i64NV

void  glew::gl::glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL4i64NV
  if (s_deviceConfig.m_glVertexAttribL4i64NV)
  {
    s_deviceConfig.m_glVertexAttribL4i64NV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1i64vNV

void  glew::gl::glVertexAttribL1i64vNV (GLuint index, const GLint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL1i64vNV
  if (s_deviceConfig.m_glVertexAttribL1i64vNV)
  {
    s_deviceConfig.m_glVertexAttribL1i64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2i64vNV

void  glew::gl::glVertexAttribL2i64vNV (GLuint index, const GLint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL2i64vNV
  if (s_deviceConfig.m_glVertexAttribL2i64vNV)
  {
    s_deviceConfig.m_glVertexAttribL2i64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3i64vNV

void  glew::gl::glVertexAttribL3i64vNV (GLuint index, const GLint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL3i64vNV
  if (s_deviceConfig.m_glVertexAttribL3i64vNV)
  {
    s_deviceConfig.m_glVertexAttribL3i64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4i64vNV

void  glew::gl::glVertexAttribL4i64vNV (GLuint index, const GLint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL4i64vNV
  if (s_deviceConfig.m_glVertexAttribL4i64vNV)
  {
    s_deviceConfig.m_glVertexAttribL4i64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1ui64NV

void  glew::gl::glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL1ui64NV
  if (s_deviceConfig.m_glVertexAttribL1ui64NV)
  {
    s_deviceConfig.m_glVertexAttribL1ui64NV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2ui64NV

void  glew::gl::glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL2ui64NV
  if (s_deviceConfig.m_glVertexAttribL2ui64NV)
  {
    s_deviceConfig.m_glVertexAttribL2ui64NV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3ui64NV

void  glew::gl::glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL3ui64NV
  if (s_deviceConfig.m_glVertexAttribL3ui64NV)
  {
    s_deviceConfig.m_glVertexAttribL3ui64NV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4ui64NV

void  glew::gl::glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL4ui64NV
  if (s_deviceConfig.m_glVertexAttribL4ui64NV)
  {
    s_deviceConfig.m_glVertexAttribL4ui64NV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL1ui64vNV

void  glew::gl::glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL1ui64vNV
  if (s_deviceConfig.m_glVertexAttribL1ui64vNV)
  {
    s_deviceConfig.m_glVertexAttribL1ui64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL2ui64vNV

void  glew::gl::glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL2ui64vNV
  if (s_deviceConfig.m_glVertexAttribL2ui64vNV)
  {
    s_deviceConfig.m_glVertexAttribL2ui64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL3ui64vNV

void  glew::gl::glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL3ui64vNV
  if (s_deviceConfig.m_glVertexAttribL3ui64vNV)
  {
    s_deviceConfig.m_glVertexAttribL3ui64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribL4ui64vNV

void  glew::gl::glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT * v)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribL4ui64vNV
  if (s_deviceConfig.m_glVertexAttribL4ui64vNV)
  {
    s_deviceConfig.m_glVertexAttribL4ui64vNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribLi64vNV

void  glew::gl::glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT * params)
{
  // GL_NV_vertex_attrib_integer_64bit - glGetVertexAttribLi64vNV
  if (s_deviceConfig.m_glGetVertexAttribLi64vNV)
  {
    s_deviceConfig.m_glGetVertexAttribLi64vNV (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribLui64vNV

void  glew::gl::glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT * params)
{
  // GL_NV_vertex_attrib_integer_64bit - glGetVertexAttribLui64vNV
  if (s_deviceConfig.m_glGetVertexAttribLui64vNV)
  {
    s_deviceConfig.m_glGetVertexAttribLui64vNV (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribLFormatNV

void  glew::gl::glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_attrib_integer_64bit - glVertexAttribLFormatNV
  if (s_deviceConfig.m_glVertexAttribLFormatNV)
  {
    s_deviceConfig.m_glVertexAttribLFormatNV (index, size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBufferAddressRangeNV

void  glew::gl::glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  // GL_NV_vertex_buffer_unified_memory - glBufferAddressRangeNV
  if (s_deviceConfig.m_glBufferAddressRangeNV)
  {
    s_deviceConfig.m_glBufferAddressRangeNV (pname, index, address, length);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexFormatNV

void  glew::gl::glVertexFormatNV (GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glVertexFormatNV
  if (s_deviceConfig.m_glVertexFormatNV)
  {
    s_deviceConfig.m_glVertexFormatNV (size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormalFormatNV

void  glew::gl::glNormalFormatNV (GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glNormalFormatNV
  if (s_deviceConfig.m_glNormalFormatNV)
  {
    s_deviceConfig.m_glNormalFormatNV (type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorFormatNV

void  glew::gl::glColorFormatNV (GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glColorFormatNV
  if (s_deviceConfig.m_glColorFormatNV)
  {
    s_deviceConfig.m_glColorFormatNV (size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexFormatNV

void  glew::gl::glIndexFormatNV (GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glIndexFormatNV
  if (s_deviceConfig.m_glIndexFormatNV)
  {
    s_deviceConfig.m_glIndexFormatNV (type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoordFormatNV

void  glew::gl::glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glTexCoordFormatNV
  if (s_deviceConfig.m_glTexCoordFormatNV)
  {
    s_deviceConfig.m_glTexCoordFormatNV (size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEdgeFlagFormatNV

void  glew::gl::glEdgeFlagFormatNV (GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glEdgeFlagFormatNV
  if (s_deviceConfig.m_glEdgeFlagFormatNV)
  {
    s_deviceConfig.m_glEdgeFlagFormatNV (stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSecondaryColorFormatNV

void  glew::gl::glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glSecondaryColorFormatNV
  if (s_deviceConfig.m_glSecondaryColorFormatNV)
  {
    s_deviceConfig.m_glSecondaryColorFormatNV (size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogCoordFormatNV

void  glew::gl::glFogCoordFormatNV (GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glFogCoordFormatNV
  if (s_deviceConfig.m_glFogCoordFormatNV)
  {
    s_deviceConfig.m_glFogCoordFormatNV (type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribFormatNV

void  glew::gl::glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glVertexAttribFormatNV
  if (s_deviceConfig.m_glVertexAttribFormatNV)
  {
    s_deviceConfig.m_glVertexAttribFormatNV (index, size, type, normalized, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIFormatNV

void  glew::gl::glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride)
{
  // GL_NV_vertex_buffer_unified_memory - glVertexAttribIFormatNV
  if (s_deviceConfig.m_glVertexAttribIFormatNV)
  {
    s_deviceConfig.m_glVertexAttribIFormatNV (index, size, type, stride);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetIntegerui64i_vNV

void  glew::gl::glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT * result)
{
  // GL_NV_vertex_buffer_unified_memory - glGetIntegerui64i_vNV
  if (s_deviceConfig.m_glGetIntegerui64i_vNV)
  {
    s_deviceConfig.m_glGetIntegerui64i_vNV (value, index, result);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAreProgramsResidentNV

GLboolean glew::gl::glAreProgramsResidentNV (GLsizei n, const GLuint * programs, GLboolean * residences)
{
  // GL_NV_vertex_program - glAreProgramsResidentNV
  if (s_deviceConfig.m_glAreProgramsResidentNV)
  {
    return s_deviceConfig.m_glAreProgramsResidentNV (n, programs, residences);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindProgramNV

void  glew::gl::glBindProgramNV (GLenum target, GLuint id)
{
  // GL_NV_vertex_program - glBindProgramNV
  if (s_deviceConfig.m_glBindProgramNV)
  {
    s_deviceConfig.m_glBindProgramNV (target, id);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteProgramsNV

void  glew::gl::glDeleteProgramsNV (GLsizei n, const GLuint * programs)
{
  // GL_NV_vertex_program - glDeleteProgramsNV
  if (s_deviceConfig.m_glDeleteProgramsNV)
  {
    s_deviceConfig.m_glDeleteProgramsNV (n, programs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glExecuteProgramNV

void  glew::gl::glExecuteProgramNV (GLenum target, GLuint id, const GLfloat * params)
{
  // GL_NV_vertex_program - glExecuteProgramNV
  if (s_deviceConfig.m_glExecuteProgramNV)
  {
    s_deviceConfig.m_glExecuteProgramNV (target, id, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenProgramsNV

void  glew::gl::glGenProgramsNV (GLsizei n, GLuint * programs)
{
  // GL_NV_vertex_program - glGenProgramsNV
  if (s_deviceConfig.m_glGenProgramsNV)
  {
    s_deviceConfig.m_glGenProgramsNV (n, programs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramParameterdvNV

void  glew::gl::glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble * params)
{
  // GL_NV_vertex_program - glGetProgramParameterdvNV
  if (s_deviceConfig.m_glGetProgramParameterdvNV)
  {
    s_deviceConfig.m_glGetProgramParameterdvNV (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramParameterfvNV

void  glew::gl::glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat * params)
{
  // GL_NV_vertex_program - glGetProgramParameterfvNV
  if (s_deviceConfig.m_glGetProgramParameterfvNV)
  {
    s_deviceConfig.m_glGetProgramParameterfvNV (target, index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramivNV

void  glew::gl::glGetProgramivNV (GLuint id, GLenum pname, GLint * params)
{
  // GL_NV_vertex_program - glGetProgramivNV
  if (s_deviceConfig.m_glGetProgramivNV)
  {
    s_deviceConfig.m_glGetProgramivNV (id, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetProgramStringNV

void  glew::gl::glGetProgramStringNV (GLuint id, GLenum pname, GLubyte * program)
{
  // GL_NV_vertex_program - glGetProgramStringNV
  if (s_deviceConfig.m_glGetProgramStringNV)
  {
    s_deviceConfig.m_glGetProgramStringNV (id, pname, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTrackMatrixivNV

void  glew::gl::glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint * params)
{
  // GL_NV_vertex_program - glGetTrackMatrixivNV
  if (s_deviceConfig.m_glGetTrackMatrixivNV)
  {
    s_deviceConfig.m_glGetTrackMatrixivNV (target, address, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribdvNV

void  glew::gl::glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble * params)
{
  // GL_NV_vertex_program - glGetVertexAttribdvNV
  if (s_deviceConfig.m_glGetVertexAttribdvNV)
  {
    s_deviceConfig.m_glGetVertexAttribdvNV (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribfvNV

void  glew::gl::glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat * params)
{
  // GL_NV_vertex_program - glGetVertexAttribfvNV
  if (s_deviceConfig.m_glGetVertexAttribfvNV)
  {
    s_deviceConfig.m_glGetVertexAttribfvNV (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribivNV

void  glew::gl::glGetVertexAttribivNV (GLuint index, GLenum pname, GLint * params)
{
  // GL_NV_vertex_program - glGetVertexAttribivNV
  if (s_deviceConfig.m_glGetVertexAttribivNV)
  {
    s_deviceConfig.m_glGetVertexAttribivNV (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribPointervNV

void  glew::gl::glGetVertexAttribPointervNV (GLuint index, GLenum pname, void ** pointer)
{
  // GL_NV_vertex_program - glGetVertexAttribPointervNV
  if (s_deviceConfig.m_glGetVertexAttribPointervNV)
  {
    s_deviceConfig.m_glGetVertexAttribPointervNV (index, pname, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsProgramNV

GLboolean glew::gl::glIsProgramNV (GLuint id)
{
  // GL_NV_vertex_program - glIsProgramNV
  if (s_deviceConfig.m_glIsProgramNV)
  {
    return s_deviceConfig.m_glIsProgramNV (id);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadProgramNV

void  glew::gl::glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte * program)
{
  // GL_NV_vertex_program - glLoadProgramNV
  if (s_deviceConfig.m_glLoadProgramNV)
  {
    s_deviceConfig.m_glLoadProgramNV (target, id, len, program);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameter4dNV

void  glew::gl::glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_NV_vertex_program - glProgramParameter4dNV
  if (s_deviceConfig.m_glProgramParameter4dNV)
  {
    s_deviceConfig.m_glProgramParameter4dNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameter4dvNV

void  glew::gl::glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble * v)
{
  // GL_NV_vertex_program - glProgramParameter4dvNV
  if (s_deviceConfig.m_glProgramParameter4dvNV)
  {
    s_deviceConfig.m_glProgramParameter4dvNV (target, index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameter4fNV

void  glew::gl::glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_NV_vertex_program - glProgramParameter4fNV
  if (s_deviceConfig.m_glProgramParameter4fNV)
  {
    s_deviceConfig.m_glProgramParameter4fNV (target, index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameter4fvNV

void  glew::gl::glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat * v)
{
  // GL_NV_vertex_program - glProgramParameter4fvNV
  if (s_deviceConfig.m_glProgramParameter4fvNV)
  {
    s_deviceConfig.m_glProgramParameter4fvNV (target, index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameters4dvNV

void  glew::gl::glProgramParameters4dvNV (GLenum target, GLuint index, GLsizei count, const GLdouble * v)
{
  // GL_NV_vertex_program - glProgramParameters4dvNV
  if (s_deviceConfig.m_glProgramParameters4dvNV)
  {
    s_deviceConfig.m_glProgramParameters4dvNV (target, index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glProgramParameters4fvNV

void  glew::gl::glProgramParameters4fvNV (GLenum target, GLuint index, GLsizei count, const GLfloat * v)
{
  // GL_NV_vertex_program - glProgramParameters4fvNV
  if (s_deviceConfig.m_glProgramParameters4fvNV)
  {
    s_deviceConfig.m_glProgramParameters4fvNV (target, index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRequestResidentProgramsNV

void  glew::gl::glRequestResidentProgramsNV (GLsizei n, const GLuint * programs)
{
  // GL_NV_vertex_program - glRequestResidentProgramsNV
  if (s_deviceConfig.m_glRequestResidentProgramsNV)
  {
    s_deviceConfig.m_glRequestResidentProgramsNV (n, programs);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTrackMatrixNV

void  glew::gl::glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  // GL_NV_vertex_program - glTrackMatrixNV
  if (s_deviceConfig.m_glTrackMatrixNV)
  {
    s_deviceConfig.m_glTrackMatrixNV (target, address, matrix, transform);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribPointerNV

void  glew::gl::glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_NV_vertex_program - glVertexAttribPointerNV
  if (s_deviceConfig.m_glVertexAttribPointerNV)
  {
    s_deviceConfig.m_glVertexAttribPointerNV (index, fsize, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1dNV

void  glew::gl::glVertexAttrib1dNV (GLuint index, GLdouble x)
{
  // GL_NV_vertex_program - glVertexAttrib1dNV
  if (s_deviceConfig.m_glVertexAttrib1dNV)
  {
    s_deviceConfig.m_glVertexAttrib1dNV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1dvNV

void  glew::gl::glVertexAttrib1dvNV (GLuint index, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttrib1dvNV
  if (s_deviceConfig.m_glVertexAttrib1dvNV)
  {
    s_deviceConfig.m_glVertexAttrib1dvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1fNV

void  glew::gl::glVertexAttrib1fNV (GLuint index, GLfloat x)
{
  // GL_NV_vertex_program - glVertexAttrib1fNV
  if (s_deviceConfig.m_glVertexAttrib1fNV)
  {
    s_deviceConfig.m_glVertexAttrib1fNV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1fvNV

void  glew::gl::glVertexAttrib1fvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttrib1fvNV
  if (s_deviceConfig.m_glVertexAttrib1fvNV)
  {
    s_deviceConfig.m_glVertexAttrib1fvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1sNV

void  glew::gl::glVertexAttrib1sNV (GLuint index, GLshort x)
{
  // GL_NV_vertex_program - glVertexAttrib1sNV
  if (s_deviceConfig.m_glVertexAttrib1sNV)
  {
    s_deviceConfig.m_glVertexAttrib1sNV (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib1svNV

void  glew::gl::glVertexAttrib1svNV (GLuint index, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttrib1svNV
  if (s_deviceConfig.m_glVertexAttrib1svNV)
  {
    s_deviceConfig.m_glVertexAttrib1svNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2dNV

void  glew::gl::glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y)
{
  // GL_NV_vertex_program - glVertexAttrib2dNV
  if (s_deviceConfig.m_glVertexAttrib2dNV)
  {
    s_deviceConfig.m_glVertexAttrib2dNV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2dvNV

void  glew::gl::glVertexAttrib2dvNV (GLuint index, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttrib2dvNV
  if (s_deviceConfig.m_glVertexAttrib2dvNV)
  {
    s_deviceConfig.m_glVertexAttrib2dvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2fNV

void  glew::gl::glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y)
{
  // GL_NV_vertex_program - glVertexAttrib2fNV
  if (s_deviceConfig.m_glVertexAttrib2fNV)
  {
    s_deviceConfig.m_glVertexAttrib2fNV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2fvNV

void  glew::gl::glVertexAttrib2fvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttrib2fvNV
  if (s_deviceConfig.m_glVertexAttrib2fvNV)
  {
    s_deviceConfig.m_glVertexAttrib2fvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2sNV

void  glew::gl::glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y)
{
  // GL_NV_vertex_program - glVertexAttrib2sNV
  if (s_deviceConfig.m_glVertexAttrib2sNV)
  {
    s_deviceConfig.m_glVertexAttrib2sNV (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib2svNV

void  glew::gl::glVertexAttrib2svNV (GLuint index, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttrib2svNV
  if (s_deviceConfig.m_glVertexAttrib2svNV)
  {
    s_deviceConfig.m_glVertexAttrib2svNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3dNV

void  glew::gl::glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  // GL_NV_vertex_program - glVertexAttrib3dNV
  if (s_deviceConfig.m_glVertexAttrib3dNV)
  {
    s_deviceConfig.m_glVertexAttrib3dNV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3dvNV

void  glew::gl::glVertexAttrib3dvNV (GLuint index, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttrib3dvNV
  if (s_deviceConfig.m_glVertexAttrib3dvNV)
  {
    s_deviceConfig.m_glVertexAttrib3dvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3fNV

void  glew::gl::glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_NV_vertex_program - glVertexAttrib3fNV
  if (s_deviceConfig.m_glVertexAttrib3fNV)
  {
    s_deviceConfig.m_glVertexAttrib3fNV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3fvNV

void  glew::gl::glVertexAttrib3fvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttrib3fvNV
  if (s_deviceConfig.m_glVertexAttrib3fvNV)
  {
    s_deviceConfig.m_glVertexAttrib3fvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3sNV

void  glew::gl::glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z)
{
  // GL_NV_vertex_program - glVertexAttrib3sNV
  if (s_deviceConfig.m_glVertexAttrib3sNV)
  {
    s_deviceConfig.m_glVertexAttrib3sNV (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib3svNV

void  glew::gl::glVertexAttrib3svNV (GLuint index, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttrib3svNV
  if (s_deviceConfig.m_glVertexAttrib3svNV)
  {
    s_deviceConfig.m_glVertexAttrib3svNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4dNV

void  glew::gl::glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  // GL_NV_vertex_program - glVertexAttrib4dNV
  if (s_deviceConfig.m_glVertexAttrib4dNV)
  {
    s_deviceConfig.m_glVertexAttrib4dNV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4dvNV

void  glew::gl::glVertexAttrib4dvNV (GLuint index, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttrib4dvNV
  if (s_deviceConfig.m_glVertexAttrib4dvNV)
  {
    s_deviceConfig.m_glVertexAttrib4dvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4fNV

void  glew::gl::glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_NV_vertex_program - glVertexAttrib4fNV
  if (s_deviceConfig.m_glVertexAttrib4fNV)
  {
    s_deviceConfig.m_glVertexAttrib4fNV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4fvNV

void  glew::gl::glVertexAttrib4fvNV (GLuint index, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttrib4fvNV
  if (s_deviceConfig.m_glVertexAttrib4fvNV)
  {
    s_deviceConfig.m_glVertexAttrib4fvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4sNV

void  glew::gl::glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  // GL_NV_vertex_program - glVertexAttrib4sNV
  if (s_deviceConfig.m_glVertexAttrib4sNV)
  {
    s_deviceConfig.m_glVertexAttrib4sNV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4svNV

void  glew::gl::glVertexAttrib4svNV (GLuint index, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttrib4svNV
  if (s_deviceConfig.m_glVertexAttrib4svNV)
  {
    s_deviceConfig.m_glVertexAttrib4svNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4ubNV

void  glew::gl::glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  // GL_NV_vertex_program - glVertexAttrib4ubNV
  if (s_deviceConfig.m_glVertexAttrib4ubNV)
  {
    s_deviceConfig.m_glVertexAttrib4ubNV (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttrib4ubvNV

void  glew::gl::glVertexAttrib4ubvNV (GLuint index, const GLubyte * v)
{
  // GL_NV_vertex_program - glVertexAttrib4ubvNV
  if (s_deviceConfig.m_glVertexAttrib4ubvNV)
  {
    s_deviceConfig.m_glVertexAttrib4ubvNV (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs1dvNV

void  glew::gl::glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttribs1dvNV
  if (s_deviceConfig.m_glVertexAttribs1dvNV)
  {
    s_deviceConfig.m_glVertexAttribs1dvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs1fvNV

void  glew::gl::glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttribs1fvNV
  if (s_deviceConfig.m_glVertexAttribs1fvNV)
  {
    s_deviceConfig.m_glVertexAttribs1fvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs1svNV

void  glew::gl::glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttribs1svNV
  if (s_deviceConfig.m_glVertexAttribs1svNV)
  {
    s_deviceConfig.m_glVertexAttribs1svNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs2dvNV

void  glew::gl::glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttribs2dvNV
  if (s_deviceConfig.m_glVertexAttribs2dvNV)
  {
    s_deviceConfig.m_glVertexAttribs2dvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs2fvNV

void  glew::gl::glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttribs2fvNV
  if (s_deviceConfig.m_glVertexAttribs2fvNV)
  {
    s_deviceConfig.m_glVertexAttribs2fvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs2svNV

void  glew::gl::glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttribs2svNV
  if (s_deviceConfig.m_glVertexAttribs2svNV)
  {
    s_deviceConfig.m_glVertexAttribs2svNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs3dvNV

void  glew::gl::glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttribs3dvNV
  if (s_deviceConfig.m_glVertexAttribs3dvNV)
  {
    s_deviceConfig.m_glVertexAttribs3dvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs3fvNV

void  glew::gl::glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttribs3fvNV
  if (s_deviceConfig.m_glVertexAttribs3fvNV)
  {
    s_deviceConfig.m_glVertexAttribs3fvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs3svNV

void  glew::gl::glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttribs3svNV
  if (s_deviceConfig.m_glVertexAttribs3svNV)
  {
    s_deviceConfig.m_glVertexAttribs3svNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs4dvNV

void  glew::gl::glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble * v)
{
  // GL_NV_vertex_program - glVertexAttribs4dvNV
  if (s_deviceConfig.m_glVertexAttribs4dvNV)
  {
    s_deviceConfig.m_glVertexAttribs4dvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs4fvNV

void  glew::gl::glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat * v)
{
  // GL_NV_vertex_program - glVertexAttribs4fvNV
  if (s_deviceConfig.m_glVertexAttribs4fvNV)
  {
    s_deviceConfig.m_glVertexAttribs4fvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs4svNV

void  glew::gl::glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort * v)
{
  // GL_NV_vertex_program - glVertexAttribs4svNV
  if (s_deviceConfig.m_glVertexAttribs4svNV)
  {
    s_deviceConfig.m_glVertexAttribs4svNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribs4ubvNV

void  glew::gl::glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte * v)
{
  // GL_NV_vertex_program - glVertexAttribs4ubvNV
  if (s_deviceConfig.m_glVertexAttribs4ubvNV)
  {
    s_deviceConfig.m_glVertexAttribs4ubvNV (index, count, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1iEXT

void  glew::gl::glVertexAttribI1iEXT (GLuint index, GLint x)
{
  // GL_NV_vertex_program4 - glVertexAttribI1iEXT
  if (s_deviceConfig.m_glVertexAttribI1iEXT)
  {
    s_deviceConfig.m_glVertexAttribI1iEXT (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2iEXT

void  glew::gl::glVertexAttribI2iEXT (GLuint index, GLint x, GLint y)
{
  // GL_NV_vertex_program4 - glVertexAttribI2iEXT
  if (s_deviceConfig.m_glVertexAttribI2iEXT)
  {
    s_deviceConfig.m_glVertexAttribI2iEXT (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3iEXT

void  glew::gl::glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z)
{
  // GL_NV_vertex_program4 - glVertexAttribI3iEXT
  if (s_deviceConfig.m_glVertexAttribI3iEXT)
  {
    s_deviceConfig.m_glVertexAttribI3iEXT (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4iEXT

void  glew::gl::glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  // GL_NV_vertex_program4 - glVertexAttribI4iEXT
  if (s_deviceConfig.m_glVertexAttribI4iEXT)
  {
    s_deviceConfig.m_glVertexAttribI4iEXT (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1uiEXT

void  glew::gl::glVertexAttribI1uiEXT (GLuint index, GLuint x)
{
  // GL_NV_vertex_program4 - glVertexAttribI1uiEXT
  if (s_deviceConfig.m_glVertexAttribI1uiEXT)
  {
    s_deviceConfig.m_glVertexAttribI1uiEXT (index, x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2uiEXT

void  glew::gl::glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y)
{
  // GL_NV_vertex_program4 - glVertexAttribI2uiEXT
  if (s_deviceConfig.m_glVertexAttribI2uiEXT)
  {
    s_deviceConfig.m_glVertexAttribI2uiEXT (index, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3uiEXT

void  glew::gl::glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z)
{
  // GL_NV_vertex_program4 - glVertexAttribI3uiEXT
  if (s_deviceConfig.m_glVertexAttribI3uiEXT)
  {
    s_deviceConfig.m_glVertexAttribI3uiEXT (index, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4uiEXT

void  glew::gl::glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  // GL_NV_vertex_program4 - glVertexAttribI4uiEXT
  if (s_deviceConfig.m_glVertexAttribI4uiEXT)
  {
    s_deviceConfig.m_glVertexAttribI4uiEXT (index, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1ivEXT

void  glew::gl::glVertexAttribI1ivEXT (GLuint index, const GLint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI1ivEXT
  if (s_deviceConfig.m_glVertexAttribI1ivEXT)
  {
    s_deviceConfig.m_glVertexAttribI1ivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2ivEXT

void  glew::gl::glVertexAttribI2ivEXT (GLuint index, const GLint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI2ivEXT
  if (s_deviceConfig.m_glVertexAttribI2ivEXT)
  {
    s_deviceConfig.m_glVertexAttribI2ivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3ivEXT

void  glew::gl::glVertexAttribI3ivEXT (GLuint index, const GLint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI3ivEXT
  if (s_deviceConfig.m_glVertexAttribI3ivEXT)
  {
    s_deviceConfig.m_glVertexAttribI3ivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4ivEXT

void  glew::gl::glVertexAttribI4ivEXT (GLuint index, const GLint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4ivEXT
  if (s_deviceConfig.m_glVertexAttribI4ivEXT)
  {
    s_deviceConfig.m_glVertexAttribI4ivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI1uivEXT

void  glew::gl::glVertexAttribI1uivEXT (GLuint index, const GLuint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI1uivEXT
  if (s_deviceConfig.m_glVertexAttribI1uivEXT)
  {
    s_deviceConfig.m_glVertexAttribI1uivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI2uivEXT

void  glew::gl::glVertexAttribI2uivEXT (GLuint index, const GLuint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI2uivEXT
  if (s_deviceConfig.m_glVertexAttribI2uivEXT)
  {
    s_deviceConfig.m_glVertexAttribI2uivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI3uivEXT

void  glew::gl::glVertexAttribI3uivEXT (GLuint index, const GLuint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI3uivEXT
  if (s_deviceConfig.m_glVertexAttribI3uivEXT)
  {
    s_deviceConfig.m_glVertexAttribI3uivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4uivEXT

void  glew::gl::glVertexAttribI4uivEXT (GLuint index, const GLuint * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4uivEXT
  if (s_deviceConfig.m_glVertexAttribI4uivEXT)
  {
    s_deviceConfig.m_glVertexAttribI4uivEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4bvEXT

void  glew::gl::glVertexAttribI4bvEXT (GLuint index, const GLbyte * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4bvEXT
  if (s_deviceConfig.m_glVertexAttribI4bvEXT)
  {
    s_deviceConfig.m_glVertexAttribI4bvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4svEXT

void  glew::gl::glVertexAttribI4svEXT (GLuint index, const GLshort * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4svEXT
  if (s_deviceConfig.m_glVertexAttribI4svEXT)
  {
    s_deviceConfig.m_glVertexAttribI4svEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4ubvEXT

void  glew::gl::glVertexAttribI4ubvEXT (GLuint index, const GLubyte * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4ubvEXT
  if (s_deviceConfig.m_glVertexAttribI4ubvEXT)
  {
    s_deviceConfig.m_glVertexAttribI4ubvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribI4usvEXT

void  glew::gl::glVertexAttribI4usvEXT (GLuint index, const GLushort * v)
{
  // GL_NV_vertex_program4 - glVertexAttribI4usvEXT
  if (s_deviceConfig.m_glVertexAttribI4usvEXT)
  {
    s_deviceConfig.m_glVertexAttribI4usvEXT (index, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertexAttribIPointerEXT

void  glew::gl::glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
  // GL_NV_vertex_program4 - glVertexAttribIPointerEXT
  if (s_deviceConfig.m_glVertexAttribIPointerEXT)
  {
    s_deviceConfig.m_glVertexAttribIPointerEXT (index, size, type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIivEXT

void  glew::gl::glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint * params)
{
  // GL_NV_vertex_program4 - glGetVertexAttribIivEXT
  if (s_deviceConfig.m_glGetVertexAttribIivEXT)
  {
    s_deviceConfig.m_glGetVertexAttribIivEXT (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVertexAttribIuivEXT

void  glew::gl::glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint * params)
{
  // GL_NV_vertex_program4 - glGetVertexAttribIuivEXT
  if (s_deviceConfig.m_glGetVertexAttribIuivEXT)
  {
    s_deviceConfig.m_glGetVertexAttribIuivEXT (index, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBeginVideoCaptureNV

void  glew::gl::glBeginVideoCaptureNV (GLuint video_capture_slot)
{
  // GL_NV_video_capture - glBeginVideoCaptureNV
  if (s_deviceConfig.m_glBeginVideoCaptureNV)
  {
    s_deviceConfig.m_glBeginVideoCaptureNV (video_capture_slot);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVideoCaptureStreamBufferNV

void  glew::gl::glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
{
  // GL_NV_video_capture - glBindVideoCaptureStreamBufferNV
  if (s_deviceConfig.m_glBindVideoCaptureStreamBufferNV)
  {
    s_deviceConfig.m_glBindVideoCaptureStreamBufferNV (video_capture_slot, stream, frame_region, offset);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBindVideoCaptureStreamTextureNV

void  glew::gl::glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  // GL_NV_video_capture - glBindVideoCaptureStreamTextureNV
  if (s_deviceConfig.m_glBindVideoCaptureStreamTextureNV)
  {
    s_deviceConfig.m_glBindVideoCaptureStreamTextureNV (video_capture_slot, stream, frame_region, target, texture);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEndVideoCaptureNV

void  glew::gl::glEndVideoCaptureNV (GLuint video_capture_slot)
{
  // GL_NV_video_capture - glEndVideoCaptureNV
  if (s_deviceConfig.m_glEndVideoCaptureNV)
  {
    s_deviceConfig.m_glEndVideoCaptureNV (video_capture_slot);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoCaptureivNV

void  glew::gl::glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint * params)
{
  // GL_NV_video_capture - glGetVideoCaptureivNV
  if (s_deviceConfig.m_glGetVideoCaptureivNV)
  {
    s_deviceConfig.m_glGetVideoCaptureivNV (video_capture_slot, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoCaptureStreamivNV

void  glew::gl::glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params)
{
  // GL_NV_video_capture - glGetVideoCaptureStreamivNV
  if (s_deviceConfig.m_glGetVideoCaptureStreamivNV)
  {
    s_deviceConfig.m_glGetVideoCaptureStreamivNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoCaptureStreamfvNV

void  glew::gl::glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params)
{
  // GL_NV_video_capture - glGetVideoCaptureStreamfvNV
  if (s_deviceConfig.m_glGetVideoCaptureStreamfvNV)
  {
    s_deviceConfig.m_glGetVideoCaptureStreamfvNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetVideoCaptureStreamdvNV

void  glew::gl::glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params)
{
  // GL_NV_video_capture - glGetVideoCaptureStreamdvNV
  if (s_deviceConfig.m_glGetVideoCaptureStreamdvNV)
  {
    s_deviceConfig.m_glGetVideoCaptureStreamdvNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVideoCaptureNV

GLenum glew::gl::glVideoCaptureNV (GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time)
{
  // GL_NV_video_capture - glVideoCaptureNV
  if (s_deviceConfig.m_glVideoCaptureNV)
  {
    return s_deviceConfig.m_glVideoCaptureNV (video_capture_slot, sequence_num, capture_time);
  }
  return ((GLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVideoCaptureStreamParameterivNV

void  glew::gl::glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params)
{
  // GL_NV_video_capture - glVideoCaptureStreamParameterivNV
  if (s_deviceConfig.m_glVideoCaptureStreamParameterivNV)
  {
    s_deviceConfig.m_glVideoCaptureStreamParameterivNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVideoCaptureStreamParameterfvNV

void  glew::gl::glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params)
{
  // GL_NV_video_capture - glVideoCaptureStreamParameterfvNV
  if (s_deviceConfig.m_glVideoCaptureStreamParameterfvNV)
  {
    s_deviceConfig.m_glVideoCaptureStreamParameterfvNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVideoCaptureStreamParameterdvNV

void  glew::gl::glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params)
{
  // GL_NV_video_capture - glVideoCaptureStreamParameterdvNV
  if (s_deviceConfig.m_glVideoCaptureStreamParameterdvNV)
  {
    s_deviceConfig.m_glVideoCaptureStreamParameterdvNV (video_capture_slot, stream, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1bOES

void  glew::gl::glMultiTexCoord1bOES (GLenum texture, GLbyte s)
{
  // GL_OES_byte_coordinates - glMultiTexCoord1bOES
  if (s_deviceConfig.m_glMultiTexCoord1bOES)
  {
    s_deviceConfig.m_glMultiTexCoord1bOES (texture, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1bvOES

void  glew::gl::glMultiTexCoord1bvOES (GLenum texture, const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glMultiTexCoord1bvOES
  if (s_deviceConfig.m_glMultiTexCoord1bvOES)
  {
    s_deviceConfig.m_glMultiTexCoord1bvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2bOES

void  glew::gl::glMultiTexCoord2bOES (GLenum texture, GLbyte s, GLbyte t)
{
  // GL_OES_byte_coordinates - glMultiTexCoord2bOES
  if (s_deviceConfig.m_glMultiTexCoord2bOES)
  {
    s_deviceConfig.m_glMultiTexCoord2bOES (texture, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2bvOES

void  glew::gl::glMultiTexCoord2bvOES (GLenum texture, const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glMultiTexCoord2bvOES
  if (s_deviceConfig.m_glMultiTexCoord2bvOES)
  {
    s_deviceConfig.m_glMultiTexCoord2bvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3bOES

void  glew::gl::glMultiTexCoord3bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r)
{
  // GL_OES_byte_coordinates - glMultiTexCoord3bOES
  if (s_deviceConfig.m_glMultiTexCoord3bOES)
  {
    s_deviceConfig.m_glMultiTexCoord3bOES (texture, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3bvOES

void  glew::gl::glMultiTexCoord3bvOES (GLenum texture, const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glMultiTexCoord3bvOES
  if (s_deviceConfig.m_glMultiTexCoord3bvOES)
  {
    s_deviceConfig.m_glMultiTexCoord3bvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4bOES

void  glew::gl::glMultiTexCoord4bOES (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
  // GL_OES_byte_coordinates - glMultiTexCoord4bOES
  if (s_deviceConfig.m_glMultiTexCoord4bOES)
  {
    s_deviceConfig.m_glMultiTexCoord4bOES (texture, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4bvOES

void  glew::gl::glMultiTexCoord4bvOES (GLenum texture, const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glMultiTexCoord4bvOES
  if (s_deviceConfig.m_glMultiTexCoord4bvOES)
  {
    s_deviceConfig.m_glMultiTexCoord4bvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1bOES

void  glew::gl::glTexCoord1bOES (GLbyte s)
{
  // GL_OES_byte_coordinates - glTexCoord1bOES
  if (s_deviceConfig.m_glTexCoord1bOES)
  {
    s_deviceConfig.m_glTexCoord1bOES (s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1bvOES

void  glew::gl::glTexCoord1bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glTexCoord1bvOES
  if (s_deviceConfig.m_glTexCoord1bvOES)
  {
    s_deviceConfig.m_glTexCoord1bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2bOES

void  glew::gl::glTexCoord2bOES (GLbyte s, GLbyte t)
{
  // GL_OES_byte_coordinates - glTexCoord2bOES
  if (s_deviceConfig.m_glTexCoord2bOES)
  {
    s_deviceConfig.m_glTexCoord2bOES (s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2bvOES

void  glew::gl::glTexCoord2bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glTexCoord2bvOES
  if (s_deviceConfig.m_glTexCoord2bvOES)
  {
    s_deviceConfig.m_glTexCoord2bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3bOES

void  glew::gl::glTexCoord3bOES (GLbyte s, GLbyte t, GLbyte r)
{
  // GL_OES_byte_coordinates - glTexCoord3bOES
  if (s_deviceConfig.m_glTexCoord3bOES)
  {
    s_deviceConfig.m_glTexCoord3bOES (s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3bvOES

void  glew::gl::glTexCoord3bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glTexCoord3bvOES
  if (s_deviceConfig.m_glTexCoord3bvOES)
  {
    s_deviceConfig.m_glTexCoord3bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4bOES

void  glew::gl::glTexCoord4bOES (GLbyte s, GLbyte t, GLbyte r, GLbyte q)
{
  // GL_OES_byte_coordinates - glTexCoord4bOES
  if (s_deviceConfig.m_glTexCoord4bOES)
  {
    s_deviceConfig.m_glTexCoord4bOES (s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4bvOES

void  glew::gl::glTexCoord4bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glTexCoord4bvOES
  if (s_deviceConfig.m_glTexCoord4bvOES)
  {
    s_deviceConfig.m_glTexCoord4bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2bOES

void  glew::gl::glVertex2bOES (GLbyte x, GLbyte y)
{
  // GL_OES_byte_coordinates - glVertex2bOES
  if (s_deviceConfig.m_glVertex2bOES)
  {
    s_deviceConfig.m_glVertex2bOES (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2bvOES

void  glew::gl::glVertex2bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glVertex2bvOES
  if (s_deviceConfig.m_glVertex2bvOES)
  {
    s_deviceConfig.m_glVertex2bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3bOES

void  glew::gl::glVertex3bOES (GLbyte x, GLbyte y, GLbyte z)
{
  // GL_OES_byte_coordinates - glVertex3bOES
  if (s_deviceConfig.m_glVertex3bOES)
  {
    s_deviceConfig.m_glVertex3bOES (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3bvOES

void  glew::gl::glVertex3bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glVertex3bvOES
  if (s_deviceConfig.m_glVertex3bvOES)
  {
    s_deviceConfig.m_glVertex3bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4bOES

void  glew::gl::glVertex4bOES (GLbyte x, GLbyte y, GLbyte z, GLbyte w)
{
  // GL_OES_byte_coordinates - glVertex4bOES
  if (s_deviceConfig.m_glVertex4bOES)
  {
    s_deviceConfig.m_glVertex4bOES (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4bvOES

void  glew::gl::glVertex4bvOES (const GLbyte * coords)
{
  // GL_OES_byte_coordinates - glVertex4bvOES
  if (s_deviceConfig.m_glVertex4bvOES)
  {
    s_deviceConfig.m_glVertex4bvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAlphaFuncxOES

void  glew::gl::glAlphaFuncxOES (GLenum func, GLfixed ref)
{
  // GL_OES_fixed_point - glAlphaFuncxOES
  if (s_deviceConfig.m_glAlphaFuncxOES)
  {
    s_deviceConfig.m_glAlphaFuncxOES (func, ref);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearColorxOES

void  glew::gl::glClearColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  // GL_OES_fixed_point - glClearColorxOES
  if (s_deviceConfig.m_glClearColorxOES)
  {
    s_deviceConfig.m_glClearColorxOES (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearDepthxOES

void  glew::gl::glClearDepthxOES (GLfixed depth)
{
  // GL_OES_fixed_point - glClearDepthxOES
  if (s_deviceConfig.m_glClearDepthxOES)
  {
    s_deviceConfig.m_glClearDepthxOES (depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClipPlanexOES

void  glew::gl::glClipPlanexOES (GLenum plane, const GLfixed * equation)
{
  // GL_OES_fixed_point - glClipPlanexOES
  if (s_deviceConfig.m_glClipPlanexOES)
  {
    s_deviceConfig.m_glClipPlanexOES (plane, equation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4xOES

void  glew::gl::glColor4xOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  // GL_OES_fixed_point - glColor4xOES
  if (s_deviceConfig.m_glColor4xOES)
  {
    s_deviceConfig.m_glColor4xOES (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangexOES

void  glew::gl::glDepthRangexOES (GLfixed n, GLfixed f)
{
  // GL_OES_fixed_point - glDepthRangexOES
  if (s_deviceConfig.m_glDepthRangexOES)
  {
    s_deviceConfig.m_glDepthRangexOES (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogxOES

void  glew::gl::glFogxOES (GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glFogxOES
  if (s_deviceConfig.m_glFogxOES)
  {
    s_deviceConfig.m_glFogxOES (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogxvOES

void  glew::gl::glFogxvOES (GLenum pname, const GLfixed * param)
{
  // GL_OES_fixed_point - glFogxvOES
  if (s_deviceConfig.m_glFogxvOES)
  {
    s_deviceConfig.m_glFogxvOES (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFrustumxOES

void  glew::gl::glFrustumxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
  // GL_OES_fixed_point - glFrustumxOES
  if (s_deviceConfig.m_glFrustumxOES)
  {
    s_deviceConfig.m_glFrustumxOES (l, r, b, t, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetClipPlanexOES

void  glew::gl::glGetClipPlanexOES (GLenum plane, GLfixed * equation)
{
  // GL_OES_fixed_point - glGetClipPlanexOES
  if (s_deviceConfig.m_glGetClipPlanexOES)
  {
    s_deviceConfig.m_glGetClipPlanexOES (plane, equation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFixedvOES

void  glew::gl::glGetFixedvOES (GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetFixedvOES
  if (s_deviceConfig.m_glGetFixedvOES)
  {
    s_deviceConfig.m_glGetFixedvOES (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexEnvxvOES

void  glew::gl::glGetTexEnvxvOES (GLenum target, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetTexEnvxvOES
  if (s_deviceConfig.m_glGetTexEnvxvOES)
  {
    s_deviceConfig.m_glGetTexEnvxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexParameterxvOES

void  glew::gl::glGetTexParameterxvOES (GLenum target, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetTexParameterxvOES
  if (s_deviceConfig.m_glGetTexParameterxvOES)
  {
    s_deviceConfig.m_glGetTexParameterxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLightModelxOES

void  glew::gl::glLightModelxOES (GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glLightModelxOES
  if (s_deviceConfig.m_glLightModelxOES)
  {
    s_deviceConfig.m_glLightModelxOES (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLightModelxvOES

void  glew::gl::glLightModelxvOES (GLenum pname, const GLfixed * param)
{
  // GL_OES_fixed_point - glLightModelxvOES
  if (s_deviceConfig.m_glLightModelxvOES)
  {
    s_deviceConfig.m_glLightModelxvOES (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLightxOES

void  glew::gl::glLightxOES (GLenum light, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glLightxOES
  if (s_deviceConfig.m_glLightxOES)
  {
    s_deviceConfig.m_glLightxOES (light, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLightxvOES

void  glew::gl::glLightxvOES (GLenum light, GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glLightxvOES
  if (s_deviceConfig.m_glLightxvOES)
  {
    s_deviceConfig.m_glLightxvOES (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLineWidthxOES

void  glew::gl::glLineWidthxOES (GLfixed width)
{
  // GL_OES_fixed_point - glLineWidthxOES
  if (s_deviceConfig.m_glLineWidthxOES)
  {
    s_deviceConfig.m_glLineWidthxOES (width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadMatrixxOES

void  glew::gl::glLoadMatrixxOES (const GLfixed * m)
{
  // GL_OES_fixed_point - glLoadMatrixxOES
  if (s_deviceConfig.m_glLoadMatrixxOES)
  {
    s_deviceConfig.m_glLoadMatrixxOES (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMaterialxOES

void  glew::gl::glMaterialxOES (GLenum face, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glMaterialxOES
  if (s_deviceConfig.m_glMaterialxOES)
  {
    s_deviceConfig.m_glMaterialxOES (face, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMaterialxvOES

void  glew::gl::glMaterialxvOES (GLenum face, GLenum pname, const GLfixed * param)
{
  // GL_OES_fixed_point - glMaterialxvOES
  if (s_deviceConfig.m_glMaterialxvOES)
  {
    s_deviceConfig.m_glMaterialxvOES (face, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultMatrixxOES

void  glew::gl::glMultMatrixxOES (const GLfixed * m)
{
  // GL_OES_fixed_point - glMultMatrixxOES
  if (s_deviceConfig.m_glMultMatrixxOES)
  {
    s_deviceConfig.m_glMultMatrixxOES (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4xOES

void  glew::gl::glMultiTexCoord4xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  // GL_OES_fixed_point - glMultiTexCoord4xOES
  if (s_deviceConfig.m_glMultiTexCoord4xOES)
  {
    s_deviceConfig.m_glMultiTexCoord4xOES (texture, s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3xOES

void  glew::gl::glNormal3xOES (GLfixed nx, GLfixed ny, GLfixed nz)
{
  // GL_OES_fixed_point - glNormal3xOES
  if (s_deviceConfig.m_glNormal3xOES)
  {
    s_deviceConfig.m_glNormal3xOES (nx, ny, nz);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glOrthoxOES

void  glew::gl::glOrthoxOES (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
  // GL_OES_fixed_point - glOrthoxOES
  if (s_deviceConfig.m_glOrthoxOES)
  {
    s_deviceConfig.m_glOrthoxOES (l, r, b, t, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterxvOES

void  glew::gl::glPointParameterxvOES (GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glPointParameterxvOES
  if (s_deviceConfig.m_glPointParameterxvOES)
  {
    s_deviceConfig.m_glPointParameterxvOES (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointSizexOES

void  glew::gl::glPointSizexOES (GLfixed size)
{
  // GL_OES_fixed_point - glPointSizexOES
  if (s_deviceConfig.m_glPointSizexOES)
  {
    s_deviceConfig.m_glPointSizexOES (size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPolygonOffsetxOES

void  glew::gl::glPolygonOffsetxOES (GLfixed factor, GLfixed units)
{
  // GL_OES_fixed_point - glPolygonOffsetxOES
  if (s_deviceConfig.m_glPolygonOffsetxOES)
  {
    s_deviceConfig.m_glPolygonOffsetxOES (factor, units);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRotatexOES

void  glew::gl::glRotatexOES (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
  // GL_OES_fixed_point - glRotatexOES
  if (s_deviceConfig.m_glRotatexOES)
  {
    s_deviceConfig.m_glRotatexOES (angle, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glScalexOES

void  glew::gl::glScalexOES (GLfixed x, GLfixed y, GLfixed z)
{
  // GL_OES_fixed_point - glScalexOES
  if (s_deviceConfig.m_glScalexOES)
  {
    s_deviceConfig.m_glScalexOES (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexEnvxOES

void  glew::gl::glTexEnvxOES (GLenum target, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glTexEnvxOES
  if (s_deviceConfig.m_glTexEnvxOES)
  {
    s_deviceConfig.m_glTexEnvxOES (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexEnvxvOES

void  glew::gl::glTexEnvxvOES (GLenum target, GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glTexEnvxvOES
  if (s_deviceConfig.m_glTexEnvxvOES)
  {
    s_deviceConfig.m_glTexEnvxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterxOES

void  glew::gl::glTexParameterxOES (GLenum target, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glTexParameterxOES
  if (s_deviceConfig.m_glTexParameterxOES)
  {
    s_deviceConfig.m_glTexParameterxOES (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexParameterxvOES

void  glew::gl::glTexParameterxvOES (GLenum target, GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glTexParameterxvOES
  if (s_deviceConfig.m_glTexParameterxvOES)
  {
    s_deviceConfig.m_glTexParameterxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTranslatexOES

void  glew::gl::glTranslatexOES (GLfixed x, GLfixed y, GLfixed z)
{
  // GL_OES_fixed_point - glTranslatexOES
  if (s_deviceConfig.m_glTranslatexOES)
  {
    s_deviceConfig.m_glTranslatexOES (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAccumxOES

void  glew::gl::glAccumxOES (GLenum op, GLfixed value)
{
  // GL_OES_fixed_point - glAccumxOES
  if (s_deviceConfig.m_glAccumxOES)
  {
    s_deviceConfig.m_glAccumxOES (op, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBitmapxOES

void  glew::gl::glBitmapxOES (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap)
{
  // GL_OES_fixed_point - glBitmapxOES
  if (s_deviceConfig.m_glBitmapxOES)
  {
    s_deviceConfig.m_glBitmapxOES (width, height, xorig, yorig, xmove, ymove, bitmap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glBlendColorxOES

void  glew::gl::glBlendColorxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  // GL_OES_fixed_point - glBlendColorxOES
  if (s_deviceConfig.m_glBlendColorxOES)
  {
    s_deviceConfig.m_glBlendColorxOES (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearAccumxOES

void  glew::gl::glClearAccumxOES (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  // GL_OES_fixed_point - glClearAccumxOES
  if (s_deviceConfig.m_glClearAccumxOES)
  {
    s_deviceConfig.m_glClearAccumxOES (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3xOES

void  glew::gl::glColor3xOES (GLfixed red, GLfixed green, GLfixed blue)
{
  // GL_OES_fixed_point - glColor3xOES
  if (s_deviceConfig.m_glColor3xOES)
  {
    s_deviceConfig.m_glColor3xOES (red, green, blue);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3xvOES

void  glew::gl::glColor3xvOES (const GLfixed * components)
{
  // GL_OES_fixed_point - glColor3xvOES
  if (s_deviceConfig.m_glColor3xvOES)
  {
    s_deviceConfig.m_glColor3xvOES (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4xvOES

void  glew::gl::glColor4xvOES (const GLfixed * components)
{
  // GL_OES_fixed_point - glColor4xvOES
  if (s_deviceConfig.m_glColor4xvOES)
  {
    s_deviceConfig.m_glColor4xvOES (components);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterxOES

void  glew::gl::glConvolutionParameterxOES (GLenum target, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glConvolutionParameterxOES
  if (s_deviceConfig.m_glConvolutionParameterxOES)
  {
    s_deviceConfig.m_glConvolutionParameterxOES (target, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glConvolutionParameterxvOES

void  glew::gl::glConvolutionParameterxvOES (GLenum target, GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glConvolutionParameterxvOES
  if (s_deviceConfig.m_glConvolutionParameterxvOES)
  {
    s_deviceConfig.m_glConvolutionParameterxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEvalCoord1xOES

void  glew::gl::glEvalCoord1xOES (GLfixed u)
{
  // GL_OES_fixed_point - glEvalCoord1xOES
  if (s_deviceConfig.m_glEvalCoord1xOES)
  {
    s_deviceConfig.m_glEvalCoord1xOES (u);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEvalCoord1xvOES

void  glew::gl::glEvalCoord1xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glEvalCoord1xvOES
  if (s_deviceConfig.m_glEvalCoord1xvOES)
  {
    s_deviceConfig.m_glEvalCoord1xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEvalCoord2xOES

void  glew::gl::glEvalCoord2xOES (GLfixed u, GLfixed v)
{
  // GL_OES_fixed_point - glEvalCoord2xOES
  if (s_deviceConfig.m_glEvalCoord2xOES)
  {
    s_deviceConfig.m_glEvalCoord2xOES (u, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glEvalCoord2xvOES

void  glew::gl::glEvalCoord2xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glEvalCoord2xvOES
  if (s_deviceConfig.m_glEvalCoord2xvOES)
  {
    s_deviceConfig.m_glEvalCoord2xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFeedbackBufferxOES

void  glew::gl::glFeedbackBufferxOES (GLsizei n, GLenum type, const GLfixed * buffer)
{
  // GL_OES_fixed_point - glFeedbackBufferxOES
  if (s_deviceConfig.m_glFeedbackBufferxOES)
  {
    s_deviceConfig.m_glFeedbackBufferxOES (n, type, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetConvolutionParameterxvOES

void  glew::gl::glGetConvolutionParameterxvOES (GLenum target, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetConvolutionParameterxvOES
  if (s_deviceConfig.m_glGetConvolutionParameterxvOES)
  {
    s_deviceConfig.m_glGetConvolutionParameterxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetHistogramParameterxvOES

void  glew::gl::glGetHistogramParameterxvOES (GLenum target, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetHistogramParameterxvOES
  if (s_deviceConfig.m_glGetHistogramParameterxvOES)
  {
    s_deviceConfig.m_glGetHistogramParameterxvOES (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetLightxOES

void  glew::gl::glGetLightxOES (GLenum light, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetLightxOES
  if (s_deviceConfig.m_glGetLightxOES)
  {
    s_deviceConfig.m_glGetLightxOES (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMapxvOES

void  glew::gl::glGetMapxvOES (GLenum target, GLenum query, GLfixed * v)
{
  // GL_OES_fixed_point - glGetMapxvOES
  if (s_deviceConfig.m_glGetMapxvOES)
  {
    s_deviceConfig.m_glGetMapxvOES (target, query, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetMaterialxOES

void  glew::gl::glGetMaterialxOES (GLenum face, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glGetMaterialxOES
  if (s_deviceConfig.m_glGetMaterialxOES)
  {
    s_deviceConfig.m_glGetMaterialxOES (face, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPixelMapxv

void  glew::gl::glGetPixelMapxv (GLenum map, GLint size, GLfixed * values)
{
  // GL_OES_fixed_point - glGetPixelMapxv
  if (s_deviceConfig.m_glGetPixelMapxv)
  {
    s_deviceConfig.m_glGetPixelMapxv (map, size, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexGenxvOES

void  glew::gl::glGetTexGenxvOES (GLenum coord, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetTexGenxvOES
  if (s_deviceConfig.m_glGetTexGenxvOES)
  {
    s_deviceConfig.m_glGetTexGenxvOES (coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexLevelParameterxvOES

void  glew::gl::glGetTexLevelParameterxvOES (GLenum target, GLint level, GLenum pname, GLfixed * params)
{
  // GL_OES_fixed_point - glGetTexLevelParameterxvOES
  if (s_deviceConfig.m_glGetTexLevelParameterxvOES)
  {
    s_deviceConfig.m_glGetTexLevelParameterxvOES (target, level, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexxOES

void  glew::gl::glIndexxOES (GLfixed component)
{
  // GL_OES_fixed_point - glIndexxOES
  if (s_deviceConfig.m_glIndexxOES)
  {
    s_deviceConfig.m_glIndexxOES (component);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIndexxvOES

void  glew::gl::glIndexxvOES (const GLfixed * component)
{
  // GL_OES_fixed_point - glIndexxvOES
  if (s_deviceConfig.m_glIndexxvOES)
  {
    s_deviceConfig.m_glIndexxvOES (component);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadTransposeMatrixxOES

void  glew::gl::glLoadTransposeMatrixxOES (const GLfixed * m)
{
  // GL_OES_fixed_point - glLoadTransposeMatrixxOES
  if (s_deviceConfig.m_glLoadTransposeMatrixxOES)
  {
    s_deviceConfig.m_glLoadTransposeMatrixxOES (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMap1xOES

void  glew::gl::glMap1xOES (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
{
  // GL_OES_fixed_point - glMap1xOES
  if (s_deviceConfig.m_glMap1xOES)
  {
    s_deviceConfig.m_glMap1xOES (target, u1, u2, stride, order, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMap2xOES

void  glew::gl::glMap2xOES (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
{
  // GL_OES_fixed_point - glMap2xOES
  if (s_deviceConfig.m_glMap2xOES)
  {
    s_deviceConfig.m_glMap2xOES (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapGrid1xOES

void  glew::gl::glMapGrid1xOES (GLint n, GLfixed u1, GLfixed u2)
{
  // GL_OES_fixed_point - glMapGrid1xOES
  if (s_deviceConfig.m_glMapGrid1xOES)
  {
    s_deviceConfig.m_glMapGrid1xOES (n, u1, u2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMapGrid2xOES

void  glew::gl::glMapGrid2xOES (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
{
  // GL_OES_fixed_point - glMapGrid2xOES
  if (s_deviceConfig.m_glMapGrid2xOES)
  {
    s_deviceConfig.m_glMapGrid2xOES (n, u1, u2, v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultTransposeMatrixxOES

void  glew::gl::glMultTransposeMatrixxOES (const GLfixed * m)
{
  // GL_OES_fixed_point - glMultTransposeMatrixxOES
  if (s_deviceConfig.m_glMultTransposeMatrixxOES)
  {
    s_deviceConfig.m_glMultTransposeMatrixxOES (m);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1xOES

void  glew::gl::glMultiTexCoord1xOES (GLenum texture, GLfixed s)
{
  // GL_OES_fixed_point - glMultiTexCoord1xOES
  if (s_deviceConfig.m_glMultiTexCoord1xOES)
  {
    s_deviceConfig.m_glMultiTexCoord1xOES (texture, s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord1xvOES

void  glew::gl::glMultiTexCoord1xvOES (GLenum texture, const GLfixed * coords)
{
  // GL_OES_fixed_point - glMultiTexCoord1xvOES
  if (s_deviceConfig.m_glMultiTexCoord1xvOES)
  {
    s_deviceConfig.m_glMultiTexCoord1xvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2xOES

void  glew::gl::glMultiTexCoord2xOES (GLenum texture, GLfixed s, GLfixed t)
{
  // GL_OES_fixed_point - glMultiTexCoord2xOES
  if (s_deviceConfig.m_glMultiTexCoord2xOES)
  {
    s_deviceConfig.m_glMultiTexCoord2xOES (texture, s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord2xvOES

void  glew::gl::glMultiTexCoord2xvOES (GLenum texture, const GLfixed * coords)
{
  // GL_OES_fixed_point - glMultiTexCoord2xvOES
  if (s_deviceConfig.m_glMultiTexCoord2xvOES)
  {
    s_deviceConfig.m_glMultiTexCoord2xvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3xOES

void  glew::gl::glMultiTexCoord3xOES (GLenum texture, GLfixed s, GLfixed t, GLfixed r)
{
  // GL_OES_fixed_point - glMultiTexCoord3xOES
  if (s_deviceConfig.m_glMultiTexCoord3xOES)
  {
    s_deviceConfig.m_glMultiTexCoord3xOES (texture, s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord3xvOES

void  glew::gl::glMultiTexCoord3xvOES (GLenum texture, const GLfixed * coords)
{
  // GL_OES_fixed_point - glMultiTexCoord3xvOES
  if (s_deviceConfig.m_glMultiTexCoord3xvOES)
  {
    s_deviceConfig.m_glMultiTexCoord3xvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glMultiTexCoord4xvOES

void  glew::gl::glMultiTexCoord4xvOES (GLenum texture, const GLfixed * coords)
{
  // GL_OES_fixed_point - glMultiTexCoord4xvOES
  if (s_deviceConfig.m_glMultiTexCoord4xvOES)
  {
    s_deviceConfig.m_glMultiTexCoord4xvOES (texture, coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3xvOES

void  glew::gl::glNormal3xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glNormal3xvOES
  if (s_deviceConfig.m_glNormal3xvOES)
  {
    s_deviceConfig.m_glNormal3xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPassThroughxOES

void  glew::gl::glPassThroughxOES (GLfixed token)
{
  // GL_OES_fixed_point - glPassThroughxOES
  if (s_deviceConfig.m_glPassThroughxOES)
  {
    s_deviceConfig.m_glPassThroughxOES (token);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelMapx

void  glew::gl::glPixelMapx (GLenum map, GLint size, const GLfixed * values)
{
  // GL_OES_fixed_point - glPixelMapx
  if (s_deviceConfig.m_glPixelMapx)
  {
    s_deviceConfig.m_glPixelMapx (map, size, values);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelStorex

void  glew::gl::glPixelStorex (GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glPixelStorex
  if (s_deviceConfig.m_glPixelStorex)
  {
    s_deviceConfig.m_glPixelStorex (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTransferxOES

void  glew::gl::glPixelTransferxOES (GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glPixelTransferxOES
  if (s_deviceConfig.m_glPixelTransferxOES)
  {
    s_deviceConfig.m_glPixelTransferxOES (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelZoomxOES

void  glew::gl::glPixelZoomxOES (GLfixed xfactor, GLfixed yfactor)
{
  // GL_OES_fixed_point - glPixelZoomxOES
  if (s_deviceConfig.m_glPixelZoomxOES)
  {
    s_deviceConfig.m_glPixelZoomxOES (xfactor, yfactor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPrioritizeTexturesxOES

void  glew::gl::glPrioritizeTexturesxOES (GLsizei n, const GLuint * textures, const GLfixed * priorities)
{
  // GL_OES_fixed_point - glPrioritizeTexturesxOES
  if (s_deviceConfig.m_glPrioritizeTexturesxOES)
  {
    s_deviceConfig.m_glPrioritizeTexturesxOES (n, textures, priorities);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos2xOES

void  glew::gl::glRasterPos2xOES (GLfixed x, GLfixed y)
{
  // GL_OES_fixed_point - glRasterPos2xOES
  if (s_deviceConfig.m_glRasterPos2xOES)
  {
    s_deviceConfig.m_glRasterPos2xOES (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos2xvOES

void  glew::gl::glRasterPos2xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glRasterPos2xvOES
  if (s_deviceConfig.m_glRasterPos2xvOES)
  {
    s_deviceConfig.m_glRasterPos2xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos3xOES

void  glew::gl::glRasterPos3xOES (GLfixed x, GLfixed y, GLfixed z)
{
  // GL_OES_fixed_point - glRasterPos3xOES
  if (s_deviceConfig.m_glRasterPos3xOES)
  {
    s_deviceConfig.m_glRasterPos3xOES (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos3xvOES

void  glew::gl::glRasterPos3xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glRasterPos3xvOES
  if (s_deviceConfig.m_glRasterPos3xvOES)
  {
    s_deviceConfig.m_glRasterPos3xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos4xOES

void  glew::gl::glRasterPos4xOES (GLfixed x, GLfixed y, GLfixed z, GLfixed w)
{
  // GL_OES_fixed_point - glRasterPos4xOES
  if (s_deviceConfig.m_glRasterPos4xOES)
  {
    s_deviceConfig.m_glRasterPos4xOES (x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRasterPos4xvOES

void  glew::gl::glRasterPos4xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glRasterPos4xvOES
  if (s_deviceConfig.m_glRasterPos4xvOES)
  {
    s_deviceConfig.m_glRasterPos4xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRectxOES

void  glew::gl::glRectxOES (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
{
  // GL_OES_fixed_point - glRectxOES
  if (s_deviceConfig.m_glRectxOES)
  {
    s_deviceConfig.m_glRectxOES (x1, y1, x2, y2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glRectxvOES

void  glew::gl::glRectxvOES (const GLfixed * v1, const GLfixed * v2)
{
  // GL_OES_fixed_point - glRectxvOES
  if (s_deviceConfig.m_glRectxvOES)
  {
    s_deviceConfig.m_glRectxvOES (v1, v2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1xOES

void  glew::gl::glTexCoord1xOES (GLfixed s)
{
  // GL_OES_fixed_point - glTexCoord1xOES
  if (s_deviceConfig.m_glTexCoord1xOES)
  {
    s_deviceConfig.m_glTexCoord1xOES (s);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord1xvOES

void  glew::gl::glTexCoord1xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glTexCoord1xvOES
  if (s_deviceConfig.m_glTexCoord1xvOES)
  {
    s_deviceConfig.m_glTexCoord1xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2xOES

void  glew::gl::glTexCoord2xOES (GLfixed s, GLfixed t)
{
  // GL_OES_fixed_point - glTexCoord2xOES
  if (s_deviceConfig.m_glTexCoord2xOES)
  {
    s_deviceConfig.m_glTexCoord2xOES (s, t);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2xvOES

void  glew::gl::glTexCoord2xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glTexCoord2xvOES
  if (s_deviceConfig.m_glTexCoord2xvOES)
  {
    s_deviceConfig.m_glTexCoord2xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3xOES

void  glew::gl::glTexCoord3xOES (GLfixed s, GLfixed t, GLfixed r)
{
  // GL_OES_fixed_point - glTexCoord3xOES
  if (s_deviceConfig.m_glTexCoord3xOES)
  {
    s_deviceConfig.m_glTexCoord3xOES (s, t, r);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord3xvOES

void  glew::gl::glTexCoord3xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glTexCoord3xvOES
  if (s_deviceConfig.m_glTexCoord3xvOES)
  {
    s_deviceConfig.m_glTexCoord3xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4xOES

void  glew::gl::glTexCoord4xOES (GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  // GL_OES_fixed_point - glTexCoord4xOES
  if (s_deviceConfig.m_glTexCoord4xOES)
  {
    s_deviceConfig.m_glTexCoord4xOES (s, t, r, q);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4xvOES

void  glew::gl::glTexCoord4xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glTexCoord4xvOES
  if (s_deviceConfig.m_glTexCoord4xvOES)
  {
    s_deviceConfig.m_glTexCoord4xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexGenxOES

void  glew::gl::glTexGenxOES (GLenum coord, GLenum pname, GLfixed param)
{
  // GL_OES_fixed_point - glTexGenxOES
  if (s_deviceConfig.m_glTexGenxOES)
  {
    s_deviceConfig.m_glTexGenxOES (coord, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexGenxvOES

void  glew::gl::glTexGenxvOES (GLenum coord, GLenum pname, const GLfixed * params)
{
  // GL_OES_fixed_point - glTexGenxvOES
  if (s_deviceConfig.m_glTexGenxvOES)
  {
    s_deviceConfig.m_glTexGenxvOES (coord, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2xOES

void  glew::gl::glVertex2xOES (GLfixed x)
{
  // GL_OES_fixed_point - glVertex2xOES
  if (s_deviceConfig.m_glVertex2xOES)
  {
    s_deviceConfig.m_glVertex2xOES (x);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex2xvOES

void  glew::gl::glVertex2xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glVertex2xvOES
  if (s_deviceConfig.m_glVertex2xvOES)
  {
    s_deviceConfig.m_glVertex2xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3xOES

void  glew::gl::glVertex3xOES (GLfixed x, GLfixed y)
{
  // GL_OES_fixed_point - glVertex3xOES
  if (s_deviceConfig.m_glVertex3xOES)
  {
    s_deviceConfig.m_glVertex3xOES (x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex3xvOES

void  glew::gl::glVertex3xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glVertex3xvOES
  if (s_deviceConfig.m_glVertex3xvOES)
  {
    s_deviceConfig.m_glVertex3xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4xOES

void  glew::gl::glVertex4xOES (GLfixed x, GLfixed y, GLfixed z)
{
  // GL_OES_fixed_point - glVertex4xOES
  if (s_deviceConfig.m_glVertex4xOES)
  {
    s_deviceConfig.m_glVertex4xOES (x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glVertex4xvOES

void  glew::gl::glVertex4xvOES (const GLfixed * coords)
{
  // GL_OES_fixed_point - glVertex4xvOES
  if (s_deviceConfig.m_glVertex4xvOES)
  {
    s_deviceConfig.m_glVertex4xvOES (coords);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glQueryMatrixxOES

GLbitfield glew::gl::glQueryMatrixxOES (GLfixed * mantissa, GLint * exponent)
{
  // GL_OES_query_matrix - glQueryMatrixxOES
  if (s_deviceConfig.m_glQueryMatrixxOES)
  {
    return s_deviceConfig.m_glQueryMatrixxOES (mantissa, exponent);
  }
  return ((GLbitfield)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClearDepthfOES

void  glew::gl::glClearDepthfOES (GLclampf depth)
{
  // GL_OES_single_precision - glClearDepthfOES
  if (s_deviceConfig.m_glClearDepthfOES)
  {
    s_deviceConfig.m_glClearDepthfOES (depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glClipPlanefOES

void  glew::gl::glClipPlanefOES (GLenum plane, const GLfloat * equation)
{
  // GL_OES_single_precision - glClipPlanefOES
  if (s_deviceConfig.m_glClipPlanefOES)
  {
    s_deviceConfig.m_glClipPlanefOES (plane, equation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDepthRangefOES

void  glew::gl::glDepthRangefOES (GLclampf n, GLclampf f)
{
  // GL_OES_single_precision - glDepthRangefOES
  if (s_deviceConfig.m_glDepthRangefOES)
  {
    s_deviceConfig.m_glDepthRangefOES (n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFrustumfOES

void  glew::gl::glFrustumfOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  // GL_OES_single_precision - glFrustumfOES
  if (s_deviceConfig.m_glFrustumfOES)
  {
    s_deviceConfig.m_glFrustumfOES (l, r, b, t, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetClipPlanefOES

void  glew::gl::glGetClipPlanefOES (GLenum plane, GLfloat * equation)
{
  // GL_OES_single_precision - glGetClipPlanefOES
  if (s_deviceConfig.m_glGetClipPlanefOES)
  {
    s_deviceConfig.m_glGetClipPlanefOES (plane, equation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glOrthofOES

void  glew::gl::glOrthofOES (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  // GL_OES_single_precision - glOrthofOES
  if (s_deviceConfig.m_glOrthofOES)
  {
    s_deviceConfig.m_glOrthofOES (l, r, b, t, n, f);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFramebufferTextureMultiviewOVR

void  glew::gl::glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
{
  // GL_OVR_multiview - glFramebufferTextureMultiviewOVR
  if (s_deviceConfig.m_glFramebufferTextureMultiviewOVR)
  {
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR (target, attachment, texture, level, baseViewIndex, numViews);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glHintPGI

void  glew::gl::glHintPGI (GLenum target, GLint mode)
{
  // GL_PGI_misc_hints - glHintPGI
  if (s_deviceConfig.m_glHintPGI)
  {
    s_deviceConfig.m_glHintPGI (target, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDetailTexFuncSGIS

void  glew::gl::glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat * points)
{
  // GL_SGIS_detail_texture - glDetailTexFuncSGIS
  if (s_deviceConfig.m_glDetailTexFuncSGIS)
  {
    s_deviceConfig.m_glDetailTexFuncSGIS (target, n, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetDetailTexFuncSGIS

void  glew::gl::glGetDetailTexFuncSGIS (GLenum target, GLfloat * points)
{
  // GL_SGIS_detail_texture - glGetDetailTexFuncSGIS
  if (s_deviceConfig.m_glGetDetailTexFuncSGIS)
  {
    s_deviceConfig.m_glGetDetailTexFuncSGIS (target, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFogFuncSGIS

void  glew::gl::glFogFuncSGIS (GLsizei n, const GLfloat * points)
{
  // GL_SGIS_fog_function - glFogFuncSGIS
  if (s_deviceConfig.m_glFogFuncSGIS)
  {
    s_deviceConfig.m_glFogFuncSGIS (n, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFogFuncSGIS

void  glew::gl::glGetFogFuncSGIS (GLfloat * points)
{
  // GL_SGIS_fog_function - glGetFogFuncSGIS
  if (s_deviceConfig.m_glGetFogFuncSGIS)
  {
    s_deviceConfig.m_glGetFogFuncSGIS (points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSampleMaskSGIS

void  glew::gl::glSampleMaskSGIS (GLclampf value, GLboolean invert)
{
  // GL_SGIS_multisample - glSampleMaskSGIS
  if (s_deviceConfig.m_glSampleMaskSGIS)
  {
    s_deviceConfig.m_glSampleMaskSGIS (value, invert);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSamplePatternSGIS

void  glew::gl::glSamplePatternSGIS (GLenum pattern)
{
  // GL_SGIS_multisample - glSamplePatternSGIS
  if (s_deviceConfig.m_glSamplePatternSGIS)
  {
    s_deviceConfig.m_glSamplePatternSGIS (pattern);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTexGenParameteriSGIS

void  glew::gl::glPixelTexGenParameteriSGIS (GLenum pname, GLint param)
{
  // GL_SGIS_pixel_texture - glPixelTexGenParameteriSGIS
  if (s_deviceConfig.m_glPixelTexGenParameteriSGIS)
  {
    s_deviceConfig.m_glPixelTexGenParameteriSGIS (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTexGenParameterivSGIS

void  glew::gl::glPixelTexGenParameterivSGIS (GLenum pname, const GLint * params)
{
  // GL_SGIS_pixel_texture - glPixelTexGenParameterivSGIS
  if (s_deviceConfig.m_glPixelTexGenParameterivSGIS)
  {
    s_deviceConfig.m_glPixelTexGenParameterivSGIS (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTexGenParameterfSGIS

void  glew::gl::glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param)
{
  // GL_SGIS_pixel_texture - glPixelTexGenParameterfSGIS
  if (s_deviceConfig.m_glPixelTexGenParameterfSGIS)
  {
    s_deviceConfig.m_glPixelTexGenParameterfSGIS (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTexGenParameterfvSGIS

void  glew::gl::glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat * params)
{
  // GL_SGIS_pixel_texture - glPixelTexGenParameterfvSGIS
  if (s_deviceConfig.m_glPixelTexGenParameterfvSGIS)
  {
    s_deviceConfig.m_glPixelTexGenParameterfvSGIS (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPixelTexGenParameterivSGIS

void  glew::gl::glGetPixelTexGenParameterivSGIS (GLenum pname, GLint * params)
{
  // GL_SGIS_pixel_texture - glGetPixelTexGenParameterivSGIS
  if (s_deviceConfig.m_glGetPixelTexGenParameterivSGIS)
  {
    s_deviceConfig.m_glGetPixelTexGenParameterivSGIS (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetPixelTexGenParameterfvSGIS

void  glew::gl::glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat * params)
{
  // GL_SGIS_pixel_texture - glGetPixelTexGenParameterfvSGIS
  if (s_deviceConfig.m_glGetPixelTexGenParameterfvSGIS)
  {
    s_deviceConfig.m_glGetPixelTexGenParameterfvSGIS (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfSGIS

void  glew::gl::glPointParameterfSGIS (GLenum pname, GLfloat param)
{
  // GL_SGIS_point_parameters - glPointParameterfSGIS
  if (s_deviceConfig.m_glPointParameterfSGIS)
  {
    s_deviceConfig.m_glPointParameterfSGIS (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPointParameterfvSGIS

void  glew::gl::glPointParameterfvSGIS (GLenum pname, const GLfloat * params)
{
  // GL_SGIS_point_parameters - glPointParameterfvSGIS
  if (s_deviceConfig.m_glPointParameterfvSGIS)
  {
    s_deviceConfig.m_glPointParameterfvSGIS (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSharpenTexFuncSGIS

void  glew::gl::glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat * points)
{
  // GL_SGIS_sharpen_texture - glSharpenTexFuncSGIS
  if (s_deviceConfig.m_glSharpenTexFuncSGIS)
  {
    s_deviceConfig.m_glSharpenTexFuncSGIS (target, n, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetSharpenTexFuncSGIS

void  glew::gl::glGetSharpenTexFuncSGIS (GLenum target, GLfloat * points)
{
  // GL_SGIS_sharpen_texture - glGetSharpenTexFuncSGIS
  if (s_deviceConfig.m_glGetSharpenTexFuncSGIS)
  {
    s_deviceConfig.m_glGetSharpenTexFuncSGIS (target, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexImage4DSGIS

void  glew::gl::glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels)
{
  // GL_SGIS_texture4D - glTexImage4DSGIS
  if (s_deviceConfig.m_glTexImage4DSGIS)
  {
    s_deviceConfig.m_glTexImage4DSGIS (target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexSubImage4DSGIS

void  glew::gl::glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels)
{
  // GL_SGIS_texture4D - glTexSubImage4DSGIS
  if (s_deviceConfig.m_glTexSubImage4DSGIS)
  {
    s_deviceConfig.m_glTexSubImage4DSGIS (target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTextureColorMaskSGIS

void  glew::gl::glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  // GL_SGIS_texture_color_mask - glTextureColorMaskSGIS
  if (s_deviceConfig.m_glTextureColorMaskSGIS)
  {
    s_deviceConfig.m_glTextureColorMaskSGIS (red, green, blue, alpha);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetTexFilterFuncSGIS

void  glew::gl::glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat * weights)
{
  // GL_SGIS_texture_filter4 - glGetTexFilterFuncSGIS
  if (s_deviceConfig.m_glGetTexFilterFuncSGIS)
  {
    s_deviceConfig.m_glGetTexFilterFuncSGIS (target, filter, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexFilterFuncSGIS

void  glew::gl::glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat * weights)
{
  // GL_SGIS_texture_filter4 - glTexFilterFuncSGIS
  if (s_deviceConfig.m_glTexFilterFuncSGIS)
  {
    s_deviceConfig.m_glTexFilterFuncSGIS (target, filter, n, weights);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glAsyncMarkerSGIX

void  glew::gl::glAsyncMarkerSGIX (GLuint marker)
{
  // GL_SGIX_async - glAsyncMarkerSGIX
  if (s_deviceConfig.m_glAsyncMarkerSGIX)
  {
    s_deviceConfig.m_glAsyncMarkerSGIX (marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishAsyncSGIX

GLint glew::gl::glFinishAsyncSGIX (GLuint * markerp)
{
  // GL_SGIX_async - glFinishAsyncSGIX
  if (s_deviceConfig.m_glFinishAsyncSGIX)
  {
    return s_deviceConfig.m_glFinishAsyncSGIX (markerp);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPollAsyncSGIX

GLint glew::gl::glPollAsyncSGIX (GLuint * markerp)
{
  // GL_SGIX_async - glPollAsyncSGIX
  if (s_deviceConfig.m_glPollAsyncSGIX)
  {
    return s_deviceConfig.m_glPollAsyncSGIX (markerp);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGenAsyncMarkersSGIX

GLuint glew::gl::glGenAsyncMarkersSGIX (GLsizei range)
{
  // GL_SGIX_async - glGenAsyncMarkersSGIX
  if (s_deviceConfig.m_glGenAsyncMarkersSGIX)
  {
    return s_deviceConfig.m_glGenAsyncMarkersSGIX (range);
  }
  return ((GLuint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeleteAsyncMarkersSGIX

void  glew::gl::glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range)
{
  // GL_SGIX_async - glDeleteAsyncMarkersSGIX
  if (s_deviceConfig.m_glDeleteAsyncMarkersSGIX)
  {
    s_deviceConfig.m_glDeleteAsyncMarkersSGIX (marker, range);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIsAsyncMarkerSGIX

GLboolean glew::gl::glIsAsyncMarkerSGIX (GLuint marker)
{
  // GL_SGIX_async - glIsAsyncMarkerSGIX
  if (s_deviceConfig.m_glIsAsyncMarkerSGIX)
  {
    return s_deviceConfig.m_glIsAsyncMarkerSGIX (marker);
  }
  return ((GLboolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFlushRasterSGIX

void  glew::gl::glFlushRasterSGIX ()
{
  // GL_SGIX_flush_raster - glFlushRasterSGIX
  if (s_deviceConfig.m_glFlushRasterSGIX)
  {
    s_deviceConfig.m_glFlushRasterSGIX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentColorMaterialSGIX

void  glew::gl::glFragmentColorMaterialSGIX (GLenum face, GLenum mode)
{
  // GL_SGIX_fragment_lighting - glFragmentColorMaterialSGIX
  if (s_deviceConfig.m_glFragmentColorMaterialSGIX)
  {
    s_deviceConfig.m_glFragmentColorMaterialSGIX (face, mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightfSGIX

void  glew::gl::glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param)
{
  // GL_SGIX_fragment_lighting - glFragmentLightfSGIX
  if (s_deviceConfig.m_glFragmentLightfSGIX)
  {
    s_deviceConfig.m_glFragmentLightfSGIX (light, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightfvSGIX

void  glew::gl::glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat * params)
{
  // GL_SGIX_fragment_lighting - glFragmentLightfvSGIX
  if (s_deviceConfig.m_glFragmentLightfvSGIX)
  {
    s_deviceConfig.m_glFragmentLightfvSGIX (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightiSGIX

void  glew::gl::glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param)
{
  // GL_SGIX_fragment_lighting - glFragmentLightiSGIX
  if (s_deviceConfig.m_glFragmentLightiSGIX)
  {
    s_deviceConfig.m_glFragmentLightiSGIX (light, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightivSGIX

void  glew::gl::glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint * params)
{
  // GL_SGIX_fragment_lighting - glFragmentLightivSGIX
  if (s_deviceConfig.m_glFragmentLightivSGIX)
  {
    s_deviceConfig.m_glFragmentLightivSGIX (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightModelfSGIX

void  glew::gl::glFragmentLightModelfSGIX (GLenum pname, GLfloat param)
{
  // GL_SGIX_fragment_lighting - glFragmentLightModelfSGIX
  if (s_deviceConfig.m_glFragmentLightModelfSGIX)
  {
    s_deviceConfig.m_glFragmentLightModelfSGIX (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightModelfvSGIX

void  glew::gl::glFragmentLightModelfvSGIX (GLenum pname, const GLfloat * params)
{
  // GL_SGIX_fragment_lighting - glFragmentLightModelfvSGIX
  if (s_deviceConfig.m_glFragmentLightModelfvSGIX)
  {
    s_deviceConfig.m_glFragmentLightModelfvSGIX (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightModeliSGIX

void  glew::gl::glFragmentLightModeliSGIX (GLenum pname, GLint param)
{
  // GL_SGIX_fragment_lighting - glFragmentLightModeliSGIX
  if (s_deviceConfig.m_glFragmentLightModeliSGIX)
  {
    s_deviceConfig.m_glFragmentLightModeliSGIX (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentLightModelivSGIX

void  glew::gl::glFragmentLightModelivSGIX (GLenum pname, const GLint * params)
{
  // GL_SGIX_fragment_lighting - glFragmentLightModelivSGIX
  if (s_deviceConfig.m_glFragmentLightModelivSGIX)
  {
    s_deviceConfig.m_glFragmentLightModelivSGIX (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentMaterialfSGIX

void  glew::gl::glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param)
{
  // GL_SGIX_fragment_lighting - glFragmentMaterialfSGIX
  if (s_deviceConfig.m_glFragmentMaterialfSGIX)
  {
    s_deviceConfig.m_glFragmentMaterialfSGIX (face, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentMaterialfvSGIX

void  glew::gl::glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat * params)
{
  // GL_SGIX_fragment_lighting - glFragmentMaterialfvSGIX
  if (s_deviceConfig.m_glFragmentMaterialfvSGIX)
  {
    s_deviceConfig.m_glFragmentMaterialfvSGIX (face, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentMaterialiSGIX

void  glew::gl::glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param)
{
  // GL_SGIX_fragment_lighting - glFragmentMaterialiSGIX
  if (s_deviceConfig.m_glFragmentMaterialiSGIX)
  {
    s_deviceConfig.m_glFragmentMaterialiSGIX (face, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFragmentMaterialivSGIX

void  glew::gl::glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint * params)
{
  // GL_SGIX_fragment_lighting - glFragmentMaterialivSGIX
  if (s_deviceConfig.m_glFragmentMaterialivSGIX)
  {
    s_deviceConfig.m_glFragmentMaterialivSGIX (face, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragmentLightfvSGIX

void  glew::gl::glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat * params)
{
  // GL_SGIX_fragment_lighting - glGetFragmentLightfvSGIX
  if (s_deviceConfig.m_glGetFragmentLightfvSGIX)
  {
    s_deviceConfig.m_glGetFragmentLightfvSGIX (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragmentLightivSGIX

void  glew::gl::glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint * params)
{
  // GL_SGIX_fragment_lighting - glGetFragmentLightivSGIX
  if (s_deviceConfig.m_glGetFragmentLightivSGIX)
  {
    s_deviceConfig.m_glGetFragmentLightivSGIX (light, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragmentMaterialfvSGIX

void  glew::gl::glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat * params)
{
  // GL_SGIX_fragment_lighting - glGetFragmentMaterialfvSGIX
  if (s_deviceConfig.m_glGetFragmentMaterialfvSGIX)
  {
    s_deviceConfig.m_glGetFragmentMaterialfvSGIX (face, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetFragmentMaterialivSGIX

void  glew::gl::glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint * params)
{
  // GL_SGIX_fragment_lighting - glGetFragmentMaterialivSGIX
  if (s_deviceConfig.m_glGetFragmentMaterialivSGIX)
  {
    s_deviceConfig.m_glGetFragmentMaterialivSGIX (face, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLightEnviSGIX

void  glew::gl::glLightEnviSGIX (GLenum pname, GLint param)
{
  // GL_SGIX_fragment_lighting - glLightEnviSGIX
  if (s_deviceConfig.m_glLightEnviSGIX)
  {
    s_deviceConfig.m_glLightEnviSGIX (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFrameZoomSGIX

void  glew::gl::glFrameZoomSGIX (GLint factor)
{
  // GL_SGIX_framezoom - glFrameZoomSGIX
  if (s_deviceConfig.m_glFrameZoomSGIX)
  {
    s_deviceConfig.m_glFrameZoomSGIX (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glIglooInterfaceSGIX

void  glew::gl::glIglooInterfaceSGIX (GLenum pname, const void * params)
{
  // GL_SGIX_igloo_interface - glIglooInterfaceSGIX
  if (s_deviceConfig.m_glIglooInterfaceSGIX)
  {
    s_deviceConfig.m_glIglooInterfaceSGIX (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetInstrumentsSGIX

GLint glew::gl::glGetInstrumentsSGIX ()
{
  // GL_SGIX_instruments - glGetInstrumentsSGIX
  if (s_deviceConfig.m_glGetInstrumentsSGIX)
  {
    return s_deviceConfig.m_glGetInstrumentsSGIX ();
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glInstrumentsBufferSGIX

void  glew::gl::glInstrumentsBufferSGIX (GLsizei size, GLint * buffer)
{
  // GL_SGIX_instruments - glInstrumentsBufferSGIX
  if (s_deviceConfig.m_glInstrumentsBufferSGIX)
  {
    s_deviceConfig.m_glInstrumentsBufferSGIX (size, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPollInstrumentsSGIX

GLint glew::gl::glPollInstrumentsSGIX (GLint * marker_p)
{
  // GL_SGIX_instruments - glPollInstrumentsSGIX
  if (s_deviceConfig.m_glPollInstrumentsSGIX)
  {
    return s_deviceConfig.m_glPollInstrumentsSGIX (marker_p);
  }
  return ((GLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReadInstrumentsSGIX

void  glew::gl::glReadInstrumentsSGIX (GLint marker)
{
  // GL_SGIX_instruments - glReadInstrumentsSGIX
  if (s_deviceConfig.m_glReadInstrumentsSGIX)
  {
    s_deviceConfig.m_glReadInstrumentsSGIX (marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStartInstrumentsSGIX

void  glew::gl::glStartInstrumentsSGIX ()
{
  // GL_SGIX_instruments - glStartInstrumentsSGIX
  if (s_deviceConfig.m_glStartInstrumentsSGIX)
  {
    s_deviceConfig.m_glStartInstrumentsSGIX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glStopInstrumentsSGIX

void  glew::gl::glStopInstrumentsSGIX (GLint marker)
{
  // GL_SGIX_instruments - glStopInstrumentsSGIX
  if (s_deviceConfig.m_glStopInstrumentsSGIX)
  {
    s_deviceConfig.m_glStopInstrumentsSGIX (marker);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetListParameterfvSGIX

void  glew::gl::glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat * params)
{
  // GL_SGIX_list_priority - glGetListParameterfvSGIX
  if (s_deviceConfig.m_glGetListParameterfvSGIX)
  {
    s_deviceConfig.m_glGetListParameterfvSGIX (list, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetListParameterivSGIX

void  glew::gl::glGetListParameterivSGIX (GLuint list, GLenum pname, GLint * params)
{
  // GL_SGIX_list_priority - glGetListParameterivSGIX
  if (s_deviceConfig.m_glGetListParameterivSGIX)
  {
    s_deviceConfig.m_glGetListParameterivSGIX (list, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glListParameterfSGIX

void  glew::gl::glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param)
{
  // GL_SGIX_list_priority - glListParameterfSGIX
  if (s_deviceConfig.m_glListParameterfSGIX)
  {
    s_deviceConfig.m_glListParameterfSGIX (list, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glListParameterfvSGIX

void  glew::gl::glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat * params)
{
  // GL_SGIX_list_priority - glListParameterfvSGIX
  if (s_deviceConfig.m_glListParameterfvSGIX)
  {
    s_deviceConfig.m_glListParameterfvSGIX (list, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glListParameteriSGIX

void  glew::gl::glListParameteriSGIX (GLuint list, GLenum pname, GLint param)
{
  // GL_SGIX_list_priority - glListParameteriSGIX
  if (s_deviceConfig.m_glListParameteriSGIX)
  {
    s_deviceConfig.m_glListParameteriSGIX (list, pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glListParameterivSGIX

void  glew::gl::glListParameterivSGIX (GLuint list, GLenum pname, const GLint * params)
{
  // GL_SGIX_list_priority - glListParameterivSGIX
  if (s_deviceConfig.m_glListParameterivSGIX)
  {
    s_deviceConfig.m_glListParameterivSGIX (list, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glPixelTexGenSGIX

void  glew::gl::glPixelTexGenSGIX (GLenum mode)
{
  // GL_SGIX_pixel_texture - glPixelTexGenSGIX
  if (s_deviceConfig.m_glPixelTexGenSGIX)
  {
    s_deviceConfig.m_glPixelTexGenSGIX (mode);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeformationMap3dSGIX

void  glew::gl::glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points)
{
  // GL_SGIX_polynomial_ffd - glDeformationMap3dSGIX
  if (s_deviceConfig.m_glDeformationMap3dSGIX)
  {
    s_deviceConfig.m_glDeformationMap3dSGIX (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeformationMap3fSGIX

void  glew::gl::glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points)
{
  // GL_SGIX_polynomial_ffd - glDeformationMap3fSGIX
  if (s_deviceConfig.m_glDeformationMap3fSGIX)
  {
    s_deviceConfig.m_glDeformationMap3fSGIX (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDeformSGIX

void  glew::gl::glDeformSGIX (GLbitfield mask)
{
  // GL_SGIX_polynomial_ffd - glDeformSGIX
  if (s_deviceConfig.m_glDeformSGIX)
  {
    s_deviceConfig.m_glDeformSGIX (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glLoadIdentityDeformationMapSGIX

void  glew::gl::glLoadIdentityDeformationMapSGIX (GLbitfield mask)
{
  // GL_SGIX_polynomial_ffd - glLoadIdentityDeformationMapSGIX
  if (s_deviceConfig.m_glLoadIdentityDeformationMapSGIX)
  {
    s_deviceConfig.m_glLoadIdentityDeformationMapSGIX (mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReferencePlaneSGIX

void  glew::gl::glReferencePlaneSGIX (const GLdouble * equation)
{
  // GL_SGIX_reference_plane - glReferencePlaneSGIX
  if (s_deviceConfig.m_glReferencePlaneSGIX)
  {
    s_deviceConfig.m_glReferencePlaneSGIX (equation);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSpriteParameterfSGIX

void  glew::gl::glSpriteParameterfSGIX (GLenum pname, GLfloat param)
{
  // GL_SGIX_sprite - glSpriteParameterfSGIX
  if (s_deviceConfig.m_glSpriteParameterfSGIX)
  {
    s_deviceConfig.m_glSpriteParameterfSGIX (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSpriteParameterfvSGIX

void  glew::gl::glSpriteParameterfvSGIX (GLenum pname, const GLfloat * params)
{
  // GL_SGIX_sprite - glSpriteParameterfvSGIX
  if (s_deviceConfig.m_glSpriteParameterfvSGIX)
  {
    s_deviceConfig.m_glSpriteParameterfvSGIX (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSpriteParameteriSGIX

void  glew::gl::glSpriteParameteriSGIX (GLenum pname, GLint param)
{
  // GL_SGIX_sprite - glSpriteParameteriSGIX
  if (s_deviceConfig.m_glSpriteParameteriSGIX)
  {
    s_deviceConfig.m_glSpriteParameteriSGIX (pname, param);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glSpriteParameterivSGIX

void  glew::gl::glSpriteParameterivSGIX (GLenum pname, const GLint * params)
{
  // GL_SGIX_sprite - glSpriteParameterivSGIX
  if (s_deviceConfig.m_glSpriteParameterivSGIX)
  {
    s_deviceConfig.m_glSpriteParameterivSGIX (pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTagSampleBufferSGIX

void  glew::gl::glTagSampleBufferSGIX ()
{
  // GL_SGIX_tag_sample_buffer - glTagSampleBufferSGIX
  if (s_deviceConfig.m_glTagSampleBufferSGIX)
  {
    s_deviceConfig.m_glTagSampleBufferSGIX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableSGI

void  glew::gl::glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table)
{
  // GL_SGI_color_table - glColorTableSGI
  if (s_deviceConfig.m_glColorTableSGI)
  {
    s_deviceConfig.m_glColorTableSGI (target, internalformat, width, format, type, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableParameterfvSGI

void  glew::gl::glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat * params)
{
  // GL_SGI_color_table - glColorTableParameterfvSGI
  if (s_deviceConfig.m_glColorTableParameterfvSGI)
  {
    s_deviceConfig.m_glColorTableParameterfvSGI (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColorTableParameterivSGI

void  glew::gl::glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint * params)
{
  // GL_SGI_color_table - glColorTableParameterivSGI
  if (s_deviceConfig.m_glColorTableParameterivSGI)
  {
    s_deviceConfig.m_glColorTableParameterivSGI (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glCopyColorTableSGI

void  glew::gl::glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  // GL_SGI_color_table - glCopyColorTableSGI
  if (s_deviceConfig.m_glCopyColorTableSGI)
  {
    s_deviceConfig.m_glCopyColorTableSGI (target, internalformat, x, y, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableSGI

void  glew::gl::glGetColorTableSGI (GLenum target, GLenum format, GLenum type, void * table)
{
  // GL_SGI_color_table - glGetColorTableSGI
  if (s_deviceConfig.m_glGetColorTableSGI)
  {
    s_deviceConfig.m_glGetColorTableSGI (target, format, type, table);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameterfvSGI

void  glew::gl::glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat * params)
{
  // GL_SGI_color_table - glGetColorTableParameterfvSGI
  if (s_deviceConfig.m_glGetColorTableParameterfvSGI)
  {
    s_deviceConfig.m_glGetColorTableParameterfvSGI (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGetColorTableParameterivSGI

void  glew::gl::glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint * params)
{
  // GL_SGI_color_table - glGetColorTableParameterivSGI
  if (s_deviceConfig.m_glGetColorTableParameterivSGI)
  {
    s_deviceConfig.m_glGetColorTableParameterivSGI (target, pname, params);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glFinishTextureSUNX

void  glew::gl::glFinishTextureSUNX ()
{
  // GL_SUNX_constant_data - glFinishTextureSUNX
  if (s_deviceConfig.m_glFinishTextureSUNX)
  {
    s_deviceConfig.m_glFinishTextureSUNX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactorbSUN

void  glew::gl::glGlobalAlphaFactorbSUN (GLbyte factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactorbSUN
  if (s_deviceConfig.m_glGlobalAlphaFactorbSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactorbSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactorsSUN

void  glew::gl::glGlobalAlphaFactorsSUN (GLshort factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactorsSUN
  if (s_deviceConfig.m_glGlobalAlphaFactorsSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactorsSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactoriSUN

void  glew::gl::glGlobalAlphaFactoriSUN (GLint factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactoriSUN
  if (s_deviceConfig.m_glGlobalAlphaFactoriSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactoriSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactorfSUN

void  glew::gl::glGlobalAlphaFactorfSUN (GLfloat factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactorfSUN
  if (s_deviceConfig.m_glGlobalAlphaFactorfSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactorfSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactordSUN

void  glew::gl::glGlobalAlphaFactordSUN (GLdouble factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactordSUN
  if (s_deviceConfig.m_glGlobalAlphaFactordSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactordSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactorubSUN

void  glew::gl::glGlobalAlphaFactorubSUN (GLubyte factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactorubSUN
  if (s_deviceConfig.m_glGlobalAlphaFactorubSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactorubSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactorusSUN

void  glew::gl::glGlobalAlphaFactorusSUN (GLushort factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactorusSUN
  if (s_deviceConfig.m_glGlobalAlphaFactorusSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactorusSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glGlobalAlphaFactoruiSUN

void  glew::gl::glGlobalAlphaFactoruiSUN (GLuint factor)
{
  // GL_SUN_global_alpha - glGlobalAlphaFactoruiSUN
  if (s_deviceConfig.m_glGlobalAlphaFactoruiSUN)
  {
    s_deviceConfig.m_glGlobalAlphaFactoruiSUN (factor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glDrawMeshArraysSUN

void  glew::gl::glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  // GL_SUN_mesh_array - glDrawMeshArraysSUN
  if (s_deviceConfig.m_glDrawMeshArraysSUN)
  {
    s_deviceConfig.m_glDrawMeshArraysSUN (mode, first, count, width);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiSUN

void  glew::gl::glReplacementCodeuiSUN (GLuint code)
{
  // GL_SUN_triangle_list - glReplacementCodeuiSUN
  if (s_deviceConfig.m_glReplacementCodeuiSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeusSUN

void  glew::gl::glReplacementCodeusSUN (GLushort code)
{
  // GL_SUN_triangle_list - glReplacementCodeusSUN
  if (s_deviceConfig.m_glReplacementCodeusSUN)
  {
    s_deviceConfig.m_glReplacementCodeusSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeubSUN

void  glew::gl::glReplacementCodeubSUN (GLubyte code)
{
  // GL_SUN_triangle_list - glReplacementCodeubSUN
  if (s_deviceConfig.m_glReplacementCodeubSUN)
  {
    s_deviceConfig.m_glReplacementCodeubSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuivSUN

void  glew::gl::glReplacementCodeuivSUN (const GLuint * code)
{
  // GL_SUN_triangle_list - glReplacementCodeuivSUN
  if (s_deviceConfig.m_glReplacementCodeuivSUN)
  {
    s_deviceConfig.m_glReplacementCodeuivSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeusvSUN

void  glew::gl::glReplacementCodeusvSUN (const GLushort * code)
{
  // GL_SUN_triangle_list - glReplacementCodeusvSUN
  if (s_deviceConfig.m_glReplacementCodeusvSUN)
  {
    s_deviceConfig.m_glReplacementCodeusvSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeubvSUN

void  glew::gl::glReplacementCodeubvSUN (const GLubyte * code)
{
  // GL_SUN_triangle_list - glReplacementCodeubvSUN
  if (s_deviceConfig.m_glReplacementCodeubvSUN)
  {
    s_deviceConfig.m_glReplacementCodeubvSUN (code);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodePointerSUN

void  glew::gl::glReplacementCodePointerSUN (GLenum type, GLsizei stride, const void ** pointer)
{
  // GL_SUN_triangle_list - glReplacementCodePointerSUN
  if (s_deviceConfig.m_glReplacementCodePointerSUN)
  {
    s_deviceConfig.m_glReplacementCodePointerSUN (type, stride, pointer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4ubVertex2fSUN

void  glew::gl::glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  // GL_SUN_vertex - glColor4ubVertex2fSUN
  if (s_deviceConfig.m_glColor4ubVertex2fSUN)
  {
    s_deviceConfig.m_glColor4ubVertex2fSUN (r, g, b, a, x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4ubVertex2fvSUN

void  glew::gl::glColor4ubVertex2fvSUN (const GLubyte * c, const GLfloat * v)
{
  // GL_SUN_vertex - glColor4ubVertex2fvSUN
  if (s_deviceConfig.m_glColor4ubVertex2fvSUN)
  {
    s_deviceConfig.m_glColor4ubVertex2fvSUN (c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4ubVertex3fSUN

void  glew::gl::glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glColor4ubVertex3fSUN
  if (s_deviceConfig.m_glColor4ubVertex3fSUN)
  {
    s_deviceConfig.m_glColor4ubVertex3fSUN (r, g, b, a, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4ubVertex3fvSUN

void  glew::gl::glColor4ubVertex3fvSUN (const GLubyte * c, const GLfloat * v)
{
  // GL_SUN_vertex - glColor4ubVertex3fvSUN
  if (s_deviceConfig.m_glColor4ubVertex3fvSUN)
  {
    s_deviceConfig.m_glColor4ubVertex3fvSUN (c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3fVertex3fSUN

void  glew::gl::glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glColor3fVertex3fSUN
  if (s_deviceConfig.m_glColor3fVertex3fSUN)
  {
    s_deviceConfig.m_glColor3fVertex3fSUN (r, g, b, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor3fVertex3fvSUN

void  glew::gl::glColor3fVertex3fvSUN (const GLfloat * c, const GLfloat * v)
{
  // GL_SUN_vertex - glColor3fVertex3fvSUN
  if (s_deviceConfig.m_glColor3fVertex3fvSUN)
  {
    s_deviceConfig.m_glColor3fVertex3fvSUN (c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3fVertex3fSUN

void  glew::gl::glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glNormal3fVertex3fSUN
  if (s_deviceConfig.m_glNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glNormal3fVertex3fSUN (nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glNormal3fVertex3fvSUN

void  glew::gl::glNormal3fVertex3fvSUN (const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glNormal3fVertex3fvSUN (n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4fNormal3fVertex3fSUN

void  glew::gl::glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glColor4fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glColor4fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glColor4fNormal3fVertex3fSUN (r, g, b, a, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glColor4fNormal3fVertex3fvSUN

void  glew::gl::glColor4fNormal3fVertex3fvSUN (const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glColor4fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glColor4fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glColor4fNormal3fVertex3fvSUN (c, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fVertex3fSUN

void  glew::gl::glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glTexCoord2fVertex3fSUN
  if (s_deviceConfig.m_glTexCoord2fVertex3fSUN)
  {
    s_deviceConfig.m_glTexCoord2fVertex3fSUN (s, t, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fVertex3fvSUN

void  glew::gl::glTexCoord2fVertex3fvSUN (const GLfloat * tc, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord2fVertex3fvSUN
  if (s_deviceConfig.m_glTexCoord2fVertex3fvSUN)
  {
    s_deviceConfig.m_glTexCoord2fVertex3fvSUN (tc, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4fVertex4fSUN

void  glew::gl::glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_SUN_vertex - glTexCoord4fVertex4fSUN
  if (s_deviceConfig.m_glTexCoord4fVertex4fSUN)
  {
    s_deviceConfig.m_glTexCoord4fVertex4fSUN (s, t, p, q, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4fVertex4fvSUN

void  glew::gl::glTexCoord4fVertex4fvSUN (const GLfloat * tc, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord4fVertex4fvSUN
  if (s_deviceConfig.m_glTexCoord4fVertex4fvSUN)
  {
    s_deviceConfig.m_glTexCoord4fVertex4fvSUN (tc, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor4ubVertex3fSUN

void  glew::gl::glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glTexCoord2fColor4ubVertex3fSUN
  if (s_deviceConfig.m_glTexCoord2fColor4ubVertex3fSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor4ubVertex3fSUN (s, t, r, g, b, a, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor4ubVertex3fvSUN

void  glew::gl::glTexCoord2fColor4ubVertex3fvSUN (const GLfloat * tc, const GLubyte * c, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord2fColor4ubVertex3fvSUN
  if (s_deviceConfig.m_glTexCoord2fColor4ubVertex3fvSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor4ubVertex3fvSUN (tc, c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor3fVertex3fSUN

void  glew::gl::glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glTexCoord2fColor3fVertex3fSUN
  if (s_deviceConfig.m_glTexCoord2fColor3fVertex3fSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor3fVertex3fSUN (s, t, r, g, b, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor3fVertex3fvSUN

void  glew::gl::glTexCoord2fColor3fVertex3fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord2fColor3fVertex3fvSUN
  if (s_deviceConfig.m_glTexCoord2fColor3fVertex3fvSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor3fVertex3fvSUN (tc, c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fNormal3fVertex3fSUN

void  glew::gl::glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glTexCoord2fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glTexCoord2fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glTexCoord2fNormal3fVertex3fSUN (s, t, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fNormal3fVertex3fvSUN

void  glew::gl::glTexCoord2fNormal3fVertex3fvSUN (const GLfloat * tc, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord2fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glTexCoord2fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glTexCoord2fNormal3fVertex3fvSUN (tc, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor4fNormal3fVertex3fSUN

void  glew::gl::glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glTexCoord2fColor4fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fSUN (s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord2fColor4fNormal3fVertex3fvSUN

void  glew::gl::glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord2fColor4fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fvSUN (tc, c, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4fColor4fNormal3fVertex4fSUN

void  glew::gl::glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  // GL_SUN_vertex - glTexCoord4fColor4fNormal3fVertex4fSUN
  if (s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fSUN)
  {
    s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fSUN (s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glTexCoord4fColor4fNormal3fVertex4fvSUN

void  glew::gl::glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glTexCoord4fColor4fNormal3fVertex4fvSUN
  if (s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fvSUN)
  {
    s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fvSUN (tc, c, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiVertex3fSUN

void  glew::gl::glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiVertex3fSUN (rc, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiVertex3fvSUN

void  glew::gl::glReplacementCodeuiVertex3fvSUN (const GLuint * rc, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiVertex3fvSUN (rc, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor4ubVertex3fSUN

void  glew::gl::glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiColor4ubVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fSUN (rc, r, g, b, a, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor4ubVertex3fvSUN

void  glew::gl::glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint * rc, const GLubyte * c, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiColor4ubVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fvSUN (rc, c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor3fVertex3fSUN

void  glew::gl::glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiColor3fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fSUN (rc, r, g, b, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor3fVertex3fvSUN

void  glew::gl::glReplacementCodeuiColor3fVertex3fvSUN (const GLuint * rc, const GLfloat * c, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiColor3fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fvSUN (rc, c, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiNormal3fVertex3fSUN

void  glew::gl::glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiNormal3fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fSUN (rc, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiNormal3fVertex3fvSUN

void  glew::gl::glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fvSUN (rc, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor4fNormal3fVertex3fSUN

void  glew::gl::glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiColor4fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fSUN (rc, r, g, b, a, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiColor4fNormal3fVertex3fvSUN

void  glew::gl::glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiColor4fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (rc, c, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fVertex3fSUN

void  glew::gl::glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fSUN (rc, s, t, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fVertex3fvSUN

void  glew::gl::glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fvSUN (rc, tc, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN

void  glew::gl::glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (rc, s, t, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN

void  glew::gl::glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (rc, tc, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN

void  glew::gl::glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN

void  glew::gl::glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v)
{
  // GL_SUN_vertex - glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
  if (s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
  {
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (rc, tc, c, n, v);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

glew::gl::DeviceConfig glew::gl::s_deviceConfig;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gl::Initialise ()
{
  memset (&s_deviceConfig, 0, sizeof (s_deviceConfig));

  // 
  // Determine current driver's feature reporting.
  // 

  #undef glGetString

  const unsigned char *glVersion = glGetString (GL_VERSION);

  if (!glVersion)
  {
    glVersion = (const unsigned char*) ""; // Protect against some drivers will happily passing back NULL.
  }

  const size_t glVersionLen = strlen ((const char *) glVersion);

  if (glVersionLen)
  {
    unsigned int major = 0, minor = 0;

    const char *divisor = strchr ((const char *) glVersion, '.');

    if (divisor)
    {
      major = (*(char *) (divisor - 1)) - '0';

      minor = (*(char *) (divisor + 1)) - '0';
    }

    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_0] = ((major >= 1));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_1] = ((major >= 1) && (minor >= 1));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_2] = ((major >= 1) && (minor >= 2));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_3] = ((major >= 1) && (minor >= 3));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_4] = ((major >= 1) && (minor >= 4));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_5] = ((major >= 1) && (minor >= 5));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_2_0] = ((major >= 2));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_2_1] = ((major >= 2) && (minor >= 1));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_0] = ((major >= 3));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_1] = ((major >= 3) && (minor >= 1));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_2] = ((major >= 3) && (minor >= 2));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3] = ((major >= 3) && (minor >= 3));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0] = ((major >= 4));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1] = ((major >= 4) && (minor >= 1));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2] = ((major >= 4) && (minor >= 2));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3] = ((major >= 4) && (minor >= 3));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_4] = ((major >= 4) && (minor >= 4));
    s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5] = ((major >= 4) && (minor >= 5));
  }

  // 
  // Evaluate extension support.
  // 

  std::unordered_set <std::string> supportedExtensions;

  const unsigned char *glExtensions = (const unsigned char*) glGetString (GL_EXTENSIONS);

  if (!glExtensions)
  {
    glExtensions = (const unsigned char*) ""; // Protect against some drivers will happily passing back NULL.
  }

  const size_t glExtensionsLen = strlen ((const char *) glExtensions);

  if (glExtensionsLen)
  {
    unsigned char *thisExtStart = (unsigned char *) glExtensions;

    unsigned char *thisExtEnd = NULL;

    char thisExtBuffer [128];

    memset (thisExtBuffer, 0, sizeof (thisExtBuffer));

    do 
    {
      const char * seperator = strchr ((const char *) thisExtStart, ' ');

      if (seperator)
      {
        const size_t len = (((uintptr_t) seperator - (uintptr_t) thisExtStart) / sizeof (unsigned char));

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len, 127)] = '\0';

        thisExtEnd = (unsigned char *) seperator + 1; // skip tab character
      }
      else
      {
        const size_t len = strlen ((const char *) thisExtStart);

      #if _WIN32
        strncpy_s (thisExtBuffer, 128, (const char *)thisExtStart, len);
      #else 
        strncpy (thisExtBuffer, (const char *)thisExtStart, len);
      #endif

        thisExtBuffer [GLEW_MIN (len + 1, 127)] = '\0';

        thisExtEnd = NULL;
      }

      std::string thisExt (thisExtBuffer);

      if (supportedExtensions.find (thisExt) == supportedExtensions.end ())
      {
        supportedExtensions.insert (thisExt);
      }

      thisExtStart = thisExtEnd;
    }
    while ((thisExtStart && *thisExtStart != '\0') && (thisExtEnd && *thisExtEnd != '\0'));
  }

  s_deviceConfig.m_featureSupported [GLEW_GL_3DFX_multisample] = (supportedExtensions.find ("GL_3DFX_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_3DFX_tbuffer] = (supportedExtensions.find ("GL_3DFX_tbuffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_3DFX_texture_compression_FXT1] = (supportedExtensions.find ("GL_3DFX_texture_compression_FXT1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_blend_minmax_factor] = (supportedExtensions.find ("GL_AMD_blend_minmax_factor") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_conservative_depth] = (supportedExtensions.find ("GL_AMD_conservative_depth") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_debug_output] = (supportedExtensions.find ("GL_AMD_debug_output") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_depth_clamp_separate] = (supportedExtensions.find ("GL_AMD_depth_clamp_separate") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_draw_buffers_blend] = (supportedExtensions.find ("GL_AMD_draw_buffers_blend") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_gcn_shader] = (supportedExtensions.find ("GL_AMD_gcn_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_gpu_shader_int64] = (supportedExtensions.find ("GL_AMD_gpu_shader_int64") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_interleaved_elements] = (supportedExtensions.find ("GL_AMD_interleaved_elements") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_multi_draw_indirect] = (supportedExtensions.find ("GL_AMD_multi_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_name_gen_delete] = (supportedExtensions.find ("GL_AMD_name_gen_delete") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_occlusion_query_event] = (supportedExtensions.find ("GL_AMD_occlusion_query_event") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor] = (supportedExtensions.find ("GL_AMD_performance_monitor") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_pinned_memory] = (supportedExtensions.find ("GL_AMD_pinned_memory") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_query_buffer_object] = (supportedExtensions.find ("GL_AMD_query_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_sample_positions] = (supportedExtensions.find ("GL_AMD_sample_positions") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_seamless_cubemap_per_texture] = (supportedExtensions.find ("GL_AMD_seamless_cubemap_per_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_shader_atomic_counter_ops] = (supportedExtensions.find ("GL_AMD_shader_atomic_counter_ops") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_shader_stencil_export] = (supportedExtensions.find ("GL_AMD_shader_stencil_export") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_shader_trinary_minmax] = (supportedExtensions.find ("GL_AMD_shader_trinary_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_sparse_texture] = (supportedExtensions.find ("GL_AMD_sparse_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_stencil_operation_extended] = (supportedExtensions.find ("GL_AMD_stencil_operation_extended") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_texture_texture4] = (supportedExtensions.find ("GL_AMD_texture_texture4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_transform_feedback3_lines_triangles] = (supportedExtensions.find ("GL_AMD_transform_feedback3_lines_triangles") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_transform_feedback4] = (supportedExtensions.find ("GL_AMD_transform_feedback4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_vertex_shader_layer] = (supportedExtensions.find ("GL_AMD_vertex_shader_layer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_vertex_shader_tessellator] = (supportedExtensions.find ("GL_AMD_vertex_shader_tessellator") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_AMD_vertex_shader_viewport_index] = (supportedExtensions.find ("GL_AMD_vertex_shader_viewport_index") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_aux_depth_stencil] = (supportedExtensions.find ("GL_APPLE_aux_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_client_storage] = (supportedExtensions.find ("GL_APPLE_client_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_element_array] = (supportedExtensions.find ("GL_APPLE_element_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_fence] = (supportedExtensions.find ("GL_APPLE_fence") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_float_pixels] = (supportedExtensions.find ("GL_APPLE_float_pixels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_flush_buffer_range] = (supportedExtensions.find ("GL_APPLE_flush_buffer_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_object_purgeable] = (supportedExtensions.find ("GL_APPLE_object_purgeable") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_rgb_422] = (supportedExtensions.find ("GL_APPLE_rgb_422") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_row_bytes] = (supportedExtensions.find ("GL_APPLE_row_bytes") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_specular_vector] = (supportedExtensions.find ("GL_APPLE_specular_vector") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_range] = (supportedExtensions.find ("GL_APPLE_texture_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_transform_hint] = (supportedExtensions.find ("GL_APPLE_transform_hint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_array_object] = (supportedExtensions.find ("GL_APPLE_vertex_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_array_range] = (supportedExtensions.find ("GL_APPLE_vertex_array_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_program_evaluators] = (supportedExtensions.find ("GL_APPLE_vertex_program_evaluators") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_ycbcr_422] = (supportedExtensions.find ("GL_APPLE_ycbcr_422") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_ES2_compatibility] = (supportedExtensions.find ("GL_ARB_ES2_compatibility") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_ES3_1_compatibility] = (supportedExtensions.find ("GL_ARB_ES3_1_compatibility") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_ES3_compatibility] = (supportedExtensions.find ("GL_ARB_ES3_compatibility") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_arrays_of_arrays] = (supportedExtensions.find ("GL_ARB_arrays_of_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_base_instance] = (supportedExtensions.find ("GL_ARB_base_instance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_bindless_texture] = (supportedExtensions.find ("GL_ARB_bindless_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_blend_func_extended] = (supportedExtensions.find ("GL_ARB_blend_func_extended") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_buffer_storage] = (supportedExtensions.find ("GL_ARB_buffer_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_cl_event] = (supportedExtensions.find ("GL_ARB_cl_event") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clear_buffer_object] = (supportedExtensions.find ("GL_ARB_clear_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clear_texture] = (supportedExtensions.find ("GL_ARB_clear_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clip_control] = (supportedExtensions.find ("GL_ARB_clip_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_color_buffer_float] = (supportedExtensions.find ("GL_ARB_color_buffer_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compatibility] = (supportedExtensions.find ("GL_ARB_compatibility") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compressed_texture_pixel_storage] = (supportedExtensions.find ("GL_ARB_compressed_texture_pixel_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compute_shader] = (supportedExtensions.find ("GL_ARB_compute_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compute_variable_group_size] = (supportedExtensions.find ("GL_ARB_compute_variable_group_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_conditional_render_inverted] = (supportedExtensions.find ("GL_ARB_conditional_render_inverted") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_conservative_depth] = (supportedExtensions.find ("GL_ARB_conservative_depth") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_copy_buffer] = (supportedExtensions.find ("GL_ARB_copy_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_copy_image] = (supportedExtensions.find ("GL_ARB_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_cull_distance] = (supportedExtensions.find ("GL_ARB_cull_distance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_debug_output] = (supportedExtensions.find ("GL_ARB_debug_output") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_depth_buffer_float] = (supportedExtensions.find ("GL_ARB_depth_buffer_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_depth_clamp] = (supportedExtensions.find ("GL_ARB_depth_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_depth_texture] = (supportedExtensions.find ("GL_ARB_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_derivative_control] = (supportedExtensions.find ("GL_ARB_derivative_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access] = (supportedExtensions.find ("GL_ARB_direct_state_access") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_buffers] = (supportedExtensions.find ("GL_ARB_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_buffers_blend] = (supportedExtensions.find ("GL_ARB_draw_buffers_blend") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_elements_base_vertex] = (supportedExtensions.find ("GL_ARB_draw_elements_base_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_indirect] = (supportedExtensions.find ("GL_ARB_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_instanced] = (supportedExtensions.find ("GL_ARB_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_enhanced_layouts] = (supportedExtensions.find ("GL_ARB_enhanced_layouts") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_explicit_attrib_location] = (supportedExtensions.find ("GL_ARB_explicit_attrib_location") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_explicit_uniform_location] = (supportedExtensions.find ("GL_ARB_explicit_uniform_location") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_coord_conventions] = (supportedExtensions.find ("GL_ARB_fragment_coord_conventions") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_layer_viewport] = (supportedExtensions.find ("GL_ARB_fragment_layer_viewport") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_program] = (supportedExtensions.find ("GL_ARB_fragment_program") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_program_shadow] = (supportedExtensions.find ("GL_ARB_fragment_program_shadow") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_shader] = (supportedExtensions.find ("GL_ARB_fragment_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_framebuffer_no_attachments] = (supportedExtensions.find ("GL_ARB_framebuffer_no_attachments") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_framebuffer_object] = (supportedExtensions.find ("GL_ARB_framebuffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_framebuffer_sRGB] = (supportedExtensions.find ("GL_ARB_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_geometry_shader4] = (supportedExtensions.find ("GL_ARB_geometry_shader4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_get_program_binary] = (supportedExtensions.find ("GL_ARB_get_program_binary") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_get_texture_sub_image] = (supportedExtensions.find ("GL_ARB_get_texture_sub_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_gpu_shader5] = (supportedExtensions.find ("GL_ARB_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_gpu_shader_fp64] = (supportedExtensions.find ("GL_ARB_gpu_shader_fp64") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_half_float_pixel] = (supportedExtensions.find ("GL_ARB_half_float_pixel") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_half_float_vertex] = (supportedExtensions.find ("GL_ARB_half_float_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_imaging] = (supportedExtensions.find ("GL_ARB_imaging") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_indirect_parameters] = (supportedExtensions.find ("GL_ARB_indirect_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_instanced_arrays] = (supportedExtensions.find ("GL_ARB_instanced_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_internalformat_query] = (supportedExtensions.find ("GL_ARB_internalformat_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_internalformat_query2] = (supportedExtensions.find ("GL_ARB_internalformat_query2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_invalidate_subdata] = (supportedExtensions.find ("GL_ARB_invalidate_subdata") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_map_buffer_alignment] = (supportedExtensions.find ("GL_ARB_map_buffer_alignment") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_map_buffer_range] = (supportedExtensions.find ("GL_ARB_map_buffer_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_matrix_palette] = (supportedExtensions.find ("GL_ARB_matrix_palette") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multi_bind] = (supportedExtensions.find ("GL_ARB_multi_bind") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multi_draw_indirect] = (supportedExtensions.find ("GL_ARB_multi_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multisample] = (supportedExtensions.find ("GL_ARB_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multitexture] = (supportedExtensions.find ("GL_ARB_multitexture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_occlusion_query] = (supportedExtensions.find ("GL_ARB_occlusion_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_occlusion_query2] = (supportedExtensions.find ("GL_ARB_occlusion_query2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_pipeline_statistics_query] = (supportedExtensions.find ("GL_ARB_pipeline_statistics_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_pixel_buffer_object] = (supportedExtensions.find ("GL_ARB_pixel_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_point_parameters] = (supportedExtensions.find ("GL_ARB_point_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_point_sprite] = (supportedExtensions.find ("GL_ARB_point_sprite") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_program_interface_query] = (supportedExtensions.find ("GL_ARB_program_interface_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_provoking_vertex] = (supportedExtensions.find ("GL_ARB_provoking_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_query_buffer_object] = (supportedExtensions.find ("GL_ARB_query_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_robust_buffer_access_behavior] = (supportedExtensions.find ("GL_ARB_robust_buffer_access_behavior") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_robustness] = (supportedExtensions.find ("GL_ARB_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_robustness_isolation] = (supportedExtensions.find ("GL_ARB_robustness_isolation") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sample_shading] = (supportedExtensions.find ("GL_ARB_sample_shading") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sampler_objects] = (supportedExtensions.find ("GL_ARB_sampler_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_seamless_cube_map] = (supportedExtensions.find ("GL_ARB_seamless_cube_map") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_seamless_cubemap_per_texture] = (supportedExtensions.find ("GL_ARB_seamless_cubemap_per_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_separate_shader_objects] = (supportedExtensions.find ("GL_ARB_separate_shader_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_atomic_counters] = (supportedExtensions.find ("GL_ARB_shader_atomic_counters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_bit_encoding] = (supportedExtensions.find ("GL_ARB_shader_bit_encoding") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_draw_parameters] = (supportedExtensions.find ("GL_ARB_shader_draw_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_group_vote] = (supportedExtensions.find ("GL_ARB_shader_group_vote") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_image_load_store] = (supportedExtensions.find ("GL_ARB_shader_image_load_store") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_image_size] = (supportedExtensions.find ("GL_ARB_shader_image_size") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_objects] = (supportedExtensions.find ("GL_ARB_shader_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_precision] = (supportedExtensions.find ("GL_ARB_shader_precision") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_stencil_export] = (supportedExtensions.find ("GL_ARB_shader_stencil_export") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_storage_buffer_object] = (supportedExtensions.find ("GL_ARB_shader_storage_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_subroutine] = (supportedExtensions.find ("GL_ARB_shader_subroutine") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_texture_image_samples] = (supportedExtensions.find ("GL_ARB_shader_texture_image_samples") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_texture_lod] = (supportedExtensions.find ("GL_ARB_shader_texture_lod") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shading_language_100] = (supportedExtensions.find ("GL_ARB_shading_language_100") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shading_language_420pack] = (supportedExtensions.find ("GL_ARB_shading_language_420pack") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shading_language_include] = (supportedExtensions.find ("GL_ARB_shading_language_include") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shading_language_packing] = (supportedExtensions.find ("GL_ARB_shading_language_packing") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shadow] = (supportedExtensions.find ("GL_ARB_shadow") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shadow_ambient] = (supportedExtensions.find ("GL_ARB_shadow_ambient") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_buffer] = (supportedExtensions.find ("GL_ARB_sparse_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_texture] = (supportedExtensions.find ("GL_ARB_sparse_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_stencil_texturing] = (supportedExtensions.find ("GL_ARB_stencil_texturing") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sync] = (supportedExtensions.find ("GL_ARB_sync") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_tessellation_shader] = (supportedExtensions.find ("GL_ARB_tessellation_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_barrier] = (supportedExtensions.find ("GL_ARB_texture_barrier") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_border_clamp] = (supportedExtensions.find ("GL_ARB_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_buffer_object] = (supportedExtensions.find ("GL_ARB_texture_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_buffer_object_rgb32] = (supportedExtensions.find ("GL_ARB_texture_buffer_object_rgb32") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_buffer_range] = (supportedExtensions.find ("GL_ARB_texture_buffer_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_compression] = (supportedExtensions.find ("GL_ARB_texture_compression") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_compression_bptc] = (supportedExtensions.find ("GL_ARB_texture_compression_bptc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_compression_rgtc] = (supportedExtensions.find ("GL_ARB_texture_compression_rgtc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_cube_map] = (supportedExtensions.find ("GL_ARB_texture_cube_map") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_cube_map_array] = (supportedExtensions.find ("GL_ARB_texture_cube_map_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_env_add] = (supportedExtensions.find ("GL_ARB_texture_env_add") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_env_combine] = (supportedExtensions.find ("GL_ARB_texture_env_combine") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_env_crossbar] = (supportedExtensions.find ("GL_ARB_texture_env_crossbar") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_env_dot3] = (supportedExtensions.find ("GL_ARB_texture_env_dot3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_float] = (supportedExtensions.find ("GL_ARB_texture_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_gather] = (supportedExtensions.find ("GL_ARB_texture_gather") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_mirror_clamp_to_edge] = (supportedExtensions.find ("GL_ARB_texture_mirror_clamp_to_edge") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_mirrored_repeat] = (supportedExtensions.find ("GL_ARB_texture_mirrored_repeat") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_multisample] = (supportedExtensions.find ("GL_ARB_texture_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_non_power_of_two] = (supportedExtensions.find ("GL_ARB_texture_non_power_of_two") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_query_levels] = (supportedExtensions.find ("GL_ARB_texture_query_levels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_query_lod] = (supportedExtensions.find ("GL_ARB_texture_query_lod") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_rectangle] = (supportedExtensions.find ("GL_ARB_texture_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_rg] = (supportedExtensions.find ("GL_ARB_texture_rg") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_rgb10_a2ui] = (supportedExtensions.find ("GL_ARB_texture_rgb10_a2ui") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_stencil8] = (supportedExtensions.find ("GL_ARB_texture_stencil8") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_storage] = (supportedExtensions.find ("GL_ARB_texture_storage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_storage_multisample] = (supportedExtensions.find ("GL_ARB_texture_storage_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_swizzle] = (supportedExtensions.find ("GL_ARB_texture_swizzle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_view] = (supportedExtensions.find ("GL_ARB_texture_view") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_timer_query] = (supportedExtensions.find ("GL_ARB_timer_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback2] = (supportedExtensions.find ("GL_ARB_transform_feedback2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback3] = (supportedExtensions.find ("GL_ARB_transform_feedback3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback_instanced] = (supportedExtensions.find ("GL_ARB_transform_feedback_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback_overflow_query] = (supportedExtensions.find ("GL_ARB_transform_feedback_overflow_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transpose_matrix] = (supportedExtensions.find ("GL_ARB_transpose_matrix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_uniform_buffer_object] = (supportedExtensions.find ("GL_ARB_uniform_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_array_bgra] = (supportedExtensions.find ("GL_ARB_vertex_array_bgra") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_array_object] = (supportedExtensions.find ("GL_ARB_vertex_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_attrib_64bit] = (supportedExtensions.find ("GL_ARB_vertex_attrib_64bit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_attrib_binding] = (supportedExtensions.find ("GL_ARB_vertex_attrib_binding") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_blend] = (supportedExtensions.find ("GL_ARB_vertex_blend") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_buffer_object] = (supportedExtensions.find ("GL_ARB_vertex_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_program] = (supportedExtensions.find ("GL_ARB_vertex_program") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_shader] = (supportedExtensions.find ("GL_ARB_vertex_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_type_10f_11f_11f_rev] = (supportedExtensions.find ("GL_ARB_vertex_type_10f_11f_11f_rev") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_type_2_10_10_10_rev] = (supportedExtensions.find ("GL_ARB_vertex_type_2_10_10_10_rev") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_viewport_array] = (supportedExtensions.find ("GL_ARB_viewport_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ARB_window_pos] = (supportedExtensions.find ("GL_ARB_window_pos") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_draw_buffers] = (supportedExtensions.find ("GL_ATI_draw_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_element_array] = (supportedExtensions.find ("GL_ATI_element_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_envmap_bumpmap] = (supportedExtensions.find ("GL_ATI_envmap_bumpmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_fragment_shader] = (supportedExtensions.find ("GL_ATI_fragment_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_map_object_buffer] = (supportedExtensions.find ("GL_ATI_map_object_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_meminfo] = (supportedExtensions.find ("GL_ATI_meminfo") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_pixel_format_float] = (supportedExtensions.find ("GL_ATI_pixel_format_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_pn_triangles] = (supportedExtensions.find ("GL_ATI_pn_triangles") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_separate_stencil] = (supportedExtensions.find ("GL_ATI_separate_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_text_fragment_shader] = (supportedExtensions.find ("GL_ATI_text_fragment_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_texture_env_combine3] = (supportedExtensions.find ("GL_ATI_texture_env_combine3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_texture_float] = (supportedExtensions.find ("GL_ATI_texture_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_texture_mirror_once] = (supportedExtensions.find ("GL_ATI_texture_mirror_once") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_array_object] = (supportedExtensions.find ("GL_ATI_vertex_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_attrib_array_object] = (supportedExtensions.find ("GL_ATI_vertex_attrib_array_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_streams] = (supportedExtensions.find ("GL_ATI_vertex_streams") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_422_pixels] = (supportedExtensions.find ("GL_EXT_422_pixels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_abgr] = (supportedExtensions.find ("GL_EXT_abgr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_bgra] = (supportedExtensions.find ("GL_EXT_bgra") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_bindable_uniform] = (supportedExtensions.find ("GL_EXT_bindable_uniform") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_color] = (supportedExtensions.find ("GL_EXT_blend_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_equation_separate] = (supportedExtensions.find ("GL_EXT_blend_equation_separate") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_func_separate] = (supportedExtensions.find ("GL_EXT_blend_func_separate") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_logic_op] = (supportedExtensions.find ("GL_EXT_blend_logic_op") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_minmax] = (supportedExtensions.find ("GL_EXT_blend_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_subtract] = (supportedExtensions.find ("GL_EXT_blend_subtract") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_clip_volume_hint] = (supportedExtensions.find ("GL_EXT_clip_volume_hint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_cmyka] = (supportedExtensions.find ("GL_EXT_cmyka") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_color_subtable] = (supportedExtensions.find ("GL_EXT_color_subtable") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_compiled_vertex_array] = (supportedExtensions.find ("GL_EXT_compiled_vertex_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_convolution] = (supportedExtensions.find ("GL_EXT_convolution") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_coordinate_frame] = (supportedExtensions.find ("GL_EXT_coordinate_frame") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_texture] = (supportedExtensions.find ("GL_EXT_copy_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_cull_vertex] = (supportedExtensions.find ("GL_EXT_cull_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label] = (supportedExtensions.find ("GL_EXT_debug_label") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker] = (supportedExtensions.find ("GL_EXT_debug_marker") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_depth_bounds_test] = (supportedExtensions.find ("GL_EXT_depth_bounds_test") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access] = (supportedExtensions.find ("GL_EXT_direct_state_access") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers2] = (supportedExtensions.find ("GL_EXT_draw_buffers2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced] = (supportedExtensions.find ("GL_EXT_draw_instanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_range_elements] = (supportedExtensions.find ("GL_EXT_draw_range_elements") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_fog_coord] = (supportedExtensions.find ("GL_EXT_fog_coord") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_blit] = (supportedExtensions.find ("GL_EXT_framebuffer_blit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_multisample] = (supportedExtensions.find ("GL_EXT_framebuffer_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_multisample_blit_scaled] = (supportedExtensions.find ("GL_EXT_framebuffer_multisample_blit_scaled") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_object] = (supportedExtensions.find ("GL_EXT_framebuffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_sRGB] = (supportedExtensions.find ("GL_EXT_framebuffer_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader4] = (supportedExtensions.find ("GL_EXT_geometry_shader4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_program_parameters] = (supportedExtensions.find ("GL_EXT_gpu_program_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_shader4] = (supportedExtensions.find ("GL_EXT_gpu_shader4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_histogram] = (supportedExtensions.find ("GL_EXT_histogram") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_array_formats] = (supportedExtensions.find ("GL_EXT_index_array_formats") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_func] = (supportedExtensions.find ("GL_EXT_index_func") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_material] = (supportedExtensions.find ("GL_EXT_index_material") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_texture] = (supportedExtensions.find ("GL_EXT_index_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_light_texture] = (supportedExtensions.find ("GL_EXT_light_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_misc_attribute] = (supportedExtensions.find ("GL_EXT_misc_attribute") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays] = (supportedExtensions.find ("GL_EXT_multi_draw_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisample] = (supportedExtensions.find ("GL_EXT_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_packed_depth_stencil] = (supportedExtensions.find ("GL_EXT_packed_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_packed_float] = (supportedExtensions.find ("GL_EXT_packed_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_packed_pixels] = (supportedExtensions.find ("GL_EXT_packed_pixels") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_paletted_texture] = (supportedExtensions.find ("GL_EXT_paletted_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pixel_buffer_object] = (supportedExtensions.find ("GL_EXT_pixel_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pixel_transform] = (supportedExtensions.find ("GL_EXT_pixel_transform") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pixel_transform_color_table] = (supportedExtensions.find ("GL_EXT_pixel_transform_color_table") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_point_parameters] = (supportedExtensions.find ("GL_EXT_point_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_polygon_offset] = (supportedExtensions.find ("GL_EXT_polygon_offset") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_polygon_offset_clamp] = (supportedExtensions.find ("GL_EXT_polygon_offset_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_post_depth_coverage] = (supportedExtensions.find ("GL_EXT_post_depth_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_provoking_vertex] = (supportedExtensions.find ("GL_EXT_provoking_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample] = (supportedExtensions.find ("GL_EXT_raster_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_rescale_normal] = (supportedExtensions.find ("GL_EXT_rescale_normal") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_secondary_color] = (supportedExtensions.find ("GL_EXT_secondary_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects] = (supportedExtensions.find ("GL_EXT_separate_shader_objects") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_specular_color] = (supportedExtensions.find ("GL_EXT_separate_specular_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_image_load_formatted] = (supportedExtensions.find ("GL_EXT_shader_image_load_formatted") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_image_load_store] = (supportedExtensions.find ("GL_EXT_shader_image_load_store") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_integer_mix] = (supportedExtensions.find ("GL_EXT_shader_integer_mix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shadow_funcs] = (supportedExtensions.find ("GL_EXT_shadow_funcs") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shared_texture_palette] = (supportedExtensions.find ("GL_EXT_shared_texture_palette") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_sparse_texture2] = (supportedExtensions.find ("GL_EXT_sparse_texture2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_stencil_clear_tag] = (supportedExtensions.find ("GL_EXT_stencil_clear_tag") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_stencil_two_side] = (supportedExtensions.find ("GL_EXT_stencil_two_side") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_stencil_wrap] = (supportedExtensions.find ("GL_EXT_stencil_wrap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_subtexture] = (supportedExtensions.find ("GL_EXT_subtexture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture] = (supportedExtensions.find ("GL_EXT_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture3D] = (supportedExtensions.find ("GL_EXT_texture3D") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_array] = (supportedExtensions.find ("GL_EXT_texture_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer_object] = (supportedExtensions.find ("GL_EXT_texture_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_latc] = (supportedExtensions.find ("GL_EXT_texture_compression_latc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_rgtc] = (supportedExtensions.find ("GL_EXT_texture_compression_rgtc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_compression_s3tc] = (supportedExtensions.find ("GL_EXT_texture_compression_s3tc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_cube_map] = (supportedExtensions.find ("GL_EXT_texture_cube_map") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_env_add] = (supportedExtensions.find ("GL_EXT_texture_env_add") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_env_combine] = (supportedExtensions.find ("GL_EXT_texture_env_combine") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_env_dot3] = (supportedExtensions.find ("GL_EXT_texture_env_dot3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_anisotropic] = (supportedExtensions.find ("GL_EXT_texture_filter_anisotropic") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax] = (supportedExtensions.find ("GL_EXT_texture_filter_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_integer] = (supportedExtensions.find ("GL_EXT_texture_integer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_lod_bias] = (supportedExtensions.find ("GL_EXT_texture_lod_bias") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_mirror_clamp] = (supportedExtensions.find ("GL_EXT_texture_mirror_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_object] = (supportedExtensions.find ("GL_EXT_texture_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_perturb_normal] = (supportedExtensions.find ("GL_EXT_texture_perturb_normal") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB] = (supportedExtensions.find ("GL_EXT_texture_sRGB") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_sRGB_decode] = (supportedExtensions.find ("GL_EXT_texture_sRGB_decode") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_shared_exponent] = (supportedExtensions.find ("GL_EXT_texture_shared_exponent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_snorm] = (supportedExtensions.find ("GL_EXT_texture_snorm") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_swizzle] = (supportedExtensions.find ("GL_EXT_texture_swizzle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_timer_query] = (supportedExtensions.find ("GL_EXT_timer_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_transform_feedback] = (supportedExtensions.find ("GL_EXT_transform_feedback") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_array] = (supportedExtensions.find ("GL_EXT_vertex_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_array_bgra] = (supportedExtensions.find ("GL_EXT_vertex_array_bgra") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_attrib_64bit] = (supportedExtensions.find ("GL_EXT_vertex_attrib_64bit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_shader] = (supportedExtensions.find ("GL_EXT_vertex_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_weighting] = (supportedExtensions.find ("GL_EXT_vertex_weighting") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_EXT_x11_sync_object] = (supportedExtensions.find ("GL_EXT_x11_sync_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_GREMEDY_frame_terminator] = (supportedExtensions.find ("GL_GREMEDY_frame_terminator") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_GREMEDY_string_marker] = (supportedExtensions.find ("GL_GREMEDY_string_marker") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_HP_convolution_border_modes] = (supportedExtensions.find ("GL_HP_convolution_border_modes") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_HP_image_transform] = (supportedExtensions.find ("GL_HP_image_transform") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_HP_occlusion_test] = (supportedExtensions.find ("GL_HP_occlusion_test") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_HP_texture_lighting] = (supportedExtensions.find ("GL_HP_texture_lighting") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_cull_vertex] = (supportedExtensions.find ("GL_IBM_cull_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_multimode_draw_arrays] = (supportedExtensions.find ("GL_IBM_multimode_draw_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_rasterpos_clip] = (supportedExtensions.find ("GL_IBM_rasterpos_clip") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_static_data] = (supportedExtensions.find ("GL_IBM_static_data") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_texture_mirrored_repeat] = (supportedExtensions.find ("GL_IBM_texture_mirrored_repeat") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_IBM_vertex_array_lists] = (supportedExtensions.find ("GL_IBM_vertex_array_lists") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INGR_blend_func_separate] = (supportedExtensions.find ("GL_INGR_blend_func_separate") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INGR_color_clamp] = (supportedExtensions.find ("GL_INGR_color_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INGR_interlace_read] = (supportedExtensions.find ("GL_INGR_interlace_read") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_fragment_shader_ordering] = (supportedExtensions.find ("GL_INTEL_fragment_shader_ordering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_map_texture] = (supportedExtensions.find ("GL_INTEL_map_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_parallel_arrays] = (supportedExtensions.find ("GL_INTEL_parallel_arrays") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query] = (supportedExtensions.find ("GL_INTEL_performance_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_KHR_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_context_flush_control] = (supportedExtensions.find ("GL_KHR_context_flush_control") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug] = (supportedExtensions.find ("GL_KHR_debug") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_no_error] = (supportedExtensions.find ("GL_KHR_no_error") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robust_buffer_access_behavior] = (supportedExtensions.find ("GL_KHR_robust_buffer_access_behavior") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness] = (supportedExtensions.find ("GL_KHR_robustness") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_hdr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_hdr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_KHR_texture_compression_astc_ldr] = (supportedExtensions.find ("GL_KHR_texture_compression_astc_ldr") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_MESAX_texture_stack] = (supportedExtensions.find ("GL_MESAX_texture_stack") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_MESA_pack_invert] = (supportedExtensions.find ("GL_MESA_pack_invert") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_MESA_resize_buffers] = (supportedExtensions.find ("GL_MESA_resize_buffers") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_MESA_window_pos] = (supportedExtensions.find ("GL_MESA_window_pos") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_MESA_ycbcr_texture] = (supportedExtensions.find ("GL_MESA_ycbcr_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NVX_conditional_render] = (supportedExtensions.find ("GL_NVX_conditional_render") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NVX_gpu_memory_info] = (supportedExtensions.find ("GL_NVX_gpu_memory_info") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_multi_draw_indirect] = (supportedExtensions.find ("GL_NV_bindless_multi_draw_indirect") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_multi_draw_indirect_count] = (supportedExtensions.find ("GL_NV_bindless_multi_draw_indirect_count") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture] = (supportedExtensions.find ("GL_NV_bindless_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced] = (supportedExtensions.find ("GL_NV_blend_equation_advanced") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced_coherent] = (supportedExtensions.find ("GL_NV_blend_equation_advanced_coherent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_square] = (supportedExtensions.find ("GL_NV_blend_square") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_command_list] = (supportedExtensions.find ("GL_NV_command_list") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_compute_program5] = (supportedExtensions.find ("GL_NV_compute_program5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render] = (supportedExtensions.find ("GL_NV_conditional_render") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster] = (supportedExtensions.find ("GL_NV_conservative_raster") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_depth_to_color] = (supportedExtensions.find ("GL_NV_copy_depth_to_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_image] = (supportedExtensions.find ("GL_NV_copy_image") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_deep_texture3D] = (supportedExtensions.find ("GL_NV_deep_texture3D") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_depth_buffer_float] = (supportedExtensions.find ("GL_NV_depth_buffer_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_depth_clamp] = (supportedExtensions.find ("GL_NV_depth_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_texture] = (supportedExtensions.find ("GL_NV_draw_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_evaluators] = (supportedExtensions.find ("GL_NV_evaluators") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_explicit_multisample] = (supportedExtensions.find ("GL_NV_explicit_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence] = (supportedExtensions.find ("GL_NV_fence") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fill_rectangle] = (supportedExtensions.find ("GL_NV_fill_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_float_buffer] = (supportedExtensions.find ("GL_NV_float_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fog_distance] = (supportedExtensions.find ("GL_NV_fog_distance") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color] = (supportedExtensions.find ("GL_NV_fragment_coverage_to_color") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_program] = (supportedExtensions.find ("GL_NV_fragment_program") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_program2] = (supportedExtensions.find ("GL_NV_fragment_program2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_program4] = (supportedExtensions.find ("GL_NV_fragment_program4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_program_option] = (supportedExtensions.find ("GL_NV_fragment_program_option") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_shader_interlock] = (supportedExtensions.find ("GL_NV_fragment_shader_interlock") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples] = (supportedExtensions.find ("GL_NV_framebuffer_mixed_samples") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample_coverage] = (supportedExtensions.find ("GL_NV_framebuffer_multisample_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_program4] = (supportedExtensions.find ("GL_NV_geometry_program4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_shader4] = (supportedExtensions.find ("GL_NV_geometry_shader4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_shader_passthrough] = (supportedExtensions.find ("GL_NV_geometry_shader_passthrough") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_program4] = (supportedExtensions.find ("GL_NV_gpu_program4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_program5] = (supportedExtensions.find ("GL_NV_gpu_program5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_program5_mem_extended] = (supportedExtensions.find ("GL_NV_gpu_program5_mem_extended") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_shader5] = (supportedExtensions.find ("GL_NV_gpu_shader5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_half_float] = (supportedExtensions.find ("GL_NV_half_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query] = (supportedExtensions.find ("GL_NV_internalformat_sample_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_light_max_exponent] = (supportedExtensions.find ("GL_NV_light_max_exponent") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_multisample_coverage] = (supportedExtensions.find ("GL_NV_multisample_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_multisample_filter_hint] = (supportedExtensions.find ("GL_NV_multisample_filter_hint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_occlusion_query] = (supportedExtensions.find ("GL_NV_occlusion_query") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_packed_depth_stencil] = (supportedExtensions.find ("GL_NV_packed_depth_stencil") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_parameter_buffer_object] = (supportedExtensions.find ("GL_NV_parameter_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_parameter_buffer_object2] = (supportedExtensions.find ("GL_NV_parameter_buffer_object2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering] = (supportedExtensions.find ("GL_NV_path_rendering") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_pixel_data_range] = (supportedExtensions.find ("GL_NV_pixel_data_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_point_sprite] = (supportedExtensions.find ("GL_NV_point_sprite") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_present_video] = (supportedExtensions.find ("GL_NV_present_video") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_primitive_restart] = (supportedExtensions.find ("GL_NV_primitive_restart") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_register_combiners] = (supportedExtensions.find ("GL_NV_register_combiners") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering_shared_edge] = (supportedExtensions.find ("GL_NV_path_rendering_shared_edge") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_register_combiners2] = (supportedExtensions.find ("GL_NV_register_combiners2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations] = (supportedExtensions.find ("GL_NV_sample_locations") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_mask_override_coverage] = (supportedExtensions.find ("GL_NV_sample_mask_override_coverage") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_atomic_counters] = (supportedExtensions.find ("GL_NV_shader_atomic_counters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_atomic_float] = (supportedExtensions.find ("GL_NV_shader_atomic_float") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_atomic_fp16_vector] = (supportedExtensions.find ("GL_NV_shader_atomic_fp16_vector") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_atomic_int64] = (supportedExtensions.find ("GL_NV_shader_atomic_int64") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_buffer_load] = (supportedExtensions.find ("GL_NV_shader_buffer_load") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_buffer_store] = (supportedExtensions.find ("GL_NV_shader_buffer_store") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_storage_buffer_object] = (supportedExtensions.find ("GL_NV_shader_storage_buffer_object") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_thread_group] = (supportedExtensions.find ("GL_NV_shader_thread_group") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_thread_shuffle] = (supportedExtensions.find ("GL_NV_shader_thread_shuffle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_tessellation_program5] = (supportedExtensions.find ("GL_NV_tessellation_program5") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texgen_emboss] = (supportedExtensions.find ("GL_NV_texgen_emboss") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texgen_reflection] = (supportedExtensions.find ("GL_NV_texgen_reflection") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_barrier] = (supportedExtensions.find ("GL_NV_texture_barrier") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_compression_vtc] = (supportedExtensions.find ("GL_NV_texture_compression_vtc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_env_combine4] = (supportedExtensions.find ("GL_NV_texture_env_combine4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_expand_normal] = (supportedExtensions.find ("GL_NV_texture_expand_normal") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_multisample] = (supportedExtensions.find ("GL_NV_texture_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_rectangle] = (supportedExtensions.find ("GL_NV_texture_rectangle") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_shader] = (supportedExtensions.find ("GL_NV_texture_shader") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_shader2] = (supportedExtensions.find ("GL_NV_texture_shader2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_shader3] = (supportedExtensions.find ("GL_NV_texture_shader3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_transform_feedback] = (supportedExtensions.find ("GL_NV_transform_feedback") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_transform_feedback2] = (supportedExtensions.find ("GL_NV_transform_feedback2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_uniform_buffer_unified_memory] = (supportedExtensions.find ("GL_NV_uniform_buffer_unified_memory") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vdpau_interop] = (supportedExtensions.find ("GL_NV_vdpau_interop") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_array_range] = (supportedExtensions.find ("GL_NV_vertex_array_range") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_array_range2] = (supportedExtensions.find ("GL_NV_vertex_array_range2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_attrib_integer_64bit] = (supportedExtensions.find ("GL_NV_vertex_attrib_integer_64bit") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_buffer_unified_memory] = (supportedExtensions.find ("GL_NV_vertex_buffer_unified_memory") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program] = (supportedExtensions.find ("GL_NV_vertex_program") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program1_1] = (supportedExtensions.find ("GL_NV_vertex_program1_1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program2] = (supportedExtensions.find ("GL_NV_vertex_program2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program2_option] = (supportedExtensions.find ("GL_NV_vertex_program2_option") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program3] = (supportedExtensions.find ("GL_NV_vertex_program3") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program4] = (supportedExtensions.find ("GL_NV_vertex_program4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_video_capture] = (supportedExtensions.find ("GL_NV_video_capture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_NV_viewport_array2] = (supportedExtensions.find ("GL_NV_viewport_array2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_byte_coordinates] = (supportedExtensions.find ("GL_OES_byte_coordinates") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_compressed_paletted_texture] = (supportedExtensions.find ("GL_OES_compressed_paletted_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_fixed_point] = (supportedExtensions.find ("GL_OES_fixed_point") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_query_matrix] = (supportedExtensions.find ("GL_OES_query_matrix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_read_format] = (supportedExtensions.find ("GL_OES_read_format") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OES_single_precision] = (supportedExtensions.find ("GL_OES_single_precision") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OML_interlace] = (supportedExtensions.find ("GL_OML_interlace") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OML_resample] = (supportedExtensions.find ("GL_OML_resample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OML_subsample] = (supportedExtensions.find ("GL_OML_subsample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview] = (supportedExtensions.find ("GL_OVR_multiview") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview2] = (supportedExtensions.find ("GL_OVR_multiview2") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_PGI_misc_hints] = (supportedExtensions.find ("GL_PGI_misc_hints") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_PGI_vertex_hints] = (supportedExtensions.find ("GL_PGI_vertex_hints") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_REND_screen_coordinates] = (supportedExtensions.find ("GL_REND_screen_coordinates") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_S3_s3tc] = (supportedExtensions.find ("GL_S3_s3tc") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_detail_texture] = (supportedExtensions.find ("GL_SGIS_detail_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_fog_function] = (supportedExtensions.find ("GL_SGIS_fog_function") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_generate_mipmap] = (supportedExtensions.find ("GL_SGIS_generate_mipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_multisample] = (supportedExtensions.find ("GL_SGIS_multisample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_pixel_texture] = (supportedExtensions.find ("GL_SGIS_pixel_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_point_line_texgen] = (supportedExtensions.find ("GL_SGIS_point_line_texgen") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_point_parameters] = (supportedExtensions.find ("GL_SGIS_point_parameters") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_sharpen_texture] = (supportedExtensions.find ("GL_SGIS_sharpen_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture4D] = (supportedExtensions.find ("GL_SGIS_texture4D") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_border_clamp] = (supportedExtensions.find ("GL_SGIS_texture_border_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_color_mask] = (supportedExtensions.find ("GL_SGIS_texture_color_mask") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_edge_clamp] = (supportedExtensions.find ("GL_SGIS_texture_edge_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_filter4] = (supportedExtensions.find ("GL_SGIS_texture_filter4") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_lod] = (supportedExtensions.find ("GL_SGIS_texture_lod") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_select] = (supportedExtensions.find ("GL_SGIS_texture_select") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_async] = (supportedExtensions.find ("GL_SGIX_async") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_async_histogram] = (supportedExtensions.find ("GL_SGIX_async_histogram") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_async_pixel] = (supportedExtensions.find ("GL_SGIX_async_pixel") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_blend_alpha_minmax] = (supportedExtensions.find ("GL_SGIX_blend_alpha_minmax") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_calligraphic_fragment] = (supportedExtensions.find ("GL_SGIX_calligraphic_fragment") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_clipmap] = (supportedExtensions.find ("GL_SGIX_clipmap") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_convolution_accuracy] = (supportedExtensions.find ("GL_SGIX_convolution_accuracy") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_depth_pass_instrument] = (supportedExtensions.find ("GL_SGIX_depth_pass_instrument") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_depth_texture] = (supportedExtensions.find ("GL_SGIX_depth_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_flush_raster] = (supportedExtensions.find ("GL_SGIX_flush_raster") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_fog_offset] = (supportedExtensions.find ("GL_SGIX_fog_offset") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_fragment_lighting] = (supportedExtensions.find ("GL_SGIX_fragment_lighting") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_framezoom] = (supportedExtensions.find ("GL_SGIX_framezoom") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_igloo_interface] = (supportedExtensions.find ("GL_SGIX_igloo_interface") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_instruments] = (supportedExtensions.find ("GL_SGIX_instruments") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_interlace] = (supportedExtensions.find ("GL_SGIX_interlace") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_ir_instrument1] = (supportedExtensions.find ("GL_SGIX_ir_instrument1") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_list_priority] = (supportedExtensions.find ("GL_SGIX_list_priority") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_pixel_texture] = (supportedExtensions.find ("GL_SGIX_pixel_texture") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_pixel_tiles] = (supportedExtensions.find ("GL_SGIX_pixel_tiles") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_polynomial_ffd] = (supportedExtensions.find ("GL_SGIX_polynomial_ffd") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_reference_plane] = (supportedExtensions.find ("GL_SGIX_reference_plane") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_resample] = (supportedExtensions.find ("GL_SGIX_resample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_scalebias_hint] = (supportedExtensions.find ("GL_SGIX_scalebias_hint") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_shadow] = (supportedExtensions.find ("GL_SGIX_shadow") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_shadow_ambient] = (supportedExtensions.find ("GL_SGIX_shadow_ambient") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_sprite] = (supportedExtensions.find ("GL_SGIX_sprite") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_subsample] = (supportedExtensions.find ("GL_SGIX_subsample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_tag_sample_buffer] = (supportedExtensions.find ("GL_SGIX_tag_sample_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_texture_add_env] = (supportedExtensions.find ("GL_SGIX_texture_add_env") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_texture_coordinate_clamp] = (supportedExtensions.find ("GL_SGIX_texture_coordinate_clamp") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_texture_lod_bias] = (supportedExtensions.find ("GL_SGIX_texture_lod_bias") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_texture_multi_buffer] = (supportedExtensions.find ("GL_SGIX_texture_multi_buffer") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_texture_scale_bias] = (supportedExtensions.find ("GL_SGIX_texture_scale_bias") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_vertex_preclip] = (supportedExtensions.find ("GL_SGIX_vertex_preclip") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_ycrcb] = (supportedExtensions.find ("GL_SGIX_ycrcb") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_ycrcb_subsample] = (supportedExtensions.find ("GL_SGIX_ycrcb_subsample") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_ycrcba] = (supportedExtensions.find ("GL_SGIX_ycrcba") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGI_color_matrix] = (supportedExtensions.find ("GL_SGI_color_matrix") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGI_color_table] = (supportedExtensions.find ("GL_SGI_color_table") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SGI_texture_color_table] = (supportedExtensions.find ("GL_SGI_texture_color_table") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUNX_constant_data] = (supportedExtensions.find ("GL_SUNX_constant_data") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_convolution_border_modes] = (supportedExtensions.find ("GL_SUN_convolution_border_modes") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_global_alpha] = (supportedExtensions.find ("GL_SUN_global_alpha") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_mesh_array] = (supportedExtensions.find ("GL_SUN_mesh_array") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_slice_accum] = (supportedExtensions.find ("GL_SUN_slice_accum") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_triangle_list] = (supportedExtensions.find ("GL_SUN_triangle_list") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_SUN_vertex] = (supportedExtensions.find ("GL_SUN_vertex") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_WIN_phong_shading] = (supportedExtensions.find ("GL_WIN_phong_shading") != supportedExtensions.end ());
  s_deviceConfig.m_featureSupported [GLEW_GL_WIN_specular_fog] = (supportedExtensions.find ("GL_WIN_specular_fog") != supportedExtensions.end ());

  // GL_VERSION_1_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_1])
  {
    s_deviceConfig.m_glDrawArrays = (PFNGLDRAWARRAYSPROC) glewGetProcAddress ("glDrawArrays");
    s_deviceConfig.m_glDrawElements = (PFNGLDRAWELEMENTSPROC) glewGetProcAddress ("glDrawElements");
    s_deviceConfig.m_glGetPointerv = (PFNGLGETPOINTERVPROC) glewGetProcAddress ("glGetPointerv");
    s_deviceConfig.m_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) glewGetProcAddress ("glPolygonOffset");
    s_deviceConfig.m_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) glewGetProcAddress ("glCopyTexImage1D");
    s_deviceConfig.m_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) glewGetProcAddress ("glCopyTexImage2D");
    s_deviceConfig.m_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) glewGetProcAddress ("glCopyTexSubImage1D");
    s_deviceConfig.m_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) glewGetProcAddress ("glCopyTexSubImage2D");
    s_deviceConfig.m_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) glewGetProcAddress ("glTexSubImage1D");
    s_deviceConfig.m_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) glewGetProcAddress ("glTexSubImage2D");
    s_deviceConfig.m_glBindTexture = (PFNGLBINDTEXTUREPROC) glewGetProcAddress ("glBindTexture");
    s_deviceConfig.m_glDeleteTextures = (PFNGLDELETETEXTURESPROC) glewGetProcAddress ("glDeleteTextures");
    s_deviceConfig.m_glGenTextures = (PFNGLGENTEXTURESPROC) glewGetProcAddress ("glGenTextures");
    s_deviceConfig.m_glIsTexture = (PFNGLISTEXTUREPROC) glewGetProcAddress ("glIsTexture");
    s_deviceConfig.m_glArrayElement = (PFNGLARRAYELEMENTPROC) glewGetProcAddress ("glArrayElement");
    s_deviceConfig.m_glColorPointer = (PFNGLCOLORPOINTERPROC) glewGetProcAddress ("glColorPointer");
    s_deviceConfig.m_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) glewGetProcAddress ("glDisableClientState");
    s_deviceConfig.m_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) glewGetProcAddress ("glEdgeFlagPointer");
    s_deviceConfig.m_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) glewGetProcAddress ("glEnableClientState");
    s_deviceConfig.m_glIndexPointer = (PFNGLINDEXPOINTERPROC) glewGetProcAddress ("glIndexPointer");
    s_deviceConfig.m_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) glewGetProcAddress ("glInterleavedArrays");
    s_deviceConfig.m_glNormalPointer = (PFNGLNORMALPOINTERPROC) glewGetProcAddress ("glNormalPointer");
    s_deviceConfig.m_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) glewGetProcAddress ("glTexCoordPointer");
    s_deviceConfig.m_glVertexPointer = (PFNGLVERTEXPOINTERPROC) glewGetProcAddress ("glVertexPointer");
    s_deviceConfig.m_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) glewGetProcAddress ("glAreTexturesResident");
    s_deviceConfig.m_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) glewGetProcAddress ("glPrioritizeTextures");
    s_deviceConfig.m_glIndexub = (PFNGLINDEXUBPROC) glewGetProcAddress ("glIndexub");
    s_deviceConfig.m_glIndexubv = (PFNGLINDEXUBVPROC) glewGetProcAddress ("glIndexubv");
    s_deviceConfig.m_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) glewGetProcAddress ("glPopClientAttrib");
    s_deviceConfig.m_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) glewGetProcAddress ("glPushClientAttrib");
  }

  // GL_VERSION_1_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_2])
  {
    s_deviceConfig.m_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) glewGetProcAddress ("glDrawRangeElements");
    s_deviceConfig.m_glTexImage3D = (PFNGLTEXIMAGE3DPROC) glewGetProcAddress ("glTexImage3D");
    s_deviceConfig.m_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) glewGetProcAddress ("glTexSubImage3D");
    s_deviceConfig.m_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) glewGetProcAddress ("glCopyTexSubImage3D");
  }

  // GL_VERSION_1_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_3])
  {
    s_deviceConfig.m_glActiveTexture = (PFNGLACTIVETEXTUREPROC) glewGetProcAddress ("glActiveTexture");
    s_deviceConfig.m_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) glewGetProcAddress ("glSampleCoverage");
    s_deviceConfig.m_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) glewGetProcAddress ("glCompressedTexImage3D");
    s_deviceConfig.m_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) glewGetProcAddress ("glCompressedTexImage2D");
    s_deviceConfig.m_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) glewGetProcAddress ("glCompressedTexImage1D");
    s_deviceConfig.m_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) glewGetProcAddress ("glCompressedTexSubImage3D");
    s_deviceConfig.m_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) glewGetProcAddress ("glCompressedTexSubImage2D");
    s_deviceConfig.m_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) glewGetProcAddress ("glCompressedTexSubImage1D");
    s_deviceConfig.m_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) glewGetProcAddress ("glGetCompressedTexImage");
    s_deviceConfig.m_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) glewGetProcAddress ("glClientActiveTexture");
    s_deviceConfig.m_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC) glewGetProcAddress ("glMultiTexCoord1d");
    s_deviceConfig.m_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC) glewGetProcAddress ("glMultiTexCoord1dv");
    s_deviceConfig.m_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC) glewGetProcAddress ("glMultiTexCoord1f");
    s_deviceConfig.m_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC) glewGetProcAddress ("glMultiTexCoord1fv");
    s_deviceConfig.m_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC) glewGetProcAddress ("glMultiTexCoord1i");
    s_deviceConfig.m_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC) glewGetProcAddress ("glMultiTexCoord1iv");
    s_deviceConfig.m_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC) glewGetProcAddress ("glMultiTexCoord1s");
    s_deviceConfig.m_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC) glewGetProcAddress ("glMultiTexCoord1sv");
    s_deviceConfig.m_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC) glewGetProcAddress ("glMultiTexCoord2d");
    s_deviceConfig.m_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC) glewGetProcAddress ("glMultiTexCoord2dv");
    s_deviceConfig.m_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC) glewGetProcAddress ("glMultiTexCoord2f");
    s_deviceConfig.m_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC) glewGetProcAddress ("glMultiTexCoord2fv");
    s_deviceConfig.m_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC) glewGetProcAddress ("glMultiTexCoord2i");
    s_deviceConfig.m_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC) glewGetProcAddress ("glMultiTexCoord2iv");
    s_deviceConfig.m_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC) glewGetProcAddress ("glMultiTexCoord2s");
    s_deviceConfig.m_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC) glewGetProcAddress ("glMultiTexCoord2sv");
    s_deviceConfig.m_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC) glewGetProcAddress ("glMultiTexCoord3d");
    s_deviceConfig.m_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC) glewGetProcAddress ("glMultiTexCoord3dv");
    s_deviceConfig.m_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC) glewGetProcAddress ("glMultiTexCoord3f");
    s_deviceConfig.m_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC) glewGetProcAddress ("glMultiTexCoord3fv");
    s_deviceConfig.m_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC) glewGetProcAddress ("glMultiTexCoord3i");
    s_deviceConfig.m_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC) glewGetProcAddress ("glMultiTexCoord3iv");
    s_deviceConfig.m_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC) glewGetProcAddress ("glMultiTexCoord3s");
    s_deviceConfig.m_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC) glewGetProcAddress ("glMultiTexCoord3sv");
    s_deviceConfig.m_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC) glewGetProcAddress ("glMultiTexCoord4d");
    s_deviceConfig.m_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC) glewGetProcAddress ("glMultiTexCoord4dv");
    s_deviceConfig.m_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) glewGetProcAddress ("glMultiTexCoord4f");
    s_deviceConfig.m_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC) glewGetProcAddress ("glMultiTexCoord4fv");
    s_deviceConfig.m_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC) glewGetProcAddress ("glMultiTexCoord4i");
    s_deviceConfig.m_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC) glewGetProcAddress ("glMultiTexCoord4iv");
    s_deviceConfig.m_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC) glewGetProcAddress ("glMultiTexCoord4s");
    s_deviceConfig.m_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC) glewGetProcAddress ("glMultiTexCoord4sv");
    s_deviceConfig.m_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC) glewGetProcAddress ("glLoadTransposeMatrixf");
    s_deviceConfig.m_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC) glewGetProcAddress ("glLoadTransposeMatrixd");
    s_deviceConfig.m_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC) glewGetProcAddress ("glMultTransposeMatrixf");
    s_deviceConfig.m_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC) glewGetProcAddress ("glMultTransposeMatrixd");
  }

  // GL_VERSION_1_4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_4])
  {
    s_deviceConfig.m_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) glewGetProcAddress ("glBlendFuncSeparate");
    s_deviceConfig.m_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) glewGetProcAddress ("glMultiDrawArrays");
    s_deviceConfig.m_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) glewGetProcAddress ("glMultiDrawElements");
    s_deviceConfig.m_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) glewGetProcAddress ("glPointParameterf");
    s_deviceConfig.m_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) glewGetProcAddress ("glPointParameterfv");
    s_deviceConfig.m_glPointParameteri = (PFNGLPOINTPARAMETERIPROC) glewGetProcAddress ("glPointParameteri");
    s_deviceConfig.m_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) glewGetProcAddress ("glPointParameteriv");
    s_deviceConfig.m_glFogCoordf = (PFNGLFOGCOORDFPROC) glewGetProcAddress ("glFogCoordf");
    s_deviceConfig.m_glFogCoordfv = (PFNGLFOGCOORDFVPROC) glewGetProcAddress ("glFogCoordfv");
    s_deviceConfig.m_glFogCoordd = (PFNGLFOGCOORDDPROC) glewGetProcAddress ("glFogCoordd");
    s_deviceConfig.m_glFogCoorddv = (PFNGLFOGCOORDDVPROC) glewGetProcAddress ("glFogCoorddv");
    s_deviceConfig.m_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC) glewGetProcAddress ("glFogCoordPointer");
    s_deviceConfig.m_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC) glewGetProcAddress ("glSecondaryColor3b");
    s_deviceConfig.m_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC) glewGetProcAddress ("glSecondaryColor3bv");
    s_deviceConfig.m_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC) glewGetProcAddress ("glSecondaryColor3d");
    s_deviceConfig.m_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC) glewGetProcAddress ("glSecondaryColor3dv");
    s_deviceConfig.m_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC) glewGetProcAddress ("glSecondaryColor3f");
    s_deviceConfig.m_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC) glewGetProcAddress ("glSecondaryColor3fv");
    s_deviceConfig.m_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC) glewGetProcAddress ("glSecondaryColor3i");
    s_deviceConfig.m_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC) glewGetProcAddress ("glSecondaryColor3iv");
    s_deviceConfig.m_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC) glewGetProcAddress ("glSecondaryColor3s");
    s_deviceConfig.m_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC) glewGetProcAddress ("glSecondaryColor3sv");
    s_deviceConfig.m_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC) glewGetProcAddress ("glSecondaryColor3ub");
    s_deviceConfig.m_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC) glewGetProcAddress ("glSecondaryColor3ubv");
    s_deviceConfig.m_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC) glewGetProcAddress ("glSecondaryColor3ui");
    s_deviceConfig.m_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC) glewGetProcAddress ("glSecondaryColor3uiv");
    s_deviceConfig.m_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC) glewGetProcAddress ("glSecondaryColor3us");
    s_deviceConfig.m_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC) glewGetProcAddress ("glSecondaryColor3usv");
    s_deviceConfig.m_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC) glewGetProcAddress ("glSecondaryColorPointer");
    s_deviceConfig.m_glWindowPos2d = (PFNGLWINDOWPOS2DPROC) glewGetProcAddress ("glWindowPos2d");
    s_deviceConfig.m_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC) glewGetProcAddress ("glWindowPos2dv");
    s_deviceConfig.m_glWindowPos2f = (PFNGLWINDOWPOS2FPROC) glewGetProcAddress ("glWindowPos2f");
    s_deviceConfig.m_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC) glewGetProcAddress ("glWindowPos2fv");
    s_deviceConfig.m_glWindowPos2i = (PFNGLWINDOWPOS2IPROC) glewGetProcAddress ("glWindowPos2i");
    s_deviceConfig.m_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC) glewGetProcAddress ("glWindowPos2iv");
    s_deviceConfig.m_glWindowPos2s = (PFNGLWINDOWPOS2SPROC) glewGetProcAddress ("glWindowPos2s");
    s_deviceConfig.m_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC) glewGetProcAddress ("glWindowPos2sv");
    s_deviceConfig.m_glWindowPos3d = (PFNGLWINDOWPOS3DPROC) glewGetProcAddress ("glWindowPos3d");
    s_deviceConfig.m_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC) glewGetProcAddress ("glWindowPos3dv");
    s_deviceConfig.m_glWindowPos3f = (PFNGLWINDOWPOS3FPROC) glewGetProcAddress ("glWindowPos3f");
    s_deviceConfig.m_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC) glewGetProcAddress ("glWindowPos3fv");
    s_deviceConfig.m_glWindowPos3i = (PFNGLWINDOWPOS3IPROC) glewGetProcAddress ("glWindowPos3i");
    s_deviceConfig.m_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC) glewGetProcAddress ("glWindowPos3iv");
    s_deviceConfig.m_glWindowPos3s = (PFNGLWINDOWPOS3SPROC) glewGetProcAddress ("glWindowPos3s");
    s_deviceConfig.m_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC) glewGetProcAddress ("glWindowPos3sv");
  }

  // GL_VERSION_1_4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_4])
  {
    s_deviceConfig.m_glBlendColor = (PFNGLBLENDCOLORPROC) glewGetProcAddress ("glBlendColor");
    s_deviceConfig.m_glBlendEquation = (PFNGLBLENDEQUATIONPROC) glewGetProcAddress ("glBlendEquation");
  }

  // GL_VERSION_1_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_1_5])
  {
    s_deviceConfig.m_glGenQueries = (PFNGLGENQUERIESPROC) glewGetProcAddress ("glGenQueries");
    s_deviceConfig.m_glDeleteQueries = (PFNGLDELETEQUERIESPROC) glewGetProcAddress ("glDeleteQueries");
    s_deviceConfig.m_glIsQuery = (PFNGLISQUERYPROC) glewGetProcAddress ("glIsQuery");
    s_deviceConfig.m_glBeginQuery = (PFNGLBEGINQUERYPROC) glewGetProcAddress ("glBeginQuery");
    s_deviceConfig.m_glEndQuery = (PFNGLENDQUERYPROC) glewGetProcAddress ("glEndQuery");
    s_deviceConfig.m_glGetQueryiv = (PFNGLGETQUERYIVPROC) glewGetProcAddress ("glGetQueryiv");
    s_deviceConfig.m_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) glewGetProcAddress ("glGetQueryObjectiv");
    s_deviceConfig.m_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) glewGetProcAddress ("glGetQueryObjectuiv");
    s_deviceConfig.m_glBindBuffer = (PFNGLBINDBUFFERPROC) glewGetProcAddress ("glBindBuffer");
    s_deviceConfig.m_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) glewGetProcAddress ("glDeleteBuffers");
    s_deviceConfig.m_glGenBuffers = (PFNGLGENBUFFERSPROC) glewGetProcAddress ("glGenBuffers");
    s_deviceConfig.m_glIsBuffer = (PFNGLISBUFFERPROC) glewGetProcAddress ("glIsBuffer");
    s_deviceConfig.m_glBufferData = (PFNGLBUFFERDATAPROC) glewGetProcAddress ("glBufferData");
    s_deviceConfig.m_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) glewGetProcAddress ("glBufferSubData");
    s_deviceConfig.m_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) glewGetProcAddress ("glGetBufferSubData");
    s_deviceConfig.m_glMapBuffer = (PFNGLMAPBUFFERPROC) glewGetProcAddress ("glMapBuffer");
    s_deviceConfig.m_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) glewGetProcAddress ("glUnmapBuffer");
    s_deviceConfig.m_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetBufferParameteriv");
    s_deviceConfig.m_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) glewGetProcAddress ("glGetBufferPointerv");
  }

  // GL_VERSION_2_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_2_0])
  {
    s_deviceConfig.m_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) glewGetProcAddress ("glBlendEquationSeparate");
    s_deviceConfig.m_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) glewGetProcAddress ("glDrawBuffers");
    s_deviceConfig.m_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) glewGetProcAddress ("glStencilOpSeparate");
    s_deviceConfig.m_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) glewGetProcAddress ("glStencilFuncSeparate");
    s_deviceConfig.m_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) glewGetProcAddress ("glStencilMaskSeparate");
    s_deviceConfig.m_glAttachShader = (PFNGLATTACHSHADERPROC) glewGetProcAddress ("glAttachShader");
    s_deviceConfig.m_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) glewGetProcAddress ("glBindAttribLocation");
    s_deviceConfig.m_glCompileShader = (PFNGLCOMPILESHADERPROC) glewGetProcAddress ("glCompileShader");
    s_deviceConfig.m_glCreateProgram = (PFNGLCREATEPROGRAMPROC) glewGetProcAddress ("glCreateProgram");
    s_deviceConfig.m_glCreateShader = (PFNGLCREATESHADERPROC) glewGetProcAddress ("glCreateShader");
    s_deviceConfig.m_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) glewGetProcAddress ("glDeleteProgram");
    s_deviceConfig.m_glDeleteShader = (PFNGLDELETESHADERPROC) glewGetProcAddress ("glDeleteShader");
    s_deviceConfig.m_glDetachShader = (PFNGLDETACHSHADERPROC) glewGetProcAddress ("glDetachShader");
    s_deviceConfig.m_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) glewGetProcAddress ("glDisableVertexAttribArray");
    s_deviceConfig.m_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) glewGetProcAddress ("glEnableVertexAttribArray");
    s_deviceConfig.m_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) glewGetProcAddress ("glGetActiveAttrib");
    s_deviceConfig.m_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) glewGetProcAddress ("glGetActiveUniform");
    s_deviceConfig.m_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) glewGetProcAddress ("glGetAttachedShaders");
    s_deviceConfig.m_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) glewGetProcAddress ("glGetAttribLocation");
    s_deviceConfig.m_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) glewGetProcAddress ("glGetProgramiv");
    s_deviceConfig.m_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) glewGetProcAddress ("glGetProgramInfoLog");
    s_deviceConfig.m_glGetShaderiv = (PFNGLGETSHADERIVPROC) glewGetProcAddress ("glGetShaderiv");
    s_deviceConfig.m_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) glewGetProcAddress ("glGetShaderInfoLog");
    s_deviceConfig.m_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) glewGetProcAddress ("glGetShaderSource");
    s_deviceConfig.m_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) glewGetProcAddress ("glGetUniformLocation");
    s_deviceConfig.m_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) glewGetProcAddress ("glGetUniformfv");
    s_deviceConfig.m_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) glewGetProcAddress ("glGetUniformiv");
    s_deviceConfig.m_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) glewGetProcAddress ("glGetVertexAttribdv");
    s_deviceConfig.m_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) glewGetProcAddress ("glGetVertexAttribfv");
    s_deviceConfig.m_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) glewGetProcAddress ("glGetVertexAttribiv");
    s_deviceConfig.m_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) glewGetProcAddress ("glGetVertexAttribPointerv");
    s_deviceConfig.m_glIsProgram = (PFNGLISPROGRAMPROC) glewGetProcAddress ("glIsProgram");
    s_deviceConfig.m_glIsShader = (PFNGLISSHADERPROC) glewGetProcAddress ("glIsShader");
    s_deviceConfig.m_glLinkProgram = (PFNGLLINKPROGRAMPROC) glewGetProcAddress ("glLinkProgram");
    s_deviceConfig.m_glShaderSource = (PFNGLSHADERSOURCEPROC) glewGetProcAddress ("glShaderSource");
    s_deviceConfig.m_glUseProgram = (PFNGLUSEPROGRAMPROC) glewGetProcAddress ("glUseProgram");
    s_deviceConfig.m_glUniform1f = (PFNGLUNIFORM1FPROC) glewGetProcAddress ("glUniform1f");
    s_deviceConfig.m_glUniform2f = (PFNGLUNIFORM2FPROC) glewGetProcAddress ("glUniform2f");
    s_deviceConfig.m_glUniform3f = (PFNGLUNIFORM3FPROC) glewGetProcAddress ("glUniform3f");
    s_deviceConfig.m_glUniform4f = (PFNGLUNIFORM4FPROC) glewGetProcAddress ("glUniform4f");
    s_deviceConfig.m_glUniform1i = (PFNGLUNIFORM1IPROC) glewGetProcAddress ("glUniform1i");
    s_deviceConfig.m_glUniform2i = (PFNGLUNIFORM2IPROC) glewGetProcAddress ("glUniform2i");
    s_deviceConfig.m_glUniform3i = (PFNGLUNIFORM3IPROC) glewGetProcAddress ("glUniform3i");
    s_deviceConfig.m_glUniform4i = (PFNGLUNIFORM4IPROC) glewGetProcAddress ("glUniform4i");
    s_deviceConfig.m_glUniform1fv = (PFNGLUNIFORM1FVPROC) glewGetProcAddress ("glUniform1fv");
    s_deviceConfig.m_glUniform2fv = (PFNGLUNIFORM2FVPROC) glewGetProcAddress ("glUniform2fv");
    s_deviceConfig.m_glUniform3fv = (PFNGLUNIFORM3FVPROC) glewGetProcAddress ("glUniform3fv");
    s_deviceConfig.m_glUniform4fv = (PFNGLUNIFORM4FVPROC) glewGetProcAddress ("glUniform4fv");
    s_deviceConfig.m_glUniform1iv = (PFNGLUNIFORM1IVPROC) glewGetProcAddress ("glUniform1iv");
    s_deviceConfig.m_glUniform2iv = (PFNGLUNIFORM2IVPROC) glewGetProcAddress ("glUniform2iv");
    s_deviceConfig.m_glUniform3iv = (PFNGLUNIFORM3IVPROC) glewGetProcAddress ("glUniform3iv");
    s_deviceConfig.m_glUniform4iv = (PFNGLUNIFORM4IVPROC) glewGetProcAddress ("glUniform4iv");
    s_deviceConfig.m_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) glewGetProcAddress ("glUniformMatrix2fv");
    s_deviceConfig.m_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) glewGetProcAddress ("glUniformMatrix3fv");
    s_deviceConfig.m_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) glewGetProcAddress ("glUniformMatrix4fv");
    s_deviceConfig.m_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) glewGetProcAddress ("glValidateProgram");
    s_deviceConfig.m_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) glewGetProcAddress ("glVertexAttrib1d");
    s_deviceConfig.m_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) glewGetProcAddress ("glVertexAttrib1dv");
    s_deviceConfig.m_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) glewGetProcAddress ("glVertexAttrib1f");
    s_deviceConfig.m_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) glewGetProcAddress ("glVertexAttrib1fv");
    s_deviceConfig.m_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) glewGetProcAddress ("glVertexAttrib1s");
    s_deviceConfig.m_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) glewGetProcAddress ("glVertexAttrib1sv");
    s_deviceConfig.m_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) glewGetProcAddress ("glVertexAttrib2d");
    s_deviceConfig.m_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) glewGetProcAddress ("glVertexAttrib2dv");
    s_deviceConfig.m_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) glewGetProcAddress ("glVertexAttrib2f");
    s_deviceConfig.m_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) glewGetProcAddress ("glVertexAttrib2fv");
    s_deviceConfig.m_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) glewGetProcAddress ("glVertexAttrib2s");
    s_deviceConfig.m_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) glewGetProcAddress ("glVertexAttrib2sv");
    s_deviceConfig.m_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) glewGetProcAddress ("glVertexAttrib3d");
    s_deviceConfig.m_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) glewGetProcAddress ("glVertexAttrib3dv");
    s_deviceConfig.m_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) glewGetProcAddress ("glVertexAttrib3f");
    s_deviceConfig.m_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) glewGetProcAddress ("glVertexAttrib3fv");
    s_deviceConfig.m_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) glewGetProcAddress ("glVertexAttrib3s");
    s_deviceConfig.m_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) glewGetProcAddress ("glVertexAttrib3sv");
    s_deviceConfig.m_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) glewGetProcAddress ("glVertexAttrib4Nbv");
    s_deviceConfig.m_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) glewGetProcAddress ("glVertexAttrib4Niv");
    s_deviceConfig.m_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) glewGetProcAddress ("glVertexAttrib4Nsv");
    s_deviceConfig.m_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) glewGetProcAddress ("glVertexAttrib4Nub");
    s_deviceConfig.m_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) glewGetProcAddress ("glVertexAttrib4Nubv");
    s_deviceConfig.m_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) glewGetProcAddress ("glVertexAttrib4Nuiv");
    s_deviceConfig.m_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) glewGetProcAddress ("glVertexAttrib4Nusv");
    s_deviceConfig.m_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) glewGetProcAddress ("glVertexAttrib4bv");
    s_deviceConfig.m_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) glewGetProcAddress ("glVertexAttrib4d");
    s_deviceConfig.m_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) glewGetProcAddress ("glVertexAttrib4dv");
    s_deviceConfig.m_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) glewGetProcAddress ("glVertexAttrib4f");
    s_deviceConfig.m_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) glewGetProcAddress ("glVertexAttrib4fv");
    s_deviceConfig.m_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) glewGetProcAddress ("glVertexAttrib4iv");
    s_deviceConfig.m_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) glewGetProcAddress ("glVertexAttrib4s");
    s_deviceConfig.m_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) glewGetProcAddress ("glVertexAttrib4sv");
    s_deviceConfig.m_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) glewGetProcAddress ("glVertexAttrib4ubv");
    s_deviceConfig.m_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) glewGetProcAddress ("glVertexAttrib4uiv");
    s_deviceConfig.m_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) glewGetProcAddress ("glVertexAttrib4usv");
    s_deviceConfig.m_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) glewGetProcAddress ("glVertexAttribPointer");
  }

  // GL_VERSION_2_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_2_1])
  {
    s_deviceConfig.m_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) glewGetProcAddress ("glUniformMatrix2x3fv");
    s_deviceConfig.m_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) glewGetProcAddress ("glUniformMatrix3x2fv");
    s_deviceConfig.m_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) glewGetProcAddress ("glUniformMatrix2x4fv");
    s_deviceConfig.m_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) glewGetProcAddress ("glUniformMatrix4x2fv");
    s_deviceConfig.m_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) glewGetProcAddress ("glUniformMatrix3x4fv");
    s_deviceConfig.m_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) glewGetProcAddress ("glUniformMatrix4x3fv");
  }

  // GL_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_0])
  {
    s_deviceConfig.m_glColorMaski = (PFNGLCOLORMASKIPROC) glewGetProcAddress ("glColorMaski");
    s_deviceConfig.m_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) glewGetProcAddress ("glGetBooleani_v");
    s_deviceConfig.m_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glewGetProcAddress ("glGetIntegeri_v");
    s_deviceConfig.m_glEnablei = (PFNGLENABLEIPROC) glewGetProcAddress ("glEnablei");
    s_deviceConfig.m_glDisablei = (PFNGLDISABLEIPROC) glewGetProcAddress ("glDisablei");
    s_deviceConfig.m_glIsEnabledi = (PFNGLISENABLEDIPROC) glewGetProcAddress ("glIsEnabledi");
    s_deviceConfig.m_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glBeginTransformFeedback");
    s_deviceConfig.m_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glEndTransformFeedback");
    s_deviceConfig.m_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glewGetProcAddress ("glBindBufferRange");
    s_deviceConfig.m_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glewGetProcAddress ("glBindBufferBase");
    s_deviceConfig.m_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) glewGetProcAddress ("glTransformFeedbackVaryings");
    s_deviceConfig.m_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) glewGetProcAddress ("glGetTransformFeedbackVarying");
    s_deviceConfig.m_glClampColor = (PFNGLCLAMPCOLORPROC) glewGetProcAddress ("glClampColor");
    s_deviceConfig.m_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) glewGetProcAddress ("glBeginConditionalRender");
    s_deviceConfig.m_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) glewGetProcAddress ("glEndConditionalRender");
    s_deviceConfig.m_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) glewGetProcAddress ("glVertexAttribIPointer");
    s_deviceConfig.m_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) glewGetProcAddress ("glGetVertexAttribIiv");
    s_deviceConfig.m_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) glewGetProcAddress ("glGetVertexAttribIuiv");
    s_deviceConfig.m_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) glewGetProcAddress ("glVertexAttribI1i");
    s_deviceConfig.m_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) glewGetProcAddress ("glVertexAttribI2i");
    s_deviceConfig.m_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) glewGetProcAddress ("glVertexAttribI3i");
    s_deviceConfig.m_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) glewGetProcAddress ("glVertexAttribI4i");
    s_deviceConfig.m_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) glewGetProcAddress ("glVertexAttribI1ui");
    s_deviceConfig.m_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) glewGetProcAddress ("glVertexAttribI2ui");
    s_deviceConfig.m_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) glewGetProcAddress ("glVertexAttribI3ui");
    s_deviceConfig.m_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) glewGetProcAddress ("glVertexAttribI4ui");
    s_deviceConfig.m_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) glewGetProcAddress ("glVertexAttribI1iv");
    s_deviceConfig.m_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) glewGetProcAddress ("glVertexAttribI2iv");
    s_deviceConfig.m_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) glewGetProcAddress ("glVertexAttribI3iv");
    s_deviceConfig.m_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) glewGetProcAddress ("glVertexAttribI4iv");
    s_deviceConfig.m_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) glewGetProcAddress ("glVertexAttribI1uiv");
    s_deviceConfig.m_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) glewGetProcAddress ("glVertexAttribI2uiv");
    s_deviceConfig.m_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) glewGetProcAddress ("glVertexAttribI3uiv");
    s_deviceConfig.m_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) glewGetProcAddress ("glVertexAttribI4uiv");
    s_deviceConfig.m_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) glewGetProcAddress ("glVertexAttribI4bv");
    s_deviceConfig.m_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) glewGetProcAddress ("glVertexAttribI4sv");
    s_deviceConfig.m_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) glewGetProcAddress ("glVertexAttribI4ubv");
    s_deviceConfig.m_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) glewGetProcAddress ("glVertexAttribI4usv");
    s_deviceConfig.m_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) glewGetProcAddress ("glGetUniformuiv");
    s_deviceConfig.m_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) glewGetProcAddress ("glBindFragDataLocation");
    s_deviceConfig.m_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) glewGetProcAddress ("glGetFragDataLocation");
    s_deviceConfig.m_glUniform1ui = (PFNGLUNIFORM1UIPROC) glewGetProcAddress ("glUniform1ui");
    s_deviceConfig.m_glUniform2ui = (PFNGLUNIFORM2UIPROC) glewGetProcAddress ("glUniform2ui");
    s_deviceConfig.m_glUniform3ui = (PFNGLUNIFORM3UIPROC) glewGetProcAddress ("glUniform3ui");
    s_deviceConfig.m_glUniform4ui = (PFNGLUNIFORM4UIPROC) glewGetProcAddress ("glUniform4ui");
    s_deviceConfig.m_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) glewGetProcAddress ("glUniform1uiv");
    s_deviceConfig.m_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) glewGetProcAddress ("glUniform2uiv");
    s_deviceConfig.m_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) glewGetProcAddress ("glUniform3uiv");
    s_deviceConfig.m_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) glewGetProcAddress ("glUniform4uiv");
    s_deviceConfig.m_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) glewGetProcAddress ("glTexParameterIiv");
    s_deviceConfig.m_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) glewGetProcAddress ("glTexParameterIuiv");
    s_deviceConfig.m_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) glewGetProcAddress ("glGetTexParameterIiv");
    s_deviceConfig.m_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) glewGetProcAddress ("glGetTexParameterIuiv");
    s_deviceConfig.m_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) glewGetProcAddress ("glClearBufferiv");
    s_deviceConfig.m_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) glewGetProcAddress ("glClearBufferuiv");
    s_deviceConfig.m_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) glewGetProcAddress ("glClearBufferfv");
    s_deviceConfig.m_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) glewGetProcAddress ("glClearBufferfi");
    s_deviceConfig.m_glGetStringi = (PFNGLGETSTRINGIPROC) glewGetProcAddress ("glGetStringi");
  }

  // GL_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_0])
  {
    s_deviceConfig.m_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) glewGetProcAddress ("glIsRenderbuffer");
    s_deviceConfig.m_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) glewGetProcAddress ("glBindRenderbuffer");
    s_deviceConfig.m_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) glewGetProcAddress ("glDeleteRenderbuffers");
    s_deviceConfig.m_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) glewGetProcAddress ("glGenRenderbuffers");
    s_deviceConfig.m_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) glewGetProcAddress ("glRenderbufferStorage");
    s_deviceConfig.m_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetRenderbufferParameteriv");
    s_deviceConfig.m_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) glewGetProcAddress ("glIsFramebuffer");
    s_deviceConfig.m_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) glewGetProcAddress ("glBindFramebuffer");
    s_deviceConfig.m_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) glewGetProcAddress ("glDeleteFramebuffers");
    s_deviceConfig.m_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) glewGetProcAddress ("glGenFramebuffers");
    s_deviceConfig.m_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) glewGetProcAddress ("glCheckFramebufferStatus");
    s_deviceConfig.m_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) glewGetProcAddress ("glFramebufferTexture1D");
    s_deviceConfig.m_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) glewGetProcAddress ("glFramebufferTexture2D");
    s_deviceConfig.m_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) glewGetProcAddress ("glFramebufferTexture3D");
    s_deviceConfig.m_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) glewGetProcAddress ("glFramebufferRenderbuffer");
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glewGetProcAddress ("glGetFramebufferAttachmentParameteriv");
    s_deviceConfig.m_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) glewGetProcAddress ("glGenerateMipmap");
    s_deviceConfig.m_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) glewGetProcAddress ("glBlitFramebuffer");
    s_deviceConfig.m_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) glewGetProcAddress ("glRenderbufferStorageMultisample");
    s_deviceConfig.m_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) glewGetProcAddress ("glFramebufferTextureLayer");
  }

  // GL_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_0])
  {
    s_deviceConfig.m_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) glewGetProcAddress ("glMapBufferRange");
    s_deviceConfig.m_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) glewGetProcAddress ("glFlushMappedBufferRange");
  }

  // GL_VERSION_3_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_0])
  {
    s_deviceConfig.m_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) glewGetProcAddress ("glBindVertexArray");
    s_deviceConfig.m_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) glewGetProcAddress ("glDeleteVertexArrays");
    s_deviceConfig.m_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) glewGetProcAddress ("glGenVertexArrays");
    s_deviceConfig.m_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) glewGetProcAddress ("glIsVertexArray");
  }

  // GL_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_1])
  {
    s_deviceConfig.m_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) glewGetProcAddress ("glDrawArraysInstanced");
    s_deviceConfig.m_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) glewGetProcAddress ("glDrawElementsInstanced");
    s_deviceConfig.m_glTexBuffer = (PFNGLTEXBUFFERPROC) glewGetProcAddress ("glTexBuffer");
    s_deviceConfig.m_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) glewGetProcAddress ("glPrimitiveRestartIndex");
  }

  // GL_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_1])
  {
    s_deviceConfig.m_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) glewGetProcAddress ("glCopyBufferSubData");
  }

  // GL_VERSION_3_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_1])
  {
    s_deviceConfig.m_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) glewGetProcAddress ("glGetUniformIndices");
    s_deviceConfig.m_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) glewGetProcAddress ("glGetActiveUniformsiv");
    s_deviceConfig.m_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) glewGetProcAddress ("glGetActiveUniformName");
    s_deviceConfig.m_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) glewGetProcAddress ("glGetUniformBlockIndex");
    s_deviceConfig.m_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) glewGetProcAddress ("glGetActiveUniformBlockiv");
    s_deviceConfig.m_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) glewGetProcAddress ("glGetActiveUniformBlockName");
    s_deviceConfig.m_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) glewGetProcAddress ("glUniformBlockBinding");
    s_deviceConfig.m_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glewGetProcAddress ("glBindBufferRange");
    s_deviceConfig.m_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glewGetProcAddress ("glBindBufferBase");
    s_deviceConfig.m_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glewGetProcAddress ("glGetIntegeri_v");
  }

  // GL_VERSION_3_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_2])
  {
    s_deviceConfig.m_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glDrawElementsBaseVertex");
    s_deviceConfig.m_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glDrawRangeElementsBaseVertex");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertex");
    s_deviceConfig.m_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glMultiDrawElementsBaseVertex");
  }

  // GL_VERSION_3_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_2])
  {
    s_deviceConfig.m_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) glewGetProcAddress ("glProvokingVertex");
  }

  // GL_VERSION_3_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_2])
  {
    s_deviceConfig.m_glFenceSync = (PFNGLFENCESYNCPROC) glewGetProcAddress ("glFenceSync");
    s_deviceConfig.m_glIsSync = (PFNGLISSYNCPROC) glewGetProcAddress ("glIsSync");
    s_deviceConfig.m_glDeleteSync = (PFNGLDELETESYNCPROC) glewGetProcAddress ("glDeleteSync");
    s_deviceConfig.m_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) glewGetProcAddress ("glClientWaitSync");
    s_deviceConfig.m_glWaitSync = (PFNGLWAITSYNCPROC) glewGetProcAddress ("glWaitSync");
    s_deviceConfig.m_glGetInteger64v = (PFNGLGETINTEGER64VPROC) glewGetProcAddress ("glGetInteger64v");
    s_deviceConfig.m_glGetSynciv = (PFNGLGETSYNCIVPROC) glewGetProcAddress ("glGetSynciv");
  }

  // GL_VERSION_3_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_2])
  {
    s_deviceConfig.m_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) glewGetProcAddress ("glGetInteger64i_v");
    s_deviceConfig.m_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) glewGetProcAddress ("glGetBufferParameteri64v");
    s_deviceConfig.m_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) glewGetProcAddress ("glFramebufferTexture");
    s_deviceConfig.m_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTexImage2DMultisample");
    s_deviceConfig.m_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTexImage3DMultisample");
    s_deviceConfig.m_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) glewGetProcAddress ("glGetMultisamplefv");
    s_deviceConfig.m_glSampleMaski = (PFNGLSAMPLEMASKIPROC) glewGetProcAddress ("glSampleMaski");
  }

  // GL_VERSION_3_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3])
  {
    s_deviceConfig.m_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) glewGetProcAddress ("glBindFragDataLocationIndexed");
    s_deviceConfig.m_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) glewGetProcAddress ("glGetFragDataIndex");
  }

  // GL_VERSION_3_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3])
  {
    s_deviceConfig.m_glGenSamplers = (PFNGLGENSAMPLERSPROC) glewGetProcAddress ("glGenSamplers");
    s_deviceConfig.m_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) glewGetProcAddress ("glDeleteSamplers");
    s_deviceConfig.m_glIsSampler = (PFNGLISSAMPLERPROC) glewGetProcAddress ("glIsSampler");
    s_deviceConfig.m_glBindSampler = (PFNGLBINDSAMPLERPROC) glewGetProcAddress ("glBindSampler");
    s_deviceConfig.m_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) glewGetProcAddress ("glSamplerParameteri");
    s_deviceConfig.m_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glSamplerParameteriv");
    s_deviceConfig.m_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) glewGetProcAddress ("glSamplerParameterf");
    s_deviceConfig.m_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glSamplerParameterfv");
    s_deviceConfig.m_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) glewGetProcAddress ("glSamplerParameterIiv");
    s_deviceConfig.m_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) glewGetProcAddress ("glSamplerParameterIuiv");
    s_deviceConfig.m_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glGetSamplerParameteriv");
    s_deviceConfig.m_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) glewGetProcAddress ("glGetSamplerParameterIiv");
    s_deviceConfig.m_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glGetSamplerParameterfv");
    s_deviceConfig.m_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) glewGetProcAddress ("glGetSamplerParameterIuiv");
  }

  // GL_VERSION_3_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3])
  {
    s_deviceConfig.m_glQueryCounter = (PFNGLQUERYCOUNTERPROC) glewGetProcAddress ("glQueryCounter");
    s_deviceConfig.m_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) glewGetProcAddress ("glGetQueryObjecti64v");
    s_deviceConfig.m_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) glewGetProcAddress ("glGetQueryObjectui64v");
  }

  // GL_VERSION_3_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3])
  {
    s_deviceConfig.m_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) glewGetProcAddress ("glVertexAttribDivisor");
    s_deviceConfig.m_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) glewGetProcAddress ("glVertexAttribP1ui");
    s_deviceConfig.m_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) glewGetProcAddress ("glVertexAttribP1uiv");
    s_deviceConfig.m_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) glewGetProcAddress ("glVertexAttribP2ui");
    s_deviceConfig.m_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) glewGetProcAddress ("glVertexAttribP2uiv");
    s_deviceConfig.m_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) glewGetProcAddress ("glVertexAttribP3ui");
    s_deviceConfig.m_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) glewGetProcAddress ("glVertexAttribP3uiv");
    s_deviceConfig.m_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) glewGetProcAddress ("glVertexAttribP4ui");
    s_deviceConfig.m_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) glewGetProcAddress ("glVertexAttribP4uiv");
  }

  // GL_VERSION_3_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_3_3])
  {
    s_deviceConfig.m_glVertexP2ui = (PFNGLVERTEXP2UIPROC) glewGetProcAddress ("glVertexP2ui");
    s_deviceConfig.m_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) glewGetProcAddress ("glVertexP2uiv");
    s_deviceConfig.m_glVertexP3ui = (PFNGLVERTEXP3UIPROC) glewGetProcAddress ("glVertexP3ui");
    s_deviceConfig.m_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) glewGetProcAddress ("glVertexP3uiv");
    s_deviceConfig.m_glVertexP4ui = (PFNGLVERTEXP4UIPROC) glewGetProcAddress ("glVertexP4ui");
    s_deviceConfig.m_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) glewGetProcAddress ("glVertexP4uiv");
    s_deviceConfig.m_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) glewGetProcAddress ("glTexCoordP1ui");
    s_deviceConfig.m_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) glewGetProcAddress ("glTexCoordP1uiv");
    s_deviceConfig.m_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) glewGetProcAddress ("glTexCoordP2ui");
    s_deviceConfig.m_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) glewGetProcAddress ("glTexCoordP2uiv");
    s_deviceConfig.m_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) glewGetProcAddress ("glTexCoordP3ui");
    s_deviceConfig.m_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) glewGetProcAddress ("glTexCoordP3uiv");
    s_deviceConfig.m_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) glewGetProcAddress ("glTexCoordP4ui");
    s_deviceConfig.m_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) glewGetProcAddress ("glTexCoordP4uiv");
    s_deviceConfig.m_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) glewGetProcAddress ("glMultiTexCoordP1ui");
    s_deviceConfig.m_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) glewGetProcAddress ("glMultiTexCoordP1uiv");
    s_deviceConfig.m_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) glewGetProcAddress ("glMultiTexCoordP2ui");
    s_deviceConfig.m_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) glewGetProcAddress ("glMultiTexCoordP2uiv");
    s_deviceConfig.m_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) glewGetProcAddress ("glMultiTexCoordP3ui");
    s_deviceConfig.m_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) glewGetProcAddress ("glMultiTexCoordP3uiv");
    s_deviceConfig.m_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) glewGetProcAddress ("glMultiTexCoordP4ui");
    s_deviceConfig.m_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) glewGetProcAddress ("glMultiTexCoordP4uiv");
    s_deviceConfig.m_glNormalP3ui = (PFNGLNORMALP3UIPROC) glewGetProcAddress ("glNormalP3ui");
    s_deviceConfig.m_glNormalP3uiv = (PFNGLNORMALP3UIVPROC) glewGetProcAddress ("glNormalP3uiv");
    s_deviceConfig.m_glColorP3ui = (PFNGLCOLORP3UIPROC) glewGetProcAddress ("glColorP3ui");
    s_deviceConfig.m_glColorP3uiv = (PFNGLCOLORP3UIVPROC) glewGetProcAddress ("glColorP3uiv");
    s_deviceConfig.m_glColorP4ui = (PFNGLCOLORP4UIPROC) glewGetProcAddress ("glColorP4ui");
    s_deviceConfig.m_glColorP4uiv = (PFNGLCOLORP4UIVPROC) glewGetProcAddress ("glColorP4uiv");
    s_deviceConfig.m_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) glewGetProcAddress ("glSecondaryColorP3ui");
    s_deviceConfig.m_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) glewGetProcAddress ("glSecondaryColorP3uiv");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) glewGetProcAddress ("glMinSampleShading");
    s_deviceConfig.m_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) glewGetProcAddress ("glBlendEquationi");
    s_deviceConfig.m_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) glewGetProcAddress ("glBlendEquationSeparatei");
    s_deviceConfig.m_glBlendFunci = (PFNGLBLENDFUNCIPROC) glewGetProcAddress ("glBlendFunci");
    s_deviceConfig.m_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) glewGetProcAddress ("glBlendFuncSeparatei");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) glewGetProcAddress ("glDrawArraysIndirect");
    s_deviceConfig.m_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) glewGetProcAddress ("glDrawElementsIndirect");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glUniform1d = (PFNGLUNIFORM1DPROC) glewGetProcAddress ("glUniform1d");
    s_deviceConfig.m_glUniform2d = (PFNGLUNIFORM2DPROC) glewGetProcAddress ("glUniform2d");
    s_deviceConfig.m_glUniform3d = (PFNGLUNIFORM3DPROC) glewGetProcAddress ("glUniform3d");
    s_deviceConfig.m_glUniform4d = (PFNGLUNIFORM4DPROC) glewGetProcAddress ("glUniform4d");
    s_deviceConfig.m_glUniform1dv = (PFNGLUNIFORM1DVPROC) glewGetProcAddress ("glUniform1dv");
    s_deviceConfig.m_glUniform2dv = (PFNGLUNIFORM2DVPROC) glewGetProcAddress ("glUniform2dv");
    s_deviceConfig.m_glUniform3dv = (PFNGLUNIFORM3DVPROC) glewGetProcAddress ("glUniform3dv");
    s_deviceConfig.m_glUniform4dv = (PFNGLUNIFORM4DVPROC) glewGetProcAddress ("glUniform4dv");
    s_deviceConfig.m_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) glewGetProcAddress ("glUniformMatrix2dv");
    s_deviceConfig.m_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) glewGetProcAddress ("glUniformMatrix3dv");
    s_deviceConfig.m_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) glewGetProcAddress ("glUniformMatrix4dv");
    s_deviceConfig.m_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) glewGetProcAddress ("glUniformMatrix2x3dv");
    s_deviceConfig.m_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) glewGetProcAddress ("glUniformMatrix2x4dv");
    s_deviceConfig.m_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) glewGetProcAddress ("glUniformMatrix3x2dv");
    s_deviceConfig.m_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) glewGetProcAddress ("glUniformMatrix3x4dv");
    s_deviceConfig.m_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) glewGetProcAddress ("glUniformMatrix4x2dv");
    s_deviceConfig.m_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) glewGetProcAddress ("glUniformMatrix4x3dv");
    s_deviceConfig.m_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) glewGetProcAddress ("glGetUniformdv");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) glewGetProcAddress ("glGetSubroutineUniformLocation");
    s_deviceConfig.m_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) glewGetProcAddress ("glGetSubroutineIndex");
    s_deviceConfig.m_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) glewGetProcAddress ("glGetActiveSubroutineUniformiv");
    s_deviceConfig.m_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) glewGetProcAddress ("glGetActiveSubroutineUniformName");
    s_deviceConfig.m_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) glewGetProcAddress ("glGetActiveSubroutineName");
    s_deviceConfig.m_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) glewGetProcAddress ("glUniformSubroutinesuiv");
    s_deviceConfig.m_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) glewGetProcAddress ("glGetUniformSubroutineuiv");
    s_deviceConfig.m_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) glewGetProcAddress ("glGetProgramStageiv");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) glewGetProcAddress ("glPatchParameteri");
    s_deviceConfig.m_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) glewGetProcAddress ("glPatchParameterfv");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glBindTransformFeedback");
    s_deviceConfig.m_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glDeleteTransformFeedbacks");
    s_deviceConfig.m_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glGenTransformFeedbacks");
    s_deviceConfig.m_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glIsTransformFeedback");
    s_deviceConfig.m_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glPauseTransformFeedback");
    s_deviceConfig.m_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glResumeTransformFeedback");
    s_deviceConfig.m_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glDrawTransformFeedback");
  }

  // GL_VERSION_4_0
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_0])
  {
    s_deviceConfig.m_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) glewGetProcAddress ("glDrawTransformFeedbackStream");
    s_deviceConfig.m_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) glewGetProcAddress ("glBeginQueryIndexed");
    s_deviceConfig.m_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) glewGetProcAddress ("glEndQueryIndexed");
    s_deviceConfig.m_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) glewGetProcAddress ("glGetQueryIndexediv");
  }

  // GL_VERSION_4_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1])
  {
    s_deviceConfig.m_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) glewGetProcAddress ("glReleaseShaderCompiler");
    s_deviceConfig.m_glShaderBinary = (PFNGLSHADERBINARYPROC) glewGetProcAddress ("glShaderBinary");
    s_deviceConfig.m_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) glewGetProcAddress ("glGetShaderPrecisionFormat");
    s_deviceConfig.m_glDepthRangef = (PFNGLDEPTHRANGEFPROC) glewGetProcAddress ("glDepthRangef");
    s_deviceConfig.m_glClearDepthf = (PFNGLCLEARDEPTHFPROC) glewGetProcAddress ("glClearDepthf");
  }

  // GL_VERSION_4_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1])
  {
    s_deviceConfig.m_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) glewGetProcAddress ("glGetProgramBinary");
    s_deviceConfig.m_glProgramBinary = (PFNGLPROGRAMBINARYPROC) glewGetProcAddress ("glProgramBinary");
    s_deviceConfig.m_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) glewGetProcAddress ("glProgramParameteri");
  }

  // GL_VERSION_4_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1])
  {
    s_deviceConfig.m_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) glewGetProcAddress ("glUseProgramStages");
    s_deviceConfig.m_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) glewGetProcAddress ("glActiveShaderProgram");
    s_deviceConfig.m_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) glewGetProcAddress ("glCreateShaderProgramv");
    s_deviceConfig.m_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) glewGetProcAddress ("glBindProgramPipeline");
    s_deviceConfig.m_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) glewGetProcAddress ("glDeleteProgramPipelines");
    s_deviceConfig.m_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) glewGetProcAddress ("glGenProgramPipelines");
    s_deviceConfig.m_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) glewGetProcAddress ("glIsProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) glewGetProcAddress ("glGetProgramPipelineiv");
    s_deviceConfig.m_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) glewGetProcAddress ("glProgramUniform1i");
    s_deviceConfig.m_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) glewGetProcAddress ("glProgramUniform1iv");
    s_deviceConfig.m_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) glewGetProcAddress ("glProgramUniform1f");
    s_deviceConfig.m_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) glewGetProcAddress ("glProgramUniform1fv");
    s_deviceConfig.m_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) glewGetProcAddress ("glProgramUniform1d");
    s_deviceConfig.m_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) glewGetProcAddress ("glProgramUniform1dv");
    s_deviceConfig.m_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) glewGetProcAddress ("glProgramUniform1ui");
    s_deviceConfig.m_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) glewGetProcAddress ("glProgramUniform1uiv");
    s_deviceConfig.m_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) glewGetProcAddress ("glProgramUniform2i");
    s_deviceConfig.m_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) glewGetProcAddress ("glProgramUniform2iv");
    s_deviceConfig.m_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) glewGetProcAddress ("glProgramUniform2f");
    s_deviceConfig.m_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) glewGetProcAddress ("glProgramUniform2fv");
    s_deviceConfig.m_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) glewGetProcAddress ("glProgramUniform2d");
    s_deviceConfig.m_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) glewGetProcAddress ("glProgramUniform2dv");
    s_deviceConfig.m_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) glewGetProcAddress ("glProgramUniform2ui");
    s_deviceConfig.m_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) glewGetProcAddress ("glProgramUniform2uiv");
    s_deviceConfig.m_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) glewGetProcAddress ("glProgramUniform3i");
    s_deviceConfig.m_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) glewGetProcAddress ("glProgramUniform3iv");
    s_deviceConfig.m_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) glewGetProcAddress ("glProgramUniform3f");
    s_deviceConfig.m_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) glewGetProcAddress ("glProgramUniform3fv");
    s_deviceConfig.m_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) glewGetProcAddress ("glProgramUniform3d");
    s_deviceConfig.m_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) glewGetProcAddress ("glProgramUniform3dv");
    s_deviceConfig.m_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) glewGetProcAddress ("glProgramUniform3ui");
    s_deviceConfig.m_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) glewGetProcAddress ("glProgramUniform3uiv");
    s_deviceConfig.m_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) glewGetProcAddress ("glProgramUniform4i");
    s_deviceConfig.m_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) glewGetProcAddress ("glProgramUniform4iv");
    s_deviceConfig.m_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) glewGetProcAddress ("glProgramUniform4f");
    s_deviceConfig.m_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) glewGetProcAddress ("glProgramUniform4fv");
    s_deviceConfig.m_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) glewGetProcAddress ("glProgramUniform4d");
    s_deviceConfig.m_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) glewGetProcAddress ("glProgramUniform4dv");
    s_deviceConfig.m_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) glewGetProcAddress ("glProgramUniform4ui");
    s_deviceConfig.m_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) glewGetProcAddress ("glProgramUniform4uiv");
    s_deviceConfig.m_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) glewGetProcAddress ("glProgramUniformMatrix2fv");
    s_deviceConfig.m_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) glewGetProcAddress ("glProgramUniformMatrix3fv");
    s_deviceConfig.m_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) glewGetProcAddress ("glProgramUniformMatrix4fv");
    s_deviceConfig.m_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) glewGetProcAddress ("glProgramUniformMatrix2dv");
    s_deviceConfig.m_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) glewGetProcAddress ("glProgramUniformMatrix3dv");
    s_deviceConfig.m_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) glewGetProcAddress ("glProgramUniformMatrix4dv");
    s_deviceConfig.m_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x3fv");
    s_deviceConfig.m_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x2fv");
    s_deviceConfig.m_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x2fv");
    s_deviceConfig.m_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x3fv");
    s_deviceConfig.m_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) glewGetProcAddress ("glProgramUniformMatrix2x3dv");
    s_deviceConfig.m_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) glewGetProcAddress ("glProgramUniformMatrix3x2dv");
    s_deviceConfig.m_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) glewGetProcAddress ("glProgramUniformMatrix2x4dv");
    s_deviceConfig.m_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) glewGetProcAddress ("glProgramUniformMatrix4x2dv");
    s_deviceConfig.m_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) glewGetProcAddress ("glProgramUniformMatrix3x4dv");
    s_deviceConfig.m_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) glewGetProcAddress ("glProgramUniformMatrix4x3dv");
    s_deviceConfig.m_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) glewGetProcAddress ("glValidateProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) glewGetProcAddress ("glGetProgramPipelineInfoLog");
  }

  // GL_VERSION_4_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1])
  {
    s_deviceConfig.m_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) glewGetProcAddress ("glVertexAttribL1d");
    s_deviceConfig.m_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) glewGetProcAddress ("glVertexAttribL2d");
    s_deviceConfig.m_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) glewGetProcAddress ("glVertexAttribL3d");
    s_deviceConfig.m_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) glewGetProcAddress ("glVertexAttribL4d");
    s_deviceConfig.m_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) glewGetProcAddress ("glVertexAttribL1dv");
    s_deviceConfig.m_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) glewGetProcAddress ("glVertexAttribL2dv");
    s_deviceConfig.m_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) glewGetProcAddress ("glVertexAttribL3dv");
    s_deviceConfig.m_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) glewGetProcAddress ("glVertexAttribL4dv");
    s_deviceConfig.m_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) glewGetProcAddress ("glVertexAttribLPointer");
    s_deviceConfig.m_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) glewGetProcAddress ("glGetVertexAttribLdv");
  }

  // GL_VERSION_4_1
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_1])
  {
    s_deviceConfig.m_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) glewGetProcAddress ("glViewportArrayv");
    s_deviceConfig.m_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) glewGetProcAddress ("glViewportIndexedf");
    s_deviceConfig.m_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) glewGetProcAddress ("glViewportIndexedfv");
    s_deviceConfig.m_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) glewGetProcAddress ("glScissorArrayv");
    s_deviceConfig.m_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) glewGetProcAddress ("glScissorIndexed");
    s_deviceConfig.m_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) glewGetProcAddress ("glScissorIndexedv");
    s_deviceConfig.m_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) glewGetProcAddress ("glDepthRangeArrayv");
    s_deviceConfig.m_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) glewGetProcAddress ("glDepthRangeIndexed");
    s_deviceConfig.m_glGetFloati_v = (PFNGLGETFLOATI_VPROC) glewGetProcAddress ("glGetFloati_v");
    s_deviceConfig.m_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) glewGetProcAddress ("glGetDoublei_v");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) glewGetProcAddress ("glDrawArraysInstancedBaseInstance");
    s_deviceConfig.m_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) glewGetProcAddress ("glDrawElementsInstancedBaseInstance");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertexBaseInstance");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) glewGetProcAddress ("glGetInternalformativ");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) glewGetProcAddress ("glGetActiveAtomicCounterBufferiv");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) glewGetProcAddress ("glBindImageTexture");
    s_deviceConfig.m_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) glewGetProcAddress ("glMemoryBarrier");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) glewGetProcAddress ("glTexStorage1D");
    s_deviceConfig.m_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) glewGetProcAddress ("glTexStorage2D");
    s_deviceConfig.m_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) glewGetProcAddress ("glTexStorage3D");
  }

  // GL_VERSION_4_2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_2])
  {
    s_deviceConfig.m_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) glewGetProcAddress ("glDrawTransformFeedbackInstanced");
    s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) glewGetProcAddress ("glDrawTransformFeedbackStreamInstanced");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) glewGetProcAddress ("glClearBufferData");
    s_deviceConfig.m_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) glewGetProcAddress ("glClearBufferSubData");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) glewGetProcAddress ("glDispatchCompute");
    s_deviceConfig.m_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) glewGetProcAddress ("glDispatchComputeIndirect");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) glewGetProcAddress ("glCopyImageSubData");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) glewGetProcAddress ("glFramebufferParameteri");
    s_deviceConfig.m_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetFramebufferParameteriv");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) glewGetProcAddress ("glGetInternalformati64v");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) glewGetProcAddress ("glInvalidateTexSubImage");
    s_deviceConfig.m_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) glewGetProcAddress ("glInvalidateTexImage");
    s_deviceConfig.m_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) glewGetProcAddress ("glInvalidateBufferSubData");
    s_deviceConfig.m_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) glewGetProcAddress ("glInvalidateBufferData");
    s_deviceConfig.m_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateFramebuffer");
    s_deviceConfig.m_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateSubFramebuffer");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) glewGetProcAddress ("glMultiDrawArraysIndirect");
    s_deviceConfig.m_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) glewGetProcAddress ("glMultiDrawElementsIndirect");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) glewGetProcAddress ("glGetProgramInterfaceiv");
    s_deviceConfig.m_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) glewGetProcAddress ("glGetProgramResourceIndex");
    s_deviceConfig.m_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) glewGetProcAddress ("glGetProgramResourceName");
    s_deviceConfig.m_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) glewGetProcAddress ("glGetProgramResourceiv");
    s_deviceConfig.m_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) glewGetProcAddress ("glGetProgramResourceLocation");
    s_deviceConfig.m_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) glewGetProcAddress ("glGetProgramResourceLocationIndex");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) glewGetProcAddress ("glShaderStorageBlockBinding");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) glewGetProcAddress ("glTexBufferRange");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTexStorage2DMultisample");
    s_deviceConfig.m_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTexStorage3DMultisample");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glTextureView = (PFNGLTEXTUREVIEWPROC) glewGetProcAddress ("glTextureView");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) glewGetProcAddress ("glBindVertexBuffer");
    s_deviceConfig.m_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) glewGetProcAddress ("glVertexAttribFormat");
    s_deviceConfig.m_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) glewGetProcAddress ("glVertexAttribIFormat");
    s_deviceConfig.m_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) glewGetProcAddress ("glVertexAttribLFormat");
    s_deviceConfig.m_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) glewGetProcAddress ("glVertexAttribBinding");
    s_deviceConfig.m_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) glewGetProcAddress ("glVertexBindingDivisor");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) glewGetProcAddress ("glDebugMessageControl");
    s_deviceConfig.m_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) glewGetProcAddress ("glDebugMessageInsert");
    s_deviceConfig.m_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) glewGetProcAddress ("glDebugMessageCallback");
    s_deviceConfig.m_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) glewGetProcAddress ("glGetDebugMessageLog");
    s_deviceConfig.m_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) glewGetProcAddress ("glPushDebugGroup");
    s_deviceConfig.m_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) glewGetProcAddress ("glPopDebugGroup");
    s_deviceConfig.m_glObjectLabel = (PFNGLOBJECTLABELPROC) glewGetProcAddress ("glObjectLabel");
    s_deviceConfig.m_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) glewGetProcAddress ("glGetObjectLabel");
    s_deviceConfig.m_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) glewGetProcAddress ("glObjectPtrLabel");
    s_deviceConfig.m_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) glewGetProcAddress ("glGetObjectPtrLabel");
    s_deviceConfig.m_glGetPointerv = (PFNGLGETPOINTERVPROC) glewGetProcAddress ("glGetPointerv");
  }

  // GL_VERSION_4_3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_3])
  {
    s_deviceConfig.m_glGetPointerv = (PFNGLGETPOINTERVPROC) glewGetProcAddress ("glGetPointerv");
  }

  // GL_VERSION_4_4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_4])
  {
    s_deviceConfig.m_glBufferStorage = (PFNGLBUFFERSTORAGEPROC) glewGetProcAddress ("glBufferStorage");
  }

  // GL_VERSION_4_4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_4])
  {
    s_deviceConfig.m_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) glewGetProcAddress ("glClearTexImage");
    s_deviceConfig.m_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) glewGetProcAddress ("glClearTexSubImage");
  }

  // GL_VERSION_4_4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_4])
  {
    s_deviceConfig.m_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) glewGetProcAddress ("glBindBuffersBase");
    s_deviceConfig.m_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) glewGetProcAddress ("glBindBuffersRange");
    s_deviceConfig.m_glBindTextures = (PFNGLBINDTEXTURESPROC) glewGetProcAddress ("glBindTextures");
    s_deviceConfig.m_glBindSamplers = (PFNGLBINDSAMPLERSPROC) glewGetProcAddress ("glBindSamplers");
    s_deviceConfig.m_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) glewGetProcAddress ("glBindImageTextures");
    s_deviceConfig.m_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) glewGetProcAddress ("glBindVertexBuffers");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glClipControl = (PFNGLCLIPCONTROLPROC) glewGetProcAddress ("glClipControl");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glCreateTransformFeedbacks");
    s_deviceConfig.m_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) glewGetProcAddress ("glTransformFeedbackBufferBase");
    s_deviceConfig.m_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) glewGetProcAddress ("glTransformFeedbackBufferRange");
    s_deviceConfig.m_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) glewGetProcAddress ("glGetTransformFeedbackiv");
    s_deviceConfig.m_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) glewGetProcAddress ("glGetTransformFeedbacki_v");
    s_deviceConfig.m_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) glewGetProcAddress ("glGetTransformFeedbacki64_v");
    s_deviceConfig.m_glCreateBuffers = (PFNGLCREATEBUFFERSPROC) glewGetProcAddress ("glCreateBuffers");
    s_deviceConfig.m_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) glewGetProcAddress ("glNamedBufferStorage");
    s_deviceConfig.m_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) glewGetProcAddress ("glNamedBufferData");
    s_deviceConfig.m_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glNamedBufferSubData");
    s_deviceConfig.m_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glCopyNamedBufferSubData");
    s_deviceConfig.m_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) glewGetProcAddress ("glClearNamedBufferData");
    s_deviceConfig.m_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glClearNamedBufferSubData");
    s_deviceConfig.m_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) glewGetProcAddress ("glMapNamedBuffer");
    s_deviceConfig.m_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) glewGetProcAddress ("glMapNamedBufferRange");
    s_deviceConfig.m_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) glewGetProcAddress ("glUnmapNamedBuffer");
    s_deviceConfig.m_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) glewGetProcAddress ("glFlushMappedNamedBufferRange");
    s_deviceConfig.m_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedBufferParameteriv");
    s_deviceConfig.m_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) glewGetProcAddress ("glGetNamedBufferParameteri64v");
    s_deviceConfig.m_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) glewGetProcAddress ("glGetNamedBufferPointerv");
    s_deviceConfig.m_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glGetNamedBufferSubData");
    s_deviceConfig.m_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) glewGetProcAddress ("glCreateFramebuffers");
    s_deviceConfig.m_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) glewGetProcAddress ("glNamedFramebufferRenderbuffer");
    s_deviceConfig.m_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) glewGetProcAddress ("glNamedFramebufferParameteri");
    s_deviceConfig.m_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) glewGetProcAddress ("glNamedFramebufferTexture");
    s_deviceConfig.m_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) glewGetProcAddress ("glNamedFramebufferTextureLayer");
    s_deviceConfig.m_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) glewGetProcAddress ("glNamedFramebufferDrawBuffer");
    s_deviceConfig.m_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) glewGetProcAddress ("glNamedFramebufferDrawBuffers");
    s_deviceConfig.m_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) glewGetProcAddress ("glNamedFramebufferReadBuffer");
    s_deviceConfig.m_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) glewGetProcAddress ("glInvalidateNamedFramebufferData");
    s_deviceConfig.m_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) glewGetProcAddress ("glInvalidateNamedFramebufferSubData");
    s_deviceConfig.m_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) glewGetProcAddress ("glClearNamedFramebufferiv");
    s_deviceConfig.m_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) glewGetProcAddress ("glClearNamedFramebufferuiv");
    s_deviceConfig.m_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) glewGetProcAddress ("glClearNamedFramebufferfv");
    s_deviceConfig.m_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) glewGetProcAddress ("glClearNamedFramebufferfi");
    s_deviceConfig.m_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) glewGetProcAddress ("glBlitNamedFramebuffer");
    s_deviceConfig.m_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) glewGetProcAddress ("glCheckNamedFramebufferStatus");
    s_deviceConfig.m_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedFramebufferParameteriv");
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glewGetProcAddress ("glGetNamedFramebufferAttachmentParameteriv");
    s_deviceConfig.m_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) glewGetProcAddress ("glCreateRenderbuffers");
    s_deviceConfig.m_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) glewGetProcAddress ("glNamedRenderbufferStorage");
    s_deviceConfig.m_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) glewGetProcAddress ("glNamedRenderbufferStorageMultisample");
    s_deviceConfig.m_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedRenderbufferParameteriv");
    s_deviceConfig.m_glCreateTextures = (PFNGLCREATETEXTURESPROC) glewGetProcAddress ("glCreateTextures");
    s_deviceConfig.m_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) glewGetProcAddress ("glTextureBuffer");
    s_deviceConfig.m_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) glewGetProcAddress ("glTextureBufferRange");
    s_deviceConfig.m_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) glewGetProcAddress ("glTextureStorage1D");
    s_deviceConfig.m_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) glewGetProcAddress ("glTextureStorage2D");
    s_deviceConfig.m_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) glewGetProcAddress ("glTextureStorage3D");
    s_deviceConfig.m_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTextureStorage2DMultisample");
    s_deviceConfig.m_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTextureStorage3DMultisample");
    s_deviceConfig.m_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glTextureSubImage1D");
    s_deviceConfig.m_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glTextureSubImage2D");
    s_deviceConfig.m_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glTextureSubImage3D");
    s_deviceConfig.m_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glCompressedTextureSubImage1D");
    s_deviceConfig.m_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glCompressedTextureSubImage2D");
    s_deviceConfig.m_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glCompressedTextureSubImage3D");
    s_deviceConfig.m_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glCopyTextureSubImage1D");
    s_deviceConfig.m_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glCopyTextureSubImage2D");
    s_deviceConfig.m_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glCopyTextureSubImage3D");
    s_deviceConfig.m_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) glewGetProcAddress ("glTextureParameterf");
    s_deviceConfig.m_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) glewGetProcAddress ("glTextureParameterfv");
    s_deviceConfig.m_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) glewGetProcAddress ("glTextureParameteri");
    s_deviceConfig.m_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) glewGetProcAddress ("glTextureParameterIiv");
    s_deviceConfig.m_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) glewGetProcAddress ("glTextureParameterIuiv");
    s_deviceConfig.m_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) glewGetProcAddress ("glTextureParameteriv");
    s_deviceConfig.m_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) glewGetProcAddress ("glGenerateTextureMipmap");
    s_deviceConfig.m_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) glewGetProcAddress ("glBindTextureUnit");
    s_deviceConfig.m_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) glewGetProcAddress ("glGetTextureImage");
    s_deviceConfig.m_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) glewGetProcAddress ("glGetCompressedTextureImage");
    s_deviceConfig.m_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) glewGetProcAddress ("glGetTextureLevelParameterfv");
    s_deviceConfig.m_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) glewGetProcAddress ("glGetTextureLevelParameteriv");
    s_deviceConfig.m_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) glewGetProcAddress ("glGetTextureParameterfv");
    s_deviceConfig.m_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) glewGetProcAddress ("glGetTextureParameterIiv");
    s_deviceConfig.m_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) glewGetProcAddress ("glGetTextureParameterIuiv");
    s_deviceConfig.m_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) glewGetProcAddress ("glGetTextureParameteriv");
    s_deviceConfig.m_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) glewGetProcAddress ("glCreateVertexArrays");
    s_deviceConfig.m_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) glewGetProcAddress ("glDisableVertexArrayAttrib");
    s_deviceConfig.m_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) glewGetProcAddress ("glEnableVertexArrayAttrib");
    s_deviceConfig.m_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) glewGetProcAddress ("glVertexArrayElementBuffer");
    s_deviceConfig.m_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) glewGetProcAddress ("glVertexArrayVertexBuffer");
    s_deviceConfig.m_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) glewGetProcAddress ("glVertexArrayVertexBuffers");
    s_deviceConfig.m_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) glewGetProcAddress ("glVertexArrayAttribBinding");
    s_deviceConfig.m_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) glewGetProcAddress ("glVertexArrayAttribFormat");
    s_deviceConfig.m_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) glewGetProcAddress ("glVertexArrayAttribIFormat");
    s_deviceConfig.m_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) glewGetProcAddress ("glVertexArrayAttribLFormat");
    s_deviceConfig.m_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) glewGetProcAddress ("glVertexArrayBindingDivisor");
    s_deviceConfig.m_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) glewGetProcAddress ("glGetVertexArrayiv");
    s_deviceConfig.m_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) glewGetProcAddress ("glGetVertexArrayIndexediv");
    s_deviceConfig.m_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) glewGetProcAddress ("glGetVertexArrayIndexed64iv");
    s_deviceConfig.m_glCreateSamplers = (PFNGLCREATESAMPLERSPROC) glewGetProcAddress ("glCreateSamplers");
    s_deviceConfig.m_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) glewGetProcAddress ("glCreateProgramPipelines");
    s_deviceConfig.m_glCreateQueries = (PFNGLCREATEQUERIESPROC) glewGetProcAddress ("glCreateQueries");
    s_deviceConfig.m_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) glewGetProcAddress ("glGetQueryBufferObjecti64v");
    s_deviceConfig.m_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) glewGetProcAddress ("glGetQueryBufferObjectiv");
    s_deviceConfig.m_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) glewGetProcAddress ("glGetQueryBufferObjectui64v");
    s_deviceConfig.m_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) glewGetProcAddress ("glGetQueryBufferObjectuiv");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) glewGetProcAddress ("glMemoryBarrierByRegion");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) glewGetProcAddress ("glGetTextureSubImage");
    s_deviceConfig.m_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) glewGetProcAddress ("glGetCompressedTextureSubImage");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) glewGetProcAddress ("glGetGraphicsResetStatus");
    s_deviceConfig.m_glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC) glewGetProcAddress ("glGetnCompressedTexImage");
    s_deviceConfig.m_glGetnTexImage = (PFNGLGETNTEXIMAGEPROC) glewGetProcAddress ("glGetnTexImage");
    s_deviceConfig.m_glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC) glewGetProcAddress ("glGetnUniformdv");
    s_deviceConfig.m_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) glewGetProcAddress ("glGetnUniformfv");
    s_deviceConfig.m_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) glewGetProcAddress ("glGetnUniformiv");
    s_deviceConfig.m_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) glewGetProcAddress ("glGetnUniformuiv");
    s_deviceConfig.m_glReadnPixels = (PFNGLREADNPIXELSPROC) glewGetProcAddress ("glReadnPixels");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glGetnMapdv = (PFNGLGETNMAPDVPROC) glewGetProcAddress ("glGetnMapdv");
    s_deviceConfig.m_glGetnMapfv = (PFNGLGETNMAPFVPROC) glewGetProcAddress ("glGetnMapfv");
    s_deviceConfig.m_glGetnMapiv = (PFNGLGETNMAPIVPROC) glewGetProcAddress ("glGetnMapiv");
    s_deviceConfig.m_glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC) glewGetProcAddress ("glGetnPixelMapfv");
    s_deviceConfig.m_glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC) glewGetProcAddress ("glGetnPixelMapuiv");
    s_deviceConfig.m_glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC) glewGetProcAddress ("glGetnPixelMapusv");
    s_deviceConfig.m_glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC) glewGetProcAddress ("glGetnPolygonStipple");
    s_deviceConfig.m_glGetnColorTable = (PFNGLGETNCOLORTABLEPROC) glewGetProcAddress ("glGetnColorTable");
    s_deviceConfig.m_glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC) glewGetProcAddress ("glGetnConvolutionFilter");
    s_deviceConfig.m_glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC) glewGetProcAddress ("glGetnSeparableFilter");
    s_deviceConfig.m_glGetnHistogram = (PFNGLGETNHISTOGRAMPROC) glewGetProcAddress ("glGetnHistogram");
    s_deviceConfig.m_glGetnMinmax = (PFNGLGETNMINMAXPROC) glewGetProcAddress ("glGetnMinmax");
  }

  // GL_VERSION_4_5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_VERSION_4_5])
  {
    s_deviceConfig.m_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) glewGetProcAddress ("glTextureBarrier");
  }

  // GL_3DFX_tbuffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_3DFX_tbuffer])
  {
    s_deviceConfig.m_glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC) glewGetProcAddress ("glTbufferMask3DFX");
  }

  // GL_AMD_debug_output
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_debug_output])
  {
    s_deviceConfig.m_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC) glewGetProcAddress ("glDebugMessageEnableAMD");
    s_deviceConfig.m_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC) glewGetProcAddress ("glDebugMessageInsertAMD");
    s_deviceConfig.m_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC) glewGetProcAddress ("glDebugMessageCallbackAMD");
    s_deviceConfig.m_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC) glewGetProcAddress ("glGetDebugMessageLogAMD");
  }

  // GL_AMD_draw_buffers_blend
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_draw_buffers_blend])
  {
    s_deviceConfig.m_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC) glewGetProcAddress ("glBlendFuncIndexedAMD");
    s_deviceConfig.m_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) glewGetProcAddress ("glBlendFuncSeparateIndexedAMD");
    s_deviceConfig.m_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC) glewGetProcAddress ("glBlendEquationIndexedAMD");
    s_deviceConfig.m_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) glewGetProcAddress ("glBlendEquationSeparateIndexedAMD");
  }

  // GL_AMD_gpu_shader_int64
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_gpu_shader_int64])
  {
    s_deviceConfig.m_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC) glewGetProcAddress ("glUniform1i64NV");
    s_deviceConfig.m_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC) glewGetProcAddress ("glUniform2i64NV");
    s_deviceConfig.m_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC) glewGetProcAddress ("glUniform3i64NV");
    s_deviceConfig.m_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC) glewGetProcAddress ("glUniform4i64NV");
    s_deviceConfig.m_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC) glewGetProcAddress ("glUniform1i64vNV");
    s_deviceConfig.m_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC) glewGetProcAddress ("glUniform2i64vNV");
    s_deviceConfig.m_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC) glewGetProcAddress ("glUniform3i64vNV");
    s_deviceConfig.m_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC) glewGetProcAddress ("glUniform4i64vNV");
    s_deviceConfig.m_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC) glewGetProcAddress ("glUniform1ui64NV");
    s_deviceConfig.m_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC) glewGetProcAddress ("glUniform2ui64NV");
    s_deviceConfig.m_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC) glewGetProcAddress ("glUniform3ui64NV");
    s_deviceConfig.m_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC) glewGetProcAddress ("glUniform4ui64NV");
    s_deviceConfig.m_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC) glewGetProcAddress ("glUniform1ui64vNV");
    s_deviceConfig.m_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC) glewGetProcAddress ("glUniform2ui64vNV");
    s_deviceConfig.m_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC) glewGetProcAddress ("glUniform3ui64vNV");
    s_deviceConfig.m_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC) glewGetProcAddress ("glUniform4ui64vNV");
    s_deviceConfig.m_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC) glewGetProcAddress ("glGetUniformi64vNV");
    s_deviceConfig.m_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC) glewGetProcAddress ("glGetUniformui64vNV");
  }

  // GL_AMD_gpu_shader_int64
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_gpu_shader_int64])
  {
    s_deviceConfig.m_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC) glewGetProcAddress ("glProgramUniform1i64NV");
    s_deviceConfig.m_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC) glewGetProcAddress ("glProgramUniform2i64NV");
    s_deviceConfig.m_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC) glewGetProcAddress ("glProgramUniform3i64NV");
    s_deviceConfig.m_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC) glewGetProcAddress ("glProgramUniform4i64NV");
    s_deviceConfig.m_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC) glewGetProcAddress ("glProgramUniform1i64vNV");
    s_deviceConfig.m_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC) glewGetProcAddress ("glProgramUniform2i64vNV");
    s_deviceConfig.m_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC) glewGetProcAddress ("glProgramUniform3i64vNV");
    s_deviceConfig.m_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC) glewGetProcAddress ("glProgramUniform4i64vNV");
    s_deviceConfig.m_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC) glewGetProcAddress ("glProgramUniform1ui64NV");
    s_deviceConfig.m_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC) glewGetProcAddress ("glProgramUniform2ui64NV");
    s_deviceConfig.m_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC) glewGetProcAddress ("glProgramUniform3ui64NV");
    s_deviceConfig.m_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC) glewGetProcAddress ("glProgramUniform4ui64NV");
    s_deviceConfig.m_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC) glewGetProcAddress ("glProgramUniform1ui64vNV");
    s_deviceConfig.m_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC) glewGetProcAddress ("glProgramUniform2ui64vNV");
    s_deviceConfig.m_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC) glewGetProcAddress ("glProgramUniform3ui64vNV");
    s_deviceConfig.m_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC) glewGetProcAddress ("glProgramUniform4ui64vNV");
  }

  // GL_AMD_interleaved_elements
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_interleaved_elements])
  {
    s_deviceConfig.m_glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC) glewGetProcAddress ("glVertexAttribParameteriAMD");
  }

  // GL_AMD_multi_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_multi_draw_indirect])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) glewGetProcAddress ("glMultiDrawArraysIndirectAMD");
    s_deviceConfig.m_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) glewGetProcAddress ("glMultiDrawElementsIndirectAMD");
  }

  // GL_AMD_name_gen_delete
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_name_gen_delete])
  {
    s_deviceConfig.m_glGenNamesAMD = (PFNGLGENNAMESAMDPROC) glewGetProcAddress ("glGenNamesAMD");
    s_deviceConfig.m_glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC) glewGetProcAddress ("glDeleteNamesAMD");
    s_deviceConfig.m_glIsNameAMD = (PFNGLISNAMEAMDPROC) glewGetProcAddress ("glIsNameAMD");
  }

  // GL_AMD_occlusion_query_event
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_occlusion_query_event])
  {
    s_deviceConfig.m_glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC) glewGetProcAddress ("glQueryObjectParameteruiAMD");
  }

  // GL_AMD_performance_monitor
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_performance_monitor])
  {
    s_deviceConfig.m_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC) glewGetProcAddress ("glGetPerfMonitorGroupsAMD");
    s_deviceConfig.m_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC) glewGetProcAddress ("glGetPerfMonitorCountersAMD");
    s_deviceConfig.m_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) glewGetProcAddress ("glGetPerfMonitorGroupStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterStringAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterInfoAMD");
    s_deviceConfig.m_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC) glewGetProcAddress ("glGenPerfMonitorsAMD");
    s_deviceConfig.m_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC) glewGetProcAddress ("glDeletePerfMonitorsAMD");
    s_deviceConfig.m_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) glewGetProcAddress ("glSelectPerfMonitorCountersAMD");
    s_deviceConfig.m_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC) glewGetProcAddress ("glBeginPerfMonitorAMD");
    s_deviceConfig.m_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC) glewGetProcAddress ("glEndPerfMonitorAMD");
    s_deviceConfig.m_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) glewGetProcAddress ("glGetPerfMonitorCounterDataAMD");
  }

  // GL_AMD_sample_positions
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_sample_positions])
  {
    s_deviceConfig.m_glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC) glewGetProcAddress ("glSetMultisamplefvAMD");
  }

  // GL_AMD_sparse_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_sparse_texture])
  {
    s_deviceConfig.m_glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC) glewGetProcAddress ("glTexStorageSparseAMD");
    s_deviceConfig.m_glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC) glewGetProcAddress ("glTextureStorageSparseAMD");
  }

  // GL_AMD_stencil_operation_extended
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_stencil_operation_extended])
  {
    s_deviceConfig.m_glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC) glewGetProcAddress ("glStencilOpValueAMD");
  }

  // GL_AMD_vertex_shader_tessellator
  if (s_deviceConfig.m_featureSupported [GLEW_GL_AMD_vertex_shader_tessellator])
  {
    s_deviceConfig.m_glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC) glewGetProcAddress ("glTessellationFactorAMD");
    s_deviceConfig.m_glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC) glewGetProcAddress ("glTessellationModeAMD");
  }

  // GL_APPLE_element_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_element_array])
  {
    s_deviceConfig.m_glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC) glewGetProcAddress ("glElementPointerAPPLE");
    s_deviceConfig.m_glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC) glewGetProcAddress ("glDrawElementArrayAPPLE");
    s_deviceConfig.m_glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) glewGetProcAddress ("glDrawRangeElementArrayAPPLE");
    s_deviceConfig.m_glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) glewGetProcAddress ("glMultiDrawElementArrayAPPLE");
    s_deviceConfig.m_glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) glewGetProcAddress ("glMultiDrawRangeElementArrayAPPLE");
  }

  // GL_APPLE_fence
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_fence])
  {
    s_deviceConfig.m_glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC) glewGetProcAddress ("glGenFencesAPPLE");
    s_deviceConfig.m_glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC) glewGetProcAddress ("glDeleteFencesAPPLE");
    s_deviceConfig.m_glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC) glewGetProcAddress ("glSetFenceAPPLE");
    s_deviceConfig.m_glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC) glewGetProcAddress ("glIsFenceAPPLE");
    s_deviceConfig.m_glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC) glewGetProcAddress ("glTestFenceAPPLE");
    s_deviceConfig.m_glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC) glewGetProcAddress ("glFinishFenceAPPLE");
    s_deviceConfig.m_glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC) glewGetProcAddress ("glTestObjectAPPLE");
    s_deviceConfig.m_glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC) glewGetProcAddress ("glFinishObjectAPPLE");
  }

  // GL_APPLE_flush_buffer_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_flush_buffer_range])
  {
    s_deviceConfig.m_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC) glewGetProcAddress ("glBufferParameteriAPPLE");
    s_deviceConfig.m_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) glewGetProcAddress ("glFlushMappedBufferRangeAPPLE");
  }

  // GL_APPLE_object_purgeable
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_object_purgeable])
  {
    s_deviceConfig.m_glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC) glewGetProcAddress ("glObjectPurgeableAPPLE");
    s_deviceConfig.m_glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC) glewGetProcAddress ("glObjectUnpurgeableAPPLE");
    s_deviceConfig.m_glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC) glewGetProcAddress ("glGetObjectParameterivAPPLE");
  }

  // GL_APPLE_texture_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_texture_range])
  {
    s_deviceConfig.m_glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC) glewGetProcAddress ("glTextureRangeAPPLE");
    s_deviceConfig.m_glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) glewGetProcAddress ("glGetTexParameterPointervAPPLE");
  }

  // GL_APPLE_vertex_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_array_object])
  {
    s_deviceConfig.m_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC) glewGetProcAddress ("glBindVertexArrayAPPLE");
    s_deviceConfig.m_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC) glewGetProcAddress ("glDeleteVertexArraysAPPLE");
    s_deviceConfig.m_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC) glewGetProcAddress ("glGenVertexArraysAPPLE");
    s_deviceConfig.m_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC) glewGetProcAddress ("glIsVertexArrayAPPLE");
  }

  // GL_APPLE_vertex_array_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_array_range])
  {
    s_deviceConfig.m_glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC) glewGetProcAddress ("glVertexArrayRangeAPPLE");
    s_deviceConfig.m_glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) glewGetProcAddress ("glFlushVertexArrayRangeAPPLE");
    s_deviceConfig.m_glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) glewGetProcAddress ("glVertexArrayParameteriAPPLE");
  }

  // GL_APPLE_vertex_program_evaluators
  if (s_deviceConfig.m_featureSupported [GLEW_GL_APPLE_vertex_program_evaluators])
  {
    s_deviceConfig.m_glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC) glewGetProcAddress ("glEnableVertexAttribAPPLE");
    s_deviceConfig.m_glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC) glewGetProcAddress ("glDisableVertexAttribAPPLE");
    s_deviceConfig.m_glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) glewGetProcAddress ("glIsVertexAttribEnabledAPPLE");
    s_deviceConfig.m_glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC) glewGetProcAddress ("glMapVertexAttrib1dAPPLE");
    s_deviceConfig.m_glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC) glewGetProcAddress ("glMapVertexAttrib1fAPPLE");
    s_deviceConfig.m_glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC) glewGetProcAddress ("glMapVertexAttrib2dAPPLE");
    s_deviceConfig.m_glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC) glewGetProcAddress ("glMapVertexAttrib2fAPPLE");
  }

  // GL_ARB_ES2_compatibility
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_ES2_compatibility])
  {
    s_deviceConfig.m_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) glewGetProcAddress ("glReleaseShaderCompiler");
    s_deviceConfig.m_glShaderBinary = (PFNGLSHADERBINARYPROC) glewGetProcAddress ("glShaderBinary");
    s_deviceConfig.m_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) glewGetProcAddress ("glGetShaderPrecisionFormat");
    s_deviceConfig.m_glDepthRangef = (PFNGLDEPTHRANGEFPROC) glewGetProcAddress ("glDepthRangef");
    s_deviceConfig.m_glClearDepthf = (PFNGLCLEARDEPTHFPROC) glewGetProcAddress ("glClearDepthf");
  }

  // GL_ARB_ES3_1_compatibility
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_ES3_1_compatibility])
  {
    s_deviceConfig.m_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) glewGetProcAddress ("glMemoryBarrierByRegion");
  }

  // GL_ARB_base_instance
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_base_instance])
  {
    s_deviceConfig.m_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) glewGetProcAddress ("glDrawArraysInstancedBaseInstance");
    s_deviceConfig.m_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) glewGetProcAddress ("glDrawElementsInstancedBaseInstance");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertexBaseInstance");
  }

  // GL_ARB_bindless_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_bindless_texture])
  {
    s_deviceConfig.m_glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC) glewGetProcAddress ("glGetTextureHandleARB");
    s_deviceConfig.m_glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC) glewGetProcAddress ("glGetTextureSamplerHandleARB");
    s_deviceConfig.m_glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) glewGetProcAddress ("glMakeTextureHandleResidentARB");
    s_deviceConfig.m_glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) glewGetProcAddress ("glMakeTextureHandleNonResidentARB");
    s_deviceConfig.m_glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC) glewGetProcAddress ("glGetImageHandleARB");
    s_deviceConfig.m_glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) glewGetProcAddress ("glMakeImageHandleResidentARB");
    s_deviceConfig.m_glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) glewGetProcAddress ("glMakeImageHandleNonResidentARB");
    s_deviceConfig.m_glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC) glewGetProcAddress ("glUniformHandleui64ARB");
    s_deviceConfig.m_glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC) glewGetProcAddress ("glUniformHandleui64vARB");
    s_deviceConfig.m_glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) glewGetProcAddress ("glProgramUniformHandleui64ARB");
    s_deviceConfig.m_glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) glewGetProcAddress ("glProgramUniformHandleui64vARB");
    s_deviceConfig.m_glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC) glewGetProcAddress ("glIsTextureHandleResidentARB");
    s_deviceConfig.m_glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC) glewGetProcAddress ("glIsImageHandleResidentARB");
    s_deviceConfig.m_glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC) glewGetProcAddress ("glVertexAttribL1ui64ARB");
    s_deviceConfig.m_glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC) glewGetProcAddress ("glVertexAttribL1ui64vARB");
    s_deviceConfig.m_glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC) glewGetProcAddress ("glGetVertexAttribLui64vARB");
  }

  // GL_ARB_blend_func_extended
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_blend_func_extended])
  {
    s_deviceConfig.m_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) glewGetProcAddress ("glBindFragDataLocationIndexed");
    s_deviceConfig.m_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) glewGetProcAddress ("glGetFragDataIndex");
  }

  // GL_ARB_buffer_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_buffer_storage])
  {
    s_deviceConfig.m_glBufferStorage = (PFNGLBUFFERSTORAGEPROC) glewGetProcAddress ("glBufferStorage");
  }

  // GL_ARB_cl_event
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_cl_event])
  {
    s_deviceConfig.m_glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC) glewGetProcAddress ("glCreateSyncFromCLeventARB");
  }

  // GL_ARB_clear_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clear_buffer_object])
  {
    s_deviceConfig.m_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) glewGetProcAddress ("glClearBufferData");
    s_deviceConfig.m_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) glewGetProcAddress ("glClearBufferSubData");
  }

  // GL_ARB_clear_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clear_texture])
  {
    s_deviceConfig.m_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) glewGetProcAddress ("glClearTexImage");
    s_deviceConfig.m_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) glewGetProcAddress ("glClearTexSubImage");
  }

  // GL_ARB_clip_control
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_clip_control])
  {
    s_deviceConfig.m_glClipControl = (PFNGLCLIPCONTROLPROC) glewGetProcAddress ("glClipControl");
  }

  // GL_ARB_color_buffer_float
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_color_buffer_float])
  {
    s_deviceConfig.m_glClampColorARB = (PFNGLCLAMPCOLORARBPROC) glewGetProcAddress ("glClampColorARB");
  }

  // GL_ARB_compute_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compute_shader])
  {
    s_deviceConfig.m_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) glewGetProcAddress ("glDispatchCompute");
    s_deviceConfig.m_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) glewGetProcAddress ("glDispatchComputeIndirect");
  }

  // GL_ARB_compute_variable_group_size
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_compute_variable_group_size])
  {
    s_deviceConfig.m_glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) glewGetProcAddress ("glDispatchComputeGroupSizeARB");
  }

  // GL_ARB_copy_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_copy_buffer])
  {
    s_deviceConfig.m_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) glewGetProcAddress ("glCopyBufferSubData");
  }

  // GL_ARB_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_copy_image])
  {
    s_deviceConfig.m_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) glewGetProcAddress ("glCopyImageSubData");
  }

  // GL_ARB_debug_output
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_debug_output])
  {
    s_deviceConfig.m_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC) glewGetProcAddress ("glDebugMessageControlARB");
    s_deviceConfig.m_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC) glewGetProcAddress ("glDebugMessageInsertARB");
    s_deviceConfig.m_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC) glewGetProcAddress ("glDebugMessageCallbackARB");
    s_deviceConfig.m_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC) glewGetProcAddress ("glGetDebugMessageLogARB");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glCreateTransformFeedbacks");
    s_deviceConfig.m_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) glewGetProcAddress ("glTransformFeedbackBufferBase");
    s_deviceConfig.m_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) glewGetProcAddress ("glTransformFeedbackBufferRange");
    s_deviceConfig.m_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) glewGetProcAddress ("glGetTransformFeedbackiv");
    s_deviceConfig.m_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) glewGetProcAddress ("glGetTransformFeedbacki_v");
    s_deviceConfig.m_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) glewGetProcAddress ("glGetTransformFeedbacki64_v");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateBuffers = (PFNGLCREATEBUFFERSPROC) glewGetProcAddress ("glCreateBuffers");
    s_deviceConfig.m_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) glewGetProcAddress ("glNamedBufferStorage");
    s_deviceConfig.m_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) glewGetProcAddress ("glNamedBufferData");
    s_deviceConfig.m_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glNamedBufferSubData");
    s_deviceConfig.m_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glCopyNamedBufferSubData");
    s_deviceConfig.m_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) glewGetProcAddress ("glClearNamedBufferData");
    s_deviceConfig.m_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glClearNamedBufferSubData");
    s_deviceConfig.m_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) glewGetProcAddress ("glMapNamedBuffer");
    s_deviceConfig.m_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) glewGetProcAddress ("glMapNamedBufferRange");
    s_deviceConfig.m_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) glewGetProcAddress ("glUnmapNamedBuffer");
    s_deviceConfig.m_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) glewGetProcAddress ("glFlushMappedNamedBufferRange");
    s_deviceConfig.m_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedBufferParameteriv");
    s_deviceConfig.m_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) glewGetProcAddress ("glGetNamedBufferParameteri64v");
    s_deviceConfig.m_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) glewGetProcAddress ("glGetNamedBufferPointerv");
    s_deviceConfig.m_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) glewGetProcAddress ("glGetNamedBufferSubData");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) glewGetProcAddress ("glCreateFramebuffers");
    s_deviceConfig.m_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) glewGetProcAddress ("glNamedFramebufferRenderbuffer");
    s_deviceConfig.m_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) glewGetProcAddress ("glNamedFramebufferParameteri");
    s_deviceConfig.m_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) glewGetProcAddress ("glNamedFramebufferTexture");
    s_deviceConfig.m_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) glewGetProcAddress ("glNamedFramebufferTextureLayer");
    s_deviceConfig.m_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) glewGetProcAddress ("glNamedFramebufferDrawBuffer");
    s_deviceConfig.m_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) glewGetProcAddress ("glNamedFramebufferDrawBuffers");
    s_deviceConfig.m_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) glewGetProcAddress ("glNamedFramebufferReadBuffer");
    s_deviceConfig.m_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) glewGetProcAddress ("glInvalidateNamedFramebufferData");
    s_deviceConfig.m_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) glewGetProcAddress ("glInvalidateNamedFramebufferSubData");
    s_deviceConfig.m_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) glewGetProcAddress ("glClearNamedFramebufferiv");
    s_deviceConfig.m_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) glewGetProcAddress ("glClearNamedFramebufferuiv");
    s_deviceConfig.m_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) glewGetProcAddress ("glClearNamedFramebufferfv");
    s_deviceConfig.m_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) glewGetProcAddress ("glClearNamedFramebufferfi");
    s_deviceConfig.m_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) glewGetProcAddress ("glBlitNamedFramebuffer");
    s_deviceConfig.m_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) glewGetProcAddress ("glCheckNamedFramebufferStatus");
    s_deviceConfig.m_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedFramebufferParameteriv");
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glewGetProcAddress ("glGetNamedFramebufferAttachmentParameteriv");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) glewGetProcAddress ("glCreateRenderbuffers");
    s_deviceConfig.m_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) glewGetProcAddress ("glNamedRenderbufferStorage");
    s_deviceConfig.m_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) glewGetProcAddress ("glNamedRenderbufferStorageMultisample");
    s_deviceConfig.m_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetNamedRenderbufferParameteriv");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateTextures = (PFNGLCREATETEXTURESPROC) glewGetProcAddress ("glCreateTextures");
    s_deviceConfig.m_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) glewGetProcAddress ("glTextureBuffer");
    s_deviceConfig.m_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) glewGetProcAddress ("glTextureBufferRange");
    s_deviceConfig.m_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) glewGetProcAddress ("glTextureStorage1D");
    s_deviceConfig.m_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) glewGetProcAddress ("glTextureStorage2D");
    s_deviceConfig.m_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) glewGetProcAddress ("glTextureStorage3D");
    s_deviceConfig.m_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTextureStorage2DMultisample");
    s_deviceConfig.m_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTextureStorage3DMultisample");
    s_deviceConfig.m_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glTextureSubImage1D");
    s_deviceConfig.m_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glTextureSubImage2D");
    s_deviceConfig.m_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glTextureSubImage3D");
    s_deviceConfig.m_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glCompressedTextureSubImage1D");
    s_deviceConfig.m_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glCompressedTextureSubImage2D");
    s_deviceConfig.m_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glCompressedTextureSubImage3D");
    s_deviceConfig.m_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) glewGetProcAddress ("glCopyTextureSubImage1D");
    s_deviceConfig.m_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) glewGetProcAddress ("glCopyTextureSubImage2D");
    s_deviceConfig.m_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) glewGetProcAddress ("glCopyTextureSubImage3D");
    s_deviceConfig.m_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) glewGetProcAddress ("glTextureParameterf");
    s_deviceConfig.m_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) glewGetProcAddress ("glTextureParameterfv");
    s_deviceConfig.m_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) glewGetProcAddress ("glTextureParameteri");
    s_deviceConfig.m_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) glewGetProcAddress ("glTextureParameterIiv");
    s_deviceConfig.m_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) glewGetProcAddress ("glTextureParameterIuiv");
    s_deviceConfig.m_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) glewGetProcAddress ("glTextureParameteriv");
    s_deviceConfig.m_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) glewGetProcAddress ("glGenerateTextureMipmap");
    s_deviceConfig.m_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) glewGetProcAddress ("glBindTextureUnit");
    s_deviceConfig.m_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) glewGetProcAddress ("glGetTextureImage");
    s_deviceConfig.m_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) glewGetProcAddress ("glGetCompressedTextureImage");
    s_deviceConfig.m_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) glewGetProcAddress ("glGetTextureLevelParameterfv");
    s_deviceConfig.m_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) glewGetProcAddress ("glGetTextureLevelParameteriv");
    s_deviceConfig.m_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) glewGetProcAddress ("glGetTextureParameterfv");
    s_deviceConfig.m_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) glewGetProcAddress ("glGetTextureParameterIiv");
    s_deviceConfig.m_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) glewGetProcAddress ("glGetTextureParameterIuiv");
    s_deviceConfig.m_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) glewGetProcAddress ("glGetTextureParameteriv");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) glewGetProcAddress ("glCreateVertexArrays");
    s_deviceConfig.m_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) glewGetProcAddress ("glDisableVertexArrayAttrib");
    s_deviceConfig.m_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) glewGetProcAddress ("glEnableVertexArrayAttrib");
    s_deviceConfig.m_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) glewGetProcAddress ("glVertexArrayElementBuffer");
    s_deviceConfig.m_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) glewGetProcAddress ("glVertexArrayVertexBuffer");
    s_deviceConfig.m_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) glewGetProcAddress ("glVertexArrayVertexBuffers");
    s_deviceConfig.m_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) glewGetProcAddress ("glVertexArrayAttribBinding");
    s_deviceConfig.m_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) glewGetProcAddress ("glVertexArrayAttribFormat");
    s_deviceConfig.m_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) glewGetProcAddress ("glVertexArrayAttribIFormat");
    s_deviceConfig.m_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) glewGetProcAddress ("glVertexArrayAttribLFormat");
    s_deviceConfig.m_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) glewGetProcAddress ("glVertexArrayBindingDivisor");
    s_deviceConfig.m_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) glewGetProcAddress ("glGetVertexArrayiv");
    s_deviceConfig.m_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) glewGetProcAddress ("glGetVertexArrayIndexediv");
    s_deviceConfig.m_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) glewGetProcAddress ("glGetVertexArrayIndexed64iv");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateSamplers = (PFNGLCREATESAMPLERSPROC) glewGetProcAddress ("glCreateSamplers");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) glewGetProcAddress ("glCreateProgramPipelines");
  }

  // GL_ARB_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_direct_state_access])
  {
    s_deviceConfig.m_glCreateQueries = (PFNGLCREATEQUERIESPROC) glewGetProcAddress ("glCreateQueries");
    s_deviceConfig.m_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) glewGetProcAddress ("glGetQueryBufferObjecti64v");
    s_deviceConfig.m_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) glewGetProcAddress ("glGetQueryBufferObjectiv");
    s_deviceConfig.m_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) glewGetProcAddress ("glGetQueryBufferObjectui64v");
    s_deviceConfig.m_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) glewGetProcAddress ("glGetQueryBufferObjectuiv");
  }

  // GL_ARB_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_buffers])
  {
    s_deviceConfig.m_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) glewGetProcAddress ("glDrawBuffersARB");
  }

  // GL_ARB_draw_buffers_blend
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_buffers_blend])
  {
    s_deviceConfig.m_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC) glewGetProcAddress ("glBlendEquationiARB");
    s_deviceConfig.m_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) glewGetProcAddress ("glBlendEquationSeparateiARB");
    s_deviceConfig.m_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC) glewGetProcAddress ("glBlendFunciARB");
    s_deviceConfig.m_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC) glewGetProcAddress ("glBlendFuncSeparateiARB");
  }

  // GL_ARB_draw_elements_base_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_elements_base_vertex])
  {
    s_deviceConfig.m_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glDrawElementsBaseVertex");
    s_deviceConfig.m_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glDrawRangeElementsBaseVertex");
    s_deviceConfig.m_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) glewGetProcAddress ("glDrawElementsInstancedBaseVertex");
    s_deviceConfig.m_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) glewGetProcAddress ("glMultiDrawElementsBaseVertex");
  }

  // GL_ARB_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_indirect])
  {
    s_deviceConfig.m_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) glewGetProcAddress ("glDrawArraysIndirect");
    s_deviceConfig.m_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) glewGetProcAddress ("glDrawElementsIndirect");
  }

  // GL_ARB_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_draw_instanced])
  {
    s_deviceConfig.m_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC) glewGetProcAddress ("glDrawArraysInstancedARB");
    s_deviceConfig.m_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) glewGetProcAddress ("glDrawElementsInstancedARB");
  }

  // GL_ARB_fragment_program
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_fragment_program])
  {
    s_deviceConfig.m_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) glewGetProcAddress ("glProgramStringARB");
    s_deviceConfig.m_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) glewGetProcAddress ("glBindProgramARB");
    s_deviceConfig.m_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) glewGetProcAddress ("glDeleteProgramsARB");
    s_deviceConfig.m_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) glewGetProcAddress ("glGenProgramsARB");
    s_deviceConfig.m_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) glewGetProcAddress ("glProgramEnvParameter4dARB");
    s_deviceConfig.m_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) glewGetProcAddress ("glProgramEnvParameter4dvARB");
    s_deviceConfig.m_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) glewGetProcAddress ("glProgramEnvParameter4fARB");
    s_deviceConfig.m_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) glewGetProcAddress ("glProgramEnvParameter4fvARB");
    s_deviceConfig.m_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) glewGetProcAddress ("glProgramLocalParameter4dARB");
    s_deviceConfig.m_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) glewGetProcAddress ("glProgramLocalParameter4dvARB");
    s_deviceConfig.m_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) glewGetProcAddress ("glProgramLocalParameter4fARB");
    s_deviceConfig.m_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) glewGetProcAddress ("glProgramLocalParameter4fvARB");
    s_deviceConfig.m_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) glewGetProcAddress ("glGetProgramEnvParameterdvARB");
    s_deviceConfig.m_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) glewGetProcAddress ("glGetProgramEnvParameterfvARB");
    s_deviceConfig.m_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) glewGetProcAddress ("glGetProgramLocalParameterdvARB");
    s_deviceConfig.m_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) glewGetProcAddress ("glGetProgramLocalParameterfvARB");
    s_deviceConfig.m_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) glewGetProcAddress ("glGetProgramivARB");
    s_deviceConfig.m_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) glewGetProcAddress ("glGetProgramStringARB");
    s_deviceConfig.m_glIsProgramARB = (PFNGLISPROGRAMARBPROC) glewGetProcAddress ("glIsProgramARB");
  }

  // GL_ARB_framebuffer_no_attachments
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_framebuffer_no_attachments])
  {
    s_deviceConfig.m_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) glewGetProcAddress ("glFramebufferParameteri");
    s_deviceConfig.m_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetFramebufferParameteriv");
  }

  // GL_ARB_framebuffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_framebuffer_object])
  {
    s_deviceConfig.m_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) glewGetProcAddress ("glIsRenderbuffer");
    s_deviceConfig.m_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) glewGetProcAddress ("glBindRenderbuffer");
    s_deviceConfig.m_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) glewGetProcAddress ("glDeleteRenderbuffers");
    s_deviceConfig.m_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) glewGetProcAddress ("glGenRenderbuffers");
    s_deviceConfig.m_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) glewGetProcAddress ("glRenderbufferStorage");
    s_deviceConfig.m_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) glewGetProcAddress ("glGetRenderbufferParameteriv");
    s_deviceConfig.m_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) glewGetProcAddress ("glIsFramebuffer");
    s_deviceConfig.m_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) glewGetProcAddress ("glBindFramebuffer");
    s_deviceConfig.m_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) glewGetProcAddress ("glDeleteFramebuffers");
    s_deviceConfig.m_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) glewGetProcAddress ("glGenFramebuffers");
    s_deviceConfig.m_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) glewGetProcAddress ("glCheckFramebufferStatus");
    s_deviceConfig.m_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) glewGetProcAddress ("glFramebufferTexture1D");
    s_deviceConfig.m_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) glewGetProcAddress ("glFramebufferTexture2D");
    s_deviceConfig.m_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) glewGetProcAddress ("glFramebufferTexture3D");
    s_deviceConfig.m_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) glewGetProcAddress ("glFramebufferRenderbuffer");
    s_deviceConfig.m_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glewGetProcAddress ("glGetFramebufferAttachmentParameteriv");
    s_deviceConfig.m_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) glewGetProcAddress ("glGenerateMipmap");
    s_deviceConfig.m_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) glewGetProcAddress ("glBlitFramebuffer");
    s_deviceConfig.m_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) glewGetProcAddress ("glRenderbufferStorageMultisample");
    s_deviceConfig.m_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) glewGetProcAddress ("glFramebufferTextureLayer");
  }

  // GL_ARB_geometry_shader4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_geometry_shader4])
  {
    s_deviceConfig.m_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) glewGetProcAddress ("glProgramParameteriARB");
    s_deviceConfig.m_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) glewGetProcAddress ("glFramebufferTextureARB");
    s_deviceConfig.m_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) glewGetProcAddress ("glFramebufferTextureLayerARB");
    s_deviceConfig.m_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) glewGetProcAddress ("glFramebufferTextureFaceARB");
  }

  // GL_ARB_get_program_binary
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_get_program_binary])
  {
    s_deviceConfig.m_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) glewGetProcAddress ("glGetProgramBinary");
    s_deviceConfig.m_glProgramBinary = (PFNGLPROGRAMBINARYPROC) glewGetProcAddress ("glProgramBinary");
    s_deviceConfig.m_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) glewGetProcAddress ("glProgramParameteri");
  }

  // GL_ARB_get_texture_sub_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_get_texture_sub_image])
  {
    s_deviceConfig.m_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) glewGetProcAddress ("glGetTextureSubImage");
    s_deviceConfig.m_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) glewGetProcAddress ("glGetCompressedTextureSubImage");
  }

  // GL_ARB_gpu_shader_fp64
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_gpu_shader_fp64])
  {
    s_deviceConfig.m_glUniform1d = (PFNGLUNIFORM1DPROC) glewGetProcAddress ("glUniform1d");
    s_deviceConfig.m_glUniform2d = (PFNGLUNIFORM2DPROC) glewGetProcAddress ("glUniform2d");
    s_deviceConfig.m_glUniform3d = (PFNGLUNIFORM3DPROC) glewGetProcAddress ("glUniform3d");
    s_deviceConfig.m_glUniform4d = (PFNGLUNIFORM4DPROC) glewGetProcAddress ("glUniform4d");
    s_deviceConfig.m_glUniform1dv = (PFNGLUNIFORM1DVPROC) glewGetProcAddress ("glUniform1dv");
    s_deviceConfig.m_glUniform2dv = (PFNGLUNIFORM2DVPROC) glewGetProcAddress ("glUniform2dv");
    s_deviceConfig.m_glUniform3dv = (PFNGLUNIFORM3DVPROC) glewGetProcAddress ("glUniform3dv");
    s_deviceConfig.m_glUniform4dv = (PFNGLUNIFORM4DVPROC) glewGetProcAddress ("glUniform4dv");
    s_deviceConfig.m_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) glewGetProcAddress ("glUniformMatrix2dv");
    s_deviceConfig.m_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) glewGetProcAddress ("glUniformMatrix3dv");
    s_deviceConfig.m_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) glewGetProcAddress ("glUniformMatrix4dv");
    s_deviceConfig.m_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) glewGetProcAddress ("glUniformMatrix2x3dv");
    s_deviceConfig.m_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) glewGetProcAddress ("glUniformMatrix2x4dv");
    s_deviceConfig.m_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) glewGetProcAddress ("glUniformMatrix3x2dv");
    s_deviceConfig.m_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) glewGetProcAddress ("glUniformMatrix3x4dv");
    s_deviceConfig.m_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) glewGetProcAddress ("glUniformMatrix4x2dv");
    s_deviceConfig.m_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) glewGetProcAddress ("glUniformMatrix4x3dv");
    s_deviceConfig.m_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) glewGetProcAddress ("glGetUniformdv");
  }

  // GL_ARB_imaging
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_imaging])
  {
    s_deviceConfig.m_glBlendColor = (PFNGLBLENDCOLORPROC) glewGetProcAddress ("glBlendColor");
    s_deviceConfig.m_glBlendEquation = (PFNGLBLENDEQUATIONPROC) glewGetProcAddress ("glBlendEquation");
  }

  // GL_ARB_imaging
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_imaging])
  {
    s_deviceConfig.m_glColorTable = (PFNGLCOLORTABLEPROC) glewGetProcAddress ("glColorTable");
    s_deviceConfig.m_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC) glewGetProcAddress ("glColorTableParameterfv");
    s_deviceConfig.m_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC) glewGetProcAddress ("glColorTableParameteriv");
    s_deviceConfig.m_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC) glewGetProcAddress ("glCopyColorTable");
    s_deviceConfig.m_glGetColorTable = (PFNGLGETCOLORTABLEPROC) glewGetProcAddress ("glGetColorTable");
    s_deviceConfig.m_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC) glewGetProcAddress ("glGetColorTableParameterfv");
    s_deviceConfig.m_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC) glewGetProcAddress ("glGetColorTableParameteriv");
    s_deviceConfig.m_glColorSubTable = (PFNGLCOLORSUBTABLEPROC) glewGetProcAddress ("glColorSubTable");
    s_deviceConfig.m_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC) glewGetProcAddress ("glCopyColorSubTable");
    s_deviceConfig.m_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC) glewGetProcAddress ("glConvolutionFilter1D");
    s_deviceConfig.m_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC) glewGetProcAddress ("glConvolutionFilter2D");
    s_deviceConfig.m_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC) glewGetProcAddress ("glConvolutionParameterf");
    s_deviceConfig.m_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC) glewGetProcAddress ("glConvolutionParameterfv");
    s_deviceConfig.m_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC) glewGetProcAddress ("glConvolutionParameteri");
    s_deviceConfig.m_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC) glewGetProcAddress ("glConvolutionParameteriv");
    s_deviceConfig.m_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC) glewGetProcAddress ("glCopyConvolutionFilter1D");
    s_deviceConfig.m_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC) glewGetProcAddress ("glCopyConvolutionFilter2D");
    s_deviceConfig.m_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC) glewGetProcAddress ("glGetConvolutionFilter");
    s_deviceConfig.m_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC) glewGetProcAddress ("glGetConvolutionParameterfv");
    s_deviceConfig.m_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC) glewGetProcAddress ("glGetConvolutionParameteriv");
    s_deviceConfig.m_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC) glewGetProcAddress ("glGetSeparableFilter");
    s_deviceConfig.m_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC) glewGetProcAddress ("glSeparableFilter2D");
    s_deviceConfig.m_glGetHistogram = (PFNGLGETHISTOGRAMPROC) glewGetProcAddress ("glGetHistogram");
    s_deviceConfig.m_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC) glewGetProcAddress ("glGetHistogramParameterfv");
    s_deviceConfig.m_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC) glewGetProcAddress ("glGetHistogramParameteriv");
    s_deviceConfig.m_glGetMinmax = (PFNGLGETMINMAXPROC) glewGetProcAddress ("glGetMinmax");
    s_deviceConfig.m_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC) glewGetProcAddress ("glGetMinmaxParameterfv");
    s_deviceConfig.m_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC) glewGetProcAddress ("glGetMinmaxParameteriv");
    s_deviceConfig.m_glHistogram = (PFNGLHISTOGRAMPROC) glewGetProcAddress ("glHistogram");
    s_deviceConfig.m_glMinmax = (PFNGLMINMAXPROC) glewGetProcAddress ("glMinmax");
    s_deviceConfig.m_glResetHistogram = (PFNGLRESETHISTOGRAMPROC) glewGetProcAddress ("glResetHistogram");
    s_deviceConfig.m_glResetMinmax = (PFNGLRESETMINMAXPROC) glewGetProcAddress ("glResetMinmax");
  }

  // GL_ARB_indirect_parameters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_indirect_parameters])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) glewGetProcAddress ("glMultiDrawArraysIndirectCountARB");
    s_deviceConfig.m_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) glewGetProcAddress ("glMultiDrawElementsIndirectCountARB");
  }

  // GL_ARB_instanced_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_instanced_arrays])
  {
    s_deviceConfig.m_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC) glewGetProcAddress ("glVertexAttribDivisorARB");
  }

  // GL_ARB_internalformat_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_internalformat_query])
  {
    s_deviceConfig.m_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) glewGetProcAddress ("glGetInternalformativ");
  }

  // GL_ARB_internalformat_query2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_internalformat_query2])
  {
    s_deviceConfig.m_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) glewGetProcAddress ("glGetInternalformati64v");
  }

  // GL_ARB_invalidate_subdata
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_invalidate_subdata])
  {
    s_deviceConfig.m_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) glewGetProcAddress ("glInvalidateTexSubImage");
    s_deviceConfig.m_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) glewGetProcAddress ("glInvalidateTexImage");
    s_deviceConfig.m_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) glewGetProcAddress ("glInvalidateBufferSubData");
    s_deviceConfig.m_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) glewGetProcAddress ("glInvalidateBufferData");
    s_deviceConfig.m_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateFramebuffer");
    s_deviceConfig.m_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) glewGetProcAddress ("glInvalidateSubFramebuffer");
  }

  // GL_ARB_map_buffer_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_map_buffer_range])
  {
    s_deviceConfig.m_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) glewGetProcAddress ("glMapBufferRange");
    s_deviceConfig.m_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) glewGetProcAddress ("glFlushMappedBufferRange");
  }

  // GL_ARB_matrix_palette
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_matrix_palette])
  {
    s_deviceConfig.m_glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC) glewGetProcAddress ("glCurrentPaletteMatrixARB");
    s_deviceConfig.m_glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC) glewGetProcAddress ("glMatrixIndexubvARB");
    s_deviceConfig.m_glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC) glewGetProcAddress ("glMatrixIndexusvARB");
    s_deviceConfig.m_glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC) glewGetProcAddress ("glMatrixIndexuivARB");
    s_deviceConfig.m_glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC) glewGetProcAddress ("glMatrixIndexPointerARB");
  }

  // GL_ARB_multi_bind
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multi_bind])
  {
    s_deviceConfig.m_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) glewGetProcAddress ("glBindBuffersBase");
    s_deviceConfig.m_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) glewGetProcAddress ("glBindBuffersRange");
    s_deviceConfig.m_glBindTextures = (PFNGLBINDTEXTURESPROC) glewGetProcAddress ("glBindTextures");
    s_deviceConfig.m_glBindSamplers = (PFNGLBINDSAMPLERSPROC) glewGetProcAddress ("glBindSamplers");
    s_deviceConfig.m_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) glewGetProcAddress ("glBindImageTextures");
    s_deviceConfig.m_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) glewGetProcAddress ("glBindVertexBuffers");
  }

  // GL_ARB_multi_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multi_draw_indirect])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) glewGetProcAddress ("glMultiDrawArraysIndirect");
    s_deviceConfig.m_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) glewGetProcAddress ("glMultiDrawElementsIndirect");
  }

  // GL_ARB_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multisample])
  {
    s_deviceConfig.m_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) glewGetProcAddress ("glSampleCoverageARB");
  }

  // GL_ARB_multitexture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_multitexture])
  {
    s_deviceConfig.m_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC) glewGetProcAddress ("glActiveTextureARB");
    s_deviceConfig.m_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) glewGetProcAddress ("glClientActiveTextureARB");
    s_deviceConfig.m_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) glewGetProcAddress ("glMultiTexCoord1dARB");
    s_deviceConfig.m_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) glewGetProcAddress ("glMultiTexCoord1dvARB");
    s_deviceConfig.m_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) glewGetProcAddress ("glMultiTexCoord1fARB");
    s_deviceConfig.m_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) glewGetProcAddress ("glMultiTexCoord1fvARB");
    s_deviceConfig.m_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) glewGetProcAddress ("glMultiTexCoord1iARB");
    s_deviceConfig.m_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) glewGetProcAddress ("glMultiTexCoord1ivARB");
    s_deviceConfig.m_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) glewGetProcAddress ("glMultiTexCoord1sARB");
    s_deviceConfig.m_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) glewGetProcAddress ("glMultiTexCoord1svARB");
    s_deviceConfig.m_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) glewGetProcAddress ("glMultiTexCoord2dARB");
    s_deviceConfig.m_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) glewGetProcAddress ("glMultiTexCoord2dvARB");
    s_deviceConfig.m_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) glewGetProcAddress ("glMultiTexCoord2fARB");
    s_deviceConfig.m_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) glewGetProcAddress ("glMultiTexCoord2fvARB");
    s_deviceConfig.m_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) glewGetProcAddress ("glMultiTexCoord2iARB");
    s_deviceConfig.m_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) glewGetProcAddress ("glMultiTexCoord2ivARB");
    s_deviceConfig.m_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) glewGetProcAddress ("glMultiTexCoord2sARB");
    s_deviceConfig.m_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) glewGetProcAddress ("glMultiTexCoord2svARB");
    s_deviceConfig.m_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) glewGetProcAddress ("glMultiTexCoord3dARB");
    s_deviceConfig.m_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) glewGetProcAddress ("glMultiTexCoord3dvARB");
    s_deviceConfig.m_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) glewGetProcAddress ("glMultiTexCoord3fARB");
    s_deviceConfig.m_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) glewGetProcAddress ("glMultiTexCoord3fvARB");
    s_deviceConfig.m_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) glewGetProcAddress ("glMultiTexCoord3iARB");
    s_deviceConfig.m_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) glewGetProcAddress ("glMultiTexCoord3ivARB");
    s_deviceConfig.m_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) glewGetProcAddress ("glMultiTexCoord3sARB");
    s_deviceConfig.m_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) glewGetProcAddress ("glMultiTexCoord3svARB");
    s_deviceConfig.m_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) glewGetProcAddress ("glMultiTexCoord4dARB");
    s_deviceConfig.m_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) glewGetProcAddress ("glMultiTexCoord4dvARB");
    s_deviceConfig.m_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) glewGetProcAddress ("glMultiTexCoord4fARB");
    s_deviceConfig.m_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) glewGetProcAddress ("glMultiTexCoord4fvARB");
    s_deviceConfig.m_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) glewGetProcAddress ("glMultiTexCoord4iARB");
    s_deviceConfig.m_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) glewGetProcAddress ("glMultiTexCoord4ivARB");
    s_deviceConfig.m_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) glewGetProcAddress ("glMultiTexCoord4sARB");
    s_deviceConfig.m_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) glewGetProcAddress ("glMultiTexCoord4svARB");
  }

  // GL_ARB_occlusion_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_occlusion_query])
  {
    s_deviceConfig.m_glGenQueriesARB = (PFNGLGENQUERIESARBPROC) glewGetProcAddress ("glGenQueriesARB");
    s_deviceConfig.m_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC) glewGetProcAddress ("glDeleteQueriesARB");
    s_deviceConfig.m_glIsQueryARB = (PFNGLISQUERYARBPROC) glewGetProcAddress ("glIsQueryARB");
    s_deviceConfig.m_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC) glewGetProcAddress ("glBeginQueryARB");
    s_deviceConfig.m_glEndQueryARB = (PFNGLENDQUERYARBPROC) glewGetProcAddress ("glEndQueryARB");
    s_deviceConfig.m_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC) glewGetProcAddress ("glGetQueryivARB");
    s_deviceConfig.m_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC) glewGetProcAddress ("glGetQueryObjectivARB");
    s_deviceConfig.m_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) glewGetProcAddress ("glGetQueryObjectuivARB");
  }

  // GL_ARB_point_parameters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_point_parameters])
  {
    s_deviceConfig.m_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC) glewGetProcAddress ("glPointParameterfARB");
    s_deviceConfig.m_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) glewGetProcAddress ("glPointParameterfvARB");
  }

  // GL_ARB_program_interface_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_program_interface_query])
  {
    s_deviceConfig.m_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) glewGetProcAddress ("glGetProgramInterfaceiv");
    s_deviceConfig.m_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) glewGetProcAddress ("glGetProgramResourceIndex");
    s_deviceConfig.m_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) glewGetProcAddress ("glGetProgramResourceName");
    s_deviceConfig.m_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) glewGetProcAddress ("glGetProgramResourceiv");
    s_deviceConfig.m_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) glewGetProcAddress ("glGetProgramResourceLocation");
    s_deviceConfig.m_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) glewGetProcAddress ("glGetProgramResourceLocationIndex");
  }

  // GL_ARB_provoking_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_provoking_vertex])
  {
    s_deviceConfig.m_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) glewGetProcAddress ("glProvokingVertex");
  }

  // GL_ARB_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_robustness])
  {
    s_deviceConfig.m_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC) glewGetProcAddress ("glGetGraphicsResetStatusARB");
    s_deviceConfig.m_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC) glewGetProcAddress ("glGetnTexImageARB");
    s_deviceConfig.m_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC) glewGetProcAddress ("glReadnPixelsARB");
    s_deviceConfig.m_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) glewGetProcAddress ("glGetnCompressedTexImageARB");
    s_deviceConfig.m_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC) glewGetProcAddress ("glGetnUniformfvARB");
    s_deviceConfig.m_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC) glewGetProcAddress ("glGetnUniformivARB");
    s_deviceConfig.m_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC) glewGetProcAddress ("glGetnUniformuivARB");
    s_deviceConfig.m_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC) glewGetProcAddress ("glGetnUniformdvARB");
  }

  // GL_ARB_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_robustness])
  {
    s_deviceConfig.m_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC) glewGetProcAddress ("glGetnMapdvARB");
    s_deviceConfig.m_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC) glewGetProcAddress ("glGetnMapfvARB");
    s_deviceConfig.m_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC) glewGetProcAddress ("glGetnMapivARB");
    s_deviceConfig.m_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC) glewGetProcAddress ("glGetnPixelMapfvARB");
    s_deviceConfig.m_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC) glewGetProcAddress ("glGetnPixelMapuivARB");
    s_deviceConfig.m_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC) glewGetProcAddress ("glGetnPixelMapusvARB");
    s_deviceConfig.m_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC) glewGetProcAddress ("glGetnPolygonStippleARB");
    s_deviceConfig.m_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC) glewGetProcAddress ("glGetnColorTableARB");
    s_deviceConfig.m_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC) glewGetProcAddress ("glGetnConvolutionFilterARB");
    s_deviceConfig.m_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC) glewGetProcAddress ("glGetnSeparableFilterARB");
    s_deviceConfig.m_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC) glewGetProcAddress ("glGetnHistogramARB");
    s_deviceConfig.m_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC) glewGetProcAddress ("glGetnMinmaxARB");
  }

  // GL_ARB_sample_shading
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sample_shading])
  {
    s_deviceConfig.m_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) glewGetProcAddress ("glMinSampleShadingARB");
  }

  // GL_ARB_sampler_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sampler_objects])
  {
    s_deviceConfig.m_glGenSamplers = (PFNGLGENSAMPLERSPROC) glewGetProcAddress ("glGenSamplers");
    s_deviceConfig.m_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) glewGetProcAddress ("glDeleteSamplers");
    s_deviceConfig.m_glIsSampler = (PFNGLISSAMPLERPROC) glewGetProcAddress ("glIsSampler");
    s_deviceConfig.m_glBindSampler = (PFNGLBINDSAMPLERPROC) glewGetProcAddress ("glBindSampler");
    s_deviceConfig.m_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) glewGetProcAddress ("glSamplerParameteri");
    s_deviceConfig.m_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glSamplerParameteriv");
    s_deviceConfig.m_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) glewGetProcAddress ("glSamplerParameterf");
    s_deviceConfig.m_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glSamplerParameterfv");
    s_deviceConfig.m_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) glewGetProcAddress ("glSamplerParameterIiv");
    s_deviceConfig.m_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) glewGetProcAddress ("glSamplerParameterIuiv");
    s_deviceConfig.m_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) glewGetProcAddress ("glGetSamplerParameteriv");
    s_deviceConfig.m_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) glewGetProcAddress ("glGetSamplerParameterIiv");
    s_deviceConfig.m_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) glewGetProcAddress ("glGetSamplerParameterfv");
    s_deviceConfig.m_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) glewGetProcAddress ("glGetSamplerParameterIuiv");
  }

  // GL_ARB_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_separate_shader_objects])
  {
    s_deviceConfig.m_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) glewGetProcAddress ("glUseProgramStages");
    s_deviceConfig.m_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) glewGetProcAddress ("glActiveShaderProgram");
    s_deviceConfig.m_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) glewGetProcAddress ("glCreateShaderProgramv");
    s_deviceConfig.m_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) glewGetProcAddress ("glBindProgramPipeline");
    s_deviceConfig.m_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) glewGetProcAddress ("glDeleteProgramPipelines");
    s_deviceConfig.m_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) glewGetProcAddress ("glGenProgramPipelines");
    s_deviceConfig.m_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) glewGetProcAddress ("glIsProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) glewGetProcAddress ("glGetProgramPipelineiv");
    s_deviceConfig.m_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) glewGetProcAddress ("glProgramUniform1i");
    s_deviceConfig.m_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) glewGetProcAddress ("glProgramUniform1iv");
    s_deviceConfig.m_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) glewGetProcAddress ("glProgramUniform1f");
    s_deviceConfig.m_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) glewGetProcAddress ("glProgramUniform1fv");
    s_deviceConfig.m_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) glewGetProcAddress ("glProgramUniform1d");
    s_deviceConfig.m_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) glewGetProcAddress ("glProgramUniform1dv");
    s_deviceConfig.m_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) glewGetProcAddress ("glProgramUniform1ui");
    s_deviceConfig.m_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) glewGetProcAddress ("glProgramUniform1uiv");
    s_deviceConfig.m_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) glewGetProcAddress ("glProgramUniform2i");
    s_deviceConfig.m_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) glewGetProcAddress ("glProgramUniform2iv");
    s_deviceConfig.m_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) glewGetProcAddress ("glProgramUniform2f");
    s_deviceConfig.m_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) glewGetProcAddress ("glProgramUniform2fv");
    s_deviceConfig.m_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) glewGetProcAddress ("glProgramUniform2d");
    s_deviceConfig.m_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) glewGetProcAddress ("glProgramUniform2dv");
    s_deviceConfig.m_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) glewGetProcAddress ("glProgramUniform2ui");
    s_deviceConfig.m_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) glewGetProcAddress ("glProgramUniform2uiv");
    s_deviceConfig.m_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) glewGetProcAddress ("glProgramUniform3i");
    s_deviceConfig.m_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) glewGetProcAddress ("glProgramUniform3iv");
    s_deviceConfig.m_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) glewGetProcAddress ("glProgramUniform3f");
    s_deviceConfig.m_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) glewGetProcAddress ("glProgramUniform3fv");
    s_deviceConfig.m_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) glewGetProcAddress ("glProgramUniform3d");
    s_deviceConfig.m_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) glewGetProcAddress ("glProgramUniform3dv");
    s_deviceConfig.m_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) glewGetProcAddress ("glProgramUniform3ui");
    s_deviceConfig.m_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) glewGetProcAddress ("glProgramUniform3uiv");
    s_deviceConfig.m_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) glewGetProcAddress ("glProgramUniform4i");
    s_deviceConfig.m_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) glewGetProcAddress ("glProgramUniform4iv");
    s_deviceConfig.m_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) glewGetProcAddress ("glProgramUniform4f");
    s_deviceConfig.m_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) glewGetProcAddress ("glProgramUniform4fv");
    s_deviceConfig.m_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) glewGetProcAddress ("glProgramUniform4d");
    s_deviceConfig.m_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) glewGetProcAddress ("glProgramUniform4dv");
    s_deviceConfig.m_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) glewGetProcAddress ("glProgramUniform4ui");
    s_deviceConfig.m_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) glewGetProcAddress ("glProgramUniform4uiv");
    s_deviceConfig.m_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) glewGetProcAddress ("glProgramUniformMatrix2fv");
    s_deviceConfig.m_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) glewGetProcAddress ("glProgramUniformMatrix3fv");
    s_deviceConfig.m_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) glewGetProcAddress ("glProgramUniformMatrix4fv");
    s_deviceConfig.m_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) glewGetProcAddress ("glProgramUniformMatrix2dv");
    s_deviceConfig.m_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) glewGetProcAddress ("glProgramUniformMatrix3dv");
    s_deviceConfig.m_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) glewGetProcAddress ("glProgramUniformMatrix4dv");
    s_deviceConfig.m_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x3fv");
    s_deviceConfig.m_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x2fv");
    s_deviceConfig.m_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix2x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x2fv");
    s_deviceConfig.m_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) glewGetProcAddress ("glProgramUniformMatrix3x4fv");
    s_deviceConfig.m_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) glewGetProcAddress ("glProgramUniformMatrix4x3fv");
    s_deviceConfig.m_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) glewGetProcAddress ("glProgramUniformMatrix2x3dv");
    s_deviceConfig.m_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) glewGetProcAddress ("glProgramUniformMatrix3x2dv");
    s_deviceConfig.m_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) glewGetProcAddress ("glProgramUniformMatrix2x4dv");
    s_deviceConfig.m_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) glewGetProcAddress ("glProgramUniformMatrix4x2dv");
    s_deviceConfig.m_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) glewGetProcAddress ("glProgramUniformMatrix3x4dv");
    s_deviceConfig.m_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) glewGetProcAddress ("glProgramUniformMatrix4x3dv");
    s_deviceConfig.m_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) glewGetProcAddress ("glValidateProgramPipeline");
    s_deviceConfig.m_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) glewGetProcAddress ("glGetProgramPipelineInfoLog");
  }

  // GL_ARB_shader_atomic_counters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_atomic_counters])
  {
    s_deviceConfig.m_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) glewGetProcAddress ("glGetActiveAtomicCounterBufferiv");
  }

  // GL_ARB_shader_image_load_store
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_image_load_store])
  {
    s_deviceConfig.m_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) glewGetProcAddress ("glBindImageTexture");
    s_deviceConfig.m_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) glewGetProcAddress ("glMemoryBarrier");
  }

  // GL_ARB_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_objects])
  {
    s_deviceConfig.m_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC) glewGetProcAddress ("glDeleteObjectARB");
    s_deviceConfig.m_glGetHandleARB = (PFNGLGETHANDLEARBPROC) glewGetProcAddress ("glGetHandleARB");
    s_deviceConfig.m_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC) glewGetProcAddress ("glDetachObjectARB");
    s_deviceConfig.m_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) glewGetProcAddress ("glCreateShaderObjectARB");
    s_deviceConfig.m_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC) glewGetProcAddress ("glShaderSourceARB");
    s_deviceConfig.m_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC) glewGetProcAddress ("glCompileShaderARB");
    s_deviceConfig.m_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) glewGetProcAddress ("glCreateProgramObjectARB");
    s_deviceConfig.m_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC) glewGetProcAddress ("glAttachObjectARB");
    s_deviceConfig.m_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC) glewGetProcAddress ("glLinkProgramARB");
    s_deviceConfig.m_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) glewGetProcAddress ("glUseProgramObjectARB");
    s_deviceConfig.m_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) glewGetProcAddress ("glValidateProgramARB");
    s_deviceConfig.m_glUniform1fARB = (PFNGLUNIFORM1FARBPROC) glewGetProcAddress ("glUniform1fARB");
    s_deviceConfig.m_glUniform2fARB = (PFNGLUNIFORM2FARBPROC) glewGetProcAddress ("glUniform2fARB");
    s_deviceConfig.m_glUniform3fARB = (PFNGLUNIFORM3FARBPROC) glewGetProcAddress ("glUniform3fARB");
    s_deviceConfig.m_glUniform4fARB = (PFNGLUNIFORM4FARBPROC) glewGetProcAddress ("glUniform4fARB");
    s_deviceConfig.m_glUniform1iARB = (PFNGLUNIFORM1IARBPROC) glewGetProcAddress ("glUniform1iARB");
    s_deviceConfig.m_glUniform2iARB = (PFNGLUNIFORM2IARBPROC) glewGetProcAddress ("glUniform2iARB");
    s_deviceConfig.m_glUniform3iARB = (PFNGLUNIFORM3IARBPROC) glewGetProcAddress ("glUniform3iARB");
    s_deviceConfig.m_glUniform4iARB = (PFNGLUNIFORM4IARBPROC) glewGetProcAddress ("glUniform4iARB");
    s_deviceConfig.m_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC) glewGetProcAddress ("glUniform1fvARB");
    s_deviceConfig.m_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC) glewGetProcAddress ("glUniform2fvARB");
    s_deviceConfig.m_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC) glewGetProcAddress ("glUniform3fvARB");
    s_deviceConfig.m_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC) glewGetProcAddress ("glUniform4fvARB");
    s_deviceConfig.m_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC) glewGetProcAddress ("glUniform1ivARB");
    s_deviceConfig.m_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC) glewGetProcAddress ("glUniform2ivARB");
    s_deviceConfig.m_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC) glewGetProcAddress ("glUniform3ivARB");
    s_deviceConfig.m_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC) glewGetProcAddress ("glUniform4ivARB");
    s_deviceConfig.m_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) glewGetProcAddress ("glUniformMatrix2fvARB");
    s_deviceConfig.m_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) glewGetProcAddress ("glUniformMatrix3fvARB");
    s_deviceConfig.m_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) glewGetProcAddress ("glUniformMatrix4fvARB");
    s_deviceConfig.m_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) glewGetProcAddress ("glGetObjectParameterfvARB");
    s_deviceConfig.m_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) glewGetProcAddress ("glGetObjectParameterivARB");
    s_deviceConfig.m_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC) glewGetProcAddress ("glGetInfoLogARB");
    s_deviceConfig.m_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) glewGetProcAddress ("glGetAttachedObjectsARB");
    s_deviceConfig.m_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) glewGetProcAddress ("glGetUniformLocationARB");
    s_deviceConfig.m_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) glewGetProcAddress ("glGetActiveUniformARB");
    s_deviceConfig.m_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) glewGetProcAddress ("glGetUniformfvARB");
    s_deviceConfig.m_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC) glewGetProcAddress ("glGetUniformivARB");
    s_deviceConfig.m_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) glewGetProcAddress ("glGetShaderSourceARB");
  }

  // GL_ARB_shader_storage_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_storage_buffer_object])
  {
    s_deviceConfig.m_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) glewGetProcAddress ("glShaderStorageBlockBinding");
  }

  // GL_ARB_shader_subroutine
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shader_subroutine])
  {
    s_deviceConfig.m_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) glewGetProcAddress ("glGetSubroutineUniformLocation");
    s_deviceConfig.m_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) glewGetProcAddress ("glGetSubroutineIndex");
    s_deviceConfig.m_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) glewGetProcAddress ("glGetActiveSubroutineUniformiv");
    s_deviceConfig.m_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) glewGetProcAddress ("glGetActiveSubroutineUniformName");
    s_deviceConfig.m_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) glewGetProcAddress ("glGetActiveSubroutineName");
    s_deviceConfig.m_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) glewGetProcAddress ("glUniformSubroutinesuiv");
    s_deviceConfig.m_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) glewGetProcAddress ("glGetUniformSubroutineuiv");
    s_deviceConfig.m_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) glewGetProcAddress ("glGetProgramStageiv");
  }

  // GL_ARB_shading_language_include
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_shading_language_include])
  {
    s_deviceConfig.m_glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC) glewGetProcAddress ("glNamedStringARB");
    s_deviceConfig.m_glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC) glewGetProcAddress ("glDeleteNamedStringARB");
    s_deviceConfig.m_glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC) glewGetProcAddress ("glCompileShaderIncludeARB");
    s_deviceConfig.m_glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC) glewGetProcAddress ("glIsNamedStringARB");
    s_deviceConfig.m_glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC) glewGetProcAddress ("glGetNamedStringARB");
    s_deviceConfig.m_glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC) glewGetProcAddress ("glGetNamedStringivARB");
  }

  // GL_ARB_sparse_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_buffer])
  {
    s_deviceConfig.m_glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC) glewGetProcAddress ("glBufferPageCommitmentARB");
  }

  // GL_ARB_sparse_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_buffer])
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) glewGetProcAddress ("glNamedBufferPageCommitmentEXT");
  }

  // GL_ARB_sparse_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_buffer])
  {
    s_deviceConfig.m_glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) glewGetProcAddress ("glNamedBufferPageCommitmentARB");
  }

  // GL_ARB_sparse_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sparse_texture])
  {
    s_deviceConfig.m_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC) glewGetProcAddress ("glTexPageCommitmentARB");
  }

  // GL_ARB_sync
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_sync])
  {
    s_deviceConfig.m_glFenceSync = (PFNGLFENCESYNCPROC) glewGetProcAddress ("glFenceSync");
    s_deviceConfig.m_glIsSync = (PFNGLISSYNCPROC) glewGetProcAddress ("glIsSync");
    s_deviceConfig.m_glDeleteSync = (PFNGLDELETESYNCPROC) glewGetProcAddress ("glDeleteSync");
    s_deviceConfig.m_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) glewGetProcAddress ("glClientWaitSync");
    s_deviceConfig.m_glWaitSync = (PFNGLWAITSYNCPROC) glewGetProcAddress ("glWaitSync");
    s_deviceConfig.m_glGetInteger64v = (PFNGLGETINTEGER64VPROC) glewGetProcAddress ("glGetInteger64v");
    s_deviceConfig.m_glGetSynciv = (PFNGLGETSYNCIVPROC) glewGetProcAddress ("glGetSynciv");
  }

  // GL_ARB_tessellation_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_tessellation_shader])
  {
    s_deviceConfig.m_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) glewGetProcAddress ("glPatchParameteri");
    s_deviceConfig.m_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) glewGetProcAddress ("glPatchParameterfv");
  }

  // GL_ARB_texture_barrier
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_barrier])
  {
    s_deviceConfig.m_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) glewGetProcAddress ("glTextureBarrier");
  }

  // GL_ARB_texture_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_buffer_object])
  {
    s_deviceConfig.m_glTexBufferARB = (PFNGLTEXBUFFERARBPROC) glewGetProcAddress ("glTexBufferARB");
  }

  // GL_ARB_texture_buffer_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_buffer_range])
  {
    s_deviceConfig.m_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) glewGetProcAddress ("glTexBufferRange");
  }

  // GL_ARB_texture_compression
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_compression])
  {
    s_deviceConfig.m_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) glewGetProcAddress ("glCompressedTexImage3DARB");
    s_deviceConfig.m_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) glewGetProcAddress ("glCompressedTexImage2DARB");
    s_deviceConfig.m_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) glewGetProcAddress ("glCompressedTexImage1DARB");
    s_deviceConfig.m_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) glewGetProcAddress ("glCompressedTexSubImage3DARB");
    s_deviceConfig.m_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) glewGetProcAddress ("glCompressedTexSubImage2DARB");
    s_deviceConfig.m_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) glewGetProcAddress ("glCompressedTexSubImage1DARB");
    s_deviceConfig.m_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) glewGetProcAddress ("glGetCompressedTexImageARB");
  }

  // GL_ARB_texture_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_multisample])
  {
    s_deviceConfig.m_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTexImage2DMultisample");
    s_deviceConfig.m_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTexImage3DMultisample");
    s_deviceConfig.m_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) glewGetProcAddress ("glGetMultisamplefv");
    s_deviceConfig.m_glSampleMaski = (PFNGLSAMPLEMASKIPROC) glewGetProcAddress ("glSampleMaski");
  }

  // GL_ARB_texture_storage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_storage])
  {
    s_deviceConfig.m_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) glewGetProcAddress ("glTexStorage1D");
    s_deviceConfig.m_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) glewGetProcAddress ("glTexStorage2D");
    s_deviceConfig.m_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) glewGetProcAddress ("glTexStorage3D");
  }

  // GL_ARB_texture_storage_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_storage_multisample])
  {
    s_deviceConfig.m_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) glewGetProcAddress ("glTexStorage2DMultisample");
    s_deviceConfig.m_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) glewGetProcAddress ("glTexStorage3DMultisample");
  }

  // GL_ARB_texture_view
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_texture_view])
  {
    s_deviceConfig.m_glTextureView = (PFNGLTEXTUREVIEWPROC) glewGetProcAddress ("glTextureView");
  }

  // GL_ARB_timer_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_timer_query])
  {
    s_deviceConfig.m_glQueryCounter = (PFNGLQUERYCOUNTERPROC) glewGetProcAddress ("glQueryCounter");
    s_deviceConfig.m_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) glewGetProcAddress ("glGetQueryObjecti64v");
    s_deviceConfig.m_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) glewGetProcAddress ("glGetQueryObjectui64v");
  }

  // GL_ARB_transform_feedback2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback2])
  {
    s_deviceConfig.m_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glBindTransformFeedback");
    s_deviceConfig.m_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glDeleteTransformFeedbacks");
    s_deviceConfig.m_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) glewGetProcAddress ("glGenTransformFeedbacks");
    s_deviceConfig.m_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glIsTransformFeedback");
    s_deviceConfig.m_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glPauseTransformFeedback");
    s_deviceConfig.m_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) glewGetProcAddress ("glResumeTransformFeedback");
    s_deviceConfig.m_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) glewGetProcAddress ("glDrawTransformFeedback");
  }

  // GL_ARB_transform_feedback3
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback3])
  {
    s_deviceConfig.m_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) glewGetProcAddress ("glDrawTransformFeedbackStream");
    s_deviceConfig.m_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) glewGetProcAddress ("glBeginQueryIndexed");
    s_deviceConfig.m_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) glewGetProcAddress ("glEndQueryIndexed");
    s_deviceConfig.m_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) glewGetProcAddress ("glGetQueryIndexediv");
  }

  // GL_ARB_transform_feedback_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transform_feedback_instanced])
  {
    s_deviceConfig.m_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) glewGetProcAddress ("glDrawTransformFeedbackInstanced");
    s_deviceConfig.m_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) glewGetProcAddress ("glDrawTransformFeedbackStreamInstanced");
  }

  // GL_ARB_transpose_matrix
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_transpose_matrix])
  {
    s_deviceConfig.m_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC) glewGetProcAddress ("glLoadTransposeMatrixfARB");
    s_deviceConfig.m_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC) glewGetProcAddress ("glLoadTransposeMatrixdARB");
    s_deviceConfig.m_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC) glewGetProcAddress ("glMultTransposeMatrixfARB");
    s_deviceConfig.m_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC) glewGetProcAddress ("glMultTransposeMatrixdARB");
  }

  // GL_ARB_uniform_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_uniform_buffer_object])
  {
    s_deviceConfig.m_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) glewGetProcAddress ("glGetUniformIndices");
    s_deviceConfig.m_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) glewGetProcAddress ("glGetActiveUniformsiv");
    s_deviceConfig.m_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) glewGetProcAddress ("glGetActiveUniformName");
    s_deviceConfig.m_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) glewGetProcAddress ("glGetUniformBlockIndex");
    s_deviceConfig.m_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) glewGetProcAddress ("glGetActiveUniformBlockiv");
    s_deviceConfig.m_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) glewGetProcAddress ("glGetActiveUniformBlockName");
    s_deviceConfig.m_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) glewGetProcAddress ("glUniformBlockBinding");
    s_deviceConfig.m_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glewGetProcAddress ("glBindBufferRange");
    s_deviceConfig.m_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glewGetProcAddress ("glBindBufferBase");
    s_deviceConfig.m_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glewGetProcAddress ("glGetIntegeri_v");
  }

  // GL_ARB_vertex_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_array_object])
  {
    s_deviceConfig.m_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) glewGetProcAddress ("glBindVertexArray");
    s_deviceConfig.m_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) glewGetProcAddress ("glDeleteVertexArrays");
    s_deviceConfig.m_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) glewGetProcAddress ("glGenVertexArrays");
    s_deviceConfig.m_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) glewGetProcAddress ("glIsVertexArray");
  }

  // GL_ARB_vertex_attrib_64bit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_attrib_64bit])
  {
    s_deviceConfig.m_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) glewGetProcAddress ("glVertexAttribL1d");
    s_deviceConfig.m_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) glewGetProcAddress ("glVertexAttribL2d");
    s_deviceConfig.m_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) glewGetProcAddress ("glVertexAttribL3d");
    s_deviceConfig.m_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) glewGetProcAddress ("glVertexAttribL4d");
    s_deviceConfig.m_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) glewGetProcAddress ("glVertexAttribL1dv");
    s_deviceConfig.m_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) glewGetProcAddress ("glVertexAttribL2dv");
    s_deviceConfig.m_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) glewGetProcAddress ("glVertexAttribL3dv");
    s_deviceConfig.m_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) glewGetProcAddress ("glVertexAttribL4dv");
    s_deviceConfig.m_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) glewGetProcAddress ("glVertexAttribLPointer");
    s_deviceConfig.m_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) glewGetProcAddress ("glGetVertexAttribLdv");
  }

  // GL_ARB_vertex_attrib_binding
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_attrib_binding])
  {
    s_deviceConfig.m_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) glewGetProcAddress ("glBindVertexBuffer");
    s_deviceConfig.m_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) glewGetProcAddress ("glVertexAttribFormat");
    s_deviceConfig.m_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) glewGetProcAddress ("glVertexAttribIFormat");
    s_deviceConfig.m_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) glewGetProcAddress ("glVertexAttribLFormat");
    s_deviceConfig.m_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) glewGetProcAddress ("glVertexAttribBinding");
    s_deviceConfig.m_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) glewGetProcAddress ("glVertexBindingDivisor");
  }

  // GL_ARB_vertex_blend
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_blend])
  {
    s_deviceConfig.m_glWeightbvARB = (PFNGLWEIGHTBVARBPROC) glewGetProcAddress ("glWeightbvARB");
    s_deviceConfig.m_glWeightsvARB = (PFNGLWEIGHTSVARBPROC) glewGetProcAddress ("glWeightsvARB");
    s_deviceConfig.m_glWeightivARB = (PFNGLWEIGHTIVARBPROC) glewGetProcAddress ("glWeightivARB");
    s_deviceConfig.m_glWeightfvARB = (PFNGLWEIGHTFVARBPROC) glewGetProcAddress ("glWeightfvARB");
    s_deviceConfig.m_glWeightdvARB = (PFNGLWEIGHTDVARBPROC) glewGetProcAddress ("glWeightdvARB");
    s_deviceConfig.m_glWeightubvARB = (PFNGLWEIGHTUBVARBPROC) glewGetProcAddress ("glWeightubvARB");
    s_deviceConfig.m_glWeightusvARB = (PFNGLWEIGHTUSVARBPROC) glewGetProcAddress ("glWeightusvARB");
    s_deviceConfig.m_glWeightuivARB = (PFNGLWEIGHTUIVARBPROC) glewGetProcAddress ("glWeightuivARB");
    s_deviceConfig.m_glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC) glewGetProcAddress ("glWeightPointerARB");
    s_deviceConfig.m_glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC) glewGetProcAddress ("glVertexBlendARB");
  }

  // GL_ARB_vertex_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_buffer_object])
  {
    s_deviceConfig.m_glBindBufferARB = (PFNGLBINDBUFFERARBPROC) glewGetProcAddress ("glBindBufferARB");
    s_deviceConfig.m_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) glewGetProcAddress ("glDeleteBuffersARB");
    s_deviceConfig.m_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC) glewGetProcAddress ("glGenBuffersARB");
    s_deviceConfig.m_glIsBufferARB = (PFNGLISBUFFERARBPROC) glewGetProcAddress ("glIsBufferARB");
    s_deviceConfig.m_glBufferDataARB = (PFNGLBUFFERDATAARBPROC) glewGetProcAddress ("glBufferDataARB");
    s_deviceConfig.m_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) glewGetProcAddress ("glBufferSubDataARB");
    s_deviceConfig.m_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) glewGetProcAddress ("glGetBufferSubDataARB");
    s_deviceConfig.m_glMapBufferARB = (PFNGLMAPBUFFERARBPROC) glewGetProcAddress ("glMapBufferARB");
    s_deviceConfig.m_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) glewGetProcAddress ("glUnmapBufferARB");
    s_deviceConfig.m_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) glewGetProcAddress ("glGetBufferParameterivARB");
    s_deviceConfig.m_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) glewGetProcAddress ("glGetBufferPointervARB");
  }

  // GL_ARB_vertex_program
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_program])
  {
    s_deviceConfig.m_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) glewGetProcAddress ("glVertexAttrib1dARB");
    s_deviceConfig.m_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) glewGetProcAddress ("glVertexAttrib1dvARB");
    s_deviceConfig.m_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) glewGetProcAddress ("glVertexAttrib1fARB");
    s_deviceConfig.m_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) glewGetProcAddress ("glVertexAttrib1fvARB");
    s_deviceConfig.m_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) glewGetProcAddress ("glVertexAttrib1sARB");
    s_deviceConfig.m_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) glewGetProcAddress ("glVertexAttrib1svARB");
    s_deviceConfig.m_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) glewGetProcAddress ("glVertexAttrib2dARB");
    s_deviceConfig.m_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) glewGetProcAddress ("glVertexAttrib2dvARB");
    s_deviceConfig.m_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) glewGetProcAddress ("glVertexAttrib2fARB");
    s_deviceConfig.m_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) glewGetProcAddress ("glVertexAttrib2fvARB");
    s_deviceConfig.m_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) glewGetProcAddress ("glVertexAttrib2sARB");
    s_deviceConfig.m_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) glewGetProcAddress ("glVertexAttrib2svARB");
    s_deviceConfig.m_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) glewGetProcAddress ("glVertexAttrib3dARB");
    s_deviceConfig.m_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) glewGetProcAddress ("glVertexAttrib3dvARB");
    s_deviceConfig.m_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) glewGetProcAddress ("glVertexAttrib3fARB");
    s_deviceConfig.m_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) glewGetProcAddress ("glVertexAttrib3fvARB");
    s_deviceConfig.m_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) glewGetProcAddress ("glVertexAttrib3sARB");
    s_deviceConfig.m_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) glewGetProcAddress ("glVertexAttrib3svARB");
    s_deviceConfig.m_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) glewGetProcAddress ("glVertexAttrib4NbvARB");
    s_deviceConfig.m_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) glewGetProcAddress ("glVertexAttrib4NivARB");
    s_deviceConfig.m_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) glewGetProcAddress ("glVertexAttrib4NsvARB");
    s_deviceConfig.m_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) glewGetProcAddress ("glVertexAttrib4NubARB");
    s_deviceConfig.m_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) glewGetProcAddress ("glVertexAttrib4NubvARB");
    s_deviceConfig.m_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) glewGetProcAddress ("glVertexAttrib4NuivARB");
    s_deviceConfig.m_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) glewGetProcAddress ("glVertexAttrib4NusvARB");
    s_deviceConfig.m_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) glewGetProcAddress ("glVertexAttrib4bvARB");
    s_deviceConfig.m_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) glewGetProcAddress ("glVertexAttrib4dARB");
    s_deviceConfig.m_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) glewGetProcAddress ("glVertexAttrib4dvARB");
    s_deviceConfig.m_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) glewGetProcAddress ("glVertexAttrib4fARB");
    s_deviceConfig.m_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) glewGetProcAddress ("glVertexAttrib4fvARB");
    s_deviceConfig.m_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) glewGetProcAddress ("glVertexAttrib4ivARB");
    s_deviceConfig.m_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) glewGetProcAddress ("glVertexAttrib4sARB");
    s_deviceConfig.m_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) glewGetProcAddress ("glVertexAttrib4svARB");
    s_deviceConfig.m_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) glewGetProcAddress ("glVertexAttrib4ubvARB");
    s_deviceConfig.m_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) glewGetProcAddress ("glVertexAttrib4uivARB");
    s_deviceConfig.m_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) glewGetProcAddress ("glVertexAttrib4usvARB");
    s_deviceConfig.m_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) glewGetProcAddress ("glVertexAttribPointerARB");
    s_deviceConfig.m_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) glewGetProcAddress ("glEnableVertexAttribArrayARB");
    s_deviceConfig.m_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) glewGetProcAddress ("glDisableVertexAttribArrayARB");
    s_deviceConfig.m_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) glewGetProcAddress ("glProgramStringARB");
    s_deviceConfig.m_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) glewGetProcAddress ("glBindProgramARB");
    s_deviceConfig.m_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) glewGetProcAddress ("glDeleteProgramsARB");
    s_deviceConfig.m_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) glewGetProcAddress ("glGenProgramsARB");
    s_deviceConfig.m_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) glewGetProcAddress ("glProgramEnvParameter4dARB");
    s_deviceConfig.m_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) glewGetProcAddress ("glProgramEnvParameter4dvARB");
    s_deviceConfig.m_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) glewGetProcAddress ("glProgramEnvParameter4fARB");
    s_deviceConfig.m_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) glewGetProcAddress ("glProgramEnvParameter4fvARB");
    s_deviceConfig.m_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) glewGetProcAddress ("glProgramLocalParameter4dARB");
    s_deviceConfig.m_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) glewGetProcAddress ("glProgramLocalParameter4dvARB");
    s_deviceConfig.m_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) glewGetProcAddress ("glProgramLocalParameter4fARB");
    s_deviceConfig.m_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) glewGetProcAddress ("glProgramLocalParameter4fvARB");
    s_deviceConfig.m_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) glewGetProcAddress ("glGetProgramEnvParameterdvARB");
    s_deviceConfig.m_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) glewGetProcAddress ("glGetProgramEnvParameterfvARB");
    s_deviceConfig.m_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) glewGetProcAddress ("glGetProgramLocalParameterdvARB");
    s_deviceConfig.m_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) glewGetProcAddress ("glGetProgramLocalParameterfvARB");
    s_deviceConfig.m_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) glewGetProcAddress ("glGetProgramivARB");
    s_deviceConfig.m_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) glewGetProcAddress ("glGetProgramStringARB");
    s_deviceConfig.m_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) glewGetProcAddress ("glGetVertexAttribdvARB");
    s_deviceConfig.m_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) glewGetProcAddress ("glGetVertexAttribfvARB");
    s_deviceConfig.m_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) glewGetProcAddress ("glGetVertexAttribivARB");
    s_deviceConfig.m_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) glewGetProcAddress ("glGetVertexAttribPointervARB");
    s_deviceConfig.m_glIsProgramARB = (PFNGLISPROGRAMARBPROC) glewGetProcAddress ("glIsProgramARB");
  }

  // GL_ARB_vertex_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_shader])
  {
    s_deviceConfig.m_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) glewGetProcAddress ("glVertexAttrib1fARB");
    s_deviceConfig.m_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) glewGetProcAddress ("glVertexAttrib1sARB");
    s_deviceConfig.m_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) glewGetProcAddress ("glVertexAttrib1dARB");
    s_deviceConfig.m_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) glewGetProcAddress ("glVertexAttrib2fARB");
    s_deviceConfig.m_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) glewGetProcAddress ("glVertexAttrib2sARB");
    s_deviceConfig.m_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) glewGetProcAddress ("glVertexAttrib2dARB");
    s_deviceConfig.m_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) glewGetProcAddress ("glVertexAttrib3fARB");
    s_deviceConfig.m_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) glewGetProcAddress ("glVertexAttrib3sARB");
    s_deviceConfig.m_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) glewGetProcAddress ("glVertexAttrib3dARB");
    s_deviceConfig.m_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) glewGetProcAddress ("glVertexAttrib4fARB");
    s_deviceConfig.m_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) glewGetProcAddress ("glVertexAttrib4sARB");
    s_deviceConfig.m_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) glewGetProcAddress ("glVertexAttrib4dARB");
    s_deviceConfig.m_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) glewGetProcAddress ("glVertexAttrib4NubARB");
    s_deviceConfig.m_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) glewGetProcAddress ("glVertexAttrib1fvARB");
    s_deviceConfig.m_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) glewGetProcAddress ("glVertexAttrib1svARB");
    s_deviceConfig.m_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) glewGetProcAddress ("glVertexAttrib1dvARB");
    s_deviceConfig.m_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) glewGetProcAddress ("glVertexAttrib2fvARB");
    s_deviceConfig.m_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) glewGetProcAddress ("glVertexAttrib2svARB");
    s_deviceConfig.m_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) glewGetProcAddress ("glVertexAttrib2dvARB");
    s_deviceConfig.m_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) glewGetProcAddress ("glVertexAttrib3fvARB");
    s_deviceConfig.m_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) glewGetProcAddress ("glVertexAttrib3svARB");
    s_deviceConfig.m_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) glewGetProcAddress ("glVertexAttrib3dvARB");
    s_deviceConfig.m_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) glewGetProcAddress ("glVertexAttrib4fvARB");
    s_deviceConfig.m_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) glewGetProcAddress ("glVertexAttrib4svARB");
    s_deviceConfig.m_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) glewGetProcAddress ("glVertexAttrib4dvARB");
    s_deviceConfig.m_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) glewGetProcAddress ("glVertexAttrib4ivARB");
    s_deviceConfig.m_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) glewGetProcAddress ("glVertexAttrib4bvARB");
    s_deviceConfig.m_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) glewGetProcAddress ("glVertexAttrib4ubvARB");
    s_deviceConfig.m_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) glewGetProcAddress ("glVertexAttrib4usvARB");
    s_deviceConfig.m_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) glewGetProcAddress ("glVertexAttrib4uivARB");
    s_deviceConfig.m_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) glewGetProcAddress ("glVertexAttrib4NbvARB");
    s_deviceConfig.m_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) glewGetProcAddress ("glVertexAttrib4NsvARB");
    s_deviceConfig.m_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) glewGetProcAddress ("glVertexAttrib4NivARB");
    s_deviceConfig.m_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) glewGetProcAddress ("glVertexAttrib4NubvARB");
    s_deviceConfig.m_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) glewGetProcAddress ("glVertexAttrib4NusvARB");
    s_deviceConfig.m_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) glewGetProcAddress ("glVertexAttrib4NuivARB");
    s_deviceConfig.m_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) glewGetProcAddress ("glVertexAttribPointerARB");
    s_deviceConfig.m_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) glewGetProcAddress ("glEnableVertexAttribArrayARB");
    s_deviceConfig.m_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) glewGetProcAddress ("glDisableVertexAttribArrayARB");
    s_deviceConfig.m_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) glewGetProcAddress ("glBindAttribLocationARB");
    s_deviceConfig.m_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) glewGetProcAddress ("glGetActiveAttribARB");
    s_deviceConfig.m_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) glewGetProcAddress ("glGetAttribLocationARB");
    s_deviceConfig.m_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) glewGetProcAddress ("glGetVertexAttribdvARB");
    s_deviceConfig.m_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) glewGetProcAddress ("glGetVertexAttribfvARB");
    s_deviceConfig.m_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) glewGetProcAddress ("glGetVertexAttribivARB");
    s_deviceConfig.m_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) glewGetProcAddress ("glGetVertexAttribPointervARB");
  }

  // GL_ARB_vertex_type_2_10_10_10_rev
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_type_2_10_10_10_rev])
  {
    s_deviceConfig.m_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) glewGetProcAddress ("glVertexAttribP1ui");
    s_deviceConfig.m_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) glewGetProcAddress ("glVertexAttribP1uiv");
    s_deviceConfig.m_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) glewGetProcAddress ("glVertexAttribP2ui");
    s_deviceConfig.m_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) glewGetProcAddress ("glVertexAttribP2uiv");
    s_deviceConfig.m_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) glewGetProcAddress ("glVertexAttribP3ui");
    s_deviceConfig.m_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) glewGetProcAddress ("glVertexAttribP3uiv");
    s_deviceConfig.m_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) glewGetProcAddress ("glVertexAttribP4ui");
    s_deviceConfig.m_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) glewGetProcAddress ("glVertexAttribP4uiv");
  }

  // GL_ARB_vertex_type_2_10_10_10_rev
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_vertex_type_2_10_10_10_rev])
  {
    s_deviceConfig.m_glVertexP2ui = (PFNGLVERTEXP2UIPROC) glewGetProcAddress ("glVertexP2ui");
    s_deviceConfig.m_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) glewGetProcAddress ("glVertexP2uiv");
    s_deviceConfig.m_glVertexP3ui = (PFNGLVERTEXP3UIPROC) glewGetProcAddress ("glVertexP3ui");
    s_deviceConfig.m_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) glewGetProcAddress ("glVertexP3uiv");
    s_deviceConfig.m_glVertexP4ui = (PFNGLVERTEXP4UIPROC) glewGetProcAddress ("glVertexP4ui");
    s_deviceConfig.m_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) glewGetProcAddress ("glVertexP4uiv");
    s_deviceConfig.m_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) glewGetProcAddress ("glTexCoordP1ui");
    s_deviceConfig.m_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) glewGetProcAddress ("glTexCoordP1uiv");
    s_deviceConfig.m_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) glewGetProcAddress ("glTexCoordP2ui");
    s_deviceConfig.m_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) glewGetProcAddress ("glTexCoordP2uiv");
    s_deviceConfig.m_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) glewGetProcAddress ("glTexCoordP3ui");
    s_deviceConfig.m_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) glewGetProcAddress ("glTexCoordP3uiv");
    s_deviceConfig.m_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) glewGetProcAddress ("glTexCoordP4ui");
    s_deviceConfig.m_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) glewGetProcAddress ("glTexCoordP4uiv");
    s_deviceConfig.m_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) glewGetProcAddress ("glMultiTexCoordP1ui");
    s_deviceConfig.m_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) glewGetProcAddress ("glMultiTexCoordP1uiv");
    s_deviceConfig.m_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) glewGetProcAddress ("glMultiTexCoordP2ui");
    s_deviceConfig.m_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) glewGetProcAddress ("glMultiTexCoordP2uiv");
    s_deviceConfig.m_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) glewGetProcAddress ("glMultiTexCoordP3ui");
    s_deviceConfig.m_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) glewGetProcAddress ("glMultiTexCoordP3uiv");
    s_deviceConfig.m_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) glewGetProcAddress ("glMultiTexCoordP4ui");
    s_deviceConfig.m_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) glewGetProcAddress ("glMultiTexCoordP4uiv");
    s_deviceConfig.m_glNormalP3ui = (PFNGLNORMALP3UIPROC) glewGetProcAddress ("glNormalP3ui");
    s_deviceConfig.m_glNormalP3uiv = (PFNGLNORMALP3UIVPROC) glewGetProcAddress ("glNormalP3uiv");
    s_deviceConfig.m_glColorP3ui = (PFNGLCOLORP3UIPROC) glewGetProcAddress ("glColorP3ui");
    s_deviceConfig.m_glColorP3uiv = (PFNGLCOLORP3UIVPROC) glewGetProcAddress ("glColorP3uiv");
    s_deviceConfig.m_glColorP4ui = (PFNGLCOLORP4UIPROC) glewGetProcAddress ("glColorP4ui");
    s_deviceConfig.m_glColorP4uiv = (PFNGLCOLORP4UIVPROC) glewGetProcAddress ("glColorP4uiv");
    s_deviceConfig.m_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) glewGetProcAddress ("glSecondaryColorP3ui");
    s_deviceConfig.m_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) glewGetProcAddress ("glSecondaryColorP3uiv");
  }

  // GL_ARB_viewport_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_viewport_array])
  {
    s_deviceConfig.m_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) glewGetProcAddress ("glViewportArrayv");
    s_deviceConfig.m_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) glewGetProcAddress ("glViewportIndexedf");
    s_deviceConfig.m_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) glewGetProcAddress ("glViewportIndexedfv");
    s_deviceConfig.m_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) glewGetProcAddress ("glScissorArrayv");
    s_deviceConfig.m_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) glewGetProcAddress ("glScissorIndexed");
    s_deviceConfig.m_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) glewGetProcAddress ("glScissorIndexedv");
    s_deviceConfig.m_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) glewGetProcAddress ("glDepthRangeArrayv");
    s_deviceConfig.m_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) glewGetProcAddress ("glDepthRangeIndexed");
    s_deviceConfig.m_glGetFloati_v = (PFNGLGETFLOATI_VPROC) glewGetProcAddress ("glGetFloati_v");
    s_deviceConfig.m_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) glewGetProcAddress ("glGetDoublei_v");
  }

  // GL_ARB_window_pos
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ARB_window_pos])
  {
    s_deviceConfig.m_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC) glewGetProcAddress ("glWindowPos2dARB");
    s_deviceConfig.m_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC) glewGetProcAddress ("glWindowPos2dvARB");
    s_deviceConfig.m_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC) glewGetProcAddress ("glWindowPos2fARB");
    s_deviceConfig.m_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC) glewGetProcAddress ("glWindowPos2fvARB");
    s_deviceConfig.m_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC) glewGetProcAddress ("glWindowPos2iARB");
    s_deviceConfig.m_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC) glewGetProcAddress ("glWindowPos2ivARB");
    s_deviceConfig.m_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC) glewGetProcAddress ("glWindowPos2sARB");
    s_deviceConfig.m_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC) glewGetProcAddress ("glWindowPos2svARB");
    s_deviceConfig.m_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC) glewGetProcAddress ("glWindowPos3dARB");
    s_deviceConfig.m_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC) glewGetProcAddress ("glWindowPos3dvARB");
    s_deviceConfig.m_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC) glewGetProcAddress ("glWindowPos3fARB");
    s_deviceConfig.m_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC) glewGetProcAddress ("glWindowPos3fvARB");
    s_deviceConfig.m_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC) glewGetProcAddress ("glWindowPos3iARB");
    s_deviceConfig.m_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC) glewGetProcAddress ("glWindowPos3ivARB");
    s_deviceConfig.m_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC) glewGetProcAddress ("glWindowPos3sARB");
    s_deviceConfig.m_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC) glewGetProcAddress ("glWindowPos3svARB");
  }

  // GL_ATI_draw_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_draw_buffers])
  {
    s_deviceConfig.m_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC) glewGetProcAddress ("glDrawBuffersATI");
  }

  // GL_ATI_element_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_element_array])
  {
    s_deviceConfig.m_glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC) glewGetProcAddress ("glElementPointerATI");
    s_deviceConfig.m_glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC) glewGetProcAddress ("glDrawElementArrayATI");
    s_deviceConfig.m_glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC) glewGetProcAddress ("glDrawRangeElementArrayATI");
  }

  // GL_ATI_envmap_bumpmap
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_envmap_bumpmap])
  {
    s_deviceConfig.m_glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC) glewGetProcAddress ("glTexBumpParameterivATI");
    s_deviceConfig.m_glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC) glewGetProcAddress ("glTexBumpParameterfvATI");
    s_deviceConfig.m_glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC) glewGetProcAddress ("glGetTexBumpParameterivATI");
    s_deviceConfig.m_glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC) glewGetProcAddress ("glGetTexBumpParameterfvATI");
  }

  // GL_ATI_fragment_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_fragment_shader])
  {
    s_deviceConfig.m_glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC) glewGetProcAddress ("glGenFragmentShadersATI");
    s_deviceConfig.m_glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC) glewGetProcAddress ("glBindFragmentShaderATI");
    s_deviceConfig.m_glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC) glewGetProcAddress ("glDeleteFragmentShaderATI");
    s_deviceConfig.m_glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC) glewGetProcAddress ("glBeginFragmentShaderATI");
    s_deviceConfig.m_glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC) glewGetProcAddress ("glEndFragmentShaderATI");
    s_deviceConfig.m_glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC) glewGetProcAddress ("glPassTexCoordATI");
    s_deviceConfig.m_glSampleMapATI = (PFNGLSAMPLEMAPATIPROC) glewGetProcAddress ("glSampleMapATI");
    s_deviceConfig.m_glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC) glewGetProcAddress ("glColorFragmentOp1ATI");
    s_deviceConfig.m_glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC) glewGetProcAddress ("glColorFragmentOp2ATI");
    s_deviceConfig.m_glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC) glewGetProcAddress ("glColorFragmentOp3ATI");
    s_deviceConfig.m_glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC) glewGetProcAddress ("glAlphaFragmentOp1ATI");
    s_deviceConfig.m_glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC) glewGetProcAddress ("glAlphaFragmentOp2ATI");
    s_deviceConfig.m_glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC) glewGetProcAddress ("glAlphaFragmentOp3ATI");
    s_deviceConfig.m_glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) glewGetProcAddress ("glSetFragmentShaderConstantATI");
  }

  // GL_ATI_map_object_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_map_object_buffer])
  {
    s_deviceConfig.m_glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC) glewGetProcAddress ("glMapObjectBufferATI");
    s_deviceConfig.m_glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC) glewGetProcAddress ("glUnmapObjectBufferATI");
  }

  // GL_ATI_pn_triangles
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_pn_triangles])
  {
    s_deviceConfig.m_glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC) glewGetProcAddress ("glPNTrianglesiATI");
    s_deviceConfig.m_glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC) glewGetProcAddress ("glPNTrianglesfATI");
  }

  // GL_ATI_separate_stencil
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_separate_stencil])
  {
    s_deviceConfig.m_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) glewGetProcAddress ("glStencilOpSeparateATI");
    s_deviceConfig.m_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) glewGetProcAddress ("glStencilFuncSeparateATI");
  }

  // GL_ATI_vertex_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_array_object])
  {
    s_deviceConfig.m_glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC) glewGetProcAddress ("glNewObjectBufferATI");
    s_deviceConfig.m_glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC) glewGetProcAddress ("glIsObjectBufferATI");
    s_deviceConfig.m_glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC) glewGetProcAddress ("glUpdateObjectBufferATI");
    s_deviceConfig.m_glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC) glewGetProcAddress ("glGetObjectBufferfvATI");
    s_deviceConfig.m_glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC) glewGetProcAddress ("glGetObjectBufferivATI");
    s_deviceConfig.m_glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC) glewGetProcAddress ("glFreeObjectBufferATI");
    s_deviceConfig.m_glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC) glewGetProcAddress ("glArrayObjectATI");
    s_deviceConfig.m_glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC) glewGetProcAddress ("glGetArrayObjectfvATI");
    s_deviceConfig.m_glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC) glewGetProcAddress ("glGetArrayObjectivATI");
    s_deviceConfig.m_glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC) glewGetProcAddress ("glVariantArrayObjectATI");
    s_deviceConfig.m_glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC) glewGetProcAddress ("glGetVariantArrayObjectfvATI");
    s_deviceConfig.m_glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC) glewGetProcAddress ("glGetVariantArrayObjectivATI");
  }

  // GL_ATI_vertex_attrib_array_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_attrib_array_object])
  {
    s_deviceConfig.m_glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) glewGetProcAddress ("glVertexAttribArrayObjectATI");
    s_deviceConfig.m_glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) glewGetProcAddress ("glGetVertexAttribArrayObjectfvATI");
    s_deviceConfig.m_glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) glewGetProcAddress ("glGetVertexAttribArrayObjectivATI");
  }

  // GL_ATI_vertex_streams
  if (s_deviceConfig.m_featureSupported [GLEW_GL_ATI_vertex_streams])
  {
    s_deviceConfig.m_glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC) glewGetProcAddress ("glVertexStream1sATI");
    s_deviceConfig.m_glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC) glewGetProcAddress ("glVertexStream1svATI");
    s_deviceConfig.m_glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC) glewGetProcAddress ("glVertexStream1iATI");
    s_deviceConfig.m_glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC) glewGetProcAddress ("glVertexStream1ivATI");
    s_deviceConfig.m_glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC) glewGetProcAddress ("glVertexStream1fATI");
    s_deviceConfig.m_glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC) glewGetProcAddress ("glVertexStream1fvATI");
    s_deviceConfig.m_glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC) glewGetProcAddress ("glVertexStream1dATI");
    s_deviceConfig.m_glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC) glewGetProcAddress ("glVertexStream1dvATI");
    s_deviceConfig.m_glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC) glewGetProcAddress ("glVertexStream2sATI");
    s_deviceConfig.m_glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC) glewGetProcAddress ("glVertexStream2svATI");
    s_deviceConfig.m_glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC) glewGetProcAddress ("glVertexStream2iATI");
    s_deviceConfig.m_glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC) glewGetProcAddress ("glVertexStream2ivATI");
    s_deviceConfig.m_glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC) glewGetProcAddress ("glVertexStream2fATI");
    s_deviceConfig.m_glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC) glewGetProcAddress ("glVertexStream2fvATI");
    s_deviceConfig.m_glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC) glewGetProcAddress ("glVertexStream2dATI");
    s_deviceConfig.m_glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC) glewGetProcAddress ("glVertexStream2dvATI");
    s_deviceConfig.m_glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC) glewGetProcAddress ("glVertexStream3sATI");
    s_deviceConfig.m_glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC) glewGetProcAddress ("glVertexStream3svATI");
    s_deviceConfig.m_glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC) glewGetProcAddress ("glVertexStream3iATI");
    s_deviceConfig.m_glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC) glewGetProcAddress ("glVertexStream3ivATI");
    s_deviceConfig.m_glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC) glewGetProcAddress ("glVertexStream3fATI");
    s_deviceConfig.m_glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC) glewGetProcAddress ("glVertexStream3fvATI");
    s_deviceConfig.m_glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC) glewGetProcAddress ("glVertexStream3dATI");
    s_deviceConfig.m_glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC) glewGetProcAddress ("glVertexStream3dvATI");
    s_deviceConfig.m_glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC) glewGetProcAddress ("glVertexStream4sATI");
    s_deviceConfig.m_glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC) glewGetProcAddress ("glVertexStream4svATI");
    s_deviceConfig.m_glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC) glewGetProcAddress ("glVertexStream4iATI");
    s_deviceConfig.m_glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC) glewGetProcAddress ("glVertexStream4ivATI");
    s_deviceConfig.m_glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC) glewGetProcAddress ("glVertexStream4fATI");
    s_deviceConfig.m_glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC) glewGetProcAddress ("glVertexStream4fvATI");
    s_deviceConfig.m_glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC) glewGetProcAddress ("glVertexStream4dATI");
    s_deviceConfig.m_glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC) glewGetProcAddress ("glVertexStream4dvATI");
    s_deviceConfig.m_glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC) glewGetProcAddress ("glNormalStream3bATI");
    s_deviceConfig.m_glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC) glewGetProcAddress ("glNormalStream3bvATI");
    s_deviceConfig.m_glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC) glewGetProcAddress ("glNormalStream3sATI");
    s_deviceConfig.m_glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC) glewGetProcAddress ("glNormalStream3svATI");
    s_deviceConfig.m_glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC) glewGetProcAddress ("glNormalStream3iATI");
    s_deviceConfig.m_glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC) glewGetProcAddress ("glNormalStream3ivATI");
    s_deviceConfig.m_glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC) glewGetProcAddress ("glNormalStream3fATI");
    s_deviceConfig.m_glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC) glewGetProcAddress ("glNormalStream3fvATI");
    s_deviceConfig.m_glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC) glewGetProcAddress ("glNormalStream3dATI");
    s_deviceConfig.m_glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC) glewGetProcAddress ("glNormalStream3dvATI");
    s_deviceConfig.m_glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) glewGetProcAddress ("glClientActiveVertexStreamATI");
    s_deviceConfig.m_glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC) glewGetProcAddress ("glVertexBlendEnviATI");
    s_deviceConfig.m_glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC) glewGetProcAddress ("glVertexBlendEnvfATI");
  }

  // GL_EXT_bindable_uniform
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_bindable_uniform])
  {
    s_deviceConfig.m_glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC) glewGetProcAddress ("glUniformBufferEXT");
    s_deviceConfig.m_glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC) glewGetProcAddress ("glGetUniformBufferSizeEXT");
    s_deviceConfig.m_glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC) glewGetProcAddress ("glGetUniformOffsetEXT");
  }

  // GL_EXT_blend_color
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_color])
  {
    s_deviceConfig.m_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC) glewGetProcAddress ("glBlendColorEXT");
  }

  // GL_EXT_blend_equation_separate
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_equation_separate])
  {
    s_deviceConfig.m_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) glewGetProcAddress ("glBlendEquationSeparateEXT");
  }

  // GL_EXT_blend_func_separate
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_func_separate])
  {
    s_deviceConfig.m_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) glewGetProcAddress ("glBlendFuncSeparateEXT");
  }

  // GL_EXT_blend_minmax
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_blend_minmax])
  {
    s_deviceConfig.m_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) glewGetProcAddress ("glBlendEquationEXT");
  }

  // GL_EXT_color_subtable
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_color_subtable])
  {
    s_deviceConfig.m_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC) glewGetProcAddress ("glColorSubTableEXT");
    s_deviceConfig.m_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC) glewGetProcAddress ("glCopyColorSubTableEXT");
  }

  // GL_EXT_compiled_vertex_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_compiled_vertex_array])
  {
    s_deviceConfig.m_glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC) glewGetProcAddress ("glLockArraysEXT");
    s_deviceConfig.m_glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC) glewGetProcAddress ("glUnlockArraysEXT");
  }

  // GL_EXT_convolution
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_convolution])
  {
    s_deviceConfig.m_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC) glewGetProcAddress ("glConvolutionFilter1DEXT");
    s_deviceConfig.m_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC) glewGetProcAddress ("glConvolutionFilter2DEXT");
    s_deviceConfig.m_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC) glewGetProcAddress ("glConvolutionParameterfEXT");
    s_deviceConfig.m_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC) glewGetProcAddress ("glConvolutionParameterfvEXT");
    s_deviceConfig.m_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC) glewGetProcAddress ("glConvolutionParameteriEXT");
    s_deviceConfig.m_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC) glewGetProcAddress ("glConvolutionParameterivEXT");
    s_deviceConfig.m_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) glewGetProcAddress ("glCopyConvolutionFilter1DEXT");
    s_deviceConfig.m_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) glewGetProcAddress ("glCopyConvolutionFilter2DEXT");
    s_deviceConfig.m_glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC) glewGetProcAddress ("glGetConvolutionFilterEXT");
    s_deviceConfig.m_glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) glewGetProcAddress ("glGetConvolutionParameterfvEXT");
    s_deviceConfig.m_glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) glewGetProcAddress ("glGetConvolutionParameterivEXT");
    s_deviceConfig.m_glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC) glewGetProcAddress ("glGetSeparableFilterEXT");
    s_deviceConfig.m_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC) glewGetProcAddress ("glSeparableFilter2DEXT");
  }

  // GL_EXT_coordinate_frame
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_coordinate_frame])
  {
    s_deviceConfig.m_glTangent3bEXT = (PFNGLTANGENT3BEXTPROC) glewGetProcAddress ("glTangent3bEXT");
    s_deviceConfig.m_glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC) glewGetProcAddress ("glTangent3bvEXT");
    s_deviceConfig.m_glTangent3dEXT = (PFNGLTANGENT3DEXTPROC) glewGetProcAddress ("glTangent3dEXT");
    s_deviceConfig.m_glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC) glewGetProcAddress ("glTangent3dvEXT");
    s_deviceConfig.m_glTangent3fEXT = (PFNGLTANGENT3FEXTPROC) glewGetProcAddress ("glTangent3fEXT");
    s_deviceConfig.m_glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC) glewGetProcAddress ("glTangent3fvEXT");
    s_deviceConfig.m_glTangent3iEXT = (PFNGLTANGENT3IEXTPROC) glewGetProcAddress ("glTangent3iEXT");
    s_deviceConfig.m_glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC) glewGetProcAddress ("glTangent3ivEXT");
    s_deviceConfig.m_glTangent3sEXT = (PFNGLTANGENT3SEXTPROC) glewGetProcAddress ("glTangent3sEXT");
    s_deviceConfig.m_glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC) glewGetProcAddress ("glTangent3svEXT");
    s_deviceConfig.m_glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC) glewGetProcAddress ("glBinormal3bEXT");
    s_deviceConfig.m_glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC) glewGetProcAddress ("glBinormal3bvEXT");
    s_deviceConfig.m_glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC) glewGetProcAddress ("glBinormal3dEXT");
    s_deviceConfig.m_glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC) glewGetProcAddress ("glBinormal3dvEXT");
    s_deviceConfig.m_glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC) glewGetProcAddress ("glBinormal3fEXT");
    s_deviceConfig.m_glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC) glewGetProcAddress ("glBinormal3fvEXT");
    s_deviceConfig.m_glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC) glewGetProcAddress ("glBinormal3iEXT");
    s_deviceConfig.m_glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC) glewGetProcAddress ("glBinormal3ivEXT");
    s_deviceConfig.m_glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC) glewGetProcAddress ("glBinormal3sEXT");
    s_deviceConfig.m_glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC) glewGetProcAddress ("glBinormal3svEXT");
    s_deviceConfig.m_glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC) glewGetProcAddress ("glTangentPointerEXT");
    s_deviceConfig.m_glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC) glewGetProcAddress ("glBinormalPointerEXT");
  }

  // GL_EXT_copy_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_copy_texture])
  {
    s_deviceConfig.m_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) glewGetProcAddress ("glCopyTexImage1DEXT");
    s_deviceConfig.m_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) glewGetProcAddress ("glCopyTexImage2DEXT");
    s_deviceConfig.m_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) glewGetProcAddress ("glCopyTexSubImage1DEXT");
    s_deviceConfig.m_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) glewGetProcAddress ("glCopyTexSubImage2DEXT");
    s_deviceConfig.m_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) glewGetProcAddress ("glCopyTexSubImage3DEXT");
  }

  // GL_EXT_cull_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_cull_vertex])
  {
    s_deviceConfig.m_glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC) glewGetProcAddress ("glCullParameterdvEXT");
    s_deviceConfig.m_glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC) glewGetProcAddress ("glCullParameterfvEXT");
  }

  // GL_EXT_debug_label
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_label])
  {
    s_deviceConfig.m_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC) glewGetProcAddress ("glLabelObjectEXT");
    s_deviceConfig.m_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC) glewGetProcAddress ("glGetObjectLabelEXT");
  }

  // GL_EXT_debug_marker
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_debug_marker])
  {
    s_deviceConfig.m_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC) glewGetProcAddress ("glInsertEventMarkerEXT");
    s_deviceConfig.m_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC) glewGetProcAddress ("glPushGroupMarkerEXT");
    s_deviceConfig.m_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC) glewGetProcAddress ("glPopGroupMarkerEXT");
  }

  // GL_EXT_depth_bounds_test
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_depth_bounds_test])
  {
    s_deviceConfig.m_glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC) glewGetProcAddress ("glDepthBoundsEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) glewGetProcAddress ("glMatrixLoadfEXT");
    s_deviceConfig.m_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) glewGetProcAddress ("glMatrixLoaddEXT");
    s_deviceConfig.m_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) glewGetProcAddress ("glMatrixMultfEXT");
    s_deviceConfig.m_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) glewGetProcAddress ("glMatrixMultdEXT");
    s_deviceConfig.m_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) glewGetProcAddress ("glMatrixLoadIdentityEXT");
    s_deviceConfig.m_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) glewGetProcAddress ("glMatrixRotatefEXT");
    s_deviceConfig.m_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) glewGetProcAddress ("glMatrixRotatedEXT");
    s_deviceConfig.m_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) glewGetProcAddress ("glMatrixScalefEXT");
    s_deviceConfig.m_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) glewGetProcAddress ("glMatrixScaledEXT");
    s_deviceConfig.m_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) glewGetProcAddress ("glMatrixTranslatefEXT");
    s_deviceConfig.m_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) glewGetProcAddress ("glMatrixTranslatedEXT");
    s_deviceConfig.m_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) glewGetProcAddress ("glMatrixFrustumEXT");
    s_deviceConfig.m_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) glewGetProcAddress ("glMatrixOrthoEXT");
    s_deviceConfig.m_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC) glewGetProcAddress ("glMatrixPopEXT");
    s_deviceConfig.m_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) glewGetProcAddress ("glMatrixPushEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC) glewGetProcAddress ("glClientAttribDefaultEXT");
    s_deviceConfig.m_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) glewGetProcAddress ("glPushClientAttribDefaultEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC) glewGetProcAddress ("glTextureParameterfEXT");
    s_deviceConfig.m_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC) glewGetProcAddress ("glTextureParameterfvEXT");
    s_deviceConfig.m_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC) glewGetProcAddress ("glTextureParameteriEXT");
    s_deviceConfig.m_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC) glewGetProcAddress ("glTextureParameterivEXT");
    s_deviceConfig.m_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC) glewGetProcAddress ("glTextureImage1DEXT");
    s_deviceConfig.m_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC) glewGetProcAddress ("glTextureImage2DEXT");
    s_deviceConfig.m_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC) glewGetProcAddress ("glTextureSubImage1DEXT");
    s_deviceConfig.m_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC) glewGetProcAddress ("glTextureSubImage2DEXT");
    s_deviceConfig.m_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC) glewGetProcAddress ("glCopyTextureImage1DEXT");
    s_deviceConfig.m_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC) glewGetProcAddress ("glCopyTextureImage2DEXT");
    s_deviceConfig.m_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) glewGetProcAddress ("glCopyTextureSubImage1DEXT");
    s_deviceConfig.m_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) glewGetProcAddress ("glCopyTextureSubImage2DEXT");
    s_deviceConfig.m_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC) glewGetProcAddress ("glGetTextureImageEXT");
    s_deviceConfig.m_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC) glewGetProcAddress ("glGetTextureParameterfvEXT");
    s_deviceConfig.m_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC) glewGetProcAddress ("glGetTextureParameterivEXT");
    s_deviceConfig.m_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) glewGetProcAddress ("glGetTextureLevelParameterfvEXT");
    s_deviceConfig.m_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) glewGetProcAddress ("glGetTextureLevelParameterivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC) glewGetProcAddress ("glTextureImage3DEXT");
    s_deviceConfig.m_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC) glewGetProcAddress ("glTextureSubImage3DEXT");
    s_deviceConfig.m_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) glewGetProcAddress ("glCopyTextureSubImage3DEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC) glewGetProcAddress ("glBindMultiTextureEXT");
    s_deviceConfig.m_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC) glewGetProcAddress ("glMultiTexCoordPointerEXT");
    s_deviceConfig.m_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC) glewGetProcAddress ("glMultiTexEnvfEXT");
    s_deviceConfig.m_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC) glewGetProcAddress ("glMultiTexEnvfvEXT");
    s_deviceConfig.m_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC) glewGetProcAddress ("glMultiTexEnviEXT");
    s_deviceConfig.m_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC) glewGetProcAddress ("glMultiTexEnvivEXT");
    s_deviceConfig.m_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC) glewGetProcAddress ("glMultiTexGendEXT");
    s_deviceConfig.m_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC) glewGetProcAddress ("glMultiTexGendvEXT");
    s_deviceConfig.m_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC) glewGetProcAddress ("glMultiTexGenfEXT");
    s_deviceConfig.m_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC) glewGetProcAddress ("glMultiTexGenfvEXT");
    s_deviceConfig.m_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC) glewGetProcAddress ("glMultiTexGeniEXT");
    s_deviceConfig.m_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC) glewGetProcAddress ("glMultiTexGenivEXT");
    s_deviceConfig.m_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC) glewGetProcAddress ("glGetMultiTexEnvfvEXT");
    s_deviceConfig.m_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC) glewGetProcAddress ("glGetMultiTexEnvivEXT");
    s_deviceConfig.m_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC) glewGetProcAddress ("glGetMultiTexGendvEXT");
    s_deviceConfig.m_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC) glewGetProcAddress ("glGetMultiTexGenfvEXT");
    s_deviceConfig.m_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC) glewGetProcAddress ("glGetMultiTexGenivEXT");
    s_deviceConfig.m_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC) glewGetProcAddress ("glMultiTexParameteriEXT");
    s_deviceConfig.m_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC) glewGetProcAddress ("glMultiTexParameterivEXT");
    s_deviceConfig.m_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC) glewGetProcAddress ("glMultiTexParameterfEXT");
    s_deviceConfig.m_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC) glewGetProcAddress ("glMultiTexParameterfvEXT");
    s_deviceConfig.m_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC) glewGetProcAddress ("glMultiTexImage1DEXT");
    s_deviceConfig.m_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC) glewGetProcAddress ("glMultiTexImage2DEXT");
    s_deviceConfig.m_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC) glewGetProcAddress ("glMultiTexSubImage1DEXT");
    s_deviceConfig.m_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC) glewGetProcAddress ("glMultiTexSubImage2DEXT");
    s_deviceConfig.m_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC) glewGetProcAddress ("glCopyMultiTexImage1DEXT");
    s_deviceConfig.m_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC) glewGetProcAddress ("glCopyMultiTexImage2DEXT");
    s_deviceConfig.m_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) glewGetProcAddress ("glCopyMultiTexSubImage1DEXT");
    s_deviceConfig.m_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) glewGetProcAddress ("glCopyMultiTexSubImage2DEXT");
    s_deviceConfig.m_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC) glewGetProcAddress ("glGetMultiTexImageEXT");
    s_deviceConfig.m_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC) glewGetProcAddress ("glGetMultiTexParameterfvEXT");
    s_deviceConfig.m_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC) glewGetProcAddress ("glGetMultiTexParameterivEXT");
    s_deviceConfig.m_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) glewGetProcAddress ("glGetMultiTexLevelParameterfvEXT");
    s_deviceConfig.m_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) glewGetProcAddress ("glGetMultiTexLevelParameterivEXT");
    s_deviceConfig.m_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC) glewGetProcAddress ("glMultiTexImage3DEXT");
    s_deviceConfig.m_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC) glewGetProcAddress ("glMultiTexSubImage3DEXT");
    s_deviceConfig.m_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) glewGetProcAddress ("glCopyMultiTexSubImage3DEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) glewGetProcAddress ("glEnableClientStateIndexedEXT");
    s_deviceConfig.m_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) glewGetProcAddress ("glDisableClientStateIndexedEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC) glewGetProcAddress ("glGetFloatIndexedvEXT");
    s_deviceConfig.m_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC) glewGetProcAddress ("glGetDoubleIndexedvEXT");
    s_deviceConfig.m_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC) glewGetProcAddress ("glGetPointerIndexedvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) glewGetProcAddress ("glEnableIndexedEXT");
    s_deviceConfig.m_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) glewGetProcAddress ("glDisableIndexedEXT");
    s_deviceConfig.m_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) glewGetProcAddress ("glIsEnabledIndexedEXT");
    s_deviceConfig.m_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) glewGetProcAddress ("glGetIntegerIndexedvEXT");
    s_deviceConfig.m_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) glewGetProcAddress ("glGetBooleanIndexedvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) glewGetProcAddress ("glCompressedTextureImage3DEXT");
    s_deviceConfig.m_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) glewGetProcAddress ("glCompressedTextureImage2DEXT");
    s_deviceConfig.m_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) glewGetProcAddress ("glCompressedTextureImage1DEXT");
    s_deviceConfig.m_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) glewGetProcAddress ("glCompressedTextureSubImage3DEXT");
    s_deviceConfig.m_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) glewGetProcAddress ("glCompressedTextureSubImage2DEXT");
    s_deviceConfig.m_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) glewGetProcAddress ("glCompressedTextureSubImage1DEXT");
    s_deviceConfig.m_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) glewGetProcAddress ("glGetCompressedTextureImageEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) glewGetProcAddress ("glCompressedMultiTexImage3DEXT");
    s_deviceConfig.m_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) glewGetProcAddress ("glCompressedMultiTexImage2DEXT");
    s_deviceConfig.m_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) glewGetProcAddress ("glCompressedMultiTexImage1DEXT");
    s_deviceConfig.m_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) glewGetProcAddress ("glCompressedMultiTexSubImage3DEXT");
    s_deviceConfig.m_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) glewGetProcAddress ("glCompressedMultiTexSubImage2DEXT");
    s_deviceConfig.m_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) glewGetProcAddress ("glCompressedMultiTexSubImage1DEXT");
    s_deviceConfig.m_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) glewGetProcAddress ("glGetCompressedMultiTexImageEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) glewGetProcAddress ("glMatrixLoadTransposefEXT");
    s_deviceConfig.m_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) glewGetProcAddress ("glMatrixLoadTransposedEXT");
    s_deviceConfig.m_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) glewGetProcAddress ("glMatrixMultTransposefEXT");
    s_deviceConfig.m_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) glewGetProcAddress ("glMatrixMultTransposedEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC) glewGetProcAddress ("glNamedBufferDataEXT");
    s_deviceConfig.m_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC) glewGetProcAddress ("glNamedBufferSubDataEXT");
    s_deviceConfig.m_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC) glewGetProcAddress ("glMapNamedBufferEXT");
    s_deviceConfig.m_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC) glewGetProcAddress ("glUnmapNamedBufferEXT");
    s_deviceConfig.m_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) glewGetProcAddress ("glGetNamedBufferParameterivEXT");
    s_deviceConfig.m_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) glewGetProcAddress ("glGetNamedBufferPointervEXT");
    s_deviceConfig.m_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) glewGetProcAddress ("glGetNamedBufferSubDataEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) glewGetProcAddress ("glProgramUniform1fEXT");
    s_deviceConfig.m_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) glewGetProcAddress ("glProgramUniform2fEXT");
    s_deviceConfig.m_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) glewGetProcAddress ("glProgramUniform3fEXT");
    s_deviceConfig.m_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) glewGetProcAddress ("glProgramUniform4fEXT");
    s_deviceConfig.m_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) glewGetProcAddress ("glProgramUniform1iEXT");
    s_deviceConfig.m_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) glewGetProcAddress ("glProgramUniform2iEXT");
    s_deviceConfig.m_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) glewGetProcAddress ("glProgramUniform3iEXT");
    s_deviceConfig.m_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) glewGetProcAddress ("glProgramUniform4iEXT");
    s_deviceConfig.m_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) glewGetProcAddress ("glProgramUniform1fvEXT");
    s_deviceConfig.m_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) glewGetProcAddress ("glProgramUniform2fvEXT");
    s_deviceConfig.m_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) glewGetProcAddress ("glProgramUniform3fvEXT");
    s_deviceConfig.m_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) glewGetProcAddress ("glProgramUniform4fvEXT");
    s_deviceConfig.m_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) glewGetProcAddress ("glProgramUniform1ivEXT");
    s_deviceConfig.m_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) glewGetProcAddress ("glProgramUniform2ivEXT");
    s_deviceConfig.m_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) glewGetProcAddress ("glProgramUniform3ivEXT");
    s_deviceConfig.m_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) glewGetProcAddress ("glProgramUniform4ivEXT");
    s_deviceConfig.m_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4fvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x3fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x2fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x4fvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x3fvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC) glewGetProcAddress ("glTextureBufferEXT");
    s_deviceConfig.m_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC) glewGetProcAddress ("glMultiTexBufferEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC) glewGetProcAddress ("glTextureParameterIivEXT");
    s_deviceConfig.m_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC) glewGetProcAddress ("glTextureParameterIuivEXT");
    s_deviceConfig.m_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetTextureParameterIivEXT");
    s_deviceConfig.m_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetTextureParameterIuivEXT");
    s_deviceConfig.m_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glMultiTexParameterIivEXT");
    s_deviceConfig.m_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glMultiTexParameterIuivEXT");
    s_deviceConfig.m_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetMultiTexParameterIivEXT");
    s_deviceConfig.m_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetMultiTexParameterIuivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) glewGetProcAddress ("glProgramUniform1uiEXT");
    s_deviceConfig.m_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) glewGetProcAddress ("glProgramUniform2uiEXT");
    s_deviceConfig.m_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) glewGetProcAddress ("glProgramUniform3uiEXT");
    s_deviceConfig.m_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) glewGetProcAddress ("glProgramUniform4uiEXT");
    s_deviceConfig.m_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) glewGetProcAddress ("glProgramUniform1uivEXT");
    s_deviceConfig.m_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) glewGetProcAddress ("glProgramUniform2uivEXT");
    s_deviceConfig.m_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) glewGetProcAddress ("glProgramUniform3uivEXT");
    s_deviceConfig.m_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) glewGetProcAddress ("glProgramUniform4uivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameters4fvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameterI4iEXT");
    s_deviceConfig.m_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameterI4ivEXT");
    s_deviceConfig.m_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParametersI4ivEXT");
    s_deviceConfig.m_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameterI4uiEXT");
    s_deviceConfig.m_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameterI4uivEXT");
    s_deviceConfig.m_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParametersI4uivEXT");
    s_deviceConfig.m_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetNamedProgramLocalParameterIivEXT");
    s_deviceConfig.m_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetNamedProgramLocalParameterIuivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC) glewGetProcAddress ("glEnableClientStateiEXT");
    s_deviceConfig.m_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC) glewGetProcAddress ("glDisableClientStateiEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC) glewGetProcAddress ("glGetFloati_vEXT");
    s_deviceConfig.m_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC) glewGetProcAddress ("glGetDoublei_vEXT");
    s_deviceConfig.m_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC) glewGetProcAddress ("glGetPointeri_vEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC) glewGetProcAddress ("glNamedProgramStringEXT");
    s_deviceConfig.m_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameter4dEXT");
    s_deviceConfig.m_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameter4dvEXT");
    s_deviceConfig.m_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameter4fEXT");
    s_deviceConfig.m_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) glewGetProcAddress ("glNamedProgramLocalParameter4fvEXT");
    s_deviceConfig.m_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) glewGetProcAddress ("glGetNamedProgramLocalParameterdvEXT");
    s_deviceConfig.m_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) glewGetProcAddress ("glGetNamedProgramLocalParameterfvEXT");
    s_deviceConfig.m_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC) glewGetProcAddress ("glGetNamedProgramivEXT");
    s_deviceConfig.m_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) glewGetProcAddress ("glGetNamedProgramStringEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) glewGetProcAddress ("glNamedRenderbufferStorageEXT");
    s_deviceConfig.m_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) glewGetProcAddress ("glGetNamedRenderbufferParameterivEXT");
    s_deviceConfig.m_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glewGetProcAddress ("glNamedRenderbufferStorageMultisampleEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) glewGetProcAddress ("glNamedRenderbufferStorageMultisampleCoverageEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) glewGetProcAddress ("glCheckNamedFramebufferStatusEXT");
    s_deviceConfig.m_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) glewGetProcAddress ("glNamedFramebufferTexture1DEXT");
    s_deviceConfig.m_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) glewGetProcAddress ("glNamedFramebufferTexture2DEXT");
    s_deviceConfig.m_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) glewGetProcAddress ("glNamedFramebufferTexture3DEXT");
    s_deviceConfig.m_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) glewGetProcAddress ("glNamedFramebufferRenderbufferEXT");
    s_deviceConfig.m_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) glewGetProcAddress ("glGetNamedFramebufferAttachmentParameterivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC) glewGetProcAddress ("glGenerateTextureMipmapEXT");
    s_deviceConfig.m_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC) glewGetProcAddress ("glGenerateMultiTexMipmapEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) glewGetProcAddress ("glFramebufferDrawBufferEXT");
    s_deviceConfig.m_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) glewGetProcAddress ("glFramebufferDrawBuffersEXT");
    s_deviceConfig.m_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC) glewGetProcAddress ("glFramebufferReadBufferEXT");
    s_deviceConfig.m_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) glewGetProcAddress ("glGetFramebufferParameterivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) glewGetProcAddress ("glNamedCopyBufferSubDataEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) glewGetProcAddress ("glNamedFramebufferTextureEXT");
    s_deviceConfig.m_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) glewGetProcAddress ("glNamedFramebufferTextureLayerEXT");
    s_deviceConfig.m_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) glewGetProcAddress ("glNamedFramebufferTextureFaceEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC) glewGetProcAddress ("glTextureRenderbufferEXT");
    s_deviceConfig.m_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC) glewGetProcAddress ("glMultiTexRenderbufferEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayVertexOffsetEXT");
    s_deviceConfig.m_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) glewGetProcAddress ("glVertexArrayColorOffsetEXT");
    s_deviceConfig.m_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayEdgeFlagOffsetEXT");
    s_deviceConfig.m_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayIndexOffsetEXT");
    s_deviceConfig.m_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayNormalOffsetEXT");
    s_deviceConfig.m_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayTexCoordOffsetEXT");
    s_deviceConfig.m_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayMultiTexCoordOffsetEXT");
    s_deviceConfig.m_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayFogCoordOffsetEXT");
    s_deviceConfig.m_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) glewGetProcAddress ("glVertexArraySecondaryColorOffsetEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribOffsetEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribIOffsetEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC) glewGetProcAddress ("glEnableVertexArrayEXT");
    s_deviceConfig.m_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC) glewGetProcAddress ("glDisableVertexArrayEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) glewGetProcAddress ("glEnableVertexArrayAttribEXT");
    s_deviceConfig.m_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) glewGetProcAddress ("glDisableVertexArrayAttribEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC) glewGetProcAddress ("glGetVertexArrayIntegervEXT");
    s_deviceConfig.m_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC) glewGetProcAddress ("glGetVertexArrayPointervEXT");
    s_deviceConfig.m_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) glewGetProcAddress ("glGetVertexArrayIntegeri_vEXT");
    s_deviceConfig.m_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) glewGetProcAddress ("glGetVertexArrayPointeri_vEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC) glewGetProcAddress ("glMapNamedBufferRangeEXT");
    s_deviceConfig.m_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) glewGetProcAddress ("glFlushMappedNamedBufferRangeEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC) glewGetProcAddress ("glNamedBufferStorageEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) glewGetProcAddress ("glClearNamedBufferDataEXT");
    s_deviceConfig.m_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) glewGetProcAddress ("glClearNamedBufferSubDataEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) glewGetProcAddress ("glNamedFramebufferParameteriEXT");
    s_deviceConfig.m_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) glewGetProcAddress ("glGetNamedFramebufferParameterivEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC) glewGetProcAddress ("glProgramUniform1dEXT");
    s_deviceConfig.m_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC) glewGetProcAddress ("glProgramUniform2dEXT");
    s_deviceConfig.m_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC) glewGetProcAddress ("glProgramUniform3dEXT");
    s_deviceConfig.m_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC) glewGetProcAddress ("glProgramUniform4dEXT");
    s_deviceConfig.m_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC) glewGetProcAddress ("glProgramUniform1dvEXT");
    s_deviceConfig.m_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC) glewGetProcAddress ("glProgramUniform2dvEXT");
    s_deviceConfig.m_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC) glewGetProcAddress ("glProgramUniform3dvEXT");
    s_deviceConfig.m_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC) glewGetProcAddress ("glProgramUniform4dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x3dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix2x4dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x2dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix3x4dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x2dvEXT");
    s_deviceConfig.m_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) glewGetProcAddress ("glProgramUniformMatrix4x3dvEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) glewGetProcAddress ("glTextureBufferRangeEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) glewGetProcAddress ("glTextureStorage1DEXT");
    s_deviceConfig.m_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) glewGetProcAddress ("glTextureStorage2DEXT");
    s_deviceConfig.m_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) glewGetProcAddress ("glTextureStorage3DEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) glewGetProcAddress ("glTextureStorage2DMultisampleEXT");
    s_deviceConfig.m_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) glewGetProcAddress ("glTextureStorage3DMultisampleEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) glewGetProcAddress ("glVertexArrayBindVertexBufferEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribFormatEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribIFormatEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribLFormatEXT");
    s_deviceConfig.m_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribBindingEXT");
    s_deviceConfig.m_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) glewGetProcAddress ("glVertexArrayVertexBindingDivisorEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribLOffsetEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC) glewGetProcAddress ("glTexturePageCommitmentEXT");
  }

  // GL_EXT_direct_state_access
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_direct_state_access])
  {
    s_deviceConfig.m_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) glewGetProcAddress ("glVertexArrayVertexAttribDivisorEXT");
  }

  // GL_EXT_draw_buffers2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_buffers2])
  {
    s_deviceConfig.m_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC) glewGetProcAddress ("glColorMaskIndexedEXT");
    s_deviceConfig.m_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) glewGetProcAddress ("glGetBooleanIndexedvEXT");
    s_deviceConfig.m_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) glewGetProcAddress ("glGetIntegerIndexedvEXT");
    s_deviceConfig.m_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) glewGetProcAddress ("glEnableIndexedEXT");
    s_deviceConfig.m_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) glewGetProcAddress ("glDisableIndexedEXT");
    s_deviceConfig.m_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) glewGetProcAddress ("glIsEnabledIndexedEXT");
  }

  // GL_EXT_draw_instanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_instanced])
  {
    s_deviceConfig.m_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawArraysInstancedEXT");
    s_deviceConfig.m_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glewGetProcAddress ("glDrawElementsInstancedEXT");
  }

  // GL_EXT_draw_range_elements
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_draw_range_elements])
  {
    s_deviceConfig.m_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) glewGetProcAddress ("glDrawRangeElementsEXT");
  }

  // GL_EXT_fog_coord
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_fog_coord])
  {
    s_deviceConfig.m_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC) glewGetProcAddress ("glFogCoordfEXT");
    s_deviceConfig.m_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC) glewGetProcAddress ("glFogCoordfvEXT");
    s_deviceConfig.m_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC) glewGetProcAddress ("glFogCoorddEXT");
    s_deviceConfig.m_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC) glewGetProcAddress ("glFogCoorddvEXT");
    s_deviceConfig.m_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC) glewGetProcAddress ("glFogCoordPointerEXT");
  }

  // GL_EXT_framebuffer_blit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_blit])
  {
    s_deviceConfig.m_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) glewGetProcAddress ("glBlitFramebufferEXT");
  }

  // GL_EXT_framebuffer_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_multisample])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleEXT");
  }

  // GL_EXT_framebuffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_framebuffer_object])
  {
    s_deviceConfig.m_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) glewGetProcAddress ("glIsRenderbufferEXT");
    s_deviceConfig.m_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) glewGetProcAddress ("glBindRenderbufferEXT");
    s_deviceConfig.m_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) glewGetProcAddress ("glDeleteRenderbuffersEXT");
    s_deviceConfig.m_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) glewGetProcAddress ("glGenRenderbuffersEXT");
    s_deviceConfig.m_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) glewGetProcAddress ("glRenderbufferStorageEXT");
    s_deviceConfig.m_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) glewGetProcAddress ("glGetRenderbufferParameterivEXT");
    s_deviceConfig.m_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) glewGetProcAddress ("glIsFramebufferEXT");
    s_deviceConfig.m_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) glewGetProcAddress ("glBindFramebufferEXT");
    s_deviceConfig.m_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) glewGetProcAddress ("glDeleteFramebuffersEXT");
    s_deviceConfig.m_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) glewGetProcAddress ("glGenFramebuffersEXT");
    s_deviceConfig.m_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) glewGetProcAddress ("glCheckFramebufferStatusEXT");
    s_deviceConfig.m_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) glewGetProcAddress ("glFramebufferTexture1DEXT");
    s_deviceConfig.m_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) glewGetProcAddress ("glFramebufferTexture2DEXT");
    s_deviceConfig.m_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) glewGetProcAddress ("glFramebufferTexture3DEXT");
    s_deviceConfig.m_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) glewGetProcAddress ("glFramebufferRenderbufferEXT");
    s_deviceConfig.m_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) glewGetProcAddress ("glGetFramebufferAttachmentParameterivEXT");
    s_deviceConfig.m_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) glewGetProcAddress ("glGenerateMipmapEXT");
  }

  // GL_EXT_geometry_shader4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_geometry_shader4])
  {
    s_deviceConfig.m_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) glewGetProcAddress ("glProgramParameteriEXT");
  }

  // GL_EXT_gpu_program_parameters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_program_parameters])
  {
    s_deviceConfig.m_glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) glewGetProcAddress ("glProgramEnvParameters4fvEXT");
    s_deviceConfig.m_glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) glewGetProcAddress ("glProgramLocalParameters4fvEXT");
  }

  // GL_EXT_gpu_shader4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_gpu_shader4])
  {
    s_deviceConfig.m_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC) glewGetProcAddress ("glGetUniformuivEXT");
    s_deviceConfig.m_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC) glewGetProcAddress ("glBindFragDataLocationEXT");
    s_deviceConfig.m_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC) glewGetProcAddress ("glGetFragDataLocationEXT");
    s_deviceConfig.m_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC) glewGetProcAddress ("glUniform1uiEXT");
    s_deviceConfig.m_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC) glewGetProcAddress ("glUniform2uiEXT");
    s_deviceConfig.m_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC) glewGetProcAddress ("glUniform3uiEXT");
    s_deviceConfig.m_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC) glewGetProcAddress ("glUniform4uiEXT");
    s_deviceConfig.m_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC) glewGetProcAddress ("glUniform1uivEXT");
    s_deviceConfig.m_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC) glewGetProcAddress ("glUniform2uivEXT");
    s_deviceConfig.m_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC) glewGetProcAddress ("glUniform3uivEXT");
    s_deviceConfig.m_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC) glewGetProcAddress ("glUniform4uivEXT");
  }

  // GL_EXT_histogram
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_histogram])
  {
    s_deviceConfig.m_glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC) glewGetProcAddress ("glGetHistogramEXT");
    s_deviceConfig.m_glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) glewGetProcAddress ("glGetHistogramParameterfvEXT");
    s_deviceConfig.m_glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) glewGetProcAddress ("glGetHistogramParameterivEXT");
    s_deviceConfig.m_glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC) glewGetProcAddress ("glGetMinmaxEXT");
    s_deviceConfig.m_glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC) glewGetProcAddress ("glGetMinmaxParameterfvEXT");
    s_deviceConfig.m_glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC) glewGetProcAddress ("glGetMinmaxParameterivEXT");
    s_deviceConfig.m_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC) glewGetProcAddress ("glHistogramEXT");
    s_deviceConfig.m_glMinmaxEXT = (PFNGLMINMAXEXTPROC) glewGetProcAddress ("glMinmaxEXT");
    s_deviceConfig.m_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC) glewGetProcAddress ("glResetHistogramEXT");
    s_deviceConfig.m_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC) glewGetProcAddress ("glResetMinmaxEXT");
  }

  // GL_EXT_index_func
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_func])
  {
    s_deviceConfig.m_glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC) glewGetProcAddress ("glIndexFuncEXT");
  }

  // GL_EXT_index_material
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_index_material])
  {
    s_deviceConfig.m_glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC) glewGetProcAddress ("glIndexMaterialEXT");
  }

  // GL_EXT_light_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_light_texture])
  {
    s_deviceConfig.m_glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC) glewGetProcAddress ("glApplyTextureEXT");
    s_deviceConfig.m_glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC) glewGetProcAddress ("glTextureLightEXT");
    s_deviceConfig.m_glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC) glewGetProcAddress ("glTextureMaterialEXT");
  }

  // GL_EXT_multi_draw_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multi_draw_arrays])
  {
    s_deviceConfig.m_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) glewGetProcAddress ("glMultiDrawArraysEXT");
    s_deviceConfig.m_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) glewGetProcAddress ("glMultiDrawElementsEXT");
  }

  // GL_EXT_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_multisample])
  {
    s_deviceConfig.m_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC) glewGetProcAddress ("glSampleMaskEXT");
    s_deviceConfig.m_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC) glewGetProcAddress ("glSamplePatternEXT");
  }

  // GL_EXT_paletted_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_paletted_texture])
  {
    s_deviceConfig.m_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC) glewGetProcAddress ("glColorTableEXT");
    s_deviceConfig.m_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC) glewGetProcAddress ("glGetColorTableEXT");
    s_deviceConfig.m_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) glewGetProcAddress ("glGetColorTableParameterivEXT");
    s_deviceConfig.m_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) glewGetProcAddress ("glGetColorTableParameterfvEXT");
  }

  // GL_EXT_pixel_transform
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_pixel_transform])
  {
    s_deviceConfig.m_glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) glewGetProcAddress ("glPixelTransformParameteriEXT");
    s_deviceConfig.m_glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) glewGetProcAddress ("glPixelTransformParameterfEXT");
    s_deviceConfig.m_glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) glewGetProcAddress ("glPixelTransformParameterivEXT");
    s_deviceConfig.m_glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) glewGetProcAddress ("glPixelTransformParameterfvEXT");
    s_deviceConfig.m_glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) glewGetProcAddress ("glGetPixelTransformParameterivEXT");
    s_deviceConfig.m_glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) glewGetProcAddress ("glGetPixelTransformParameterfvEXT");
  }

  // GL_EXT_point_parameters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_point_parameters])
  {
    s_deviceConfig.m_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC) glewGetProcAddress ("glPointParameterfEXT");
    s_deviceConfig.m_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC) glewGetProcAddress ("glPointParameterfvEXT");
  }

  // GL_EXT_polygon_offset
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_polygon_offset])
  {
    s_deviceConfig.m_glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC) glewGetProcAddress ("glPolygonOffsetEXT");
  }

  // GL_EXT_polygon_offset_clamp
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_polygon_offset_clamp])
  {
    s_deviceConfig.m_glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC) glewGetProcAddress ("glPolygonOffsetClampEXT");
  }

  // GL_EXT_provoking_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_provoking_vertex])
  {
    s_deviceConfig.m_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC) glewGetProcAddress ("glProvokingVertexEXT");
  }

  // GL_EXT_raster_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_raster_multisample])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_secondary_color
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_secondary_color])
  {
    s_deviceConfig.m_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC) glewGetProcAddress ("glSecondaryColor3bEXT");
    s_deviceConfig.m_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC) glewGetProcAddress ("glSecondaryColor3bvEXT");
    s_deviceConfig.m_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC) glewGetProcAddress ("glSecondaryColor3dEXT");
    s_deviceConfig.m_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC) glewGetProcAddress ("glSecondaryColor3dvEXT");
    s_deviceConfig.m_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC) glewGetProcAddress ("glSecondaryColor3fEXT");
    s_deviceConfig.m_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC) glewGetProcAddress ("glSecondaryColor3fvEXT");
    s_deviceConfig.m_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC) glewGetProcAddress ("glSecondaryColor3iEXT");
    s_deviceConfig.m_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC) glewGetProcAddress ("glSecondaryColor3ivEXT");
    s_deviceConfig.m_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC) glewGetProcAddress ("glSecondaryColor3sEXT");
    s_deviceConfig.m_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC) glewGetProcAddress ("glSecondaryColor3svEXT");
    s_deviceConfig.m_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC) glewGetProcAddress ("glSecondaryColor3ubEXT");
    s_deviceConfig.m_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC) glewGetProcAddress ("glSecondaryColor3ubvEXT");
    s_deviceConfig.m_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC) glewGetProcAddress ("glSecondaryColor3uiEXT");
    s_deviceConfig.m_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC) glewGetProcAddress ("glSecondaryColor3uivEXT");
    s_deviceConfig.m_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC) glewGetProcAddress ("glSecondaryColor3usEXT");
    s_deviceConfig.m_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC) glewGetProcAddress ("glSecondaryColor3usvEXT");
    s_deviceConfig.m_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC) glewGetProcAddress ("glSecondaryColorPointerEXT");
  }

  // GL_EXT_separate_shader_objects
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_separate_shader_objects])
  {
    s_deviceConfig.m_glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC) glewGetProcAddress ("glUseShaderProgramEXT");
    s_deviceConfig.m_glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC) glewGetProcAddress ("glActiveProgramEXT");
    s_deviceConfig.m_glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC) glewGetProcAddress ("glCreateShaderProgramEXT");
  }

  // GL_EXT_shader_image_load_store
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_shader_image_load_store])
  {
    s_deviceConfig.m_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC) glewGetProcAddress ("glBindImageTextureEXT");
    s_deviceConfig.m_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC) glewGetProcAddress ("glMemoryBarrierEXT");
  }

  // GL_EXT_stencil_clear_tag
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_stencil_clear_tag])
  {
    s_deviceConfig.m_glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC) glewGetProcAddress ("glStencilClearTagEXT");
  }

  // GL_EXT_stencil_two_side
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_stencil_two_side])
  {
    s_deviceConfig.m_glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC) glewGetProcAddress ("glActiveStencilFaceEXT");
  }

  // GL_EXT_subtexture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_subtexture])
  {
    s_deviceConfig.m_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) glewGetProcAddress ("glTexSubImage1DEXT");
    s_deviceConfig.m_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) glewGetProcAddress ("glTexSubImage2DEXT");
  }

  // GL_EXT_texture3D
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture3D])
  {
    s_deviceConfig.m_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC) glewGetProcAddress ("glTexImage3DEXT");
    s_deviceConfig.m_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) glewGetProcAddress ("glTexSubImage3DEXT");
  }

  // GL_EXT_texture_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_array])
  {
    s_deviceConfig.m_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) glewGetProcAddress ("glFramebufferTextureLayerEXT");
  }

  // GL_EXT_texture_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_buffer_object])
  {
    s_deviceConfig.m_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) glewGetProcAddress ("glTexBufferEXT");
  }

  // GL_EXT_texture_filter_minmax
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_filter_minmax])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
  }

  // GL_EXT_texture_integer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_integer])
  {
    s_deviceConfig.m_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glTexParameterIivEXT");
    s_deviceConfig.m_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glTexParameterIuivEXT");
    s_deviceConfig.m_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) glewGetProcAddress ("glGetTexParameterIivEXT");
    s_deviceConfig.m_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) glewGetProcAddress ("glGetTexParameterIuivEXT");
    s_deviceConfig.m_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC) glewGetProcAddress ("glClearColorIiEXT");
    s_deviceConfig.m_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC) glewGetProcAddress ("glClearColorIuiEXT");
  }

  // GL_EXT_texture_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_object])
  {
    s_deviceConfig.m_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) glewGetProcAddress ("glAreTexturesResidentEXT");
    s_deviceConfig.m_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) glewGetProcAddress ("glBindTextureEXT");
    s_deviceConfig.m_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) glewGetProcAddress ("glDeleteTexturesEXT");
    s_deviceConfig.m_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC) glewGetProcAddress ("glGenTexturesEXT");
    s_deviceConfig.m_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC) glewGetProcAddress ("glIsTextureEXT");
    s_deviceConfig.m_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) glewGetProcAddress ("glPrioritizeTexturesEXT");
  }

  // GL_EXT_texture_perturb_normal
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_texture_perturb_normal])
  {
    s_deviceConfig.m_glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC) glewGetProcAddress ("glTextureNormalEXT");
  }

  // GL_EXT_timer_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_timer_query])
  {
    s_deviceConfig.m_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) glewGetProcAddress ("glGetQueryObjecti64vEXT");
    s_deviceConfig.m_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) glewGetProcAddress ("glGetQueryObjectui64vEXT");
  }

  // GL_EXT_transform_feedback
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_transform_feedback])
  {
    s_deviceConfig.m_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) glewGetProcAddress ("glBeginTransformFeedbackEXT");
    s_deviceConfig.m_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC) glewGetProcAddress ("glEndTransformFeedbackEXT");
    s_deviceConfig.m_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC) glewGetProcAddress ("glBindBufferRangeEXT");
    s_deviceConfig.m_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC) glewGetProcAddress ("glBindBufferOffsetEXT");
    s_deviceConfig.m_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC) glewGetProcAddress ("glBindBufferBaseEXT");
    s_deviceConfig.m_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) glewGetProcAddress ("glTransformFeedbackVaryingsEXT");
    s_deviceConfig.m_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) glewGetProcAddress ("glGetTransformFeedbackVaryingEXT");
  }

  // GL_EXT_vertex_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_array])
  {
    s_deviceConfig.m_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) glewGetProcAddress ("glArrayElementEXT");
    s_deviceConfig.m_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) glewGetProcAddress ("glColorPointerEXT");
    s_deviceConfig.m_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) glewGetProcAddress ("glDrawArraysEXT");
    s_deviceConfig.m_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) glewGetProcAddress ("glEdgeFlagPointerEXT");
    s_deviceConfig.m_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC) glewGetProcAddress ("glGetPointervEXT");
    s_deviceConfig.m_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) glewGetProcAddress ("glIndexPointerEXT");
    s_deviceConfig.m_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) glewGetProcAddress ("glNormalPointerEXT");
    s_deviceConfig.m_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) glewGetProcAddress ("glTexCoordPointerEXT");
    s_deviceConfig.m_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) glewGetProcAddress ("glVertexPointerEXT");
  }

  // GL_EXT_vertex_attrib_64bit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_attrib_64bit])
  {
    s_deviceConfig.m_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC) glewGetProcAddress ("glVertexAttribL1dEXT");
    s_deviceConfig.m_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC) glewGetProcAddress ("glVertexAttribL2dEXT");
    s_deviceConfig.m_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC) glewGetProcAddress ("glVertexAttribL3dEXT");
    s_deviceConfig.m_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC) glewGetProcAddress ("glVertexAttribL4dEXT");
    s_deviceConfig.m_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC) glewGetProcAddress ("glVertexAttribL1dvEXT");
    s_deviceConfig.m_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC) glewGetProcAddress ("glVertexAttribL2dvEXT");
    s_deviceConfig.m_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC) glewGetProcAddress ("glVertexAttribL3dvEXT");
    s_deviceConfig.m_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC) glewGetProcAddress ("glVertexAttribL4dvEXT");
    s_deviceConfig.m_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC) glewGetProcAddress ("glVertexAttribLPointerEXT");
    s_deviceConfig.m_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC) glewGetProcAddress ("glGetVertexAttribLdvEXT");
  }

  // GL_EXT_vertex_shader
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_shader])
  {
    s_deviceConfig.m_glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC) glewGetProcAddress ("glBeginVertexShaderEXT");
    s_deviceConfig.m_glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC) glewGetProcAddress ("glEndVertexShaderEXT");
    s_deviceConfig.m_glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC) glewGetProcAddress ("glBindVertexShaderEXT");
    s_deviceConfig.m_glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC) glewGetProcAddress ("glGenVertexShadersEXT");
    s_deviceConfig.m_glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC) glewGetProcAddress ("glDeleteVertexShaderEXT");
    s_deviceConfig.m_glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC) glewGetProcAddress ("glShaderOp1EXT");
    s_deviceConfig.m_glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC) glewGetProcAddress ("glShaderOp2EXT");
    s_deviceConfig.m_glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC) glewGetProcAddress ("glShaderOp3EXT");
    s_deviceConfig.m_glSwizzleEXT = (PFNGLSWIZZLEEXTPROC) glewGetProcAddress ("glSwizzleEXT");
    s_deviceConfig.m_glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC) glewGetProcAddress ("glWriteMaskEXT");
    s_deviceConfig.m_glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC) glewGetProcAddress ("glInsertComponentEXT");
    s_deviceConfig.m_glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC) glewGetProcAddress ("glExtractComponentEXT");
    s_deviceConfig.m_glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC) glewGetProcAddress ("glGenSymbolsEXT");
    s_deviceConfig.m_glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC) glewGetProcAddress ("glSetInvariantEXT");
    s_deviceConfig.m_glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC) glewGetProcAddress ("glSetLocalConstantEXT");
    s_deviceConfig.m_glVariantbvEXT = (PFNGLVARIANTBVEXTPROC) glewGetProcAddress ("glVariantbvEXT");
    s_deviceConfig.m_glVariantsvEXT = (PFNGLVARIANTSVEXTPROC) glewGetProcAddress ("glVariantsvEXT");
    s_deviceConfig.m_glVariantivEXT = (PFNGLVARIANTIVEXTPROC) glewGetProcAddress ("glVariantivEXT");
    s_deviceConfig.m_glVariantfvEXT = (PFNGLVARIANTFVEXTPROC) glewGetProcAddress ("glVariantfvEXT");
    s_deviceConfig.m_glVariantdvEXT = (PFNGLVARIANTDVEXTPROC) glewGetProcAddress ("glVariantdvEXT");
    s_deviceConfig.m_glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC) glewGetProcAddress ("glVariantubvEXT");
    s_deviceConfig.m_glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC) glewGetProcAddress ("glVariantusvEXT");
    s_deviceConfig.m_glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC) glewGetProcAddress ("glVariantuivEXT");
    s_deviceConfig.m_glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC) glewGetProcAddress ("glVariantPointerEXT");
    s_deviceConfig.m_glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) glewGetProcAddress ("glEnableVariantClientStateEXT");
    s_deviceConfig.m_glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) glewGetProcAddress ("glDisableVariantClientStateEXT");
    s_deviceConfig.m_glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC) glewGetProcAddress ("glBindLightParameterEXT");
    s_deviceConfig.m_glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC) glewGetProcAddress ("glBindMaterialParameterEXT");
    s_deviceConfig.m_glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC) glewGetProcAddress ("glBindTexGenParameterEXT");
    s_deviceConfig.m_glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) glewGetProcAddress ("glBindTextureUnitParameterEXT");
    s_deviceConfig.m_glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC) glewGetProcAddress ("glBindParameterEXT");
    s_deviceConfig.m_glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC) glewGetProcAddress ("glIsVariantEnabledEXT");
    s_deviceConfig.m_glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC) glewGetProcAddress ("glGetVariantBooleanvEXT");
    s_deviceConfig.m_glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC) glewGetProcAddress ("glGetVariantIntegervEXT");
    s_deviceConfig.m_glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC) glewGetProcAddress ("glGetVariantFloatvEXT");
    s_deviceConfig.m_glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC) glewGetProcAddress ("glGetVariantPointervEXT");
    s_deviceConfig.m_glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC) glewGetProcAddress ("glGetInvariantBooleanvEXT");
    s_deviceConfig.m_glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC) glewGetProcAddress ("glGetInvariantIntegervEXT");
    s_deviceConfig.m_glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC) glewGetProcAddress ("glGetInvariantFloatvEXT");
    s_deviceConfig.m_glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) glewGetProcAddress ("glGetLocalConstantBooleanvEXT");
    s_deviceConfig.m_glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) glewGetProcAddress ("glGetLocalConstantIntegervEXT");
    s_deviceConfig.m_glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC) glewGetProcAddress ("glGetLocalConstantFloatvEXT");
  }

  // GL_EXT_vertex_weighting
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_vertex_weighting])
  {
    s_deviceConfig.m_glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC) glewGetProcAddress ("glVertexWeightfEXT");
    s_deviceConfig.m_glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC) glewGetProcAddress ("glVertexWeightfvEXT");
    s_deviceConfig.m_glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC) glewGetProcAddress ("glVertexWeightPointerEXT");
  }

  // GL_EXT_x11_sync_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_EXT_x11_sync_object])
  {
    s_deviceConfig.m_glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC) glewGetProcAddress ("glImportSyncEXT");
  }

  // GL_GREMEDY_frame_terminator
  if (s_deviceConfig.m_featureSupported [GLEW_GL_GREMEDY_frame_terminator])
  {
    s_deviceConfig.m_glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC) glewGetProcAddress ("glFrameTerminatorGREMEDY");
  }

  // GL_GREMEDY_string_marker
  if (s_deviceConfig.m_featureSupported [GLEW_GL_GREMEDY_string_marker])
  {
    s_deviceConfig.m_glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC) glewGetProcAddress ("glStringMarkerGREMEDY");
  }

  // GL_HP_image_transform
  if (s_deviceConfig.m_featureSupported [GLEW_GL_HP_image_transform])
  {
    s_deviceConfig.m_glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC) glewGetProcAddress ("glImageTransformParameteriHP");
    s_deviceConfig.m_glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC) glewGetProcAddress ("glImageTransformParameterfHP");
    s_deviceConfig.m_glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) glewGetProcAddress ("glImageTransformParameterivHP");
    s_deviceConfig.m_glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) glewGetProcAddress ("glImageTransformParameterfvHP");
    s_deviceConfig.m_glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) glewGetProcAddress ("glGetImageTransformParameterivHP");
    s_deviceConfig.m_glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) glewGetProcAddress ("glGetImageTransformParameterfvHP");
  }

  // GL_IBM_multimode_draw_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_IBM_multimode_draw_arrays])
  {
    s_deviceConfig.m_glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC) glewGetProcAddress ("glMultiModeDrawArraysIBM");
    s_deviceConfig.m_glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC) glewGetProcAddress ("glMultiModeDrawElementsIBM");
  }

  // GL_IBM_static_data
  if (s_deviceConfig.m_featureSupported [GLEW_GL_IBM_static_data])
  {
    s_deviceConfig.m_glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC) glewGetProcAddress ("glFlushStaticDataIBM");
  }

  // GL_IBM_vertex_array_lists
  if (s_deviceConfig.m_featureSupported [GLEW_GL_IBM_vertex_array_lists])
  {
    s_deviceConfig.m_glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC) glewGetProcAddress ("glColorPointerListIBM");
    s_deviceConfig.m_glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) glewGetProcAddress ("glSecondaryColorPointerListIBM");
    s_deviceConfig.m_glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC) glewGetProcAddress ("glEdgeFlagPointerListIBM");
    s_deviceConfig.m_glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC) glewGetProcAddress ("glFogCoordPointerListIBM");
    s_deviceConfig.m_glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC) glewGetProcAddress ("glIndexPointerListIBM");
    s_deviceConfig.m_glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC) glewGetProcAddress ("glNormalPointerListIBM");
    s_deviceConfig.m_glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC) glewGetProcAddress ("glTexCoordPointerListIBM");
    s_deviceConfig.m_glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC) glewGetProcAddress ("glVertexPointerListIBM");
  }

  // GL_INGR_blend_func_separate
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INGR_blend_func_separate])
  {
    s_deviceConfig.m_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) glewGetProcAddress ("glBlendFuncSeparateINGR");
  }

  // GL_INTEL_map_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_map_texture])
  {
    s_deviceConfig.m_glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC) glewGetProcAddress ("glSyncTextureINTEL");
    s_deviceConfig.m_glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC) glewGetProcAddress ("glUnmapTexture2DINTEL");
    s_deviceConfig.m_glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC) glewGetProcAddress ("glMapTexture2DINTEL");
  }

  // GL_INTEL_parallel_arrays
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_parallel_arrays])
  {
    s_deviceConfig.m_glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC) glewGetProcAddress ("glVertexPointervINTEL");
    s_deviceConfig.m_glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC) glewGetProcAddress ("glNormalPointervINTEL");
    s_deviceConfig.m_glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC) glewGetProcAddress ("glColorPointervINTEL");
    s_deviceConfig.m_glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC) glewGetProcAddress ("glTexCoordPointervINTEL");
  }

  // GL_INTEL_performance_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_INTEL_performance_query])
  {
    s_deviceConfig.m_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC) glewGetProcAddress ("glBeginPerfQueryINTEL");
    s_deviceConfig.m_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC) glewGetProcAddress ("glCreatePerfQueryINTEL");
    s_deviceConfig.m_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC) glewGetProcAddress ("glDeletePerfQueryINTEL");
    s_deviceConfig.m_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC) glewGetProcAddress ("glEndPerfQueryINTEL");
    s_deviceConfig.m_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC) glewGetProcAddress ("glGetFirstPerfQueryIdINTEL");
    s_deviceConfig.m_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC) glewGetProcAddress ("glGetNextPerfQueryIdINTEL");
    s_deviceConfig.m_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC) glewGetProcAddress ("glGetPerfCounterInfoINTEL");
    s_deviceConfig.m_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC) glewGetProcAddress ("glGetPerfQueryDataINTEL");
    s_deviceConfig.m_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC) glewGetProcAddress ("glGetPerfQueryIdByNameINTEL");
    s_deviceConfig.m_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC) glewGetProcAddress ("glGetPerfQueryInfoINTEL");
  }

  // GL_KHR_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_blend_equation_advanced])
  {
    s_deviceConfig.m_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC) glewGetProcAddress ("glBlendBarrierKHR");
  }

  // GL_KHR_debug
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_debug])
  {
    s_deviceConfig.m_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) glewGetProcAddress ("glDebugMessageControl");
    s_deviceConfig.m_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) glewGetProcAddress ("glDebugMessageInsert");
    s_deviceConfig.m_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) glewGetProcAddress ("glDebugMessageCallback");
    s_deviceConfig.m_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) glewGetProcAddress ("glGetDebugMessageLog");
    s_deviceConfig.m_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) glewGetProcAddress ("glPushDebugGroup");
    s_deviceConfig.m_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) glewGetProcAddress ("glPopDebugGroup");
    s_deviceConfig.m_glObjectLabel = (PFNGLOBJECTLABELPROC) glewGetProcAddress ("glObjectLabel");
    s_deviceConfig.m_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) glewGetProcAddress ("glGetObjectLabel");
    s_deviceConfig.m_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) glewGetProcAddress ("glObjectPtrLabel");
    s_deviceConfig.m_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) glewGetProcAddress ("glGetObjectPtrLabel");
    s_deviceConfig.m_glGetPointerv = (PFNGLGETPOINTERVPROC) glewGetProcAddress ("glGetPointerv");
  }

  // GL_KHR_robustness
  if (s_deviceConfig.m_featureSupported [GLEW_GL_KHR_robustness])
  {
    s_deviceConfig.m_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) glewGetProcAddress ("glGetGraphicsResetStatus");
    s_deviceConfig.m_glReadnPixels = (PFNGLREADNPIXELSPROC) glewGetProcAddress ("glReadnPixels");
    s_deviceConfig.m_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) glewGetProcAddress ("glGetnUniformfv");
    s_deviceConfig.m_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) glewGetProcAddress ("glGetnUniformiv");
    s_deviceConfig.m_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) glewGetProcAddress ("glGetnUniformuiv");
  }

  // GL_MESA_resize_buffers
  if (s_deviceConfig.m_featureSupported [GLEW_GL_MESA_resize_buffers])
  {
    s_deviceConfig.m_glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC) glewGetProcAddress ("glResizeBuffersMESA");
  }

  // GL_MESA_window_pos
  if (s_deviceConfig.m_featureSupported [GLEW_GL_MESA_window_pos])
  {
    s_deviceConfig.m_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC) glewGetProcAddress ("glWindowPos2dMESA");
    s_deviceConfig.m_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC) glewGetProcAddress ("glWindowPos2dvMESA");
    s_deviceConfig.m_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC) glewGetProcAddress ("glWindowPos2fMESA");
    s_deviceConfig.m_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC) glewGetProcAddress ("glWindowPos2fvMESA");
    s_deviceConfig.m_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC) glewGetProcAddress ("glWindowPos2iMESA");
    s_deviceConfig.m_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC) glewGetProcAddress ("glWindowPos2ivMESA");
    s_deviceConfig.m_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC) glewGetProcAddress ("glWindowPos2sMESA");
    s_deviceConfig.m_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC) glewGetProcAddress ("glWindowPos2svMESA");
    s_deviceConfig.m_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC) glewGetProcAddress ("glWindowPos3dMESA");
    s_deviceConfig.m_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC) glewGetProcAddress ("glWindowPos3dvMESA");
    s_deviceConfig.m_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC) glewGetProcAddress ("glWindowPos3fMESA");
    s_deviceConfig.m_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC) glewGetProcAddress ("glWindowPos3fvMESA");
    s_deviceConfig.m_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC) glewGetProcAddress ("glWindowPos3iMESA");
    s_deviceConfig.m_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC) glewGetProcAddress ("glWindowPos3ivMESA");
    s_deviceConfig.m_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC) glewGetProcAddress ("glWindowPos3sMESA");
    s_deviceConfig.m_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC) glewGetProcAddress ("glWindowPos3svMESA");
    s_deviceConfig.m_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC) glewGetProcAddress ("glWindowPos4dMESA");
    s_deviceConfig.m_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC) glewGetProcAddress ("glWindowPos4dvMESA");
    s_deviceConfig.m_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC) glewGetProcAddress ("glWindowPos4fMESA");
    s_deviceConfig.m_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC) glewGetProcAddress ("glWindowPos4fvMESA");
    s_deviceConfig.m_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC) glewGetProcAddress ("glWindowPos4iMESA");
    s_deviceConfig.m_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC) glewGetProcAddress ("glWindowPos4ivMESA");
    s_deviceConfig.m_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC) glewGetProcAddress ("glWindowPos4sMESA");
    s_deviceConfig.m_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC) glewGetProcAddress ("glWindowPos4svMESA");
  }

  // GL_NVX_conditional_render
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NVX_conditional_render])
  {
    s_deviceConfig.m_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC) glewGetProcAddress ("glBeginConditionalRenderNVX");
    s_deviceConfig.m_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC) glewGetProcAddress ("glEndConditionalRenderNVX");
  }

  // GL_NV_bindless_multi_draw_indirect
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_multi_draw_indirect])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) glewGetProcAddress ("glMultiDrawArraysIndirectBindlessNV");
    s_deviceConfig.m_glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) glewGetProcAddress ("glMultiDrawElementsIndirectBindlessNV");
  }

  // GL_NV_bindless_multi_draw_indirect_count
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_multi_draw_indirect_count])
  {
    s_deviceConfig.m_glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) glewGetProcAddress ("glMultiDrawArraysIndirectBindlessCountNV");
    s_deviceConfig.m_glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) glewGetProcAddress ("glMultiDrawElementsIndirectBindlessCountNV");
  }

  // GL_NV_bindless_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_bindless_texture])
  {
    s_deviceConfig.m_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC) glewGetProcAddress ("glGetTextureHandleNV");
    s_deviceConfig.m_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC) glewGetProcAddress ("glGetTextureSamplerHandleNV");
    s_deviceConfig.m_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) glewGetProcAddress ("glMakeTextureHandleResidentNV");
    s_deviceConfig.m_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) glewGetProcAddress ("glMakeTextureHandleNonResidentNV");
    s_deviceConfig.m_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC) glewGetProcAddress ("glGetImageHandleNV");
    s_deviceConfig.m_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) glewGetProcAddress ("glMakeImageHandleResidentNV");
    s_deviceConfig.m_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) glewGetProcAddress ("glMakeImageHandleNonResidentNV");
    s_deviceConfig.m_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC) glewGetProcAddress ("glUniformHandleui64NV");
    s_deviceConfig.m_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC) glewGetProcAddress ("glUniformHandleui64vNV");
    s_deviceConfig.m_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) glewGetProcAddress ("glProgramUniformHandleui64NV");
    s_deviceConfig.m_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) glewGetProcAddress ("glProgramUniformHandleui64vNV");
    s_deviceConfig.m_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC) glewGetProcAddress ("glIsTextureHandleResidentNV");
    s_deviceConfig.m_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC) glewGetProcAddress ("glIsImageHandleResidentNV");
  }

  // GL_NV_blend_equation_advanced
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_blend_equation_advanced])
  {
    s_deviceConfig.m_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC) glewGetProcAddress ("glBlendParameteriNV");
    s_deviceConfig.m_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC) glewGetProcAddress ("glBlendBarrierNV");
  }

  // GL_NV_command_list
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_command_list])
  {
    s_deviceConfig.m_glCreateStatesNV = (PFNGLCREATESTATESNVPROC) glewGetProcAddress ("glCreateStatesNV");
    s_deviceConfig.m_glDeleteStatesNV = (PFNGLDELETESTATESNVPROC) glewGetProcAddress ("glDeleteStatesNV");
    s_deviceConfig.m_glIsStateNV = (PFNGLISSTATENVPROC) glewGetProcAddress ("glIsStateNV");
    s_deviceConfig.m_glStateCaptureNV = (PFNGLSTATECAPTURENVPROC) glewGetProcAddress ("glStateCaptureNV");
    s_deviceConfig.m_glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC) glewGetProcAddress ("glGetCommandHeaderNV");
    s_deviceConfig.m_glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC) glewGetProcAddress ("glGetStageIndexNV");
    s_deviceConfig.m_glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC) glewGetProcAddress ("glDrawCommandsNV");
    s_deviceConfig.m_glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC) glewGetProcAddress ("glDrawCommandsAddressNV");
    s_deviceConfig.m_glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC) glewGetProcAddress ("glDrawCommandsStatesNV");
    s_deviceConfig.m_glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) glewGetProcAddress ("glDrawCommandsStatesAddressNV");
    s_deviceConfig.m_glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC) glewGetProcAddress ("glCreateCommandListsNV");
    s_deviceConfig.m_glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC) glewGetProcAddress ("glDeleteCommandListsNV");
    s_deviceConfig.m_glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC) glewGetProcAddress ("glIsCommandListNV");
    s_deviceConfig.m_glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) glewGetProcAddress ("glListDrawCommandsStatesClientNV");
    s_deviceConfig.m_glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC) glewGetProcAddress ("glCommandListSegmentsNV");
    s_deviceConfig.m_glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC) glewGetProcAddress ("glCompileCommandListNV");
    s_deviceConfig.m_glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC) glewGetProcAddress ("glCallCommandListNV");
  }

  // GL_NV_conditional_render
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conditional_render])
  {
    s_deviceConfig.m_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) glewGetProcAddress ("glBeginConditionalRenderNV");
    s_deviceConfig.m_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) glewGetProcAddress ("glEndConditionalRenderNV");
  }

  // GL_NV_conservative_raster
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_conservative_raster])
  {
    s_deviceConfig.m_glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC) glewGetProcAddress ("glSubpixelPrecisionBiasNV");
  }

  // GL_NV_copy_image
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_copy_image])
  {
    s_deviceConfig.m_glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC) glewGetProcAddress ("glCopyImageSubDataNV");
  }

  // GL_NV_depth_buffer_float
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_depth_buffer_float])
  {
    s_deviceConfig.m_glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC) glewGetProcAddress ("glDepthRangedNV");
    s_deviceConfig.m_glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC) glewGetProcAddress ("glClearDepthdNV");
    s_deviceConfig.m_glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC) glewGetProcAddress ("glDepthBoundsdNV");
  }

  // GL_NV_draw_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_draw_texture])
  {
    s_deviceConfig.m_glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC) glewGetProcAddress ("glDrawTextureNV");
  }

  // GL_NV_evaluators
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_evaluators])
  {
    s_deviceConfig.m_glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC) glewGetProcAddress ("glMapControlPointsNV");
    s_deviceConfig.m_glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC) glewGetProcAddress ("glMapParameterivNV");
    s_deviceConfig.m_glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC) glewGetProcAddress ("glMapParameterfvNV");
    s_deviceConfig.m_glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC) glewGetProcAddress ("glGetMapControlPointsNV");
    s_deviceConfig.m_glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC) glewGetProcAddress ("glGetMapParameterivNV");
    s_deviceConfig.m_glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC) glewGetProcAddress ("glGetMapParameterfvNV");
    s_deviceConfig.m_glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC) glewGetProcAddress ("glGetMapAttribParameterivNV");
    s_deviceConfig.m_glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC) glewGetProcAddress ("glGetMapAttribParameterfvNV");
    s_deviceConfig.m_glEvalMapsNV = (PFNGLEVALMAPSNVPROC) glewGetProcAddress ("glEvalMapsNV");
  }

  // GL_NV_explicit_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_explicit_multisample])
  {
    s_deviceConfig.m_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC) glewGetProcAddress ("glGetMultisamplefvNV");
    s_deviceConfig.m_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC) glewGetProcAddress ("glSampleMaskIndexedNV");
    s_deviceConfig.m_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC) glewGetProcAddress ("glTexRenderbufferNV");
  }

  // GL_NV_fence
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fence])
  {
    s_deviceConfig.m_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC) glewGetProcAddress ("glDeleteFencesNV");
    s_deviceConfig.m_glGenFencesNV = (PFNGLGENFENCESNVPROC) glewGetProcAddress ("glGenFencesNV");
    s_deviceConfig.m_glIsFenceNV = (PFNGLISFENCENVPROC) glewGetProcAddress ("glIsFenceNV");
    s_deviceConfig.m_glTestFenceNV = (PFNGLTESTFENCENVPROC) glewGetProcAddress ("glTestFenceNV");
    s_deviceConfig.m_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC) glewGetProcAddress ("glGetFenceivNV");
    s_deviceConfig.m_glFinishFenceNV = (PFNGLFINISHFENCENVPROC) glewGetProcAddress ("glFinishFenceNV");
    s_deviceConfig.m_glSetFenceNV = (PFNGLSETFENCENVPROC) glewGetProcAddress ("glSetFenceNV");
  }

  // GL_NV_fragment_coverage_to_color
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_coverage_to_color])
  {
    s_deviceConfig.m_glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC) glewGetProcAddress ("glFragmentCoverageColorNV");
  }

  // GL_NV_fragment_program
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_fragment_program])
  {
    s_deviceConfig.m_glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) glewGetProcAddress ("glProgramNamedParameter4fNV");
    s_deviceConfig.m_glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) glewGetProcAddress ("glProgramNamedParameter4fvNV");
    s_deviceConfig.m_glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) glewGetProcAddress ("glProgramNamedParameter4dNV");
    s_deviceConfig.m_glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) glewGetProcAddress ("glProgramNamedParameter4dvNV");
    s_deviceConfig.m_glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) glewGetProcAddress ("glGetProgramNamedParameterfvNV");
    s_deviceConfig.m_glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) glewGetProcAddress ("glGetProgramNamedParameterdvNV");
  }

  // GL_NV_framebuffer_mixed_samples
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_mixed_samples])
  {
    s_deviceConfig.m_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC) glewGetProcAddress ("glRasterSamplesEXT");
    s_deviceConfig.m_glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC) glewGetProcAddress ("glCoverageModulationTableNV");
    s_deviceConfig.m_glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC) glewGetProcAddress ("glGetCoverageModulationTableNV");
    s_deviceConfig.m_glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC) glewGetProcAddress ("glCoverageModulationNV");
  }

  // GL_NV_framebuffer_multisample_coverage
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_framebuffer_multisample_coverage])
  {
    s_deviceConfig.m_glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) glewGetProcAddress ("glRenderbufferStorageMultisampleCoverageNV");
  }

  // GL_NV_geometry_program4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_geometry_program4])
  {
    s_deviceConfig.m_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) glewGetProcAddress ("glProgramVertexLimitNV");
    s_deviceConfig.m_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) glewGetProcAddress ("glFramebufferTextureEXT");
    s_deviceConfig.m_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) glewGetProcAddress ("glFramebufferTextureLayerEXT");
    s_deviceConfig.m_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) glewGetProcAddress ("glFramebufferTextureFaceEXT");
  }

  // GL_NV_gpu_program4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_program4])
  {
    s_deviceConfig.m_glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC) glewGetProcAddress ("glProgramLocalParameterI4iNV");
    s_deviceConfig.m_glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) glewGetProcAddress ("glProgramLocalParameterI4ivNV");
    s_deviceConfig.m_glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) glewGetProcAddress ("glProgramLocalParametersI4ivNV");
    s_deviceConfig.m_glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) glewGetProcAddress ("glProgramLocalParameterI4uiNV");
    s_deviceConfig.m_glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) glewGetProcAddress ("glProgramLocalParameterI4uivNV");
    s_deviceConfig.m_glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) glewGetProcAddress ("glProgramLocalParametersI4uivNV");
    s_deviceConfig.m_glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC) glewGetProcAddress ("glProgramEnvParameterI4iNV");
    s_deviceConfig.m_glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC) glewGetProcAddress ("glProgramEnvParameterI4ivNV");
    s_deviceConfig.m_glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) glewGetProcAddress ("glProgramEnvParametersI4ivNV");
    s_deviceConfig.m_glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC) glewGetProcAddress ("glProgramEnvParameterI4uiNV");
    s_deviceConfig.m_glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) glewGetProcAddress ("glProgramEnvParameterI4uivNV");
    s_deviceConfig.m_glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) glewGetProcAddress ("glProgramEnvParametersI4uivNV");
    s_deviceConfig.m_glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) glewGetProcAddress ("glGetProgramLocalParameterIivNV");
    s_deviceConfig.m_glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) glewGetProcAddress ("glGetProgramLocalParameterIuivNV");
    s_deviceConfig.m_glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) glewGetProcAddress ("glGetProgramEnvParameterIivNV");
    s_deviceConfig.m_glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) glewGetProcAddress ("glGetProgramEnvParameterIuivNV");
  }

  // GL_NV_gpu_program5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_program5])
  {
    s_deviceConfig.m_glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) glewGetProcAddress ("glProgramSubroutineParametersuivNV");
    s_deviceConfig.m_glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) glewGetProcAddress ("glGetProgramSubroutineParameteruivNV");
  }

  // GL_NV_gpu_shader5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_shader5])
  {
    s_deviceConfig.m_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC) glewGetProcAddress ("glUniform1i64NV");
    s_deviceConfig.m_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC) glewGetProcAddress ("glUniform2i64NV");
    s_deviceConfig.m_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC) glewGetProcAddress ("glUniform3i64NV");
    s_deviceConfig.m_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC) glewGetProcAddress ("glUniform4i64NV");
    s_deviceConfig.m_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC) glewGetProcAddress ("glUniform1i64vNV");
    s_deviceConfig.m_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC) glewGetProcAddress ("glUniform2i64vNV");
    s_deviceConfig.m_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC) glewGetProcAddress ("glUniform3i64vNV");
    s_deviceConfig.m_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC) glewGetProcAddress ("glUniform4i64vNV");
    s_deviceConfig.m_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC) glewGetProcAddress ("glUniform1ui64NV");
    s_deviceConfig.m_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC) glewGetProcAddress ("glUniform2ui64NV");
    s_deviceConfig.m_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC) glewGetProcAddress ("glUniform3ui64NV");
    s_deviceConfig.m_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC) glewGetProcAddress ("glUniform4ui64NV");
    s_deviceConfig.m_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC) glewGetProcAddress ("glUniform1ui64vNV");
    s_deviceConfig.m_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC) glewGetProcAddress ("glUniform2ui64vNV");
    s_deviceConfig.m_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC) glewGetProcAddress ("glUniform3ui64vNV");
    s_deviceConfig.m_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC) glewGetProcAddress ("glUniform4ui64vNV");
    s_deviceConfig.m_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC) glewGetProcAddress ("glGetUniformi64vNV");
  }

  // GL_NV_gpu_shader5
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_gpu_shader5])
  {
    s_deviceConfig.m_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC) glewGetProcAddress ("glProgramUniform1i64NV");
    s_deviceConfig.m_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC) glewGetProcAddress ("glProgramUniform2i64NV");
    s_deviceConfig.m_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC) glewGetProcAddress ("glProgramUniform3i64NV");
    s_deviceConfig.m_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC) glewGetProcAddress ("glProgramUniform4i64NV");
    s_deviceConfig.m_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC) glewGetProcAddress ("glProgramUniform1i64vNV");
    s_deviceConfig.m_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC) glewGetProcAddress ("glProgramUniform2i64vNV");
    s_deviceConfig.m_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC) glewGetProcAddress ("glProgramUniform3i64vNV");
    s_deviceConfig.m_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC) glewGetProcAddress ("glProgramUniform4i64vNV");
    s_deviceConfig.m_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC) glewGetProcAddress ("glProgramUniform1ui64NV");
    s_deviceConfig.m_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC) glewGetProcAddress ("glProgramUniform2ui64NV");
    s_deviceConfig.m_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC) glewGetProcAddress ("glProgramUniform3ui64NV");
    s_deviceConfig.m_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC) glewGetProcAddress ("glProgramUniform4ui64NV");
    s_deviceConfig.m_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC) glewGetProcAddress ("glProgramUniform1ui64vNV");
    s_deviceConfig.m_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC) glewGetProcAddress ("glProgramUniform2ui64vNV");
    s_deviceConfig.m_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC) glewGetProcAddress ("glProgramUniform3ui64vNV");
    s_deviceConfig.m_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC) glewGetProcAddress ("glProgramUniform4ui64vNV");
  }

  // GL_NV_half_float
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_half_float])
  {
    s_deviceConfig.m_glVertex2hNV = (PFNGLVERTEX2HNVPROC) glewGetProcAddress ("glVertex2hNV");
    s_deviceConfig.m_glVertex2hvNV = (PFNGLVERTEX2HVNVPROC) glewGetProcAddress ("glVertex2hvNV");
    s_deviceConfig.m_glVertex3hNV = (PFNGLVERTEX3HNVPROC) glewGetProcAddress ("glVertex3hNV");
    s_deviceConfig.m_glVertex3hvNV = (PFNGLVERTEX3HVNVPROC) glewGetProcAddress ("glVertex3hvNV");
    s_deviceConfig.m_glVertex4hNV = (PFNGLVERTEX4HNVPROC) glewGetProcAddress ("glVertex4hNV");
    s_deviceConfig.m_glVertex4hvNV = (PFNGLVERTEX4HVNVPROC) glewGetProcAddress ("glVertex4hvNV");
    s_deviceConfig.m_glNormal3hNV = (PFNGLNORMAL3HNVPROC) glewGetProcAddress ("glNormal3hNV");
    s_deviceConfig.m_glNormal3hvNV = (PFNGLNORMAL3HVNVPROC) glewGetProcAddress ("glNormal3hvNV");
    s_deviceConfig.m_glColor3hNV = (PFNGLCOLOR3HNVPROC) glewGetProcAddress ("glColor3hNV");
    s_deviceConfig.m_glColor3hvNV = (PFNGLCOLOR3HVNVPROC) glewGetProcAddress ("glColor3hvNV");
    s_deviceConfig.m_glColor4hNV = (PFNGLCOLOR4HNVPROC) glewGetProcAddress ("glColor4hNV");
    s_deviceConfig.m_glColor4hvNV = (PFNGLCOLOR4HVNVPROC) glewGetProcAddress ("glColor4hvNV");
    s_deviceConfig.m_glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC) glewGetProcAddress ("glTexCoord1hNV");
    s_deviceConfig.m_glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC) glewGetProcAddress ("glTexCoord1hvNV");
    s_deviceConfig.m_glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC) glewGetProcAddress ("glTexCoord2hNV");
    s_deviceConfig.m_glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC) glewGetProcAddress ("glTexCoord2hvNV");
    s_deviceConfig.m_glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC) glewGetProcAddress ("glTexCoord3hNV");
    s_deviceConfig.m_glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC) glewGetProcAddress ("glTexCoord3hvNV");
    s_deviceConfig.m_glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC) glewGetProcAddress ("glTexCoord4hNV");
    s_deviceConfig.m_glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC) glewGetProcAddress ("glTexCoord4hvNV");
    s_deviceConfig.m_glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC) glewGetProcAddress ("glMultiTexCoord1hNV");
    s_deviceConfig.m_glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC) glewGetProcAddress ("glMultiTexCoord1hvNV");
    s_deviceConfig.m_glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC) glewGetProcAddress ("glMultiTexCoord2hNV");
    s_deviceConfig.m_glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC) glewGetProcAddress ("glMultiTexCoord2hvNV");
    s_deviceConfig.m_glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC) glewGetProcAddress ("glMultiTexCoord3hNV");
    s_deviceConfig.m_glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC) glewGetProcAddress ("glMultiTexCoord3hvNV");
    s_deviceConfig.m_glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC) glewGetProcAddress ("glMultiTexCoord4hNV");
    s_deviceConfig.m_glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC) glewGetProcAddress ("glMultiTexCoord4hvNV");
    s_deviceConfig.m_glFogCoordhNV = (PFNGLFOGCOORDHNVPROC) glewGetProcAddress ("glFogCoordhNV");
    s_deviceConfig.m_glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC) glewGetProcAddress ("glFogCoordhvNV");
    s_deviceConfig.m_glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC) glewGetProcAddress ("glSecondaryColor3hNV");
    s_deviceConfig.m_glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC) glewGetProcAddress ("glSecondaryColor3hvNV");
    s_deviceConfig.m_glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC) glewGetProcAddress ("glVertexWeighthNV");
    s_deviceConfig.m_glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC) glewGetProcAddress ("glVertexWeighthvNV");
    s_deviceConfig.m_glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC) glewGetProcAddress ("glVertexAttrib1hNV");
    s_deviceConfig.m_glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC) glewGetProcAddress ("glVertexAttrib1hvNV");
    s_deviceConfig.m_glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC) glewGetProcAddress ("glVertexAttrib2hNV");
    s_deviceConfig.m_glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC) glewGetProcAddress ("glVertexAttrib2hvNV");
    s_deviceConfig.m_glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC) glewGetProcAddress ("glVertexAttrib3hNV");
    s_deviceConfig.m_glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC) glewGetProcAddress ("glVertexAttrib3hvNV");
    s_deviceConfig.m_glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC) glewGetProcAddress ("glVertexAttrib4hNV");
    s_deviceConfig.m_glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC) glewGetProcAddress ("glVertexAttrib4hvNV");
    s_deviceConfig.m_glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC) glewGetProcAddress ("glVertexAttribs1hvNV");
    s_deviceConfig.m_glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC) glewGetProcAddress ("glVertexAttribs2hvNV");
    s_deviceConfig.m_glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC) glewGetProcAddress ("glVertexAttribs3hvNV");
    s_deviceConfig.m_glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC) glewGetProcAddress ("glVertexAttribs4hvNV");
  }

  // GL_NV_internalformat_sample_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_internalformat_sample_query])
  {
    s_deviceConfig.m_glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) glewGetProcAddress ("glGetInternalformatSampleivNV");
  }

  // GL_NV_occlusion_query
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_occlusion_query])
  {
    s_deviceConfig.m_glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC) glewGetProcAddress ("glGenOcclusionQueriesNV");
    s_deviceConfig.m_glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC) glewGetProcAddress ("glDeleteOcclusionQueriesNV");
    s_deviceConfig.m_glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC) glewGetProcAddress ("glIsOcclusionQueryNV");
    s_deviceConfig.m_glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC) glewGetProcAddress ("glBeginOcclusionQueryNV");
    s_deviceConfig.m_glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC) glewGetProcAddress ("glEndOcclusionQueryNV");
    s_deviceConfig.m_glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC) glewGetProcAddress ("glGetOcclusionQueryivNV");
    s_deviceConfig.m_glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC) glewGetProcAddress ("glGetOcclusionQueryuivNV");
  }

  // GL_NV_parameter_buffer_object
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_parameter_buffer_object])
  {
    s_deviceConfig.m_glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) glewGetProcAddress ("glProgramBufferParametersfvNV");
    s_deviceConfig.m_glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) glewGetProcAddress ("glProgramBufferParametersIivNV");
    s_deviceConfig.m_glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) glewGetProcAddress ("glProgramBufferParametersIuivNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glGenPathsNV = (PFNGLGENPATHSNVPROC) glewGetProcAddress ("glGenPathsNV");
    s_deviceConfig.m_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC) glewGetProcAddress ("glDeletePathsNV");
    s_deviceConfig.m_glIsPathNV = (PFNGLISPATHNVPROC) glewGetProcAddress ("glIsPathNV");
    s_deviceConfig.m_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC) glewGetProcAddress ("glPathCommandsNV");
    s_deviceConfig.m_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC) glewGetProcAddress ("glPathCoordsNV");
    s_deviceConfig.m_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC) glewGetProcAddress ("glPathSubCommandsNV");
    s_deviceConfig.m_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC) glewGetProcAddress ("glPathSubCoordsNV");
    s_deviceConfig.m_glPathStringNV = (PFNGLPATHSTRINGNVPROC) glewGetProcAddress ("glPathStringNV");
    s_deviceConfig.m_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC) glewGetProcAddress ("glPathGlyphsNV");
    s_deviceConfig.m_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC) glewGetProcAddress ("glPathGlyphRangeNV");
    s_deviceConfig.m_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC) glewGetProcAddress ("glWeightPathsNV");
    s_deviceConfig.m_glCopyPathNV = (PFNGLCOPYPATHNVPROC) glewGetProcAddress ("glCopyPathNV");
    s_deviceConfig.m_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC) glewGetProcAddress ("glInterpolatePathsNV");
    s_deviceConfig.m_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC) glewGetProcAddress ("glTransformPathNV");
    s_deviceConfig.m_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC) glewGetProcAddress ("glPathParameterivNV");
    s_deviceConfig.m_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC) glewGetProcAddress ("glPathParameteriNV");
    s_deviceConfig.m_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC) glewGetProcAddress ("glPathParameterfvNV");
    s_deviceConfig.m_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC) glewGetProcAddress ("glPathParameterfNV");
    s_deviceConfig.m_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC) glewGetProcAddress ("glPathDashArrayNV");
    s_deviceConfig.m_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC) glewGetProcAddress ("glPathStencilFuncNV");
    s_deviceConfig.m_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC) glewGetProcAddress ("glPathStencilDepthOffsetNV");
    s_deviceConfig.m_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC) glewGetProcAddress ("glStencilFillPathNV");
    s_deviceConfig.m_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC) glewGetProcAddress ("glStencilStrokePathNV");
    s_deviceConfig.m_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilFillPathInstancedNV");
    s_deviceConfig.m_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilStrokePathInstancedNV");
    s_deviceConfig.m_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC) glewGetProcAddress ("glPathCoverDepthFuncNV");
    s_deviceConfig.m_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC) glewGetProcAddress ("glCoverFillPathNV");
    s_deviceConfig.m_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC) glewGetProcAddress ("glCoverStrokePathNV");
    s_deviceConfig.m_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glCoverFillPathInstancedNV");
    s_deviceConfig.m_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glCoverStrokePathInstancedNV");
    s_deviceConfig.m_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC) glewGetProcAddress ("glGetPathParameterivNV");
    s_deviceConfig.m_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC) glewGetProcAddress ("glGetPathParameterfvNV");
    s_deviceConfig.m_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC) glewGetProcAddress ("glGetPathCommandsNV");
    s_deviceConfig.m_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC) glewGetProcAddress ("glGetPathCoordsNV");
    s_deviceConfig.m_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC) glewGetProcAddress ("glGetPathDashArrayNV");
    s_deviceConfig.m_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC) glewGetProcAddress ("glGetPathMetricsNV");
    s_deviceConfig.m_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC) glewGetProcAddress ("glGetPathMetricRangeNV");
    s_deviceConfig.m_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC) glewGetProcAddress ("glGetPathSpacingNV");
    s_deviceConfig.m_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC) glewGetProcAddress ("glIsPointInFillPathNV");
    s_deviceConfig.m_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC) glewGetProcAddress ("glIsPointInStrokePathNV");
    s_deviceConfig.m_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC) glewGetProcAddress ("glGetPathLengthNV");
    s_deviceConfig.m_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC) glewGetProcAddress ("glPointAlongPathNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC) glewGetProcAddress ("glMatrixLoad3x2fNV");
    s_deviceConfig.m_glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC) glewGetProcAddress ("glMatrixLoad3x3fNV");
    s_deviceConfig.m_glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) glewGetProcAddress ("glMatrixLoadTranspose3x3fNV");
    s_deviceConfig.m_glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC) glewGetProcAddress ("glMatrixMult3x2fNV");
    s_deviceConfig.m_glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC) glewGetProcAddress ("glMatrixMult3x3fNV");
    s_deviceConfig.m_glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) glewGetProcAddress ("glMatrixMultTranspose3x3fNV");
    s_deviceConfig.m_glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC) glewGetProcAddress ("glStencilThenCoverFillPathNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) glewGetProcAddress ("glStencilThenCoverStrokePathNV");
    s_deviceConfig.m_glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilThenCoverFillPathInstancedNV");
    s_deviceConfig.m_glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) glewGetProcAddress ("glStencilThenCoverStrokePathInstancedNV");
    s_deviceConfig.m_glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC) glewGetProcAddress ("glPathGlyphIndexRangeNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC) glewGetProcAddress ("glPathGlyphIndexArrayNV");
    s_deviceConfig.m_glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) glewGetProcAddress ("glPathMemoryGlyphIndexArrayNV");
    s_deviceConfig.m_glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) glewGetProcAddress ("glProgramPathFragmentInputGenNV");
    s_deviceConfig.m_glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC) glewGetProcAddress ("glGetProgramResourcefvNV");
  }

  // GL_NV_path_rendering
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_path_rendering])
  {
    s_deviceConfig.m_glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC) glewGetProcAddress ("glPathColorGenNV");
    s_deviceConfig.m_glPathTexGenNV = (PFNGLPATHTEXGENNVPROC) glewGetProcAddress ("glPathTexGenNV");
    s_deviceConfig.m_glPathFogGenNV = (PFNGLPATHFOGGENNVPROC) glewGetProcAddress ("glPathFogGenNV");
    s_deviceConfig.m_glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC) glewGetProcAddress ("glGetPathColorGenivNV");
    s_deviceConfig.m_glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC) glewGetProcAddress ("glGetPathColorGenfvNV");
    s_deviceConfig.m_glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC) glewGetProcAddress ("glGetPathTexGenivNV");
    s_deviceConfig.m_glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC) glewGetProcAddress ("glGetPathTexGenfvNV");
  }

  // GL_NV_pixel_data_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_pixel_data_range])
  {
    s_deviceConfig.m_glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC) glewGetProcAddress ("glPixelDataRangeNV");
    s_deviceConfig.m_glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC) glewGetProcAddress ("glFlushPixelDataRangeNV");
  }

  // GL_NV_point_sprite
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_point_sprite])
  {
    s_deviceConfig.m_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC) glewGetProcAddress ("glPointParameteriNV");
    s_deviceConfig.m_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC) glewGetProcAddress ("glPointParameterivNV");
  }

  // GL_NV_present_video
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_present_video])
  {
    s_deviceConfig.m_glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC) glewGetProcAddress ("glPresentFrameKeyedNV");
    s_deviceConfig.m_glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC) glewGetProcAddress ("glPresentFrameDualFillNV");
    s_deviceConfig.m_glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC) glewGetProcAddress ("glGetVideoivNV");
    s_deviceConfig.m_glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC) glewGetProcAddress ("glGetVideouivNV");
    s_deviceConfig.m_glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC) glewGetProcAddress ("glGetVideoi64vNV");
    s_deviceConfig.m_glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC) glewGetProcAddress ("glGetVideoui64vNV");
  }

  // GL_NV_primitive_restart
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_primitive_restart])
  {
    s_deviceConfig.m_glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC) glewGetProcAddress ("glPrimitiveRestartNV");
    s_deviceConfig.m_glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC) glewGetProcAddress ("glPrimitiveRestartIndexNV");
  }

  // GL_NV_register_combiners
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_register_combiners])
  {
    s_deviceConfig.m_glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC) glewGetProcAddress ("glCombinerParameterfvNV");
    s_deviceConfig.m_glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC) glewGetProcAddress ("glCombinerParameterfNV");
    s_deviceConfig.m_glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC) glewGetProcAddress ("glCombinerParameterivNV");
    s_deviceConfig.m_glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC) glewGetProcAddress ("glCombinerParameteriNV");
    s_deviceConfig.m_glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC) glewGetProcAddress ("glCombinerInputNV");
    s_deviceConfig.m_glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC) glewGetProcAddress ("glCombinerOutputNV");
    s_deviceConfig.m_glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC) glewGetProcAddress ("glFinalCombinerInputNV");
    s_deviceConfig.m_glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) glewGetProcAddress ("glGetCombinerInputParameterfvNV");
    s_deviceConfig.m_glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) glewGetProcAddress ("glGetCombinerInputParameterivNV");
    s_deviceConfig.m_glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) glewGetProcAddress ("glGetCombinerOutputParameterfvNV");
    s_deviceConfig.m_glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) glewGetProcAddress ("glGetCombinerOutputParameterivNV");
    s_deviceConfig.m_glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) glewGetProcAddress ("glGetFinalCombinerInputParameterfvNV");
    s_deviceConfig.m_glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) glewGetProcAddress ("glGetFinalCombinerInputParameterivNV");
  }

  // GL_NV_register_combiners2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_register_combiners2])
  {
    s_deviceConfig.m_glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) glewGetProcAddress ("glCombinerStageParameterfvNV");
    s_deviceConfig.m_glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) glewGetProcAddress ("glGetCombinerStageParameterfvNV");
  }

  // GL_NV_sample_locations
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_sample_locations])
  {
    s_deviceConfig.m_glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glewGetProcAddress ("glFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) glewGetProcAddress ("glNamedFramebufferSampleLocationsfvNV");
    s_deviceConfig.m_glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC) glewGetProcAddress ("glResolveDepthValuesNV");
  }

  // GL_NV_shader_buffer_load
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_shader_buffer_load])
  {
    s_deviceConfig.m_glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC) glewGetProcAddress ("glMakeBufferResidentNV");
    s_deviceConfig.m_glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC) glewGetProcAddress ("glMakeBufferNonResidentNV");
    s_deviceConfig.m_glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC) glewGetProcAddress ("glIsBufferResidentNV");
    s_deviceConfig.m_glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) glewGetProcAddress ("glMakeNamedBufferResidentNV");
    s_deviceConfig.m_glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) glewGetProcAddress ("glMakeNamedBufferNonResidentNV");
    s_deviceConfig.m_glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC) glewGetProcAddress ("glIsNamedBufferResidentNV");
    s_deviceConfig.m_glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC) glewGetProcAddress ("glGetBufferParameterui64vNV");
    s_deviceConfig.m_glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) glewGetProcAddress ("glGetNamedBufferParameterui64vNV");
    s_deviceConfig.m_glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC) glewGetProcAddress ("glGetIntegerui64vNV");
    s_deviceConfig.m_glUniformui64NV = (PFNGLUNIFORMUI64NVPROC) glewGetProcAddress ("glUniformui64NV");
    s_deviceConfig.m_glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC) glewGetProcAddress ("glUniformui64vNV");
    s_deviceConfig.m_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC) glewGetProcAddress ("glGetUniformui64vNV");
    s_deviceConfig.m_glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC) glewGetProcAddress ("glProgramUniformui64NV");
    s_deviceConfig.m_glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC) glewGetProcAddress ("glProgramUniformui64vNV");
  }

  // GL_NV_texture_barrier
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_barrier])
  {
    s_deviceConfig.m_glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC) glewGetProcAddress ("glTextureBarrierNV");
  }

  // GL_NV_texture_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_multisample])
  {
    s_deviceConfig.m_glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) glewGetProcAddress ("glTexImage2DMultisampleCoverageNV");
    s_deviceConfig.m_glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) glewGetProcAddress ("glTexImage3DMultisampleCoverageNV");
  }

  // GL_NV_texture_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_texture_multisample])
  {
    s_deviceConfig.m_glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) glewGetProcAddress ("glTextureImage2DMultisampleNV");
    s_deviceConfig.m_glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) glewGetProcAddress ("glTextureImage3DMultisampleNV");
    s_deviceConfig.m_glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) glewGetProcAddress ("glTextureImage2DMultisampleCoverageNV");
    s_deviceConfig.m_glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) glewGetProcAddress ("glTextureImage3DMultisampleCoverageNV");
  }

  // GL_NV_transform_feedback
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_transform_feedback])
  {
    s_deviceConfig.m_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glBeginTransformFeedbackNV");
    s_deviceConfig.m_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glEndTransformFeedbackNV");
    s_deviceConfig.m_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) glewGetProcAddress ("glTransformFeedbackAttribsNV");
    s_deviceConfig.m_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC) glewGetProcAddress ("glBindBufferRangeNV");
    s_deviceConfig.m_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC) glewGetProcAddress ("glBindBufferOffsetNV");
    s_deviceConfig.m_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC) glewGetProcAddress ("glBindBufferBaseNV");
    s_deviceConfig.m_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) glewGetProcAddress ("glTransformFeedbackVaryingsNV");
    s_deviceConfig.m_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC) glewGetProcAddress ("glActiveVaryingNV");
    s_deviceConfig.m_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC) glewGetProcAddress ("glGetVaryingLocationNV");
    s_deviceConfig.m_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC) glewGetProcAddress ("glGetActiveVaryingNV");
    s_deviceConfig.m_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) glewGetProcAddress ("glGetTransformFeedbackVaryingNV");
  }

  // GL_NV_transform_feedback
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_transform_feedback])
  {
    s_deviceConfig.m_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) glewGetProcAddress ("glTransformFeedbackStreamAttribsNV");
  }

  // GL_NV_transform_feedback2
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_transform_feedback2])
  {
    s_deviceConfig.m_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glBindTransformFeedbackNV");
    s_deviceConfig.m_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC) glewGetProcAddress ("glDeleteTransformFeedbacksNV");
    s_deviceConfig.m_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC) glewGetProcAddress ("glGenTransformFeedbacksNV");
    s_deviceConfig.m_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glIsTransformFeedbackNV");
    s_deviceConfig.m_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glPauseTransformFeedbackNV");
    s_deviceConfig.m_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glResumeTransformFeedbackNV");
    s_deviceConfig.m_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC) glewGetProcAddress ("glDrawTransformFeedbackNV");
  }

  // GL_NV_vdpau_interop
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vdpau_interop])
  {
    s_deviceConfig.m_glVDPAUInitNV = (PFNGLVDPAUINITNVPROC) glewGetProcAddress ("glVDPAUInitNV");
    s_deviceConfig.m_glVDPAUFiniNV = (PFNGLVDPAUFININVPROC) glewGetProcAddress ("glVDPAUFiniNV");
    s_deviceConfig.m_glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) glewGetProcAddress ("glVDPAURegisterVideoSurfaceNV");
    s_deviceConfig.m_glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) glewGetProcAddress ("glVDPAURegisterOutputSurfaceNV");
    s_deviceConfig.m_glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC) glewGetProcAddress ("glVDPAUIsSurfaceNV");
    s_deviceConfig.m_glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC) glewGetProcAddress ("glVDPAUUnregisterSurfaceNV");
    s_deviceConfig.m_glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC) glewGetProcAddress ("glVDPAUGetSurfaceivNV");
    s_deviceConfig.m_glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC) glewGetProcAddress ("glVDPAUSurfaceAccessNV");
    s_deviceConfig.m_glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC) glewGetProcAddress ("glVDPAUMapSurfacesNV");
    s_deviceConfig.m_glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC) glewGetProcAddress ("glVDPAUUnmapSurfacesNV");
  }

  // GL_NV_vertex_array_range
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_array_range])
  {
    s_deviceConfig.m_glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC) glewGetProcAddress ("glFlushVertexArrayRangeNV");
    s_deviceConfig.m_glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC) glewGetProcAddress ("glVertexArrayRangeNV");
  }

  // GL_NV_vertex_attrib_integer_64bit
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_attrib_integer_64bit])
  {
    s_deviceConfig.m_glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC) glewGetProcAddress ("glVertexAttribL1i64NV");
    s_deviceConfig.m_glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC) glewGetProcAddress ("glVertexAttribL2i64NV");
    s_deviceConfig.m_glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC) glewGetProcAddress ("glVertexAttribL3i64NV");
    s_deviceConfig.m_glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC) glewGetProcAddress ("glVertexAttribL4i64NV");
    s_deviceConfig.m_glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC) glewGetProcAddress ("glVertexAttribL1i64vNV");
    s_deviceConfig.m_glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC) glewGetProcAddress ("glVertexAttribL2i64vNV");
    s_deviceConfig.m_glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC) glewGetProcAddress ("glVertexAttribL3i64vNV");
    s_deviceConfig.m_glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC) glewGetProcAddress ("glVertexAttribL4i64vNV");
    s_deviceConfig.m_glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC) glewGetProcAddress ("glVertexAttribL1ui64NV");
    s_deviceConfig.m_glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC) glewGetProcAddress ("glVertexAttribL2ui64NV");
    s_deviceConfig.m_glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC) glewGetProcAddress ("glVertexAttribL3ui64NV");
    s_deviceConfig.m_glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC) glewGetProcAddress ("glVertexAttribL4ui64NV");
    s_deviceConfig.m_glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC) glewGetProcAddress ("glVertexAttribL1ui64vNV");
    s_deviceConfig.m_glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC) glewGetProcAddress ("glVertexAttribL2ui64vNV");
    s_deviceConfig.m_glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC) glewGetProcAddress ("glVertexAttribL3ui64vNV");
    s_deviceConfig.m_glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC) glewGetProcAddress ("glVertexAttribL4ui64vNV");
    s_deviceConfig.m_glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC) glewGetProcAddress ("glGetVertexAttribLi64vNV");
    s_deviceConfig.m_glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC) glewGetProcAddress ("glGetVertexAttribLui64vNV");
    s_deviceConfig.m_glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC) glewGetProcAddress ("glVertexAttribLFormatNV");
  }

  // GL_NV_vertex_buffer_unified_memory
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_buffer_unified_memory])
  {
    s_deviceConfig.m_glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC) glewGetProcAddress ("glBufferAddressRangeNV");
    s_deviceConfig.m_glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC) glewGetProcAddress ("glVertexFormatNV");
    s_deviceConfig.m_glNormalFormatNV = (PFNGLNORMALFORMATNVPROC) glewGetProcAddress ("glNormalFormatNV");
    s_deviceConfig.m_glColorFormatNV = (PFNGLCOLORFORMATNVPROC) glewGetProcAddress ("glColorFormatNV");
    s_deviceConfig.m_glIndexFormatNV = (PFNGLINDEXFORMATNVPROC) glewGetProcAddress ("glIndexFormatNV");
    s_deviceConfig.m_glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC) glewGetProcAddress ("glTexCoordFormatNV");
    s_deviceConfig.m_glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC) glewGetProcAddress ("glEdgeFlagFormatNV");
    s_deviceConfig.m_glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC) glewGetProcAddress ("glSecondaryColorFormatNV");
    s_deviceConfig.m_glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC) glewGetProcAddress ("glFogCoordFormatNV");
    s_deviceConfig.m_glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC) glewGetProcAddress ("glVertexAttribFormatNV");
    s_deviceConfig.m_glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC) glewGetProcAddress ("glVertexAttribIFormatNV");
    s_deviceConfig.m_glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC) glewGetProcAddress ("glGetIntegerui64i_vNV");
  }

  // GL_NV_vertex_program
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program])
  {
    s_deviceConfig.m_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) glewGetProcAddress ("glAreProgramsResidentNV");
    s_deviceConfig.m_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC) glewGetProcAddress ("glBindProgramNV");
    s_deviceConfig.m_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) glewGetProcAddress ("glDeleteProgramsNV");
    s_deviceConfig.m_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) glewGetProcAddress ("glExecuteProgramNV");
    s_deviceConfig.m_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC) glewGetProcAddress ("glGenProgramsNV");
    s_deviceConfig.m_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) glewGetProcAddress ("glGetProgramParameterdvNV");
    s_deviceConfig.m_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) glewGetProcAddress ("glGetProgramParameterfvNV");
    s_deviceConfig.m_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC) glewGetProcAddress ("glGetProgramivNV");
    s_deviceConfig.m_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) glewGetProcAddress ("glGetProgramStringNV");
    s_deviceConfig.m_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) glewGetProcAddress ("glGetTrackMatrixivNV");
    s_deviceConfig.m_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) glewGetProcAddress ("glGetVertexAttribdvNV");
    s_deviceConfig.m_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) glewGetProcAddress ("glGetVertexAttribfvNV");
    s_deviceConfig.m_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) glewGetProcAddress ("glGetVertexAttribivNV");
    s_deviceConfig.m_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) glewGetProcAddress ("glGetVertexAttribPointervNV");
    s_deviceConfig.m_glIsProgramNV = (PFNGLISPROGRAMNVPROC) glewGetProcAddress ("glIsProgramNV");
    s_deviceConfig.m_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC) glewGetProcAddress ("glLoadProgramNV");
    s_deviceConfig.m_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) glewGetProcAddress ("glProgramParameter4dNV");
    s_deviceConfig.m_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) glewGetProcAddress ("glProgramParameter4dvNV");
    s_deviceConfig.m_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) glewGetProcAddress ("glProgramParameter4fNV");
    s_deviceConfig.m_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) glewGetProcAddress ("glProgramParameter4fvNV");
    s_deviceConfig.m_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) glewGetProcAddress ("glProgramParameters4dvNV");
    s_deviceConfig.m_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) glewGetProcAddress ("glProgramParameters4fvNV");
    s_deviceConfig.m_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) glewGetProcAddress ("glRequestResidentProgramsNV");
    s_deviceConfig.m_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC) glewGetProcAddress ("glTrackMatrixNV");
    s_deviceConfig.m_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) glewGetProcAddress ("glVertexAttribPointerNV");
    s_deviceConfig.m_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) glewGetProcAddress ("glVertexAttrib1dNV");
    s_deviceConfig.m_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) glewGetProcAddress ("glVertexAttrib1dvNV");
    s_deviceConfig.m_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) glewGetProcAddress ("glVertexAttrib1fNV");
    s_deviceConfig.m_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) glewGetProcAddress ("glVertexAttrib1fvNV");
    s_deviceConfig.m_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) glewGetProcAddress ("glVertexAttrib1sNV");
    s_deviceConfig.m_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) glewGetProcAddress ("glVertexAttrib1svNV");
    s_deviceConfig.m_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) glewGetProcAddress ("glVertexAttrib2dNV");
    s_deviceConfig.m_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) glewGetProcAddress ("glVertexAttrib2dvNV");
    s_deviceConfig.m_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) glewGetProcAddress ("glVertexAttrib2fNV");
    s_deviceConfig.m_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) glewGetProcAddress ("glVertexAttrib2fvNV");
    s_deviceConfig.m_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) glewGetProcAddress ("glVertexAttrib2sNV");
    s_deviceConfig.m_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) glewGetProcAddress ("glVertexAttrib2svNV");
    s_deviceConfig.m_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) glewGetProcAddress ("glVertexAttrib3dNV");
    s_deviceConfig.m_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) glewGetProcAddress ("glVertexAttrib3dvNV");
    s_deviceConfig.m_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) glewGetProcAddress ("glVertexAttrib3fNV");
    s_deviceConfig.m_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) glewGetProcAddress ("glVertexAttrib3fvNV");
    s_deviceConfig.m_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) glewGetProcAddress ("glVertexAttrib3sNV");
    s_deviceConfig.m_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) glewGetProcAddress ("glVertexAttrib3svNV");
    s_deviceConfig.m_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) glewGetProcAddress ("glVertexAttrib4dNV");
    s_deviceConfig.m_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) glewGetProcAddress ("glVertexAttrib4dvNV");
    s_deviceConfig.m_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) glewGetProcAddress ("glVertexAttrib4fNV");
    s_deviceConfig.m_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) glewGetProcAddress ("glVertexAttrib4fvNV");
    s_deviceConfig.m_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) glewGetProcAddress ("glVertexAttrib4sNV");
    s_deviceConfig.m_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) glewGetProcAddress ("glVertexAttrib4svNV");
    s_deviceConfig.m_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) glewGetProcAddress ("glVertexAttrib4ubNV");
    s_deviceConfig.m_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) glewGetProcAddress ("glVertexAttrib4ubvNV");
    s_deviceConfig.m_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) glewGetProcAddress ("glVertexAttribs1dvNV");
    s_deviceConfig.m_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) glewGetProcAddress ("glVertexAttribs1fvNV");
    s_deviceConfig.m_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) glewGetProcAddress ("glVertexAttribs1svNV");
    s_deviceConfig.m_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) glewGetProcAddress ("glVertexAttribs2dvNV");
    s_deviceConfig.m_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) glewGetProcAddress ("glVertexAttribs2fvNV");
    s_deviceConfig.m_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) glewGetProcAddress ("glVertexAttribs2svNV");
    s_deviceConfig.m_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) glewGetProcAddress ("glVertexAttribs3dvNV");
    s_deviceConfig.m_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) glewGetProcAddress ("glVertexAttribs3fvNV");
    s_deviceConfig.m_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) glewGetProcAddress ("glVertexAttribs3svNV");
    s_deviceConfig.m_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) glewGetProcAddress ("glVertexAttribs4dvNV");
    s_deviceConfig.m_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) glewGetProcAddress ("glVertexAttribs4fvNV");
    s_deviceConfig.m_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) glewGetProcAddress ("glVertexAttribs4svNV");
    s_deviceConfig.m_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) glewGetProcAddress ("glVertexAttribs4ubvNV");
  }

  // GL_NV_vertex_program4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_vertex_program4])
  {
    s_deviceConfig.m_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) glewGetProcAddress ("glVertexAttribI1iEXT");
    s_deviceConfig.m_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) glewGetProcAddress ("glVertexAttribI2iEXT");
    s_deviceConfig.m_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) glewGetProcAddress ("glVertexAttribI3iEXT");
    s_deviceConfig.m_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) glewGetProcAddress ("glVertexAttribI4iEXT");
    s_deviceConfig.m_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) glewGetProcAddress ("glVertexAttribI1uiEXT");
    s_deviceConfig.m_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) glewGetProcAddress ("glVertexAttribI2uiEXT");
    s_deviceConfig.m_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) glewGetProcAddress ("glVertexAttribI3uiEXT");
    s_deviceConfig.m_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) glewGetProcAddress ("glVertexAttribI4uiEXT");
    s_deviceConfig.m_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) glewGetProcAddress ("glVertexAttribI1ivEXT");
    s_deviceConfig.m_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) glewGetProcAddress ("glVertexAttribI2ivEXT");
    s_deviceConfig.m_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) glewGetProcAddress ("glVertexAttribI3ivEXT");
    s_deviceConfig.m_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) glewGetProcAddress ("glVertexAttribI4ivEXT");
    s_deviceConfig.m_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) glewGetProcAddress ("glVertexAttribI1uivEXT");
    s_deviceConfig.m_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) glewGetProcAddress ("glVertexAttribI2uivEXT");
    s_deviceConfig.m_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) glewGetProcAddress ("glVertexAttribI3uivEXT");
    s_deviceConfig.m_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) glewGetProcAddress ("glVertexAttribI4uivEXT");
    s_deviceConfig.m_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) glewGetProcAddress ("glVertexAttribI4bvEXT");
    s_deviceConfig.m_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) glewGetProcAddress ("glVertexAttribI4svEXT");
    s_deviceConfig.m_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) glewGetProcAddress ("glVertexAttribI4ubvEXT");
    s_deviceConfig.m_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) glewGetProcAddress ("glVertexAttribI4usvEXT");
    s_deviceConfig.m_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) glewGetProcAddress ("glVertexAttribIPointerEXT");
    s_deviceConfig.m_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) glewGetProcAddress ("glGetVertexAttribIivEXT");
    s_deviceConfig.m_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) glewGetProcAddress ("glGetVertexAttribIuivEXT");
  }

  // GL_NV_video_capture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_NV_video_capture])
  {
    s_deviceConfig.m_glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC) glewGetProcAddress ("glBeginVideoCaptureNV");
    s_deviceConfig.m_glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) glewGetProcAddress ("glBindVideoCaptureStreamBufferNV");
    s_deviceConfig.m_glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) glewGetProcAddress ("glBindVideoCaptureStreamTextureNV");
    s_deviceConfig.m_glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC) glewGetProcAddress ("glEndVideoCaptureNV");
    s_deviceConfig.m_glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC) glewGetProcAddress ("glGetVideoCaptureivNV");
    s_deviceConfig.m_glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) glewGetProcAddress ("glGetVideoCaptureStreamivNV");
    s_deviceConfig.m_glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) glewGetProcAddress ("glGetVideoCaptureStreamfvNV");
    s_deviceConfig.m_glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) glewGetProcAddress ("glGetVideoCaptureStreamdvNV");
    s_deviceConfig.m_glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC) glewGetProcAddress ("glVideoCaptureNV");
    s_deviceConfig.m_glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) glewGetProcAddress ("glVideoCaptureStreamParameterivNV");
    s_deviceConfig.m_glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) glewGetProcAddress ("glVideoCaptureStreamParameterfvNV");
    s_deviceConfig.m_glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) glewGetProcAddress ("glVideoCaptureStreamParameterdvNV");
  }

  // GL_OES_byte_coordinates
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_byte_coordinates])
  {
    s_deviceConfig.m_glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC) glewGetProcAddress ("glMultiTexCoord1bOES");
    s_deviceConfig.m_glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC) glewGetProcAddress ("glMultiTexCoord1bvOES");
    s_deviceConfig.m_glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC) glewGetProcAddress ("glMultiTexCoord2bOES");
    s_deviceConfig.m_glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC) glewGetProcAddress ("glMultiTexCoord2bvOES");
    s_deviceConfig.m_glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC) glewGetProcAddress ("glMultiTexCoord3bOES");
    s_deviceConfig.m_glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC) glewGetProcAddress ("glMultiTexCoord3bvOES");
    s_deviceConfig.m_glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC) glewGetProcAddress ("glMultiTexCoord4bOES");
    s_deviceConfig.m_glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC) glewGetProcAddress ("glMultiTexCoord4bvOES");
    s_deviceConfig.m_glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC) glewGetProcAddress ("glTexCoord1bOES");
    s_deviceConfig.m_glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC) glewGetProcAddress ("glTexCoord1bvOES");
    s_deviceConfig.m_glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC) glewGetProcAddress ("glTexCoord2bOES");
    s_deviceConfig.m_glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC) glewGetProcAddress ("glTexCoord2bvOES");
    s_deviceConfig.m_glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC) glewGetProcAddress ("glTexCoord3bOES");
    s_deviceConfig.m_glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC) glewGetProcAddress ("glTexCoord3bvOES");
    s_deviceConfig.m_glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC) glewGetProcAddress ("glTexCoord4bOES");
    s_deviceConfig.m_glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC) glewGetProcAddress ("glTexCoord4bvOES");
    s_deviceConfig.m_glVertex2bOES = (PFNGLVERTEX2BOESPROC) glewGetProcAddress ("glVertex2bOES");
    s_deviceConfig.m_glVertex2bvOES = (PFNGLVERTEX2BVOESPROC) glewGetProcAddress ("glVertex2bvOES");
    s_deviceConfig.m_glVertex3bOES = (PFNGLVERTEX3BOESPROC) glewGetProcAddress ("glVertex3bOES");
    s_deviceConfig.m_glVertex3bvOES = (PFNGLVERTEX3BVOESPROC) glewGetProcAddress ("glVertex3bvOES");
    s_deviceConfig.m_glVertex4bOES = (PFNGLVERTEX4BOESPROC) glewGetProcAddress ("glVertex4bOES");
    s_deviceConfig.m_glVertex4bvOES = (PFNGLVERTEX4BVOESPROC) glewGetProcAddress ("glVertex4bvOES");
  }

  // GL_OES_fixed_point
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_fixed_point])
  {
    s_deviceConfig.m_glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC) glewGetProcAddress ("glAlphaFuncxOES");
    s_deviceConfig.m_glClearColorxOES = (PFNGLCLEARCOLORXOESPROC) glewGetProcAddress ("glClearColorxOES");
    s_deviceConfig.m_glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC) glewGetProcAddress ("glClearDepthxOES");
    s_deviceConfig.m_glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC) glewGetProcAddress ("glClipPlanexOES");
    s_deviceConfig.m_glColor4xOES = (PFNGLCOLOR4XOESPROC) glewGetProcAddress ("glColor4xOES");
    s_deviceConfig.m_glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC) glewGetProcAddress ("glDepthRangexOES");
    s_deviceConfig.m_glFogxOES = (PFNGLFOGXOESPROC) glewGetProcAddress ("glFogxOES");
    s_deviceConfig.m_glFogxvOES = (PFNGLFOGXVOESPROC) glewGetProcAddress ("glFogxvOES");
    s_deviceConfig.m_glFrustumxOES = (PFNGLFRUSTUMXOESPROC) glewGetProcAddress ("glFrustumxOES");
    s_deviceConfig.m_glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC) glewGetProcAddress ("glGetClipPlanexOES");
    s_deviceConfig.m_glGetFixedvOES = (PFNGLGETFIXEDVOESPROC) glewGetProcAddress ("glGetFixedvOES");
    s_deviceConfig.m_glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC) glewGetProcAddress ("glGetTexEnvxvOES");
    s_deviceConfig.m_glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC) glewGetProcAddress ("glGetTexParameterxvOES");
    s_deviceConfig.m_glLightModelxOES = (PFNGLLIGHTMODELXOESPROC) glewGetProcAddress ("glLightModelxOES");
    s_deviceConfig.m_glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC) glewGetProcAddress ("glLightModelxvOES");
    s_deviceConfig.m_glLightxOES = (PFNGLLIGHTXOESPROC) glewGetProcAddress ("glLightxOES");
    s_deviceConfig.m_glLightxvOES = (PFNGLLIGHTXVOESPROC) glewGetProcAddress ("glLightxvOES");
    s_deviceConfig.m_glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC) glewGetProcAddress ("glLineWidthxOES");
    s_deviceConfig.m_glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC) glewGetProcAddress ("glLoadMatrixxOES");
    s_deviceConfig.m_glMaterialxOES = (PFNGLMATERIALXOESPROC) glewGetProcAddress ("glMaterialxOES");
    s_deviceConfig.m_glMaterialxvOES = (PFNGLMATERIALXVOESPROC) glewGetProcAddress ("glMaterialxvOES");
    s_deviceConfig.m_glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC) glewGetProcAddress ("glMultMatrixxOES");
    s_deviceConfig.m_glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC) glewGetProcAddress ("glMultiTexCoord4xOES");
    s_deviceConfig.m_glNormal3xOES = (PFNGLNORMAL3XOESPROC) glewGetProcAddress ("glNormal3xOES");
    s_deviceConfig.m_glOrthoxOES = (PFNGLORTHOXOESPROC) glewGetProcAddress ("glOrthoxOES");
    s_deviceConfig.m_glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC) glewGetProcAddress ("glPointParameterxvOES");
    s_deviceConfig.m_glPointSizexOES = (PFNGLPOINTSIZEXOESPROC) glewGetProcAddress ("glPointSizexOES");
    s_deviceConfig.m_glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC) glewGetProcAddress ("glPolygonOffsetxOES");
    s_deviceConfig.m_glRotatexOES = (PFNGLROTATEXOESPROC) glewGetProcAddress ("glRotatexOES");
    s_deviceConfig.m_glScalexOES = (PFNGLSCALEXOESPROC) glewGetProcAddress ("glScalexOES");
    s_deviceConfig.m_glTexEnvxOES = (PFNGLTEXENVXOESPROC) glewGetProcAddress ("glTexEnvxOES");
    s_deviceConfig.m_glTexEnvxvOES = (PFNGLTEXENVXVOESPROC) glewGetProcAddress ("glTexEnvxvOES");
    s_deviceConfig.m_glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC) glewGetProcAddress ("glTexParameterxOES");
    s_deviceConfig.m_glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC) glewGetProcAddress ("glTexParameterxvOES");
    s_deviceConfig.m_glTranslatexOES = (PFNGLTRANSLATEXOESPROC) glewGetProcAddress ("glTranslatexOES");
  }

  // GL_OES_fixed_point
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_fixed_point])
  {
    s_deviceConfig.m_glAccumxOES = (PFNGLACCUMXOESPROC) glewGetProcAddress ("glAccumxOES");
    s_deviceConfig.m_glBitmapxOES = (PFNGLBITMAPXOESPROC) glewGetProcAddress ("glBitmapxOES");
    s_deviceConfig.m_glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC) glewGetProcAddress ("glBlendColorxOES");
    s_deviceConfig.m_glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC) glewGetProcAddress ("glClearAccumxOES");
    s_deviceConfig.m_glColor3xOES = (PFNGLCOLOR3XOESPROC) glewGetProcAddress ("glColor3xOES");
    s_deviceConfig.m_glColor3xvOES = (PFNGLCOLOR3XVOESPROC) glewGetProcAddress ("glColor3xvOES");
    s_deviceConfig.m_glColor4xvOES = (PFNGLCOLOR4XVOESPROC) glewGetProcAddress ("glColor4xvOES");
    s_deviceConfig.m_glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC) glewGetProcAddress ("glConvolutionParameterxOES");
    s_deviceConfig.m_glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC) glewGetProcAddress ("glConvolutionParameterxvOES");
    s_deviceConfig.m_glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC) glewGetProcAddress ("glEvalCoord1xOES");
    s_deviceConfig.m_glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC) glewGetProcAddress ("glEvalCoord1xvOES");
    s_deviceConfig.m_glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC) glewGetProcAddress ("glEvalCoord2xOES");
    s_deviceConfig.m_glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC) glewGetProcAddress ("glEvalCoord2xvOES");
    s_deviceConfig.m_glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC) glewGetProcAddress ("glFeedbackBufferxOES");
    s_deviceConfig.m_glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) glewGetProcAddress ("glGetConvolutionParameterxvOES");
    s_deviceConfig.m_glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC) glewGetProcAddress ("glGetHistogramParameterxvOES");
    s_deviceConfig.m_glGetLightxOES = (PFNGLGETLIGHTXOESPROC) glewGetProcAddress ("glGetLightxOES");
    s_deviceConfig.m_glGetMapxvOES = (PFNGLGETMAPXVOESPROC) glewGetProcAddress ("glGetMapxvOES");
    s_deviceConfig.m_glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC) glewGetProcAddress ("glGetMaterialxOES");
    s_deviceConfig.m_glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC) glewGetProcAddress ("glGetPixelMapxv");
    s_deviceConfig.m_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC) glewGetProcAddress ("glGetTexGenxvOES");
    s_deviceConfig.m_glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC) glewGetProcAddress ("glGetTexLevelParameterxvOES");
    s_deviceConfig.m_glIndexxOES = (PFNGLINDEXXOESPROC) glewGetProcAddress ("glIndexxOES");
    s_deviceConfig.m_glIndexxvOES = (PFNGLINDEXXVOESPROC) glewGetProcAddress ("glIndexxvOES");
    s_deviceConfig.m_glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC) glewGetProcAddress ("glLoadTransposeMatrixxOES");
    s_deviceConfig.m_glMap1xOES = (PFNGLMAP1XOESPROC) glewGetProcAddress ("glMap1xOES");
    s_deviceConfig.m_glMap2xOES = (PFNGLMAP2XOESPROC) glewGetProcAddress ("glMap2xOES");
    s_deviceConfig.m_glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC) glewGetProcAddress ("glMapGrid1xOES");
    s_deviceConfig.m_glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC) glewGetProcAddress ("glMapGrid2xOES");
    s_deviceConfig.m_glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC) glewGetProcAddress ("glMultTransposeMatrixxOES");
    s_deviceConfig.m_glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC) glewGetProcAddress ("glMultiTexCoord1xOES");
    s_deviceConfig.m_glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC) glewGetProcAddress ("glMultiTexCoord1xvOES");
    s_deviceConfig.m_glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC) glewGetProcAddress ("glMultiTexCoord2xOES");
    s_deviceConfig.m_glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC) glewGetProcAddress ("glMultiTexCoord2xvOES");
    s_deviceConfig.m_glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC) glewGetProcAddress ("glMultiTexCoord3xOES");
    s_deviceConfig.m_glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC) glewGetProcAddress ("glMultiTexCoord3xvOES");
    s_deviceConfig.m_glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC) glewGetProcAddress ("glMultiTexCoord4xvOES");
    s_deviceConfig.m_glNormal3xvOES = (PFNGLNORMAL3XVOESPROC) glewGetProcAddress ("glNormal3xvOES");
    s_deviceConfig.m_glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC) glewGetProcAddress ("glPassThroughxOES");
    s_deviceConfig.m_glPixelMapx = (PFNGLPIXELMAPXPROC) glewGetProcAddress ("glPixelMapx");
    s_deviceConfig.m_glPixelStorex = (PFNGLPIXELSTOREXPROC) glewGetProcAddress ("glPixelStorex");
    s_deviceConfig.m_glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC) glewGetProcAddress ("glPixelTransferxOES");
    s_deviceConfig.m_glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC) glewGetProcAddress ("glPixelZoomxOES");
    s_deviceConfig.m_glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC) glewGetProcAddress ("glPrioritizeTexturesxOES");
    s_deviceConfig.m_glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC) glewGetProcAddress ("glRasterPos2xOES");
    s_deviceConfig.m_glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC) glewGetProcAddress ("glRasterPos2xvOES");
    s_deviceConfig.m_glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC) glewGetProcAddress ("glRasterPos3xOES");
    s_deviceConfig.m_glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC) glewGetProcAddress ("glRasterPos3xvOES");
    s_deviceConfig.m_glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC) glewGetProcAddress ("glRasterPos4xOES");
    s_deviceConfig.m_glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC) glewGetProcAddress ("glRasterPos4xvOES");
    s_deviceConfig.m_glRectxOES = (PFNGLRECTXOESPROC) glewGetProcAddress ("glRectxOES");
    s_deviceConfig.m_glRectxvOES = (PFNGLRECTXVOESPROC) glewGetProcAddress ("glRectxvOES");
    s_deviceConfig.m_glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC) glewGetProcAddress ("glTexCoord1xOES");
    s_deviceConfig.m_glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC) glewGetProcAddress ("glTexCoord1xvOES");
    s_deviceConfig.m_glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC) glewGetProcAddress ("glTexCoord2xOES");
    s_deviceConfig.m_glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC) glewGetProcAddress ("glTexCoord2xvOES");
    s_deviceConfig.m_glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC) glewGetProcAddress ("glTexCoord3xOES");
    s_deviceConfig.m_glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC) glewGetProcAddress ("glTexCoord3xvOES");
    s_deviceConfig.m_glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC) glewGetProcAddress ("glTexCoord4xOES");
    s_deviceConfig.m_glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC) glewGetProcAddress ("glTexCoord4xvOES");
    s_deviceConfig.m_glTexGenxOES = (PFNGLTEXGENXOESPROC) glewGetProcAddress ("glTexGenxOES");
    s_deviceConfig.m_glTexGenxvOES = (PFNGLTEXGENXVOESPROC) glewGetProcAddress ("glTexGenxvOES");
    s_deviceConfig.m_glVertex2xOES = (PFNGLVERTEX2XOESPROC) glewGetProcAddress ("glVertex2xOES");
    s_deviceConfig.m_glVertex2xvOES = (PFNGLVERTEX2XVOESPROC) glewGetProcAddress ("glVertex2xvOES");
    s_deviceConfig.m_glVertex3xOES = (PFNGLVERTEX3XOESPROC) glewGetProcAddress ("glVertex3xOES");
    s_deviceConfig.m_glVertex3xvOES = (PFNGLVERTEX3XVOESPROC) glewGetProcAddress ("glVertex3xvOES");
    s_deviceConfig.m_glVertex4xOES = (PFNGLVERTEX4XOESPROC) glewGetProcAddress ("glVertex4xOES");
    s_deviceConfig.m_glVertex4xvOES = (PFNGLVERTEX4XVOESPROC) glewGetProcAddress ("glVertex4xvOES");
  }

  // GL_OES_query_matrix
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_query_matrix])
  {
    s_deviceConfig.m_glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC) glewGetProcAddress ("glQueryMatrixxOES");
  }

  // GL_OES_single_precision
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OES_single_precision])
  {
    s_deviceConfig.m_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC) glewGetProcAddress ("glClearDepthfOES");
    s_deviceConfig.m_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC) glewGetProcAddress ("glClipPlanefOES");
    s_deviceConfig.m_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC) glewGetProcAddress ("glDepthRangefOES");
    s_deviceConfig.m_glFrustumfOES = (PFNGLFRUSTUMFOESPROC) glewGetProcAddress ("glFrustumfOES");
    s_deviceConfig.m_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC) glewGetProcAddress ("glGetClipPlanefOES");
    s_deviceConfig.m_glOrthofOES = (PFNGLORTHOFOESPROC) glewGetProcAddress ("glOrthofOES");
  }

  // GL_OVR_multiview
  if (s_deviceConfig.m_featureSupported [GLEW_GL_OVR_multiview])
  {
    s_deviceConfig.m_glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) glewGetProcAddress ("glFramebufferTextureMultiviewOVR");
  }

  // GL_PGI_misc_hints
  if (s_deviceConfig.m_featureSupported [GLEW_GL_PGI_misc_hints])
  {
    s_deviceConfig.m_glHintPGI = (PFNGLHINTPGIPROC) glewGetProcAddress ("glHintPGI");
  }

  // GL_SGIS_detail_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_detail_texture])
  {
    s_deviceConfig.m_glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC) glewGetProcAddress ("glDetailTexFuncSGIS");
    s_deviceConfig.m_glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC) glewGetProcAddress ("glGetDetailTexFuncSGIS");
  }

  // GL_SGIS_fog_function
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_fog_function])
  {
    s_deviceConfig.m_glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC) glewGetProcAddress ("glFogFuncSGIS");
    s_deviceConfig.m_glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC) glewGetProcAddress ("glGetFogFuncSGIS");
  }

  // GL_SGIS_multisample
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_multisample])
  {
    s_deviceConfig.m_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC) glewGetProcAddress ("glSampleMaskSGIS");
    s_deviceConfig.m_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC) glewGetProcAddress ("glSamplePatternSGIS");
  }

  // GL_SGIS_pixel_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_pixel_texture])
  {
    s_deviceConfig.m_glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC) glewGetProcAddress ("glPixelTexGenParameteriSGIS");
    s_deviceConfig.m_glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC) glewGetProcAddress ("glPixelTexGenParameterivSGIS");
    s_deviceConfig.m_glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC) glewGetProcAddress ("glPixelTexGenParameterfSGIS");
    s_deviceConfig.m_glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC) glewGetProcAddress ("glPixelTexGenParameterfvSGIS");
    s_deviceConfig.m_glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) glewGetProcAddress ("glGetPixelTexGenParameterivSGIS");
    s_deviceConfig.m_glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) glewGetProcAddress ("glGetPixelTexGenParameterfvSGIS");
  }

  // GL_SGIS_point_parameters
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_point_parameters])
  {
    s_deviceConfig.m_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC) glewGetProcAddress ("glPointParameterfSGIS");
    s_deviceConfig.m_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC) glewGetProcAddress ("glPointParameterfvSGIS");
  }

  // GL_SGIS_sharpen_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_sharpen_texture])
  {
    s_deviceConfig.m_glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC) glewGetProcAddress ("glSharpenTexFuncSGIS");
    s_deviceConfig.m_glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC) glewGetProcAddress ("glGetSharpenTexFuncSGIS");
  }

  // GL_SGIS_texture4D
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture4D])
  {
    s_deviceConfig.m_glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC) glewGetProcAddress ("glTexImage4DSGIS");
    s_deviceConfig.m_glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC) glewGetProcAddress ("glTexSubImage4DSGIS");
  }

  // GL_SGIS_texture_color_mask
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_color_mask])
  {
    s_deviceConfig.m_glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC) glewGetProcAddress ("glTextureColorMaskSGIS");
  }

  // GL_SGIS_texture_filter4
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIS_texture_filter4])
  {
    s_deviceConfig.m_glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC) glewGetProcAddress ("glGetTexFilterFuncSGIS");
    s_deviceConfig.m_glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC) glewGetProcAddress ("glTexFilterFuncSGIS");
  }

  // GL_SGIX_async
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_async])
  {
    s_deviceConfig.m_glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC) glewGetProcAddress ("glAsyncMarkerSGIX");
    s_deviceConfig.m_glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC) glewGetProcAddress ("glFinishAsyncSGIX");
    s_deviceConfig.m_glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC) glewGetProcAddress ("glPollAsyncSGIX");
    s_deviceConfig.m_glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC) glewGetProcAddress ("glGenAsyncMarkersSGIX");
    s_deviceConfig.m_glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC) glewGetProcAddress ("glDeleteAsyncMarkersSGIX");
    s_deviceConfig.m_glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC) glewGetProcAddress ("glIsAsyncMarkerSGIX");
  }

  // GL_SGIX_flush_raster
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_flush_raster])
  {
    s_deviceConfig.m_glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC) glewGetProcAddress ("glFlushRasterSGIX");
  }

  // GL_SGIX_fragment_lighting
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_fragment_lighting])
  {
    s_deviceConfig.m_glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC) glewGetProcAddress ("glFragmentColorMaterialSGIX");
    s_deviceConfig.m_glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC) glewGetProcAddress ("glFragmentLightfSGIX");
    s_deviceConfig.m_glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC) glewGetProcAddress ("glFragmentLightfvSGIX");
    s_deviceConfig.m_glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC) glewGetProcAddress ("glFragmentLightiSGIX");
    s_deviceConfig.m_glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC) glewGetProcAddress ("glFragmentLightivSGIX");
    s_deviceConfig.m_glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC) glewGetProcAddress ("glFragmentLightModelfSGIX");
    s_deviceConfig.m_glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) glewGetProcAddress ("glFragmentLightModelfvSGIX");
    s_deviceConfig.m_glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC) glewGetProcAddress ("glFragmentLightModeliSGIX");
    s_deviceConfig.m_glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) glewGetProcAddress ("glFragmentLightModelivSGIX");
    s_deviceConfig.m_glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC) glewGetProcAddress ("glFragmentMaterialfSGIX");
    s_deviceConfig.m_glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC) glewGetProcAddress ("glFragmentMaterialfvSGIX");
    s_deviceConfig.m_glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC) glewGetProcAddress ("glFragmentMaterialiSGIX");
    s_deviceConfig.m_glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC) glewGetProcAddress ("glFragmentMaterialivSGIX");
    s_deviceConfig.m_glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC) glewGetProcAddress ("glGetFragmentLightfvSGIX");
    s_deviceConfig.m_glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC) glewGetProcAddress ("glGetFragmentLightivSGIX");
    s_deviceConfig.m_glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC) glewGetProcAddress ("glGetFragmentMaterialfvSGIX");
    s_deviceConfig.m_glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC) glewGetProcAddress ("glGetFragmentMaterialivSGIX");
    s_deviceConfig.m_glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC) glewGetProcAddress ("glLightEnviSGIX");
  }

  // GL_SGIX_framezoom
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_framezoom])
  {
    s_deviceConfig.m_glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC) glewGetProcAddress ("glFrameZoomSGIX");
  }

  // GL_SGIX_igloo_interface
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_igloo_interface])
  {
    s_deviceConfig.m_glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC) glewGetProcAddress ("glIglooInterfaceSGIX");
  }

  // GL_SGIX_instruments
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_instruments])
  {
    s_deviceConfig.m_glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC) glewGetProcAddress ("glGetInstrumentsSGIX");
    s_deviceConfig.m_glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC) glewGetProcAddress ("glInstrumentsBufferSGIX");
    s_deviceConfig.m_glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC) glewGetProcAddress ("glPollInstrumentsSGIX");
    s_deviceConfig.m_glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC) glewGetProcAddress ("glReadInstrumentsSGIX");
    s_deviceConfig.m_glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC) glewGetProcAddress ("glStartInstrumentsSGIX");
    s_deviceConfig.m_glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC) glewGetProcAddress ("glStopInstrumentsSGIX");
  }

  // GL_SGIX_list_priority
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_list_priority])
  {
    s_deviceConfig.m_glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC) glewGetProcAddress ("glGetListParameterfvSGIX");
    s_deviceConfig.m_glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC) glewGetProcAddress ("glGetListParameterivSGIX");
    s_deviceConfig.m_glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC) glewGetProcAddress ("glListParameterfSGIX");
    s_deviceConfig.m_glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC) glewGetProcAddress ("glListParameterfvSGIX");
    s_deviceConfig.m_glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC) glewGetProcAddress ("glListParameteriSGIX");
    s_deviceConfig.m_glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC) glewGetProcAddress ("glListParameterivSGIX");
  }

  // GL_SGIX_pixel_texture
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_pixel_texture])
  {
    s_deviceConfig.m_glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC) glewGetProcAddress ("glPixelTexGenSGIX");
  }

  // GL_SGIX_polynomial_ffd
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_polynomial_ffd])
  {
    s_deviceConfig.m_glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC) glewGetProcAddress ("glDeformationMap3dSGIX");
    s_deviceConfig.m_glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC) glewGetProcAddress ("glDeformationMap3fSGIX");
    s_deviceConfig.m_glDeformSGIX = (PFNGLDEFORMSGIXPROC) glewGetProcAddress ("glDeformSGIX");
    s_deviceConfig.m_glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) glewGetProcAddress ("glLoadIdentityDeformationMapSGIX");
  }

  // GL_SGIX_reference_plane
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_reference_plane])
  {
    s_deviceConfig.m_glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC) glewGetProcAddress ("glReferencePlaneSGIX");
  }

  // GL_SGIX_sprite
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_sprite])
  {
    s_deviceConfig.m_glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC) glewGetProcAddress ("glSpriteParameterfSGIX");
    s_deviceConfig.m_glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC) glewGetProcAddress ("glSpriteParameterfvSGIX");
    s_deviceConfig.m_glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC) glewGetProcAddress ("glSpriteParameteriSGIX");
    s_deviceConfig.m_glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC) glewGetProcAddress ("glSpriteParameterivSGIX");
  }

  // GL_SGIX_tag_sample_buffer
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGIX_tag_sample_buffer])
  {
    s_deviceConfig.m_glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC) glewGetProcAddress ("glTagSampleBufferSGIX");
  }

  // GL_SGI_color_table
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SGI_color_table])
  {
    s_deviceConfig.m_glColorTableSGI = (PFNGLCOLORTABLESGIPROC) glewGetProcAddress ("glColorTableSGI");
    s_deviceConfig.m_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC) glewGetProcAddress ("glColorTableParameterfvSGI");
    s_deviceConfig.m_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC) glewGetProcAddress ("glColorTableParameterivSGI");
    s_deviceConfig.m_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC) glewGetProcAddress ("glCopyColorTableSGI");
    s_deviceConfig.m_glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC) glewGetProcAddress ("glGetColorTableSGI");
    s_deviceConfig.m_glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) glewGetProcAddress ("glGetColorTableParameterfvSGI");
    s_deviceConfig.m_glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) glewGetProcAddress ("glGetColorTableParameterivSGI");
  }

  // GL_SUNX_constant_data
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SUNX_constant_data])
  {
    s_deviceConfig.m_glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC) glewGetProcAddress ("glFinishTextureSUNX");
  }

  // GL_SUN_global_alpha
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SUN_global_alpha])
  {
    s_deviceConfig.m_glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC) glewGetProcAddress ("glGlobalAlphaFactorbSUN");
    s_deviceConfig.m_glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC) glewGetProcAddress ("glGlobalAlphaFactorsSUN");
    s_deviceConfig.m_glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC) glewGetProcAddress ("glGlobalAlphaFactoriSUN");
    s_deviceConfig.m_glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC) glewGetProcAddress ("glGlobalAlphaFactorfSUN");
    s_deviceConfig.m_glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC) glewGetProcAddress ("glGlobalAlphaFactordSUN");
    s_deviceConfig.m_glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC) glewGetProcAddress ("glGlobalAlphaFactorubSUN");
    s_deviceConfig.m_glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC) glewGetProcAddress ("glGlobalAlphaFactorusSUN");
    s_deviceConfig.m_glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC) glewGetProcAddress ("glGlobalAlphaFactoruiSUN");
  }

  // GL_SUN_mesh_array
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SUN_mesh_array])
  {
    s_deviceConfig.m_glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC) glewGetProcAddress ("glDrawMeshArraysSUN");
  }

  // GL_SUN_triangle_list
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SUN_triangle_list])
  {
    s_deviceConfig.m_glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC) glewGetProcAddress ("glReplacementCodeuiSUN");
    s_deviceConfig.m_glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC) glewGetProcAddress ("glReplacementCodeusSUN");
    s_deviceConfig.m_glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC) glewGetProcAddress ("glReplacementCodeubSUN");
    s_deviceConfig.m_glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC) glewGetProcAddress ("glReplacementCodeuivSUN");
    s_deviceConfig.m_glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC) glewGetProcAddress ("glReplacementCodeusvSUN");
    s_deviceConfig.m_glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC) glewGetProcAddress ("glReplacementCodeubvSUN");
    s_deviceConfig.m_glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC) glewGetProcAddress ("glReplacementCodePointerSUN");
  }

  // GL_SUN_vertex
  if (s_deviceConfig.m_featureSupported [GLEW_GL_SUN_vertex])
  {
    s_deviceConfig.m_glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC) glewGetProcAddress ("glColor4ubVertex2fSUN");
    s_deviceConfig.m_glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC) glewGetProcAddress ("glColor4ubVertex2fvSUN");
    s_deviceConfig.m_glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC) glewGetProcAddress ("glColor4ubVertex3fSUN");
    s_deviceConfig.m_glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC) glewGetProcAddress ("glColor4ubVertex3fvSUN");
    s_deviceConfig.m_glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC) glewGetProcAddress ("glColor3fVertex3fSUN");
    s_deviceConfig.m_glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC) glewGetProcAddress ("glColor3fVertex3fvSUN");
    s_deviceConfig.m_glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glNormal3fVertex3fSUN");
    s_deviceConfig.m_glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glNormal3fVertex3fvSUN");
    s_deviceConfig.m_glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glColor4fNormal3fVertex3fSUN");
    s_deviceConfig.m_glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glColor4fNormal3fVertex3fvSUN");
    s_deviceConfig.m_glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC) glewGetProcAddress ("glTexCoord2fVertex3fSUN");
    s_deviceConfig.m_glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC) glewGetProcAddress ("glTexCoord2fVertex3fvSUN");
    s_deviceConfig.m_glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC) glewGetProcAddress ("glTexCoord4fVertex4fSUN");
    s_deviceConfig.m_glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC) glewGetProcAddress ("glTexCoord4fVertex4fvSUN");
    s_deviceConfig.m_glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) glewGetProcAddress ("glTexCoord2fColor4ubVertex3fSUN");
    s_deviceConfig.m_glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) glewGetProcAddress ("glTexCoord2fColor4ubVertex3fvSUN");
    s_deviceConfig.m_glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) glewGetProcAddress ("glTexCoord2fColor3fVertex3fSUN");
    s_deviceConfig.m_glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) glewGetProcAddress ("glTexCoord2fColor3fVertex3fvSUN");
    s_deviceConfig.m_glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glTexCoord2fNormal3fVertex3fSUN");
    s_deviceConfig.m_glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glTexCoord2fNormal3fVertex3fvSUN");
    s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glTexCoord2fColor4fNormal3fVertex3fSUN");
    s_deviceConfig.m_glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) glewGetProcAddress ("glTexCoord4fColor4fNormal3fVertex4fSUN");
    s_deviceConfig.m_glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) glewGetProcAddress ("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    s_deviceConfig.m_glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor4ubVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor4ubVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor3fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor3fVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiNormal3fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiNormal3fVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    s_deviceConfig.m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) glewGetProcAddress ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glew::gl::Deinitialise ()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
