////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-gl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArrays) {
    prototypeCalled = true;
    glContext->m_glDrawArrays(mode, first, count);
  }
  if (!prototypeCalled && glContext->m_glDrawArraysEXT) {
    prototypeCalled = true;
    glContext->m_glDrawArraysEXT(mode, first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElements) {
    prototypeCalled = true;
    glContext->m_glDrawElements(mode, count, type, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPointerv(GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPointerv) {
    prototypeCalled = true;
    glContext->m_glGetPointerv(pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetPointervEXT) {
    prototypeCalled = true;
    glContext->m_glGetPointervEXT(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPolygonOffset(GLfloat factor, GLfloat units) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPolygonOffset) {
    prototypeCalled = true;
    glContext->m_glPolygonOffset(factor, units);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexImage1D) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  }
  if (!prototypeCalled && glContext->m_glCopyTexImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexImage2D) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  }
  if (!prototypeCalled && glContext->m_glCopyTexImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage1D) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  }
  if (!prototypeCalled && glContext->m_glCopyTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage2D) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  }
  if (!prototypeCalled && glContext->m_glCopyTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage1D) {
    prototypeCalled = true;
    glContext->m_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  }
  if (!prototypeCalled && glContext->m_glTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage2D) {
    prototypeCalled = true;
    glContext->m_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  if (!prototypeCalled && glContext->m_glTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTexture(GLenum target, GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTexture) {
    prototypeCalled = true;
    glContext->m_glBindTexture(target, texture);
  }
  if (!prototypeCalled && glContext->m_glBindTextureEXT) {
    prototypeCalled = true;
    glContext->m_glBindTextureEXT(target, texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteTextures(GLsizei n, const GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteTextures) {
    prototypeCalled = true;
    glContext->m_glDeleteTextures(n, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenTextures(GLsizei n, GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenTextures) {
    prototypeCalled = true;
    glContext->m_glGenTextures(n, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTexture(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTexture) {
    prototypeCalled = true;
    result = glContext->m_glIsTexture(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glArrayElement(GLint i) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glArrayElement) {
    prototypeCalled = true;
    glContext->m_glArrayElement(i);
  }
  if (!prototypeCalled && glContext->m_glArrayElementEXT) {
    prototypeCalled = true;
    glContext->m_glArrayElementEXT(i);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorPointer) {
    prototypeCalled = true;
    glContext->m_glColorPointer(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableClientState(GLenum array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableClientState) {
    prototypeCalled = true;
    glContext->m_glDisableClientState(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEdgeFlagPointer(GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEdgeFlagPointer) {
    prototypeCalled = true;
    glContext->m_glEdgeFlagPointer(stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableClientState(GLenum array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableClientState) {
    prototypeCalled = true;
    glContext->m_glEnableClientState(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexPointer(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexPointer) {
    prototypeCalled = true;
    glContext->m_glIndexPointer(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInterleavedArrays) {
    prototypeCalled = true;
    glContext->m_glInterleavedArrays(format, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalPointer(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalPointer) {
    prototypeCalled = true;
    glContext->m_glNormalPointer(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordPointer) {
    prototypeCalled = true;
    glContext->m_glTexCoordPointer(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexPointer) {
    prototypeCalled = true;
    glContext->m_glVertexPointer(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glAreTexturesResident) {
    prototypeCalled = true;
    result = glContext->m_glAreTexturesResident(n, textures, residences);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrioritizeTextures) {
    prototypeCalled = true;
    glContext->m_glPrioritizeTextures(n, textures, priorities);
  }
  if (!prototypeCalled && glContext->m_glPrioritizeTexturesEXT) {
    prototypeCalled = true;
    glContext->m_glPrioritizeTexturesEXT(n, textures, (const GLclampf *) priorities);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexub(GLubyte c) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexub) {
    prototypeCalled = true;
    glContext->m_glIndexub(c);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexubv(const GLubyte * c) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexubv) {
    prototypeCalled = true;
    glContext->m_glIndexubv(c);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPopClientAttrib() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPopClientAttrib) {
    prototypeCalled = true;
    glContext->m_glPopClientAttrib();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPushClientAttrib(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPushClientAttrib) {
    prototypeCalled = true;
    glContext->m_glPushClientAttrib(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawRangeElements) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElements(mode, start, end, count, type, indices);
  }
  if (!prototypeCalled && glContext->m_glDrawRangeElementsEXT) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElementsEXT(mode, start, end, count, type, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage3D) {
    prototypeCalled = true;
    glContext->m_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  if (!prototypeCalled && glContext->m_glTexImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTexImage3DEXT(target, level, (GLenum) internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage3D) {
    prototypeCalled = true;
    glContext->m_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  if (!prototypeCalled && glContext->m_glTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage3D) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  if (!prototypeCalled && glContext->m_glCopyTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveTexture(GLenum texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveTexture) {
    prototypeCalled = true;
    glContext->m_glActiveTexture(texture);
  }
  if (!prototypeCalled && glContext->m_glActiveTextureARB) {
    prototypeCalled = true;
    glContext->m_glActiveTextureARB(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleCoverage(GLfloat value, GLboolean invert) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleCoverage) {
    prototypeCalled = true;
    glContext->m_glSampleCoverage(value, invert);
  }
  if (!prototypeCalled && glContext->m_glSampleCoverageARB) {
    prototypeCalled = true;
    glContext->m_glSampleCoverageARB(value, invert);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage3D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexImage3DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage2D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexImage2DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage1D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexImage1DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage3D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage3DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage2D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage2DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage1D) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  }
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage1DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedTexImage(GLenum target, GLint level, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedTexImage) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTexImage(target, level, img);
  }
  if (!prototypeCalled && glContext->m_glGetCompressedTexImageARB) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTexImageARB(target, level, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClientActiveTexture(GLenum texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClientActiveTexture) {
    prototypeCalled = true;
    glContext->m_glClientActiveTexture(texture);
  }
  if (!prototypeCalled && glContext->m_glClientActiveTextureARB) {
    prototypeCalled = true;
    glContext->m_glClientActiveTextureARB(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1d(GLenum target, GLdouble s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1d) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1d(target, s);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1dARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1dv(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1dv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1dv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1f(GLenum target, GLfloat s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1f) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1f(target, s);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1fARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1fv(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1fv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1fv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1i(GLenum target, GLint s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1i) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1i(target, s);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1iARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1iv(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1iv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1iv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1s(GLenum target, GLshort s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1s) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1s(target, s);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1sARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1sv(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1sv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1sv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord1svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2d) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2d(target, s, t);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2dARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2dv(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2dv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2dv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2f) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2f(target, s, t);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2fARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2fv(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2fv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2fv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2i) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2i(target, s, t);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2iARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2iv(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2iv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2iv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2s) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2s(target, s, t);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2sARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2sv(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2sv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2sv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord2svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3d) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3d(target, s, t, r);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3dARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3dv(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3dv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3dv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3f) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3f(target, s, t, r);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3fARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3fv(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3fv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3fv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3i) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3i(target, s, t, r);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3iARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3iv(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3iv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3iv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3s) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3s(target, s, t, r);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3sARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3sv(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3sv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3sv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord3svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4d) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4d(target, s, t, r, q);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4dARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4dv(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4dv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4dv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4f) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4f(target, s, t, r, q);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4fARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4fv(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4fv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4fv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4i) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4i(target, s, t, r, q);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4iARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4iv(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4iv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4iv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4s) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4s(target, s, t, r, q);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4sARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4sv(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4sv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4sv(target, v);
  }
  if (!prototypeCalled && glContext->m_glMultiTexCoord4svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadTransposeMatrixf(const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixf) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixf(m);
  }
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixfARB) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixfARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadTransposeMatrixd(const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixd) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixd(m);
  }
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixdARB) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixdARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultTransposeMatrixf(const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixf) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixf(m);
  }
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixfARB) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixfARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultTransposeMatrixd(const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixd) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixd(m);
  }
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixdARB) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixdARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparate) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateEXT) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateINGR) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArrays) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArrays(mode, first, count, drawcount);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawArraysEXT) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysEXT(mode, first, count, drawcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElements) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElements(mode, count, type, indices, drawcount);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawElementsEXT) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsEXT(mode, count, type, indices, drawcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterf(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterf) {
    prototypeCalled = true;
    glContext->m_glPointParameterf(pname, param);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfARB) {
    prototypeCalled = true;
    glContext->m_glPointParameterfARB(pname, param);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glPointParameterfEXT(pname, param);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfSGIS) {
    prototypeCalled = true;
    glContext->m_glPointParameterfSGIS(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfv(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfv) {
    prototypeCalled = true;
    glContext->m_glPointParameterfv(pname, params);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfvARB) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvARB(pname, params);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvEXT(pname, params);
  }
  if (!prototypeCalled && glContext->m_glPointParameterfvSGIS) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameteri(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameteri) {
    prototypeCalled = true;
    glContext->m_glPointParameteri(pname, param);
  }
  if (!prototypeCalled && glContext->m_glPointParameteriNV) {
    prototypeCalled = true;
    glContext->m_glPointParameteriNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameteriv(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameteriv) {
    prototypeCalled = true;
    glContext->m_glPointParameteriv(pname, params);
  }
  if (!prototypeCalled && glContext->m_glPointParameterivNV) {
    prototypeCalled = true;
    glContext->m_glPointParameterivNV(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordf(GLfloat coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordf) {
    prototypeCalled = true;
    glContext->m_glFogCoordf(coord);
  }
  if (!prototypeCalled && glContext->m_glFogCoordfEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordfEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordfv(const GLfloat * coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordfv) {
    prototypeCalled = true;
    glContext->m_glFogCoordfv(coord);
  }
  if (!prototypeCalled && glContext->m_glFogCoordfvEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordfvEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordd(GLdouble coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordd) {
    prototypeCalled = true;
    glContext->m_glFogCoordd(coord);
  }
  if (!prototypeCalled && glContext->m_glFogCoorddEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoorddEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoorddv(const GLdouble * coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoorddv) {
    prototypeCalled = true;
    glContext->m_glFogCoorddv(coord);
  }
  if (!prototypeCalled && glContext->m_glFogCoorddvEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoorddvEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordPointer) {
    prototypeCalled = true;
    glContext->m_glFogCoordPointer(type, stride, pointer);
  }
  if (!prototypeCalled && glContext->m_glFogCoordPointerEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordPointerEXT(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3b) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3b(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3bEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3bEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3bv(const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3bv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3bv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3bvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3bvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3d) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3d(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3dEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3dEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3dv(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3dv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3dv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3dvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3dvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3f) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3f(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3fEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3fEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3fv(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3fv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3fv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3fvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3fvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3i) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3i(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3iEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3iEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3iv(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3iv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3iv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3ivEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3s) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3s(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3sEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3sEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3sv(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3sv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3sv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3svEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3svEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ub) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ub(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3ubEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ubEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ubv(const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ubv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ubv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3ubvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ubvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ui) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ui(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3uiEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3uiEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3uiv(const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3uiv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3uiv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3uivEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3uivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3us) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3us(red, green, blue);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3usEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3usEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3usv(const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3usv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3usv(v);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColor3usvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3usvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorPointer) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorPointer(size, type, stride, pointer);
  }
  if (!prototypeCalled && glContext->m_glSecondaryColorPointerEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorPointerEXT(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2d(GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2d) {
    prototypeCalled = true;
    glContext->m_glWindowPos2d(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2dARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dARB(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2dMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2dv(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2dv) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2dvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dvARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2dvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2f(GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2f) {
    prototypeCalled = true;
    glContext->m_glWindowPos2f(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2fARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fARB(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2fMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2fv(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2fv) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2fvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fvARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2fvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2i(GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2i) {
    prototypeCalled = true;
    glContext->m_glWindowPos2i(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2iARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2iARB(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2iMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2iMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2iv(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2iv) {
    prototypeCalled = true;
    glContext->m_glWindowPos2iv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2ivARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2ivARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2ivMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2ivMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2s(GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2s) {
    prototypeCalled = true;
    glContext->m_glWindowPos2s(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2sARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2sARB(x, y);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2sMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2sMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2sv(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2sv) {
    prototypeCalled = true;
    glContext->m_glWindowPos2sv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2svARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2svARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos2svMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2svMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3d) {
    prototypeCalled = true;
    glContext->m_glWindowPos3d(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3dARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dARB(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3dMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3dv(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3dv) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3dvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dvARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3dvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3f) {
    prototypeCalled = true;
    glContext->m_glWindowPos3f(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3fARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fARB(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3fMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3fv(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3fv) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3fvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fvARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3fvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3i(GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3i) {
    prototypeCalled = true;
    glContext->m_glWindowPos3i(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3iARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3iARB(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3iMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3iMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3iv(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3iv) {
    prototypeCalled = true;
    glContext->m_glWindowPos3iv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3ivARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3ivARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3ivMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3ivMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3s) {
    prototypeCalled = true;
    glContext->m_glWindowPos3s(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3sARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3sARB(x, y, z);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3sMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3sMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3sv(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3sv) {
    prototypeCalled = true;
    glContext->m_glWindowPos3sv(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3svARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3svARB(v);
  }
  if (!prototypeCalled && glContext->m_glWindowPos3svMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3svMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendColor) {
    prototypeCalled = true;
    glContext->m_glBlendColor(red, green, blue, alpha);
  }
  if (!prototypeCalled && glContext->m_glBlendColorEXT) {
    prototypeCalled = true;
    glContext->m_glBlendColorEXT(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquation(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquation) {
    prototypeCalled = true;
    glContext->m_glBlendEquation(mode);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationEXT) {
    prototypeCalled = true;
    glContext->m_glBlendEquationEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenQueries(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenQueries) {
    prototypeCalled = true;
    glContext->m_glGenQueries(n, ids);
  }
  if (!prototypeCalled && glContext->m_glGenQueriesARB) {
    prototypeCalled = true;
    glContext->m_glGenQueriesARB(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteQueries(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteQueries) {
    prototypeCalled = true;
    glContext->m_glDeleteQueries(n, ids);
  }
  if (!prototypeCalled && glContext->m_glDeleteQueriesARB) {
    prototypeCalled = true;
    glContext->m_glDeleteQueriesARB(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsQuery(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsQuery) {
    prototypeCalled = true;
    result = glContext->m_glIsQuery(id);
  }
  if (!prototypeCalled && glContext->m_glIsQueryARB) {
    prototypeCalled = true;
    result = glContext->m_glIsQueryARB(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginQuery(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginQuery) {
    prototypeCalled = true;
    glContext->m_glBeginQuery(target, id);
  }
  if (!prototypeCalled && glContext->m_glBeginQueryARB) {
    prototypeCalled = true;
    glContext->m_glBeginQueryARB(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndQuery(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndQuery) {
    prototypeCalled = true;
    glContext->m_glEndQuery(target);
  }
  if (!prototypeCalled && glContext->m_glEndQueryARB) {
    prototypeCalled = true;
    glContext->m_glEndQueryARB(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryiv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryiv) {
    prototypeCalled = true;
    glContext->m_glGetQueryiv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetQueryivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryivARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectiv) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectiv(id, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetQueryObjectivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectivARB(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectuiv) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectuiv(id, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetQueryObjectuivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectuivARB(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBuffer(GLenum target, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBuffer) {
    prototypeCalled = true;
    glContext->m_glBindBuffer(target, buffer);
  }
  if (!prototypeCalled && glContext->m_glBindBufferARB) {
    prototypeCalled = true;
    glContext->m_glBindBufferARB(target, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteBuffers(GLsizei n, const GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteBuffers) {
    prototypeCalled = true;
    glContext->m_glDeleteBuffers(n, buffers);
  }
  if (!prototypeCalled && glContext->m_glDeleteBuffersARB) {
    prototypeCalled = true;
    glContext->m_glDeleteBuffersARB(n, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenBuffers(GLsizei n, GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenBuffers) {
    prototypeCalled = true;
    glContext->m_glGenBuffers(n, buffers);
  }
  if (!prototypeCalled && glContext->m_glGenBuffersARB) {
    prototypeCalled = true;
    glContext->m_glGenBuffersARB(n, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsBuffer(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsBuffer) {
    prototypeCalled = true;
    result = glContext->m_glIsBuffer(buffer);
  }
  if (!prototypeCalled && glContext->m_glIsBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glIsBufferARB(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferData) {
    prototypeCalled = true;
    glContext->m_glBufferData(target, size, data, usage);
  }
  if (!prototypeCalled && glContext->m_glBufferDataARB) {
    prototypeCalled = true;
    glContext->m_glBufferDataARB(target, (GLsizeiptrARB) size, data, usage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferSubData) {
    prototypeCalled = true;
    glContext->m_glBufferSubData(target, offset, size, data);
  }
  if (!prototypeCalled && glContext->m_glBufferSubDataARB) {
    prototypeCalled = true;
    glContext->m_glBufferSubDataARB(target, (GLintptrARB) offset, (GLsizeiptrARB) size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferSubData) {
    prototypeCalled = true;
    glContext->m_glGetBufferSubData(target, offset, size, data);
  }
  if (!prototypeCalled && glContext->m_glGetBufferSubDataARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferSubDataARB(target, (GLintptrARB) offset, (GLsizeiptrARB) size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapBuffer(GLenum target, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapBuffer) {
    prototypeCalled = true;
    result = glContext->m_glMapBuffer(target, access);
  }
  if (!prototypeCalled && glContext->m_glMapBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glMapBufferARB(target, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glUnmapBuffer(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glUnmapBuffer) {
    prototypeCalled = true;
    result = glContext->m_glUnmapBuffer(target);
  }
  if (!prototypeCalled && glContext->m_glUnmapBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glUnmapBufferARB(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetBufferParameteriv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetBufferParameterivARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferParameterivARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferPointerv(GLenum target, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferPointerv) {
    prototypeCalled = true;
    glContext->m_glGetBufferPointerv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetBufferPointervARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferPointervARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationSeparate) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparate(modeRGB, modeAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateEXT) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateEXT(modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawBuffers(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawBuffers) {
    prototypeCalled = true;
    glContext->m_glDrawBuffers(n, bufs);
  }
  if (!prototypeCalled && glContext->m_glDrawBuffersARB) {
    prototypeCalled = true;
    glContext->m_glDrawBuffersARB(n, bufs);
  }
  if (!prototypeCalled && glContext->m_glDrawBuffersATI) {
    prototypeCalled = true;
    glContext->m_glDrawBuffersATI(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilOpSeparate) {
    prototypeCalled = true;
    glContext->m_glStencilOpSeparate(face, sfail, dpfail, dppass);
  }
  if (!prototypeCalled && glContext->m_glStencilOpSeparateATI) {
    prototypeCalled = true;
    glContext->m_glStencilOpSeparateATI(face, sfail, dpfail, dppass);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilFuncSeparate) {
    prototypeCalled = true;
    glContext->m_glStencilFuncSeparate(face, func, ref, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilMaskSeparate(GLenum face, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilMaskSeparate) {
    prototypeCalled = true;
    glContext->m_glStencilMaskSeparate(face, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAttachShader(GLuint program, GLuint shader) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAttachShader) {
    prototypeCalled = true;
    glContext->m_glAttachShader(program, shader);
  }
  if (!prototypeCalled && glContext->m_glAttachObjectARB) {
    prototypeCalled = true;
    glContext->m_glAttachObjectARB((GLhandleARB) program, (GLhandleARB) shader);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindAttribLocation) {
    prototypeCalled = true;
    glContext->m_glBindAttribLocation(program, index, name);
  }
  if (!prototypeCalled && glContext->m_glBindAttribLocationARB) {
    prototypeCalled = true;
    glContext->m_glBindAttribLocationARB((GLhandleARB) program, index, (const GLcharARB *) name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompileShader(GLuint shader) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompileShader) {
    prototypeCalled = true;
    glContext->m_glCompileShader(shader);
  }
  if (!prototypeCalled && glContext->m_glCompileShaderARB) {
    prototypeCalled = true;
    glContext->m_glCompileShaderARB((GLhandleARB) shader);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glCreateProgram() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glCreateProgram) {
    prototypeCalled = true;
    result = glContext->m_glCreateProgram();
  }
  if (!prototypeCalled && glContext->m_glCreateProgramObjectARB) {
    prototypeCalled = true;
    result = (GLuint) glContext->m_glCreateProgramObjectARB();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glCreateShader(GLenum type) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glCreateShader) {
    prototypeCalled = true;
    result = glContext->m_glCreateShader(type);
  }
  if (!prototypeCalled && glContext->m_glCreateShaderObjectARB) {
    prototypeCalled = true;
    result = (GLuint) glContext->m_glCreateShaderObjectARB(type);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteProgram(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteProgram) {
    prototypeCalled = true;
    glContext->m_glDeleteProgram(program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteShader(GLuint shader) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteShader) {
    prototypeCalled = true;
    glContext->m_glDeleteShader(shader);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDetachShader(GLuint program, GLuint shader) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDetachShader) {
    prototypeCalled = true;
    glContext->m_glDetachShader(program, shader);
  }
  if (!prototypeCalled && glContext->m_glDetachObjectARB) {
    prototypeCalled = true;
    glContext->m_glDetachObjectARB((GLhandleARB) program, (GLhandleARB) shader);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexAttribArray(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexAttribArray) {
    prototypeCalled = true;
    glContext->m_glDisableVertexAttribArray(index);
  }
  if (!prototypeCalled && glContext->m_glDisableVertexAttribArrayARB) {
    prototypeCalled = true;
    glContext->m_glDisableVertexAttribArrayARB(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexAttribArray(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexAttribArray) {
    prototypeCalled = true;
    glContext->m_glEnableVertexAttribArray(index);
  }
  if (!prototypeCalled && glContext->m_glEnableVertexAttribArrayARB) {
    prototypeCalled = true;
    glContext->m_glEnableVertexAttribArrayARB(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveAttrib) {
    prototypeCalled = true;
    glContext->m_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  }
  if (!prototypeCalled && glContext->m_glGetActiveAttribARB) {
    prototypeCalled = true;
    glContext->m_glGetActiveAttribARB((GLhandleARB) program, index, bufSize, length, size, type, (GLcharARB *) name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniform) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  }
  if (!prototypeCalled && glContext->m_glGetActiveUniformARB) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformARB((GLhandleARB) program, index, bufSize, length, size, type, (GLcharARB *) name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetAttachedShaders) {
    prototypeCalled = true;
    glContext->m_glGetAttachedShaders(program, maxCount, count, shaders);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetAttribLocation(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetAttribLocation) {
    prototypeCalled = true;
    result = glContext->m_glGetAttribLocation(program, name);
  }
  if (!prototypeCalled && glContext->m_glGetAttribLocationARB) {
    prototypeCalled = true;
    result = glContext->m_glGetAttribLocationARB((GLhandleARB) program, (const GLcharARB *) name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramiv(GLuint program, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramiv) {
    prototypeCalled = true;
    glContext->m_glGetProgramiv(program, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramInfoLog) {
    prototypeCalled = true;
    glContext->m_glGetProgramInfoLog(program, bufSize, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShaderiv(GLuint shader, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShaderiv) {
    prototypeCalled = true;
    glContext->m_glGetShaderiv(shader, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShaderInfoLog) {
    prototypeCalled = true;
    glContext->m_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShaderSource) {
    prototypeCalled = true;
    glContext->m_glGetShaderSource(shader, bufSize, length, source);
  }
  if (!prototypeCalled && glContext->m_glGetShaderSourceARB) {
    prototypeCalled = true;
    glContext->m_glGetShaderSourceARB((GLhandleARB) shader, bufSize, length, (GLcharARB *) source);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetUniformLocation(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetUniformLocation) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformLocation(program, name);
  }
  if (!prototypeCalled && glContext->m_glGetUniformLocationARB) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformLocationARB((GLhandleARB) program, (const GLcharARB *) name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformfv(GLuint program, GLint location, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformfv) {
    prototypeCalled = true;
    glContext->m_glGetUniformfv(program, location, params);
  }
  if (!prototypeCalled && glContext->m_glGetUniformfvARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformfvARB((GLhandleARB) program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformiv(GLuint program, GLint location, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformiv) {
    prototypeCalled = true;
    glContext->m_glGetUniformiv(program, location, params);
  }
  if (!prototypeCalled && glContext->m_glGetUniformivARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformivARB((GLhandleARB) program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribdv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribdv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribdvARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribdvARB(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribdvNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribdvNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribfv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribfv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribfvARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribfvARB(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribfvNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribfvNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribiv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribiv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribivARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribivARB(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribivNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribivNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribPointerv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribPointerv(index, pname, pointer);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribPointervARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribPointervARB(index, pname, pointer);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribPointervNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribPointervNV(index, pname, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsProgram(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsProgram) {
    prototypeCalled = true;
    result = glContext->m_glIsProgram(program);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsShader(GLuint shader) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsShader) {
    prototypeCalled = true;
    result = glContext->m_glIsShader(shader);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLinkProgram(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLinkProgram) {
    prototypeCalled = true;
    glContext->m_glLinkProgram(program);
  }
  if (!prototypeCalled && glContext->m_glLinkProgramARB) {
    prototypeCalled = true;
    glContext->m_glLinkProgramARB((GLhandleARB) program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderSource) {
    prototypeCalled = true;
    glContext->m_glShaderSource(shader, count, string, length);
  }
  if (!prototypeCalled && glContext->m_glShaderSourceARB) {
    prototypeCalled = true;
    glContext->m_glShaderSourceARB((GLhandleARB) shader, count, (const GLcharARB **) string, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUseProgram(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUseProgram) {
    prototypeCalled = true;
    glContext->m_glUseProgram(program);
  }
  if (!prototypeCalled && glContext->m_glUseProgramObjectARB) {
    prototypeCalled = true;
    glContext->m_glUseProgramObjectARB((GLhandleARB) program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1f(GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1f) {
    prototypeCalled = true;
    glContext->m_glUniform1f(location, v0);
  }
  if (!prototypeCalled && glContext->m_glUniform1fARB) {
    prototypeCalled = true;
    glContext->m_glUniform1fARB(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2f) {
    prototypeCalled = true;
    glContext->m_glUniform2f(location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glUniform2fARB) {
    prototypeCalled = true;
    glContext->m_glUniform2fARB(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3f) {
    prototypeCalled = true;
    glContext->m_glUniform3f(location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glUniform3fARB) {
    prototypeCalled = true;
    glContext->m_glUniform3fARB(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4f) {
    prototypeCalled = true;
    glContext->m_glUniform4f(location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glUniform4fARB) {
    prototypeCalled = true;
    glContext->m_glUniform4fARB(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1i(GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1i) {
    prototypeCalled = true;
    glContext->m_glUniform1i(location, v0);
  }
  if (!prototypeCalled && glContext->m_glUniform1iARB) {
    prototypeCalled = true;
    glContext->m_glUniform1iARB(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2i(GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2i) {
    prototypeCalled = true;
    glContext->m_glUniform2i(location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glUniform2iARB) {
    prototypeCalled = true;
    glContext->m_glUniform2iARB(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3i) {
    prototypeCalled = true;
    glContext->m_glUniform3i(location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glUniform3iARB) {
    prototypeCalled = true;
    glContext->m_glUniform3iARB(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4i) {
    prototypeCalled = true;
    glContext->m_glUniform4i(location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glUniform4iARB) {
    prototypeCalled = true;
    glContext->m_glUniform4iARB(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1fv(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1fv) {
    prototypeCalled = true;
    glContext->m_glUniform1fv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform1fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform1fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2fv(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2fv) {
    prototypeCalled = true;
    glContext->m_glUniform2fv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform2fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform2fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3fv(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3fv) {
    prototypeCalled = true;
    glContext->m_glUniform3fv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform3fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform3fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4fv(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4fv) {
    prototypeCalled = true;
    glContext->m_glUniform4fv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform4fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform4fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1iv(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1iv) {
    prototypeCalled = true;
    glContext->m_glUniform1iv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform1ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform1ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2iv(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2iv) {
    prototypeCalled = true;
    glContext->m_glUniform2iv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform2ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform2ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3iv(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3iv) {
    prototypeCalled = true;
    glContext->m_glUniform3iv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform3ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform3ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4iv(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4iv) {
    prototypeCalled = true;
    glContext->m_glUniform4iv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform4ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform4ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glUniformMatrix2fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glUniformMatrix3fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4fv(location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glUniformMatrix4fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glValidateProgram(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glValidateProgram) {
    prototypeCalled = true;
    glContext->m_glValidateProgram(program);
  }
  if (!prototypeCalled && glContext->m_glValidateProgramARB) {
    prototypeCalled = true;
    glContext->m_glValidateProgramARB((GLhandleARB) program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1d(GLuint index, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1d) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1d(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dARB(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1f(GLuint index, GLfloat x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1f) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1f(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fARB(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1fv(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1fv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1s(GLuint index, GLshort x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1s) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1s(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1sARB(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1sNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1sv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1sv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1sv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1svARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib1svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2d) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2d(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dARB(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2f) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2f(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fARB(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2fv(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2fv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2s) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2s(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2sARB(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2sNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2sv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2sv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2sv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2svARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib2svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3d) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3d(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dARB(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3f) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3f(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fARB(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3fv(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3fv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3s) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3s(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3sARB(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3sNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3sv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3sv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3sv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3svARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib3svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nbv(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nbv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nbv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NbvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NbvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Niv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Niv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Niv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nsv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nsv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nsv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NsvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NsvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nub) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nub(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NubARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NubARB(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nubv(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nubv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nubv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NubvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NubvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nuiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nuiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nuiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NuivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NuivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4Nusv(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4Nusv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4Nusv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4NusvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NusvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4bv(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4bv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4bv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4bvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4bvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4d) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4d(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dARB(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4f) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4f(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fARB(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4fv(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4fv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fvARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4iv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4iv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4ivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4s) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4s(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4sARB(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4sNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4sv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4sv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4sv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4svARB(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4ubv(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4uiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4uivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4uivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4usv(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4usv) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4usv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttrib4usvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4usvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribPointer) {
    prototypeCalled = true;
    glContext->m_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribPointerARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2x3fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2x3fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3x2fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3x2fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2x4fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2x4fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4x2fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4x2fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3x4fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3x4fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4x3fv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4x3fv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorMaski) {
    prototypeCalled = true;
    glContext->m_glColorMaski(index, r, g, b, a);
  }
  if (!prototypeCalled && glContext->m_glColorMaskIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glColorMaskIndexedEXT(index, r, g, b, a);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBooleani_v) {
    prototypeCalled = true;
    glContext->m_glGetBooleani_v(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetBooleanIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetBooleanIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetIntegeri_v(GLenum target, GLuint index, GLint * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetIntegeri_v) {
    prototypeCalled = true;
    glContext->m_glGetIntegeri_v(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetIntegerIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetIntegerIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnablei(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnablei) {
    prototypeCalled = true;
    glContext->m_glEnablei(target, index);
  }
  if (!prototypeCalled && glContext->m_glEnableIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glEnableIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisablei(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisablei) {
    prototypeCalled = true;
    glContext->m_glDisablei(target, index);
  }
  if (!prototypeCalled && glContext->m_glDisableIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glDisableIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsEnabledi(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsEnabledi) {
    prototypeCalled = true;
    result = glContext->m_glIsEnabledi(target, index);
  }
  if (!prototypeCalled && glContext->m_glIsEnabledIndexedEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsEnabledIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginTransformFeedback(GLenum primitiveMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glBeginTransformFeedback(primitiveMode);
  }
  if (!prototypeCalled && glContext->m_glBeginTransformFeedbackEXT) {
    prototypeCalled = true;
    glContext->m_glBeginTransformFeedbackEXT(primitiveMode);
  }
  if (!prototypeCalled && glContext->m_glBeginTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glBeginTransformFeedbackNV(primitiveMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glEndTransformFeedback();
  }
  if (!prototypeCalled && glContext->m_glEndTransformFeedbackEXT) {
    prototypeCalled = true;
    glContext->m_glEndTransformFeedbackEXT();
  }
  if (!prototypeCalled && glContext->m_glEndTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glEndTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferRange) {
    prototypeCalled = true;
    glContext->m_glBindBufferRange(target, index, buffer, offset, size);
  }
  if (!prototypeCalled && glContext->m_glBindBufferRangeEXT) {
    prototypeCalled = true;
    glContext->m_glBindBufferRangeEXT(target, index, buffer, offset, size);
  }
  if (!prototypeCalled && glContext->m_glBindBufferRangeNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferRangeNV(target, index, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferBase) {
    prototypeCalled = true;
    glContext->m_glBindBufferBase(target, index, buffer);
  }
  if (!prototypeCalled && glContext->m_glBindBufferBaseEXT) {
    prototypeCalled = true;
    glContext->m_glBindBufferBaseEXT(target, index, buffer);
  }
  if (!prototypeCalled && glContext->m_glBindBufferBaseNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferBaseNV(target, index, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackVaryings) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
  }
  if (!prototypeCalled && glContext->m_glTransformFeedbackVaryingsEXT) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbackVarying) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
  }
  if (!prototypeCalled && glContext->m_glGetTransformFeedbackVaryingEXT) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClampColor(GLenum target, GLenum clamp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClampColor) {
    prototypeCalled = true;
    glContext->m_glClampColor(target, clamp);
  }
  if (!prototypeCalled && glContext->m_glClampColorARB) {
    prototypeCalled = true;
    glContext->m_glClampColorARB(target, clamp);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginConditionalRender(GLuint id, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginConditionalRender) {
    prototypeCalled = true;
    glContext->m_glBeginConditionalRender(id, mode);
  }
  if (!prototypeCalled && glContext->m_glBeginConditionalRenderNV) {
    prototypeCalled = true;
    glContext->m_glBeginConditionalRenderNV(id, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndConditionalRender() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndConditionalRender) {
    prototypeCalled = true;
    glContext->m_glEndConditionalRender();
  }
  if (!prototypeCalled && glContext->m_glEndConditionalRenderNV) {
    prototypeCalled = true;
    glContext->m_glEndConditionalRenderNV();
  }
  if (!prototypeCalled && glContext->m_glEndConditionalRenderNVX) {
    prototypeCalled = true;
    glContext->m_glEndConditionalRenderNVX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribIPointer) {
    prototypeCalled = true;
    glContext->m_glVertexAttribIPointer(index, size, type, stride, pointer);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribIPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribIPointerEXT(index, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribIiv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIiv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIivEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribIuiv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIuiv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIuivEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1i(GLuint index, GLint x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1i) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1i(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI1iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1iEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2i) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2i(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI2iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2iEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3i) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3i(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI3iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3iEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4i) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4i(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4iEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1ui(GLuint index, GLuint x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1ui(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI1uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1uiEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2ui(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI2uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2uiEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3ui(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI3uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3uiEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ui(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4uiEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1iv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1iv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI1ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2iv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2iv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI2ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3iv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3iv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI3ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4iv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4iv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4iv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1uiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI1uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2uiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI2uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3uiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI3uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4uiv(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4uiv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4bv(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4bv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4bv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4bvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4bvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4sv(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4sv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4sv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4svEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4svEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4ubv(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4ubv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ubv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4ubvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ubvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4usv(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4usv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4usv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribI4usvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4usvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformuiv(GLuint program, GLint location, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformuiv) {
    prototypeCalled = true;
    glContext->m_glGetUniformuiv(program, location, params);
  }
  if (!prototypeCalled && glContext->m_glGetUniformuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetUniformuivEXT(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFragDataLocation) {
    prototypeCalled = true;
    glContext->m_glBindFragDataLocation(program, color, name);
  }
  if (!prototypeCalled && glContext->m_glBindFragDataLocationEXT) {
    prototypeCalled = true;
    glContext->m_glBindFragDataLocationEXT(program, color, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetFragDataLocation(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetFragDataLocation) {
    prototypeCalled = true;
    result = glContext->m_glGetFragDataLocation(program, name);
  }
  if (!prototypeCalled && glContext->m_glGetFragDataLocationEXT) {
    prototypeCalled = true;
    result = glContext->m_glGetFragDataLocationEXT(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ui(GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ui) {
    prototypeCalled = true;
    glContext->m_glUniform1ui(location, v0);
  }
  if (!prototypeCalled && glContext->m_glUniform1uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform1uiEXT(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ui) {
    prototypeCalled = true;
    glContext->m_glUniform2ui(location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glUniform2uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform2uiEXT(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ui) {
    prototypeCalled = true;
    glContext->m_glUniform3ui(location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glUniform3uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform3uiEXT(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ui) {
    prototypeCalled = true;
    glContext->m_glUniform4ui(location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glUniform4uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform4uiEXT(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1uiv) {
    prototypeCalled = true;
    glContext->m_glUniform1uiv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform1uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform1uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2uiv) {
    prototypeCalled = true;
    glContext->m_glUniform2uiv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform2uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform2uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3uiv) {
    prototypeCalled = true;
    glContext->m_glUniform3uiv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform3uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform3uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4uiv(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4uiv) {
    prototypeCalled = true;
    glContext->m_glUniform4uiv(location, count, value);
  }
  if (!prototypeCalled && glContext->m_glUniform4uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform4uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterIiv) {
    prototypeCalled = true;
    glContext->m_glTexParameterIiv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glTexParameterIuiv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterIiv) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIiv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIuiv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferiv) {
    prototypeCalled = true;
    glContext->m_glClearBufferiv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferuiv) {
    prototypeCalled = true;
    glContext->m_glClearBufferuiv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferfv) {
    prototypeCalled = true;
    glContext->m_glClearBufferfv(buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferfi) {
    prototypeCalled = true;
    glContext->m_glClearBufferfi(buffer, drawbuffer, depth, stencil);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const GLubyte * _glew_gl_glGetStringi(GLenum name, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  const GLubyte * result = ((const GLubyte *)0);
  if (!prototypeCalled && glContext->m_glGetStringi) {
    prototypeCalled = true;
    result = glContext->m_glGetStringi(name, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsRenderbuffer(GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsRenderbuffer) {
    prototypeCalled = true;
    result = glContext->m_glIsRenderbuffer(renderbuffer);
  }
  if (!prototypeCalled && glContext->m_glIsRenderbufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsRenderbufferEXT(renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindRenderbuffer) {
    prototypeCalled = true;
    glContext->m_glBindRenderbuffer(target, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteRenderbuffers) {
    prototypeCalled = true;
    glContext->m_glDeleteRenderbuffers(n, renderbuffers);
  }
  if (!prototypeCalled && glContext->m_glDeleteRenderbuffersEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteRenderbuffersEXT(n, renderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenRenderbuffers) {
    prototypeCalled = true;
    glContext->m_glGenRenderbuffers(n, renderbuffers);
  }
  if (!prototypeCalled && glContext->m_glGenRenderbuffersEXT) {
    prototypeCalled = true;
    glContext->m_glGenRenderbuffersEXT(n, renderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorage) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorage(target, internalformat, width, height);
  }
  if (!prototypeCalled && glContext->m_glRenderbufferStorageEXT) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageEXT(target, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetRenderbufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetRenderbufferParameteriv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetRenderbufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetRenderbufferParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsFramebuffer(GLuint framebuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsFramebuffer) {
    prototypeCalled = true;
    result = glContext->m_glIsFramebuffer(framebuffer);
  }
  if (!prototypeCalled && glContext->m_glIsFramebufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsFramebufferEXT(framebuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFramebuffer(GLenum target, GLuint framebuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFramebuffer) {
    prototypeCalled = true;
    glContext->m_glBindFramebuffer(target, framebuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteFramebuffers) {
    prototypeCalled = true;
    glContext->m_glDeleteFramebuffers(n, framebuffers);
  }
  if (!prototypeCalled && glContext->m_glDeleteFramebuffersEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteFramebuffersEXT(n, framebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenFramebuffers(GLsizei n, GLuint * framebuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenFramebuffers) {
    prototypeCalled = true;
    glContext->m_glGenFramebuffers(n, framebuffers);
  }
  if (!prototypeCalled && glContext->m_glGenFramebuffersEXT) {
    prototypeCalled = true;
    glContext->m_glGenFramebuffersEXT(n, framebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glCheckFramebufferStatus(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glCheckFramebufferStatus) {
    prototypeCalled = true;
    result = glContext->m_glCheckFramebufferStatus(target);
  }
  if (!prototypeCalled && glContext->m_glCheckFramebufferStatusEXT) {
    prototypeCalled = true;
    result = glContext->m_glCheckFramebufferStatusEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture1D) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTexture1DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture2D) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTexture2DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture3D) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTexture3DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferRenderbuffer) {
    prototypeCalled = true;
    glContext->m_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  }
  if (!prototypeCalled && glContext->m_glFramebufferRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferAttachmentParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetFramebufferAttachmentParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenerateMipmap(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenerateMipmap) {
    prototypeCalled = true;
    glContext->m_glGenerateMipmap(target);
  }
  if (!prototypeCalled && glContext->m_glGenerateMipmapEXT) {
    prototypeCalled = true;
    glContext->m_glGenerateMipmapEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlitFramebuffer) {
    prototypeCalled = true;
    glContext->m_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  if (!prototypeCalled && glContext->m_glBlitFramebufferEXT) {
    prototypeCalled = true;
    glContext->m_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorageMultisample) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  }
  if (!prototypeCalled && glContext->m_glRenderbufferStorageMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureLayer) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTextureLayerARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTextureLayerEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapBufferRange) {
    prototypeCalled = true;
    result = glContext->m_glMapBufferRange(target, offset, length, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushMappedBufferRange) {
    prototypeCalled = true;
    glContext->m_glFlushMappedBufferRange(target, offset, length);
  }
  if (!prototypeCalled && glContext->m_glFlushMappedBufferRangeAPPLE) {
    prototypeCalled = true;
    glContext->m_glFlushMappedBufferRangeAPPLE(target, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVertexArray(GLuint array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVertexArray) {
    prototypeCalled = true;
    glContext->m_glBindVertexArray(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteVertexArrays(GLsizei n, const GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteVertexArrays) {
    prototypeCalled = true;
    glContext->m_glDeleteVertexArrays(n, arrays);
  }
  if (!prototypeCalled && glContext->m_glDeleteVertexArraysAPPLE) {
    prototypeCalled = true;
    glContext->m_glDeleteVertexArraysAPPLE(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenVertexArrays(GLsizei n, GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenVertexArrays) {
    prototypeCalled = true;
    glContext->m_glGenVertexArrays(n, arrays);
  }
  if (!prototypeCalled && glContext->m_glGenVertexArraysAPPLE) {
    prototypeCalled = true;
    glContext->m_glGenVertexArraysAPPLE(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsVertexArray(GLuint array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsVertexArray) {
    prototypeCalled = true;
    result = glContext->m_glIsVertexArray(array);
  }
  if (!prototypeCalled && glContext->m_glIsVertexArrayAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glIsVertexArrayAPPLE(array);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysInstanced) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstanced(mode, first, count, instancecount);
  }
  if (!prototypeCalled && glContext->m_glDrawArraysInstancedARB) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstancedARB(mode, first, count, instancecount);
  }
  if (!prototypeCalled && glContext->m_glDrawArraysInstancedEXT) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstancedEXT(mode, first, count, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstanced) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstanced(mode, count, type, indices, instancecount);
  }
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedARB) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedARB(mode, count, type, indices, instancecount);
  }
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedEXT) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedEXT(mode, count, type, indices, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBuffer) {
    prototypeCalled = true;
    glContext->m_glTexBuffer(target, internalformat, buffer);
  }
  if (!prototypeCalled && glContext->m_glTexBufferARB) {
    prototypeCalled = true;
    glContext->m_glTexBufferARB(target, internalformat, buffer);
  }
  if (!prototypeCalled && glContext->m_glTexBufferEXT) {
    prototypeCalled = true;
    glContext->m_glTexBufferEXT(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrimitiveRestartIndex(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrimitiveRestartIndex) {
    prototypeCalled = true;
    glContext->m_glPrimitiveRestartIndex(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyBufferSubData) {
    prototypeCalled = true;
    glContext->m_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformIndices) {
    prototypeCalled = true;
    glContext->m_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniformsiv) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniformName) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetUniformBlockIndex) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformBlockIndex(program, uniformBlockName);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniformBlockiv) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniformBlockName) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformBlockBinding) {
    prototypeCalled = true;
    glContext->m_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsBaseVertex) {
    prototypeCalled = true;
    glContext->m_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawRangeElementsBaseVertex) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedBaseVertex) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsBaseVertex) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProvokingVertex(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProvokingVertex) {
    prototypeCalled = true;
    glContext->m_glProvokingVertex(mode);
  }
  if (!prototypeCalled && glContext->m_glProvokingVertexEXT) {
    prototypeCalled = true;
    glContext->m_glProvokingVertexEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync _glew_gl_glFenceSync(GLenum condition, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLsync result = ((GLsync)0);
  if (!prototypeCalled && glContext->m_glFenceSync) {
    prototypeCalled = true;
    result = glContext->m_glFenceSync(condition, flags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsSync(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsSync) {
    prototypeCalled = true;
    result = glContext->m_glIsSync(sync);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteSync(GLsync sync) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteSync) {
    prototypeCalled = true;
    glContext->m_glDeleteSync(sync);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glClientWaitSync) {
    prototypeCalled = true;
    result = glContext->m_glClientWaitSync(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWaitSync) {
    prototypeCalled = true;
    glContext->m_glWaitSync(sync, flags, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInteger64v(GLenum pname, GLint64 * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInteger64v) {
    prototypeCalled = true;
    glContext->m_glGetInteger64v(pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSynciv) {
    prototypeCalled = true;
    glContext->m_glGetSynciv(sync, pname, count, length, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInteger64i_v) {
    prototypeCalled = true;
    glContext->m_glGetInteger64i_v(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferParameteri64v) {
    prototypeCalled = true;
    glContext->m_glGetBufferParameteri64v(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture(target, attachment, texture, level);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTextureARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureARB(target, attachment, texture, level);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTextureEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureEXT(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage2DMultisample) {
    prototypeCalled = true;
    glContext->m_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage3DMultisample) {
    prototypeCalled = true;
    glContext->m_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultisamplefv) {
    prototypeCalled = true;
    glContext->m_glGetMultisamplefv(pname, index, val);
  }
  if (!prototypeCalled && glContext->m_glGetMultisamplefvNV) {
    prototypeCalled = true;
    glContext->m_glGetMultisamplefvNV(pname, index, val);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleMaski(GLuint maskNumber, GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleMaski) {
    prototypeCalled = true;
    glContext->m_glSampleMaski(maskNumber, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFragDataLocationIndexed) {
    prototypeCalled = true;
    glContext->m_glBindFragDataLocationIndexed(program, colorNumber, index, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetFragDataIndex(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetFragDataIndex) {
    prototypeCalled = true;
    result = glContext->m_glGetFragDataIndex(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenSamplers(GLsizei count, GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenSamplers) {
    prototypeCalled = true;
    glContext->m_glGenSamplers(count, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteSamplers(GLsizei count, const GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteSamplers) {
    prototypeCalled = true;
    glContext->m_glDeleteSamplers(count, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsSampler(GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsSampler) {
    prototypeCalled = true;
    result = glContext->m_glIsSampler(sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindSampler(GLuint unit, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindSampler) {
    prototypeCalled = true;
    glContext->m_glBindSampler(unit, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameteri) {
    prototypeCalled = true;
    glContext->m_glSamplerParameteri(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameteriv) {
    prototypeCalled = true;
    glContext->m_glSamplerParameteriv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameterf) {
    prototypeCalled = true;
    glContext->m_glSamplerParameterf(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameterfv) {
    prototypeCalled = true;
    glContext->m_glSamplerParameterfv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameterIiv) {
    prototypeCalled = true;
    glContext->m_glSamplerParameterIiv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplerParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glSamplerParameterIuiv(sampler, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSamplerParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetSamplerParameteriv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSamplerParameterIiv) {
    prototypeCalled = true;
    glContext->m_glGetSamplerParameterIiv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSamplerParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetSamplerParameterfv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSamplerParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glGetSamplerParameterIuiv(sampler, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glQueryCounter(GLuint id, GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glQueryCounter) {
    prototypeCalled = true;
    glContext->m_glQueryCounter(id, target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjecti64v) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjecti64v(id, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetQueryObjecti64vEXT) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjecti64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectui64v) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectui64v(id, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetQueryObjectui64vEXT) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectui64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribDivisor(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribDivisor) {
    prototypeCalled = true;
    glContext->m_glVertexAttribDivisor(index, divisor);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribDivisorARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribDivisorARB(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP1ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP1ui(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP1uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP1uiv(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP2ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP2ui(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP2uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP2uiv(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP3ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP3ui(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP3uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP3uiv(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP4ui) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP4ui(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribP4uiv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribP4uiv(index, type, normalized, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP2ui(GLenum type, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP2ui) {
    prototypeCalled = true;
    glContext->m_glVertexP2ui(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP2uiv(GLenum type, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP2uiv) {
    prototypeCalled = true;
    glContext->m_glVertexP2uiv(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP3ui(GLenum type, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP3ui) {
    prototypeCalled = true;
    glContext->m_glVertexP3ui(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP3uiv(GLenum type, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP3uiv) {
    prototypeCalled = true;
    glContext->m_glVertexP3uiv(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP4ui(GLenum type, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP4ui) {
    prototypeCalled = true;
    glContext->m_glVertexP4ui(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexP4uiv(GLenum type, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexP4uiv) {
    prototypeCalled = true;
    glContext->m_glVertexP4uiv(type, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP1ui(GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP1ui) {
    prototypeCalled = true;
    glContext->m_glTexCoordP1ui(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP1uiv(GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP1uiv) {
    prototypeCalled = true;
    glContext->m_glTexCoordP1uiv(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP2ui(GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP2ui) {
    prototypeCalled = true;
    glContext->m_glTexCoordP2ui(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP2uiv(GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP2uiv) {
    prototypeCalled = true;
    glContext->m_glTexCoordP2uiv(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP3ui(GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP3ui) {
    prototypeCalled = true;
    glContext->m_glTexCoordP3ui(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP3uiv(GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP3uiv) {
    prototypeCalled = true;
    glContext->m_glTexCoordP3uiv(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP4ui(GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP4ui) {
    prototypeCalled = true;
    glContext->m_glTexCoordP4ui(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordP4uiv(GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordP4uiv) {
    prototypeCalled = true;
    glContext->m_glTexCoordP4uiv(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP1ui) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP1ui(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP1uiv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP1uiv(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP2ui) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP2ui(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP2uiv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP2uiv(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP3ui) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP3ui(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP3uiv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP3uiv(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP4ui) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP4ui(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordP4uiv) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordP4uiv(texture, type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalP3ui(GLenum type, GLuint coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalP3ui) {
    prototypeCalled = true;
    glContext->m_glNormalP3ui(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalP3uiv(GLenum type, const GLuint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalP3uiv) {
    prototypeCalled = true;
    glContext->m_glNormalP3uiv(type, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorP3ui(GLenum type, GLuint color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorP3ui) {
    prototypeCalled = true;
    glContext->m_glColorP3ui(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorP3uiv(GLenum type, const GLuint * color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorP3uiv) {
    prototypeCalled = true;
    glContext->m_glColorP3uiv(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorP4ui(GLenum type, GLuint color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorP4ui) {
    prototypeCalled = true;
    glContext->m_glColorP4ui(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorP4uiv(GLenum type, const GLuint * color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorP4uiv) {
    prototypeCalled = true;
    glContext->m_glColorP4uiv(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorP3ui(GLenum type, GLuint color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorP3ui) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorP3ui(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorP3uiv(GLenum type, const GLuint * color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorP3uiv) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorP3uiv(type, color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMinSampleShading(GLfloat value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMinSampleShading) {
    prototypeCalled = true;
    glContext->m_glMinSampleShading(value);
  }
  if (!prototypeCalled && glContext->m_glMinSampleShadingARB) {
    prototypeCalled = true;
    glContext->m_glMinSampleShadingARB(value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationi(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationi) {
    prototypeCalled = true;
    glContext->m_glBlendEquationi(buf, mode);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendEquationIndexedAMD(buf, mode);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationiARB) {
    prototypeCalled = true;
    glContext->m_glBlendEquationiARB(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationSeparatei) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateiARB) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFunci) {
    prototypeCalled = true;
    glContext->m_glBlendFunci(buf, src, dst);
  }
  if (!prototypeCalled && glContext->m_glBlendFuncIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendFuncIndexedAMD(buf, src, dst);
  }
  if (!prototypeCalled && glContext->m_glBlendFunciARB) {
    prototypeCalled = true;
    glContext->m_glBlendFunciARB(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparatei) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateiARB) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysIndirect(GLenum mode, const void * indirect) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysIndirect) {
    prototypeCalled = true;
    glContext->m_glDrawArraysIndirect(mode, indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsIndirect) {
    prototypeCalled = true;
    glContext->m_glDrawElementsIndirect(mode, type, indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1d(GLint location, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1d) {
    prototypeCalled = true;
    glContext->m_glUniform1d(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2d(GLint location, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2d) {
    prototypeCalled = true;
    glContext->m_glUniform2d(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3d) {
    prototypeCalled = true;
    glContext->m_glUniform3d(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4d) {
    prototypeCalled = true;
    glContext->m_glUniform4d(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1dv(GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1dv) {
    prototypeCalled = true;
    glContext->m_glUniform1dv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2dv(GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2dv) {
    prototypeCalled = true;
    glContext->m_glUniform2dv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3dv(GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3dv) {
    prototypeCalled = true;
    glContext->m_glUniform3dv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4dv(GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4dv) {
    prototypeCalled = true;
    glContext->m_glUniform4dv(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2x3dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2x3dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2x4dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2x4dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3x2dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3x2dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3x4dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3x4dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4x2dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4x2dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4x3dv) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4x3dv(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformdv(GLuint program, GLint location, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformdv) {
    prototypeCalled = true;
    glContext->m_glGetUniformdv(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetSubroutineUniformLocation) {
    prototypeCalled = true;
    result = glContext->m_glGetSubroutineUniformLocation(program, shadertype, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetSubroutineIndex) {
    prototypeCalled = true;
    result = glContext->m_glGetSubroutineIndex(program, shadertype, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveSubroutineUniformiv) {
    prototypeCalled = true;
    glContext->m_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveSubroutineUniformName) {
    prototypeCalled = true;
    glContext->m_glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveSubroutineName) {
    prototypeCalled = true;
    glContext->m_glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformSubroutinesuiv) {
    prototypeCalled = true;
    glContext->m_glUniformSubroutinesuiv(shadertype, count, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformSubroutineuiv) {
    prototypeCalled = true;
    glContext->m_glGetUniformSubroutineuiv(shadertype, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramStageiv) {
    prototypeCalled = true;
    glContext->m_glGetProgramStageiv(program, shadertype, pname, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPatchParameteri(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPatchParameteri) {
    prototypeCalled = true;
    glContext->m_glPatchParameteri(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPatchParameterfv(GLenum pname, const GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPatchParameterfv) {
    prototypeCalled = true;
    glContext->m_glPatchParameterfv(pname, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTransformFeedback(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glBindTransformFeedback(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteTransformFeedbacks) {
    prototypeCalled = true;
    glContext->m_glDeleteTransformFeedbacks(n, ids);
  }
  if (!prototypeCalled && glContext->m_glDeleteTransformFeedbacksNV) {
    prototypeCalled = true;
    glContext->m_glDeleteTransformFeedbacksNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenTransformFeedbacks(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenTransformFeedbacks) {
    prototypeCalled = true;
    glContext->m_glGenTransformFeedbacks(n, ids);
  }
  if (!prototypeCalled && glContext->m_glGenTransformFeedbacksNV) {
    prototypeCalled = true;
    glContext->m_glGenTransformFeedbacksNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTransformFeedback(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTransformFeedback) {
    prototypeCalled = true;
    result = glContext->m_glIsTransformFeedback(id);
  }
  if (!prototypeCalled && glContext->m_glIsTransformFeedbackNV) {
    prototypeCalled = true;
    result = glContext->m_glIsTransformFeedbackNV(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPauseTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPauseTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glPauseTransformFeedback();
  }
  if (!prototypeCalled && glContext->m_glPauseTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glPauseTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResumeTransformFeedback() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResumeTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glResumeTransformFeedback();
  }
  if (!prototypeCalled && glContext->m_glResumeTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glResumeTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTransformFeedback(GLenum mode, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTransformFeedback) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedback(mode, id);
  }
  if (!prototypeCalled && glContext->m_glDrawTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedbackNV(mode, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTransformFeedbackStream) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedbackStream(mode, id, stream);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginQueryIndexed) {
    prototypeCalled = true;
    glContext->m_glBeginQueryIndexed(target, index, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndQueryIndexed(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndQueryIndexed) {
    prototypeCalled = true;
    glContext->m_glEndQueryIndexed(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryIndexediv) {
    prototypeCalled = true;
    glContext->m_glGetQueryIndexediv(target, index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReleaseShaderCompiler() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReleaseShaderCompiler) {
    prototypeCalled = true;
    glContext->m_glReleaseShaderCompiler();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderBinary) {
    prototypeCalled = true;
    glContext->m_glShaderBinary(count, shaders, binaryFormat, binary, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShaderPrecisionFormat) {
    prototypeCalled = true;
    glContext->m_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangef(GLfloat n, GLfloat f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangef) {
    prototypeCalled = true;
    glContext->m_glDepthRangef(n, f);
  }
  if (!prototypeCalled && glContext->m_glDepthRangefOES) {
    prototypeCalled = true;
    glContext->m_glDepthRangefOES((GLclampf) n, (GLclampf) f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearDepthf(GLfloat d) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearDepthf) {
    prototypeCalled = true;
    glContext->m_glClearDepthf(d);
  }
  if (!prototypeCalled && glContext->m_glClearDepthfOES) {
    prototypeCalled = true;
    glContext->m_glClearDepthfOES((GLclampf) d);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramBinary) {
    prototypeCalled = true;
    glContext->m_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramBinary) {
    prototypeCalled = true;
    glContext->m_glProgramBinary(program, binaryFormat, binary, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameteri) {
    prototypeCalled = true;
    glContext->m_glProgramParameteri(program, pname, value);
  }
  if (!prototypeCalled && glContext->m_glProgramParameteriARB) {
    prototypeCalled = true;
    glContext->m_glProgramParameteriARB(program, pname, value);
  }
  if (!prototypeCalled && glContext->m_glProgramParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glProgramParameteriEXT(program, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUseProgramStages) {
    prototypeCalled = true;
    glContext->m_glUseProgramStages(pipeline, stages, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveShaderProgram(GLuint pipeline, GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveShaderProgram) {
    prototypeCalled = true;
    glContext->m_glActiveShaderProgram(pipeline, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glCreateShaderProgramv) {
    prototypeCalled = true;
    result = glContext->m_glCreateShaderProgramv(type, count, strings);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindProgramPipeline) {
    prototypeCalled = true;
    glContext->m_glBindProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteProgramPipelines) {
    prototypeCalled = true;
    glContext->m_glDeleteProgramPipelines(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenProgramPipelines(GLsizei n, GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenProgramPipelines) {
    prototypeCalled = true;
    glContext->m_glGenProgramPipelines(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsProgramPipeline) {
    prototypeCalled = true;
    result = glContext->m_glIsProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramPipelineiv) {
    prototypeCalled = true;
    glContext->m_glGetProgramPipelineiv(pipeline, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1i(GLuint program, GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1i) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1i(program, location, v0);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1iEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1iv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1iv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1f) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1f(program, location, v0);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1fEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1fv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1d) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1d(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1dv(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ui) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ui(program, location, v0);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1uiEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1uiv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1uiv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform1uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2i) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2i(program, location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2iEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2iv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2iv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2f) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2f(program, location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2fEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2fv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2d) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2d(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2dv(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ui) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ui(program, location, v0, v1);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2uiEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2uiv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2uiv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform2uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3i) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3i(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3iEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3iv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3iv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3f) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3f(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3fEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3fv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3d) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3d(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3dv(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ui) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ui(program, location, v0, v1, v2);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3uiv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3uiv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform3uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4i) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4i(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4iv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4iv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4f) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4f(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4fv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4d) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4d(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4dv(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ui) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ui(program, location, v0, v1, v2, v3);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4uiv) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4uiv(program, location, count, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniform4uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x3fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x2fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x4fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x2fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x4fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x3fv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
  }
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x3dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x2dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x4dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x2dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x4dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x3dv) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glValidateProgramPipeline(GLuint pipeline) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glValidateProgramPipeline) {
    prototypeCalled = true;
    glContext->m_glValidateProgramPipeline(pipeline);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramPipelineInfoLog) {
    prototypeCalled = true;
    glContext->m_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1d(GLuint index, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1d) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1d(index, x);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL1dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1dEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2d) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2d(index, x, y);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL2dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2dEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3d) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3d(index, x, y, z);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL3dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3dEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4d) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4d(index, x, y, z, w);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL4dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4dEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL1dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL2dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL3dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4dv(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4dv) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4dv(index, v);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribL4dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribLPointer) {
    prototypeCalled = true;
    glContext->m_glVertexAttribLPointer(index, size, type, stride, pointer);
  }
  if (!prototypeCalled && glContext->m_glVertexAttribLPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribLPointerEXT(index, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribLdv) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLdv(index, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetVertexAttribLdvEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLdvEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glViewportArrayv) {
    prototypeCalled = true;
    glContext->m_glViewportArrayv(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glViewportIndexedf) {
    prototypeCalled = true;
    glContext->m_glViewportIndexedf(index, x, y, w, h);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glViewportIndexedfv(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glViewportIndexedfv) {
    prototypeCalled = true;
    glContext->m_glViewportIndexedfv(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScissorArrayv(GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScissorArrayv) {
    prototypeCalled = true;
    glContext->m_glScissorArrayv(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScissorIndexed) {
    prototypeCalled = true;
    glContext->m_glScissorIndexed(index, left, bottom, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScissorIndexedv(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScissorIndexedv) {
    prototypeCalled = true;
    glContext->m_glScissorIndexedv(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangeArrayv) {
    prototypeCalled = true;
    glContext->m_glDepthRangeArrayv(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangeIndexed) {
    prototypeCalled = true;
    glContext->m_glDepthRangeIndexed(index, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFloati_v(GLenum target, GLuint index, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFloati_v) {
    prototypeCalled = true;
    glContext->m_glGetFloati_v(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetFloatIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetFloatIndexedvEXT(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetFloati_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetFloati_vEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetDoublei_v(GLenum target, GLuint index, GLdouble * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetDoublei_v) {
    prototypeCalled = true;
    glContext->m_glGetDoublei_v(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetDoubleIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetDoubleIndexedvEXT(target, index, data);
  }
  if (!prototypeCalled && glContext->m_glGetDoublei_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetDoublei_vEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysInstancedBaseInstance) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedBaseInstance) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedBaseVertexBaseInstance) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInternalformativ) {
    prototypeCalled = true;
    glContext->m_glGetInternalformativ(target, internalformat, pname, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveAtomicCounterBufferiv) {
    prototypeCalled = true;
    glContext->m_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindImageTexture) {
    prototypeCalled = true;
    glContext->m_glBindImageTexture(unit, texture, level, layered, layer, access, format);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMemoryBarrier(GLbitfield barriers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMemoryBarrier) {
    prototypeCalled = true;
    glContext->m_glMemoryBarrier(barriers);
  }
  if (!prototypeCalled && glContext->m_glMemoryBarrierEXT) {
    prototypeCalled = true;
    glContext->m_glMemoryBarrierEXT(barriers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorage1D) {
    prototypeCalled = true;
    glContext->m_glTexStorage1D(target, levels, internalformat, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorage2D) {
    prototypeCalled = true;
    glContext->m_glTexStorage2D(target, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorage3D) {
    prototypeCalled = true;
    glContext->m_glTexStorage3D(target, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTransformFeedbackInstanced) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedbackInstanced(mode, id, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTransformFeedbackStreamInstanced) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferData) {
    prototypeCalled = true;
    glContext->m_glClearBufferData(target, internalformat, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearBufferSubData) {
    prototypeCalled = true;
    glContext->m_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDispatchCompute) {
    prototypeCalled = true;
    glContext->m_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDispatchComputeIndirect(GLintptr indirect) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDispatchComputeIndirect) {
    prototypeCalled = true;
    glContext->m_glDispatchComputeIndirect(indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyImageSubData) {
    prototypeCalled = true;
    glContext->m_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferParameteri) {
    prototypeCalled = true;
    glContext->m_glFramebufferParameteri(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferParameteriv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInternalformati64v) {
    prototypeCalled = true;
    glContext->m_glGetInternalformati64v(target, internalformat, pname, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateTexSubImage) {
    prototypeCalled = true;
    glContext->m_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateTexImage(GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateTexImage) {
    prototypeCalled = true;
    glContext->m_glInvalidateTexImage(texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateBufferSubData) {
    prototypeCalled = true;
    glContext->m_glInvalidateBufferSubData(buffer, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateBufferData(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateBufferData) {
    prototypeCalled = true;
    glContext->m_glInvalidateBufferData(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateFramebuffer) {
    prototypeCalled = true;
    glContext->m_glInvalidateFramebuffer(target, numAttachments, attachments);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateSubFramebuffer) {
    prototypeCalled = true;
    glContext->m_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirect) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectAMD) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectAMD(mode, indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirect) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectAMD) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectAMD(mode, type, indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramInterfaceiv) {
    prototypeCalled = true;
    glContext->m_glGetProgramInterfaceiv(program, programInterface, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetProgramResourceIndex) {
    prototypeCalled = true;
    result = glContext->m_glGetProgramResourceIndex(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramResourceName) {
    prototypeCalled = true;
    glContext->m_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramResourceiv) {
    prototypeCalled = true;
    glContext->m_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetProgramResourceLocation) {
    prototypeCalled = true;
    result = glContext->m_glGetProgramResourceLocation(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetProgramResourceLocationIndex) {
    prototypeCalled = true;
    result = glContext->m_glGetProgramResourceLocationIndex(program, programInterface, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderStorageBlockBinding) {
    prototypeCalled = true;
    glContext->m_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBufferRange) {
    prototypeCalled = true;
    glContext->m_glTexBufferRange(target, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorage2DMultisample) {
    prototypeCalled = true;
    glContext->m_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorage3DMultisample) {
    prototypeCalled = true;
    glContext->m_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureView) {
    prototypeCalled = true;
    glContext->m_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVertexBuffer) {
    prototypeCalled = true;
    glContext->m_glBindVertexBuffer(bindingindex, buffer, offset, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribFormat) {
    prototypeCalled = true;
    glContext->m_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribIFormat) {
    prototypeCalled = true;
    glContext->m_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribLFormat) {
    prototypeCalled = true;
    glContext->m_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribBinding) {
    prototypeCalled = true;
    glContext->m_glVertexAttribBinding(attribindex, bindingindex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexBindingDivisor) {
    prototypeCalled = true;
    glContext->m_glVertexBindingDivisor(bindingindex, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageControl) {
    prototypeCalled = true;
    glContext->m_glDebugMessageControl(source, type, severity, count, ids, enabled);
  }
  if (!prototypeCalled && glContext->m_glDebugMessageControlARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageInsert) {
    prototypeCalled = true;
    glContext->m_glDebugMessageInsert(source, type, id, severity, length, buf);
  }
  if (!prototypeCalled && glContext->m_glDebugMessageInsertARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageInsertARB(source, type, id, severity, length, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageCallback) {
    prototypeCalled = true;
    glContext->m_glDebugMessageCallback(callback, userParam);
  }
  if (!prototypeCalled && glContext->m_glDebugMessageCallbackARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageCallbackARB((GLDEBUGPROCARB) callback, userParam);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetDebugMessageLog) {
    prototypeCalled = true;
    result = glContext->m_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  if (!prototypeCalled && glContext->m_glGetDebugMessageLogARB) {
    prototypeCalled = true;
    result = glContext->m_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPushDebugGroup) {
    prototypeCalled = true;
    glContext->m_glPushDebugGroup(source, id, length, message);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPopDebugGroup() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPopDebugGroup) {
    prototypeCalled = true;
    glContext->m_glPopDebugGroup();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glObjectLabel) {
    prototypeCalled = true;
    glContext->m_glObjectLabel(identifier, name, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectLabel) {
    prototypeCalled = true;
    glContext->m_glGetObjectLabel(identifier, name, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glObjectPtrLabel) {
    prototypeCalled = true;
    glContext->m_glObjectPtrLabel(ptr, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectPtrLabel) {
    prototypeCalled = true;
    glContext->m_glGetObjectPtrLabel(ptr, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferStorage) {
    prototypeCalled = true;
    glContext->m_glBufferStorage(target, size, data, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearTexImage) {
    prototypeCalled = true;
    glContext->m_glClearTexImage(texture, level, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearTexSubImage) {
    prototypeCalled = true;
    glContext->m_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBuffersBase) {
    prototypeCalled = true;
    glContext->m_glBindBuffersBase(target, first, count, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBuffersRange) {
    prototypeCalled = true;
    glContext->m_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTextures(GLuint first, GLsizei count, const GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTextures) {
    prototypeCalled = true;
    glContext->m_glBindTextures(first, count, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindSamplers) {
    prototypeCalled = true;
    glContext->m_glBindSamplers(first, count, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindImageTextures) {
    prototypeCalled = true;
    glContext->m_glBindImageTextures(first, count, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVertexBuffers) {
    prototypeCalled = true;
    glContext->m_glBindVertexBuffers(first, count, buffers, offsets, strides);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClipControl(GLenum origin, GLenum depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClipControl) {
    prototypeCalled = true;
    glContext->m_glClipControl(origin, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateTransformFeedbacks(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateTransformFeedbacks) {
    prototypeCalled = true;
    glContext->m_glCreateTransformFeedbacks(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackBufferBase) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackBufferBase(xfb, index, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackBufferRange) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbackiv) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbackiv(xfb, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbacki_v) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbacki_v(xfb, pname, index, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbacki64_v) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbacki64_v(xfb, pname, index, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateBuffers(GLsizei n, GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateBuffers) {
    prototypeCalled = true;
    glContext->m_glCreateBuffers(n, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferStorage) {
    prototypeCalled = true;
    glContext->m_glNamedBufferStorage(buffer, size, data, flags);
  }
  if (!prototypeCalled && glContext->m_glNamedBufferStorageEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferStorageEXT(buffer, size, data, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferData) {
    prototypeCalled = true;
    glContext->m_glNamedBufferData(buffer, size, data, usage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferSubData) {
    prototypeCalled = true;
    glContext->m_glNamedBufferSubData(buffer, offset, size, data);
  }
  if (!prototypeCalled && glContext->m_glNamedBufferSubDataEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferSubDataEXT(buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyNamedBufferSubData) {
    prototypeCalled = true;
    glContext->m_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedBufferData) {
    prototypeCalled = true;
    glContext->m_glClearNamedBufferData(buffer, internalformat, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedBufferSubData) {
    prototypeCalled = true;
    glContext->m_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapNamedBuffer(GLuint buffer, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapNamedBuffer) {
    prototypeCalled = true;
    result = glContext->m_glMapNamedBuffer(buffer, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapNamedBufferRange) {
    prototypeCalled = true;
    result = glContext->m_glMapNamedBufferRange(buffer, offset, length, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glUnmapNamedBuffer(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glUnmapNamedBuffer) {
    prototypeCalled = true;
    result = glContext->m_glUnmapNamedBuffer(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushMappedNamedBufferRange) {
    prototypeCalled = true;
    glContext->m_glFlushMappedNamedBufferRange(buffer, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferParameteriv(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferParameteri64v) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferParameteri64v(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferPointerv) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferPointerv(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferSubData) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferSubData(buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateFramebuffers(GLsizei n, GLuint * framebuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateFramebuffers) {
    prototypeCalled = true;
    glContext->m_glCreateFramebuffers(n, framebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferRenderbuffer) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferParameteri) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferParameteri(framebuffer, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTexture) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTexture(framebuffer, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTextureLayer) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferDrawBuffer) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferDrawBuffer(framebuffer, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferDrawBuffers) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferReadBuffer) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferReadBuffer(framebuffer, src);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateNamedFramebufferData) {
    prototypeCalled = true;
    glContext->m_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInvalidateNamedFramebufferSubData) {
    prototypeCalled = true;
    glContext->m_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedFramebufferiv) {
    prototypeCalled = true;
    glContext->m_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedFramebufferuiv) {
    prototypeCalled = true;
    glContext->m_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedFramebufferfv) {
    prototypeCalled = true;
    glContext->m_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedFramebufferfi) {
    prototypeCalled = true;
    glContext->m_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlitNamedFramebuffer) {
    prototypeCalled = true;
    glContext->m_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glCheckNamedFramebufferStatus) {
    prototypeCalled = true;
    result = glContext->m_glCheckNamedFramebufferStatus(framebuffer, target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedFramebufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetNamedFramebufferParameteriv(framebuffer, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedFramebufferAttachmentParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateRenderbuffers) {
    prototypeCalled = true;
    glContext->m_glCreateRenderbuffers(n, renderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorage) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorageMultisample) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedRenderbufferParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateTextures(GLenum target, GLsizei n, GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateTextures) {
    prototypeCalled = true;
    glContext->m_glCreateTextures(target, n, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBuffer) {
    prototypeCalled = true;
    glContext->m_glTextureBuffer(texture, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBufferRange) {
    prototypeCalled = true;
    glContext->m_glTextureBufferRange(texture, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage1D) {
    prototypeCalled = true;
    glContext->m_glTextureStorage1D(texture, levels, internalformat, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage2D) {
    prototypeCalled = true;
    glContext->m_glTextureStorage2D(texture, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage3D) {
    prototypeCalled = true;
    glContext->m_glTextureStorage3D(texture, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage2DMultisample) {
    prototypeCalled = true;
    glContext->m_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage3DMultisample) {
    prototypeCalled = true;
    glContext->m_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage1D) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage2D) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage3D) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage1D) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage2D) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage3D) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage1D) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage2D) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage3D) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterf) {
    prototypeCalled = true;
    glContext->m_glTextureParameterf(texture, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterfv) {
    prototypeCalled = true;
    glContext->m_glTextureParameterfv(texture, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameteri) {
    prototypeCalled = true;
    glContext->m_glTextureParameteri(texture, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterIiv) {
    prototypeCalled = true;
    glContext->m_glTextureParameterIiv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glTextureParameterIuiv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameteriv) {
    prototypeCalled = true;
    glContext->m_glTextureParameteriv(texture, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenerateTextureMipmap(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenerateTextureMipmap) {
    prototypeCalled = true;
    glContext->m_glGenerateTextureMipmap(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTextureUnit(GLuint unit, GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTextureUnit) {
    prototypeCalled = true;
    glContext->m_glBindTextureUnit(unit, texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureImage) {
    prototypeCalled = true;
    glContext->m_glGetTextureImage(texture, level, format, type, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedTextureImage) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTextureImage(texture, level, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureLevelParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetTextureLevelParameterfv(texture, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureLevelParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetTextureLevelParameteriv(texture, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterfv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterIiv) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterIiv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterIuiv) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterIuiv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameteriv(texture, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateVertexArrays(GLsizei n, GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateVertexArrays) {
    prototypeCalled = true;
    glContext->m_glCreateVertexArrays(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexArrayAttrib) {
    prototypeCalled = true;
    glContext->m_glDisableVertexArrayAttrib(vaobj, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexArrayAttrib) {
    prototypeCalled = true;
    glContext->m_glEnableVertexArrayAttrib(vaobj, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayElementBuffer) {
    prototypeCalled = true;
    glContext->m_glVertexArrayElementBuffer(vaobj, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexBuffer) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexBuffers) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayAttribBinding) {
    prototypeCalled = true;
    glContext->m_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayAttribFormat) {
    prototypeCalled = true;
    glContext->m_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayAttribIFormat) {
    prototypeCalled = true;
    glContext->m_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayAttribLFormat) {
    prototypeCalled = true;
    glContext->m_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayBindingDivisor) {
    prototypeCalled = true;
    glContext->m_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayiv) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayiv(vaobj, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayIndexediv) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayIndexediv(vaobj, index, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayIndexed64iv) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateSamplers(GLsizei n, GLuint * samplers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateSamplers) {
    prototypeCalled = true;
    glContext->m_glCreateSamplers(n, samplers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateProgramPipelines(GLsizei n, GLuint * pipelines) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateProgramPipelines) {
    prototypeCalled = true;
    glContext->m_glCreateProgramPipelines(n, pipelines);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateQueries(GLenum target, GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateQueries) {
    prototypeCalled = true;
    glContext->m_glCreateQueries(target, n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryBufferObjecti64v) {
    prototypeCalled = true;
    glContext->m_glGetQueryBufferObjecti64v(id, buffer, pname, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryBufferObjectiv) {
    prototypeCalled = true;
    glContext->m_glGetQueryBufferObjectiv(id, buffer, pname, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryBufferObjectui64v) {
    prototypeCalled = true;
    glContext->m_glGetQueryBufferObjectui64v(id, buffer, pname, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryBufferObjectuiv) {
    prototypeCalled = true;
    glContext->m_glGetQueryBufferObjectuiv(id, buffer, pname, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMemoryBarrierByRegion(GLbitfield barriers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMemoryBarrierByRegion) {
    prototypeCalled = true;
    glContext->m_glMemoryBarrierByRegion(barriers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureSubImage) {
    prototypeCalled = true;
    glContext->m_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedTextureSubImage) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glGetGraphicsResetStatus() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glGetGraphicsResetStatus) {
    prototypeCalled = true;
    result = glContext->m_glGetGraphicsResetStatus();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnCompressedTexImage) {
    prototypeCalled = true;
    glContext->m_glGetnCompressedTexImage(target, lod, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnTexImage) {
    prototypeCalled = true;
    glContext->m_glGetnTexImage(target, level, format, type, bufSize, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformdv) {
    prototypeCalled = true;
    glContext->m_glGetnUniformdv(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformfv) {
    prototypeCalled = true;
    glContext->m_glGetnUniformfv(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformiv) {
    prototypeCalled = true;
    glContext->m_glGetnUniformiv(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformuiv) {
    prototypeCalled = true;
    glContext->m_glGetnUniformuiv(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReadnPixels) {
    prototypeCalled = true;
    glContext->m_glReadnPixels(x, y, width, height, format, type, bufSize, data);
  }
  if (!prototypeCalled && glContext->m_glReadnPixelsARB) {
    prototypeCalled = true;
    glContext->m_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapdv) {
    prototypeCalled = true;
    glContext->m_glGetnMapdv(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapfv) {
    prototypeCalled = true;
    glContext->m_glGetnMapfv(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapiv) {
    prototypeCalled = true;
    glContext->m_glGetnMapiv(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapfv) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapfv(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapuiv) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapuiv(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapusv) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapusv(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPolygonStipple) {
    prototypeCalled = true;
    glContext->m_glGetnPolygonStipple(bufSize, pattern);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnColorTable) {
    prototypeCalled = true;
    glContext->m_glGetnColorTable(target, format, type, bufSize, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnConvolutionFilter) {
    prototypeCalled = true;
    glContext->m_glGetnConvolutionFilter(target, format, type, bufSize, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnSeparableFilter) {
    prototypeCalled = true;
    glContext->m_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnHistogram) {
    prototypeCalled = true;
    glContext->m_glGetnHistogram(target, reset, format, type, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMinmax) {
    prototypeCalled = true;
    glContext->m_glGetnMinmax(target, reset, format, type, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBarrier() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBarrier) {
    prototypeCalled = true;
    glContext->m_glTextureBarrier();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpecializeShader) {
    prototypeCalled = true;
    glContext->m_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  }
  if (!prototypeCalled && glContext->m_glSpecializeShaderARB) {
    prototypeCalled = true;
    glContext->m_glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectCount) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectCountARB) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectCount) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
  }
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectCountARB) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPolygonOffsetClamp) {
    prototypeCalled = true;
    glContext->m_glPolygonOffsetClamp(factor, units, clamp);
  }
  if (!prototypeCalled && glContext->m_glPolygonOffsetClampEXT) {
    prototypeCalled = true;
    glContext->m_glPolygonOffsetClampEXT(factor, units, clamp);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTbufferMask3DFX(GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTbufferMask3DFX) {
    prototypeCalled = true;
    glContext->m_glTbufferMask3DFX(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageEnableAMD) {
    prototypeCalled = true;
    glContext->m_glDebugMessageEnableAMD(category, severity, count, ids, enabled);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageInsertAMD) {
    prototypeCalled = true;
    glContext->m_glDebugMessageInsertAMD(category, severity, id, length, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageCallbackAMD) {
    prototypeCalled = true;
    glContext->m_glDebugMessageCallbackAMD(callback, userParam);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetDebugMessageLogAMD(GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetDebugMessageLogAMD) {
    prototypeCalled = true;
    result = glContext->m_glGetDebugMessageLogAMD(count, bufSize, categories, severities, ids, lengths, message);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendFuncIndexedAMD(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendEquationIndexedAMD(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateIndexedAMD) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorageMultisampleAdvancedAMD) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorageMultisampleAdvancedAMD) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferSamplePositionsfvAMD) {
    prototypeCalled = true;
    glContext->m_glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferSamplePositionsfvAMD) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferParameterfvAMD) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedFramebufferParameterfvAMD) {
    prototypeCalled = true;
    glContext->m_glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1i64NV(GLint location, GLint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1i64NV) {
    prototypeCalled = true;
    glContext->m_glUniform1i64NV(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2i64NV) {
    prototypeCalled = true;
    glContext->m_glUniform2i64NV(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3i64NV) {
    prototypeCalled = true;
    glContext->m_glUniform3i64NV(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4i64NV) {
    prototypeCalled = true;
    glContext->m_glUniform4i64NV(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1i64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform1i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2i64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform2i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3i64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform3i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4i64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform4i64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ui64NV(GLint location, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ui64NV) {
    prototypeCalled = true;
    glContext->m_glUniform1ui64NV(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ui64NV) {
    prototypeCalled = true;
    glContext->m_glUniform2ui64NV(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ui64NV) {
    prototypeCalled = true;
    glContext->m_glUniform3ui64NV(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ui64NV) {
    prototypeCalled = true;
    glContext->m_glUniform4ui64NV(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform1ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform2ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform3ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniform4ui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformi64vNV) {
    prototypeCalled = true;
    glContext->m_glGetUniformi64vNV(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetUniformui64vNV(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1i64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1i64NV(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2i64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2i64NV(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3i64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3i64NV(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4i64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4i64NV(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1i64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2i64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3i64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4i64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4i64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ui64NV(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ui64NV(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ui64NV(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ui64NV(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribParameteriAMD) {
    prototypeCalled = true;
    glContext->m_glVertexAttribParameteriAMD(index, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectAMD) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectAMD) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenNamesAMD) {
    prototypeCalled = true;
    glContext->m_glGenNamesAMD(identifier, num, names);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteNamesAMD) {
    prototypeCalled = true;
    glContext->m_glDeleteNamesAMD(identifier, num, names);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsNameAMD(GLenum identifier, GLuint name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsNameAMD) {
    prototypeCalled = true;
    result = glContext->m_glIsNameAMD(identifier, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glQueryObjectParameteruiAMD) {
    prototypeCalled = true;
    glContext->m_glQueryObjectParameteruiAMD(target, id, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorGroupsAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorCountersAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorGroupStringAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorCounterStringAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorCounterInfoAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenPerfMonitorsAMD) {
    prototypeCalled = true;
    glContext->m_glGenPerfMonitorsAMD(n, monitors);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeletePerfMonitorsAMD) {
    prototypeCalled = true;
    glContext->m_glDeletePerfMonitorsAMD(n, monitors);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSelectPerfMonitorCountersAMD) {
    prototypeCalled = true;
    glContext->m_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginPerfMonitorAMD(GLuint monitor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginPerfMonitorAMD) {
    prototypeCalled = true;
    glContext->m_glBeginPerfMonitorAMD(monitor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndPerfMonitorAMD(GLuint monitor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndPerfMonitorAMD) {
    prototypeCalled = true;
    glContext->m_glEndPerfMonitorAMD(monitor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfMonitorCounterDataAMD) {
    prototypeCalled = true;
    glContext->m_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetMultisamplefvAMD) {
    prototypeCalled = true;
    glContext->m_glSetMultisamplefvAMD(pname, index, val);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageSparseAMD) {
    prototypeCalled = true;
    glContext->m_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageSparseAMD) {
    prototypeCalled = true;
    glContext->m_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilOpValueAMD(GLenum face, GLuint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilOpValueAMD) {
    prototypeCalled = true;
    glContext->m_glStencilOpValueAMD(face, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTessellationFactorAMD(GLfloat factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTessellationFactorAMD) {
    prototypeCalled = true;
    glContext->m_glTessellationFactorAMD(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTessellationModeAMD(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTessellationModeAMD) {
    prototypeCalled = true;
    glContext->m_glTessellationModeAMD(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glElementPointerAPPLE(GLenum type, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glElementPointerAPPLE) {
    prototypeCalled = true;
    glContext->m_glElementPointerAPPLE(type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementArrayAPPLE) {
    prototypeCalled = true;
    glContext->m_glDrawElementArrayAPPLE(mode, first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawRangeElementArrayAPPLE) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementArrayAPPLE) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawRangeElementArrayAPPLE) {
    prototypeCalled = true;
    glContext->m_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenFencesAPPLE(GLsizei n, GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenFencesAPPLE) {
    prototypeCalled = true;
    glContext->m_glGenFencesAPPLE(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteFencesAPPLE(GLsizei n, const GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteFencesAPPLE) {
    prototypeCalled = true;
    glContext->m_glDeleteFencesAPPLE(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetFenceAPPLE(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetFenceAPPLE) {
    prototypeCalled = true;
    glContext->m_glSetFenceAPPLE(fence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsFenceAPPLE(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsFenceAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glIsFenceAPPLE(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glTestFenceAPPLE(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glTestFenceAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glTestFenceAPPLE(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFinishFenceAPPLE(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFinishFenceAPPLE) {
    prototypeCalled = true;
    glContext->m_glFinishFenceAPPLE(fence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glTestObjectAPPLE(GLenum object, GLuint name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glTestObjectAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glTestObjectAPPLE(object, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFinishObjectAPPLE(GLenum object, GLint name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFinishObjectAPPLE) {
    prototypeCalled = true;
    glContext->m_glFinishObjectAPPLE(object, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferParameteriAPPLE) {
    prototypeCalled = true;
    glContext->m_glBufferParameteriAPPLE(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushMappedBufferRangeAPPLE) {
    prototypeCalled = true;
    glContext->m_glFlushMappedBufferRangeAPPLE(target, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glObjectPurgeableAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glObjectPurgeableAPPLE(objectType, name, option);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glObjectUnpurgeableAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glObjectUnpurgeableAPPLE(objectType, name, option);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectParameterivAPPLE) {
    prototypeCalled = true;
    glContext->m_glGetObjectParameterivAPPLE(objectType, name, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureRangeAPPLE) {
    prototypeCalled = true;
    glContext->m_glTextureRangeAPPLE(target, length, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterPointervAPPLE) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterPointervAPPLE(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVertexArrayAPPLE(GLuint array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVertexArrayAPPLE) {
    prototypeCalled = true;
    glContext->m_glBindVertexArrayAPPLE(array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteVertexArraysAPPLE) {
    prototypeCalled = true;
    glContext->m_glDeleteVertexArraysAPPLE(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenVertexArraysAPPLE) {
    prototypeCalled = true;
    glContext->m_glGenVertexArraysAPPLE(n, arrays);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsVertexArrayAPPLE(GLuint array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsVertexArrayAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glIsVertexArrayAPPLE(array);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayRangeAPPLE(GLsizei length, void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayRangeAPPLE) {
    prototypeCalled = true;
    glContext->m_glVertexArrayRangeAPPLE(length, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushVertexArrayRangeAPPLE) {
    prototypeCalled = true;
    glContext->m_glFlushVertexArrayRangeAPPLE(length, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayParameteriAPPLE(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayParameteriAPPLE) {
    prototypeCalled = true;
    glContext->m_glVertexArrayParameteriAPPLE(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexAttribAPPLE(GLuint index, GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexAttribAPPLE) {
    prototypeCalled = true;
    glContext->m_glEnableVertexAttribAPPLE(index, pname);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexAttribAPPLE(GLuint index, GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexAttribAPPLE) {
    prototypeCalled = true;
    glContext->m_glDisableVertexAttribAPPLE(index, pname);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsVertexAttribEnabledAPPLE) {
    prototypeCalled = true;
    result = glContext->m_glIsVertexAttribEnabledAPPLE(index, pname);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapVertexAttrib1dAPPLE) {
    prototypeCalled = true;
    glContext->m_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapVertexAttrib1fAPPLE) {
    prototypeCalled = true;
    glContext->m_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapVertexAttrib2dAPPLE) {
    prototypeCalled = true;
    glContext->m_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapVertexAttrib2fAPPLE) {
    prototypeCalled = true;
    glContext->m_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrimitiveBoundingBoxARB) {
    prototypeCalled = true;
    glContext->m_glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetTextureHandleARB(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetTextureHandleARB) {
    prototypeCalled = true;
    result = glContext->m_glGetTextureHandleARB(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetTextureSamplerHandleARB) {
    prototypeCalled = true;
    result = glContext->m_glGetTextureSamplerHandleARB(texture, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeTextureHandleResidentARB(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeTextureHandleResidentARB) {
    prototypeCalled = true;
    glContext->m_glMakeTextureHandleResidentARB(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeTextureHandleNonResidentARB(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeTextureHandleNonResidentARB) {
    prototypeCalled = true;
    glContext->m_glMakeTextureHandleNonResidentARB(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetImageHandleARB) {
    prototypeCalled = true;
    result = glContext->m_glGetImageHandleARB(texture, level, layered, layer, format);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeImageHandleResidentARB) {
    prototypeCalled = true;
    glContext->m_glMakeImageHandleResidentARB(handle, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeImageHandleNonResidentARB(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeImageHandleNonResidentARB) {
    prototypeCalled = true;
    glContext->m_glMakeImageHandleNonResidentARB(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformHandleui64ARB(GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformHandleui64ARB) {
    prototypeCalled = true;
    glContext->m_glUniformHandleui64ARB(location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformHandleui64vARB) {
    prototypeCalled = true;
    glContext->m_glUniformHandleui64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformHandleui64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniformHandleui64ARB(program, location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformHandleui64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniformHandleui64vARB(program, location, count, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTextureHandleResidentARB(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTextureHandleResidentARB) {
    prototypeCalled = true;
    result = glContext->m_glIsTextureHandleResidentARB(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsImageHandleResidentARB(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsImageHandleResidentARB) {
    prototypeCalled = true;
    result = glContext->m_glIsImageHandleResidentARB(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1ui64ARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1ui64ARB(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1ui64vARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1ui64vARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribLui64vARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLui64vARB(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync _glew_gl_glCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLsync result = ((GLsync)0);
  if (!prototypeCalled && glContext->m_glCreateSyncFromCLeventARB) {
    prototypeCalled = true;
    result = glContext->m_glCreateSyncFromCLeventARB(context, event, flags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClampColorARB(GLenum target, GLenum clamp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClampColorARB) {
    prototypeCalled = true;
    glContext->m_glClampColorARB(target, clamp);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDispatchComputeGroupSizeARB) {
    prototypeCalled = true;
    glContext->m_glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageControlARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageControlARB(source, type, severity, count, ids, enabled);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageInsertARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageInsertARB(source, type, id, severity, length, buf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDebugMessageCallbackARB) {
    prototypeCalled = true;
    glContext->m_glDebugMessageCallbackARB(callback, userParam);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetDebugMessageLogARB) {
    prototypeCalled = true;
    result = glContext->m_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawBuffersARB(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawBuffersARB) {
    prototypeCalled = true;
    glContext->m_glDrawBuffersARB(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationiARB(GLuint buf, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationiARB) {
    prototypeCalled = true;
    glContext->m_glBlendEquationiARB(buf, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateiARB) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFunciARB) {
    prototypeCalled = true;
    glContext->m_glBlendFunciARB(buf, src, dst);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateiARB) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysInstancedARB) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstancedARB(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedARB) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedARB(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramStringARB) {
    prototypeCalled = true;
    glContext->m_glProgramStringARB(target, format, len, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindProgramARB(GLenum target, GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindProgramARB) {
    prototypeCalled = true;
    glContext->m_glBindProgramARB(target, program);
  }
  if (!prototypeCalled && glContext->m_glBindProgramNV) {
    prototypeCalled = true;
    glContext->m_glBindProgramNV(target, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteProgramsARB(GLsizei n, const GLuint * programs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteProgramsARB) {
    prototypeCalled = true;
    glContext->m_glDeleteProgramsARB(n, programs);
  }
  if (!prototypeCalled && glContext->m_glDeleteProgramsNV) {
    prototypeCalled = true;
    glContext->m_glDeleteProgramsNV(n, programs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenProgramsARB(GLsizei n, GLuint * programs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenProgramsARB) {
    prototypeCalled = true;
    glContext->m_glGenProgramsARB(n, programs);
  }
  if (!prototypeCalled && glContext->m_glGenProgramsNV) {
    prototypeCalled = true;
    glContext->m_glGenProgramsNV(n, programs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameter4dARB) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameter4dARB(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameter4dvARB) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameter4dvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameter4fARB) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameter4fARB(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameter4fvARB) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameter4fvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameter4dARB) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameter4dARB(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameter4dvARB) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameter4dvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameter4fARB) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameter4fARB(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameter4fvARB) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameter4fvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramEnvParameterdvARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramEnvParameterdvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramEnvParameterfvARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramEnvParameterfvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramLocalParameterdvARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramLocalParameterdvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramLocalParameterfvARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramLocalParameterfvARB(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramivARB(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramivARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramivARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramStringARB(GLenum target, GLenum pname, void * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramStringARB) {
    prototypeCalled = true;
    glContext->m_glGetProgramStringARB(target, pname, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsProgramARB(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsProgramARB) {
    prototypeCalled = true;
    result = glContext->m_glIsProgramARB(program);
  }
  if (!prototypeCalled && glContext->m_glIsProgramNV) {
    prototypeCalled = true;
    result = glContext->m_glIsProgramNV(program);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameteriARB) {
    prototypeCalled = true;
    glContext->m_glProgramParameteriARB(program, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureARB(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureLayerARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureFaceARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureFaceARB(target, attachment, texture, level, face);
  }
  if (!prototypeCalled && glContext->m_glFramebufferTextureFaceEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpecializeShaderARB) {
    prototypeCalled = true;
    glContext->m_glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1i64ARB(GLint location, GLint64 x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1i64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform1i64ARB(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2i64ARB(GLint location, GLint64 x, GLint64 y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2i64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform2i64ARB(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3i64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform3i64ARB(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4i64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform4i64ARB(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1i64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform1i64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2i64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform2i64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3i64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform3i64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4i64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform4i64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ui64ARB(GLint location, GLuint64 x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ui64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform1ui64ARB(location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ui64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform2ui64ARB(location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ui64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform3ui64ARB(location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ui64ARB) {
    prototypeCalled = true;
    glContext->m_glUniform4ui64ARB(location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ui64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform1ui64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ui64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform2ui64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ui64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform3ui64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ui64vARB) {
    prototypeCalled = true;
    glContext->m_glUniform4ui64vARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformi64vARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformi64vARB(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformui64vARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformui64vARB(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformi64vARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformi64vARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformui64vARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformui64vARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1i64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1i64ARB(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2i64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2i64ARB(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3i64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3i64ARB(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4i64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4i64ARB(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1i64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1i64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2i64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2i64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3i64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3i64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4i64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4i64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ui64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ui64ARB(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ui64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ui64ARB(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ui64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ui64ARB(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ui64ARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ui64ARB(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ui64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ui64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ui64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ui64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ui64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ui64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ui64vARB) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ui64vARB(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTable) {
    prototypeCalled = true;
    glContext->m_glColorTable(target, internalformat, width, format, type, table);
  }
  if (!prototypeCalled && glContext->m_glColorTableEXT) {
    prototypeCalled = true;
    glContext->m_glColorTableEXT(target, internalformat, width, format, type, table);
  }
  if (!prototypeCalled && glContext->m_glColorTableSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableSGI(target, internalformat, width, format, type, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableParameterfv) {
    prototypeCalled = true;
    glContext->m_glColorTableParameterfv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glColorTableParameterfvSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableParameterfvSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableParameteriv) {
    prototypeCalled = true;
    glContext->m_glColorTableParameteriv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glColorTableParameterivSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableParameterivSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyColorTable) {
    prototypeCalled = true;
    glContext->m_glCopyColorTable(target, internalformat, x, y, width);
  }
  if (!prototypeCalled && glContext->m_glCopyColorTableSGI) {
    prototypeCalled = true;
    glContext->m_glCopyColorTableSGI(target, internalformat, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTable(GLenum target, GLenum format, GLenum type, void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTable) {
    prototypeCalled = true;
    glContext->m_glGetColorTable(target, format, type, table);
  }
  if (!prototypeCalled && glContext->m_glGetColorTableEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableEXT(target, format, type, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterfv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetColorTableParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameteriv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glGetColorTableParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorSubTable) {
    prototypeCalled = true;
    glContext->m_glColorSubTable(target, start, count, format, type, data);
  }
  if (!prototypeCalled && glContext->m_glColorSubTableEXT) {
    prototypeCalled = true;
    glContext->m_glColorSubTableEXT(target, start, count, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyColorSubTable) {
    prototypeCalled = true;
    glContext->m_glCopyColorSubTable(target, start, x, y, width);
  }
  if (!prototypeCalled && glContext->m_glCopyColorSubTableEXT) {
    prototypeCalled = true;
    glContext->m_glCopyColorSubTableEXT(target, start, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionFilter1D) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter1D(target, internalformat, width, format, type, image);
  }
  if (!prototypeCalled && glContext->m_glConvolutionFilter1DEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionFilter2D) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
  }
  if (!prototypeCalled && glContext->m_glConvolutionFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterf) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterf(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glConvolutionParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterfEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterfv) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterfv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glConvolutionParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameteri) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameteri(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glConvolutionParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameteriEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameteriv) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameteriv(target, pname, params);
  }
  if (!prototypeCalled && glContext->m_glConvolutionParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter1D) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter1D(target, internalformat, x, y, width);
  }
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter2D) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
  }
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionFilter) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionFilter(target, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionParameterfv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionParameteriv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSeparableFilter) {
    prototypeCalled = true;
    glContext->m_glGetSeparableFilter(target, format, type, row, column, span);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSeparableFilter2D) {
    prototypeCalled = true;
    glContext->m_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
  }
  if (!prototypeCalled && glContext->m_glSeparableFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogram) {
    prototypeCalled = true;
    glContext->m_glGetHistogram(target, reset, format, type, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetHistogramParameterfv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetHistogramParameteriv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmax) {
    prototypeCalled = true;
    glContext->m_glGetMinmax(target, reset, format, type, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmaxParameterfv) {
    prototypeCalled = true;
    glContext->m_glGetMinmaxParameterfv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmaxParameteriv) {
    prototypeCalled = true;
    glContext->m_glGetMinmaxParameteriv(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glHistogram) {
    prototypeCalled = true;
    glContext->m_glHistogram(target, width, internalformat, sink);
  }
  if (!prototypeCalled && glContext->m_glHistogramEXT) {
    prototypeCalled = true;
    glContext->m_glHistogramEXT(target, width, internalformat, sink);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMinmax) {
    prototypeCalled = true;
    glContext->m_glMinmax(target, internalformat, sink);
  }
  if (!prototypeCalled && glContext->m_glMinmaxEXT) {
    prototypeCalled = true;
    glContext->m_glMinmaxEXT(target, internalformat, sink);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResetHistogram(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResetHistogram) {
    prototypeCalled = true;
    glContext->m_glResetHistogram(target);
  }
  if (!prototypeCalled && glContext->m_glResetHistogramEXT) {
    prototypeCalled = true;
    glContext->m_glResetHistogramEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResetMinmax(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResetMinmax) {
    prototypeCalled = true;
    glContext->m_glResetMinmax(target);
  }
  if (!prototypeCalled && glContext->m_glResetMinmaxEXT) {
    prototypeCalled = true;
    glContext->m_glResetMinmaxEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectCountARB) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectCountARB) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribDivisorARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribDivisorARB(index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCurrentPaletteMatrixARB(GLint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCurrentPaletteMatrixARB) {
    prototypeCalled = true;
    glContext->m_glCurrentPaletteMatrixARB(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixIndexubvARB(GLint size, const GLubyte * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixIndexubvARB) {
    prototypeCalled = true;
    glContext->m_glMatrixIndexubvARB(size, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixIndexusvARB(GLint size, const GLushort * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixIndexusvARB) {
    prototypeCalled = true;
    glContext->m_glMatrixIndexusvARB(size, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixIndexuivARB(GLint size, const GLuint * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixIndexuivARB) {
    prototypeCalled = true;
    glContext->m_glMatrixIndexuivARB(size, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixIndexPointerARB) {
    prototypeCalled = true;
    glContext->m_glMatrixIndexPointerARB(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleCoverageARB(GLfloat value, GLboolean invert) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleCoverageARB) {
    prototypeCalled = true;
    glContext->m_glSampleCoverageARB(value, invert);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveTextureARB(GLenum texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveTextureARB) {
    prototypeCalled = true;
    glContext->m_glActiveTextureARB(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClientActiveTextureARB(GLenum texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClientActiveTextureARB) {
    prototypeCalled = true;
    glContext->m_glClientActiveTextureARB(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1dARB(GLenum target, GLdouble s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1dARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1dvARB(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1fARB(GLenum target, GLfloat s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1fARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1fvARB(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1iARB(GLenum target, GLint s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1iARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1ivARB(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1sARB(GLenum target, GLshort s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1sARB(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1svARB(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2dARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2dvARB(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2fARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2fvARB(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2iARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2ivARB(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2sARB(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2svARB(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3dARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3dvARB(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3fARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3fvARB(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3iARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3ivARB(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3sARB(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3svARB(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4dARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4dARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4dvARB(GLenum target, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4dvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4dvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4fARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4fARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4fvARB(GLenum target, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4fvARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4fvARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4iARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4iARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4ivARB(GLenum target, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4ivARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4ivARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4sARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4sARB(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4svARB(GLenum target, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4svARB) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4svARB(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenQueriesARB(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenQueriesARB) {
    prototypeCalled = true;
    glContext->m_glGenQueriesARB(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteQueriesARB(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteQueriesARB) {
    prototypeCalled = true;
    glContext->m_glDeleteQueriesARB(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsQueryARB(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsQueryARB) {
    prototypeCalled = true;
    result = glContext->m_glIsQueryARB(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginQueryARB(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginQueryARB) {
    prototypeCalled = true;
    glContext->m_glBeginQueryARB(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndQueryARB(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndQueryARB) {
    prototypeCalled = true;
    glContext->m_glEndQueryARB(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryivARB(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryivARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectivARB(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectuivARB) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectuivARB(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMaxShaderCompilerThreadsARB(GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMaxShaderCompilerThreadsARB) {
    prototypeCalled = true;
    glContext->m_glMaxShaderCompilerThreadsARB(count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfARB(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfARB) {
    prototypeCalled = true;
    glContext->m_glPointParameterfARB(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfvARB(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfvARB) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvARB(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glGetGraphicsResetStatusARB() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glGetGraphicsResetStatusARB) {
    prototypeCalled = true;
    result = glContext->m_glGetGraphicsResetStatusARB();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnTexImageARB) {
    prototypeCalled = true;
    glContext->m_glGetnTexImageARB(target, level, format, type, bufSize, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReadnPixelsARB) {
    prototypeCalled = true;
    glContext->m_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnCompressedTexImageARB) {
    prototypeCalled = true;
    glContext->m_glGetnCompressedTexImageARB(target, lod, bufSize, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformfvARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformfvARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformivARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformivARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformuivARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformuivARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnUniformdvARB) {
    prototypeCalled = true;
    glContext->m_glGetnUniformdvARB(program, location, bufSize, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapdvARB) {
    prototypeCalled = true;
    glContext->m_glGetnMapdvARB(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapfvARB) {
    prototypeCalled = true;
    glContext->m_glGetnMapfvARB(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMapivARB) {
    prototypeCalled = true;
    glContext->m_glGetnMapivARB(target, query, bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapfvARB) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapfvARB(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapuivARB) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapuivARB(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPixelMapusvARB) {
    prototypeCalled = true;
    glContext->m_glGetnPixelMapusvARB(map, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnPolygonStippleARB) {
    prototypeCalled = true;
    glContext->m_glGetnPolygonStippleARB(bufSize, pattern);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnColorTableARB) {
    prototypeCalled = true;
    glContext->m_glGetnColorTableARB(target, format, type, bufSize, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnConvolutionFilterARB) {
    prototypeCalled = true;
    glContext->m_glGetnConvolutionFilterARB(target, format, type, bufSize, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnSeparableFilterARB) {
    prototypeCalled = true;
    glContext->m_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnHistogramARB) {
    prototypeCalled = true;
    glContext->m_glGetnHistogramARB(target, reset, format, type, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetnMinmaxARB) {
    prototypeCalled = true;
    glContext->m_glGetnMinmaxARB(target, reset, format, type, bufSize, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferSampleLocationsfvARB) {
    prototypeCalled = true;
    glContext->m_glFramebufferSampleLocationsfvARB(target, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferSampleLocationsfvARB) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvaluateDepthValuesARB() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvaluateDepthValuesARB) {
    prototypeCalled = true;
    glContext->m_glEvaluateDepthValuesARB();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMinSampleShadingARB(GLfloat value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMinSampleShadingARB) {
    prototypeCalled = true;
    glContext->m_glMinSampleShadingARB(value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteObjectARB(GLhandleARB obj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteObjectARB) {
    prototypeCalled = true;
    glContext->m_glDeleteObjectARB(obj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLhandleARB _glew_gl_glGetHandleARB(GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLhandleARB result = ((GLhandleARB)0);
  if (!prototypeCalled && glContext->m_glGetHandleARB) {
    prototypeCalled = true;
    result = glContext->m_glGetHandleARB(pname);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDetachObjectARB) {
    prototypeCalled = true;
    glContext->m_glDetachObjectARB(containerObj, attachedObj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLhandleARB _glew_gl_glCreateShaderObjectARB(GLenum shaderType) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLhandleARB result = ((GLhandleARB)0);
  if (!prototypeCalled && glContext->m_glCreateShaderObjectARB) {
    prototypeCalled = true;
    result = glContext->m_glCreateShaderObjectARB(shaderType);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderSourceARB) {
    prototypeCalled = true;
    glContext->m_glShaderSourceARB(shaderObj, count, string, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompileShaderARB(GLhandleARB shaderObj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompileShaderARB) {
    prototypeCalled = true;
    glContext->m_glCompileShaderARB(shaderObj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLhandleARB _glew_gl_glCreateProgramObjectARB() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLhandleARB result = ((GLhandleARB)0);
  if (!prototypeCalled && glContext->m_glCreateProgramObjectARB) {
    prototypeCalled = true;
    result = glContext->m_glCreateProgramObjectARB();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAttachObjectARB) {
    prototypeCalled = true;
    glContext->m_glAttachObjectARB(containerObj, obj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLinkProgramARB(GLhandleARB programObj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLinkProgramARB) {
    prototypeCalled = true;
    glContext->m_glLinkProgramARB(programObj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUseProgramObjectARB(GLhandleARB programObj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUseProgramObjectARB) {
    prototypeCalled = true;
    glContext->m_glUseProgramObjectARB(programObj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glValidateProgramARB(GLhandleARB programObj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glValidateProgramARB) {
    prototypeCalled = true;
    glContext->m_glValidateProgramARB(programObj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1fARB(GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1fARB) {
    prototypeCalled = true;
    glContext->m_glUniform1fARB(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2fARB) {
    prototypeCalled = true;
    glContext->m_glUniform2fARB(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3fARB) {
    prototypeCalled = true;
    glContext->m_glUniform3fARB(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4fARB) {
    prototypeCalled = true;
    glContext->m_glUniform4fARB(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1iARB(GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1iARB) {
    prototypeCalled = true;
    glContext->m_glUniform1iARB(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2iARB(GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2iARB) {
    prototypeCalled = true;
    glContext->m_glUniform2iARB(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3iARB) {
    prototypeCalled = true;
    glContext->m_glUniform3iARB(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4iARB) {
    prototypeCalled = true;
    glContext->m_glUniform4iARB(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform1fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform2fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform3fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4fvARB) {
    prototypeCalled = true;
    glContext->m_glUniform4fvARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1ivARB(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform1ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2ivARB(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform2ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3ivARB(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform3ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4ivARB(GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4ivARB) {
    prototypeCalled = true;
    glContext->m_glUniform4ivARB(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix2fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix2fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix3fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix3fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformMatrix4fvARB) {
    prototypeCalled = true;
    glContext->m_glUniformMatrix4fvARB(location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectParameterfvARB) {
    prototypeCalled = true;
    glContext->m_glGetObjectParameterfvARB(obj, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectParameterivARB) {
    prototypeCalled = true;
    glContext->m_glGetObjectParameterivARB(obj, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInfoLogARB) {
    prototypeCalled = true;
    glContext->m_glGetInfoLogARB(obj, maxLength, length, infoLog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetAttachedObjectsARB) {
    prototypeCalled = true;
    glContext->m_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetUniformLocationARB) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformLocationARB(programObj, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveUniformARB) {
    prototypeCalled = true;
    glContext->m_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformfvARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformfvARB(programObj, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformivARB) {
    prototypeCalled = true;
    glContext->m_glGetUniformivARB(programObj, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShaderSourceARB) {
    prototypeCalled = true;
    glContext->m_glGetShaderSourceARB(obj, maxLength, length, source);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedStringARB) {
    prototypeCalled = true;
    glContext->m_glNamedStringARB(type, namelen, name, stringlen, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteNamedStringARB(GLint namelen, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteNamedStringARB) {
    prototypeCalled = true;
    glContext->m_glDeleteNamedStringARB(namelen, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompileShaderIncludeARB) {
    prototypeCalled = true;
    glContext->m_glCompileShaderIncludeARB(shader, count, path, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsNamedStringARB(GLint namelen, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsNamedStringARB) {
    prototypeCalled = true;
    result = glContext->m_glIsNamedStringARB(namelen, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedStringARB) {
    prototypeCalled = true;
    glContext->m_glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedStringivARB) {
    prototypeCalled = true;
    glContext->m_glGetNamedStringivARB(namelen, name, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferPageCommitmentARB) {
    prototypeCalled = true;
    glContext->m_glBufferPageCommitmentARB(target, offset, size, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferPageCommitmentEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferPageCommitmentARB) {
    prototypeCalled = true;
    glContext->m_glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexPageCommitmentARB) {
    prototypeCalled = true;
    glContext->m_glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBufferARB) {
    prototypeCalled = true;
    glContext->m_glTexBufferARB(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage3DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage2DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexImage1DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage3DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage2DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTexSubImage1DARB) {
    prototypeCalled = true;
    glContext->m_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedTexImageARB(GLenum target, GLint level, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedTexImageARB) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTexImageARB(target, level, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadTransposeMatrixfARB(const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixfARB) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixfARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadTransposeMatrixdARB(const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixdARB) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixdARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultTransposeMatrixfARB(const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixfARB) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixfARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultTransposeMatrixdARB(const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixdARB) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixdARB(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightbvARB(GLint size, const GLbyte * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightbvARB) {
    prototypeCalled = true;
    glContext->m_glWeightbvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightsvARB(GLint size, const GLshort * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightsvARB) {
    prototypeCalled = true;
    glContext->m_glWeightsvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightivARB(GLint size, const GLint * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightivARB) {
    prototypeCalled = true;
    glContext->m_glWeightivARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightfvARB(GLint size, const GLfloat * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightfvARB) {
    prototypeCalled = true;
    glContext->m_glWeightfvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightdvARB(GLint size, const GLdouble * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightdvARB) {
    prototypeCalled = true;
    glContext->m_glWeightdvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightubvARB(GLint size, const GLubyte * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightubvARB) {
    prototypeCalled = true;
    glContext->m_glWeightubvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightusvARB(GLint size, const GLushort * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightusvARB) {
    prototypeCalled = true;
    glContext->m_glWeightusvARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightuivARB(GLint size, const GLuint * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightuivARB) {
    prototypeCalled = true;
    glContext->m_glWeightuivARB(size, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightPointerARB) {
    prototypeCalled = true;
    glContext->m_glWeightPointerARB(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexBlendARB(GLint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexBlendARB) {
    prototypeCalled = true;
    glContext->m_glVertexBlendARB(count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferARB(GLenum target, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferARB) {
    prototypeCalled = true;
    glContext->m_glBindBufferARB(target, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteBuffersARB(GLsizei n, const GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteBuffersARB) {
    prototypeCalled = true;
    glContext->m_glDeleteBuffersARB(n, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenBuffersARB(GLsizei n, GLuint * buffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenBuffersARB) {
    prototypeCalled = true;
    glContext->m_glGenBuffersARB(n, buffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsBufferARB(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glIsBufferARB(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferDataARB) {
    prototypeCalled = true;
    glContext->m_glBufferDataARB(target, size, data, usage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferSubDataARB) {
    prototypeCalled = true;
    glContext->m_glBufferSubDataARB(target, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferSubDataARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferSubDataARB(target, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapBufferARB(GLenum target, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glMapBufferARB(target, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glUnmapBufferARB(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glUnmapBufferARB) {
    prototypeCalled = true;
    result = glContext->m_glUnmapBufferARB(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferParameterivARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferParameterivARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferPointervARB(GLenum target, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferPointervARB) {
    prototypeCalled = true;
    glContext->m_glGetBufferPointervARB(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1dARB(GLuint index, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dARB(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1dvARB(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1fARB(GLuint index, GLfloat x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fARB(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1fvARB(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1sARB(GLuint index, GLshort x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1sARB(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1svARB(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1svARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dARB(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2dvARB(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fARB(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2fvARB(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2sARB(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2svARB(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2svARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dARB(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3dvARB(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fARB(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3fvARB(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3sARB(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3svARB(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3svARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NbvARB(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NbvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NbvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NivARB(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NsvARB(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NsvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NsvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NubARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NubARB(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NubvARB(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NubvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NubvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NuivARB(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NuivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NuivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4NusvARB(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4NusvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4NusvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4bvARB(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4bvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4bvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4dARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dARB(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4dvARB(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4dvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4fARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fARB(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4fvARB(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4fvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4ivARB(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4ivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4sARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4sARB(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4svARB(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4svARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4svARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4ubvARB(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4uivARB(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4uivARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4uivARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4usvARB(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4usvARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4usvARB(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribPointerARB) {
    prototypeCalled = true;
    glContext->m_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexAttribArrayARB(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexAttribArrayARB) {
    prototypeCalled = true;
    glContext->m_glEnableVertexAttribArrayARB(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexAttribArrayARB(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexAttribArrayARB) {
    prototypeCalled = true;
    glContext->m_glDisableVertexAttribArrayARB(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribdvARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribdvARB(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribfvARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribfvARB(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribivARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribivARB(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribPointervARB) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribPointervARB(index, pname, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindAttribLocationARB) {
    prototypeCalled = true;
    glContext->m_glBindAttribLocationARB(programObj, index, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveAttribARB) {
    prototypeCalled = true;
    glContext->m_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetAttribLocationARB) {
    prototypeCalled = true;
    result = glContext->m_glGetAttribLocationARB(programObj, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangeArraydvNV(GLuint first, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangeArraydvNV) {
    prototypeCalled = true;
    glContext->m_glDepthRangeArraydvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangeIndexeddNV) {
    prototypeCalled = true;
    glContext->m_glDepthRangeIndexeddNV(index, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2dARB(GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2dARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dARB(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2dvARB(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2dvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dvARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2fARB(GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2fARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fARB(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2fvARB(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2fvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fvARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2iARB(GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2iARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2iARB(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2ivARB(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2ivARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2ivARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2sARB(GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2sARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2sARB(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2svARB(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2svARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos2svARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3dARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dARB(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3dvARB(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3dvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dvARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3fARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fARB(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3fvARB(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3fvARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fvARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3iARB(GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3iARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3iARB(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3ivARB(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3ivARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3ivARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3sARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3sARB(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3svARB(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3svARB) {
    prototypeCalled = true;
    glContext->m_glWindowPos3svARB(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawBuffersATI(GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawBuffersATI) {
    prototypeCalled = true;
    glContext->m_glDrawBuffersATI(n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glElementPointerATI(GLenum type, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glElementPointerATI) {
    prototypeCalled = true;
    glContext->m_glElementPointerATI(type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementArrayATI(GLenum mode, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementArrayATI) {
    prototypeCalled = true;
    glContext->m_glDrawElementArrayATI(mode, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawRangeElementArrayATI) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElementArrayATI(mode, start, end, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBumpParameterivATI(GLenum pname, const GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBumpParameterivATI) {
    prototypeCalled = true;
    glContext->m_glTexBumpParameterivATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBumpParameterfvATI(GLenum pname, const GLfloat * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBumpParameterfvATI) {
    prototypeCalled = true;
    glContext->m_glTexBumpParameterfvATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexBumpParameterivATI(GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexBumpParameterivATI) {
    prototypeCalled = true;
    glContext->m_glGetTexBumpParameterivATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexBumpParameterfvATI) {
    prototypeCalled = true;
    glContext->m_glGetTexBumpParameterfvATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGenFragmentShadersATI(GLuint range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGenFragmentShadersATI) {
    prototypeCalled = true;
    result = glContext->m_glGenFragmentShadersATI(range);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFragmentShaderATI(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFragmentShaderATI) {
    prototypeCalled = true;
    glContext->m_glBindFragmentShaderATI(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteFragmentShaderATI(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteFragmentShaderATI) {
    prototypeCalled = true;
    glContext->m_glDeleteFragmentShaderATI(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginFragmentShaderATI() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginFragmentShaderATI) {
    prototypeCalled = true;
    glContext->m_glBeginFragmentShaderATI();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndFragmentShaderATI() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndFragmentShaderATI) {
    prototypeCalled = true;
    glContext->m_glEndFragmentShaderATI();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPassTexCoordATI) {
    prototypeCalled = true;
    glContext->m_glPassTexCoordATI(dst, coord, swizzle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleMapATI) {
    prototypeCalled = true;
    glContext->m_glSampleMapATI(dst, interp, swizzle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorFragmentOp1ATI) {
    prototypeCalled = true;
    glContext->m_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorFragmentOp2ATI) {
    prototypeCalled = true;
    glContext->m_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorFragmentOp3ATI) {
    prototypeCalled = true;
    glContext->m_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAlphaFragmentOp1ATI) {
    prototypeCalled = true;
    glContext->m_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAlphaFragmentOp2ATI) {
    prototypeCalled = true;
    glContext->m_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAlphaFragmentOp3ATI) {
    prototypeCalled = true;
    glContext->m_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetFragmentShaderConstantATI) {
    prototypeCalled = true;
    glContext->m_glSetFragmentShaderConstantATI(dst, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapObjectBufferATI(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapObjectBufferATI) {
    prototypeCalled = true;
    result = glContext->m_glMapObjectBufferATI(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUnmapObjectBufferATI(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUnmapObjectBufferATI) {
    prototypeCalled = true;
    glContext->m_glUnmapObjectBufferATI(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPNTrianglesiATI(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPNTrianglesiATI) {
    prototypeCalled = true;
    glContext->m_glPNTrianglesiATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPNTrianglesfATI(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPNTrianglesfATI) {
    prototypeCalled = true;
    glContext->m_glPNTrianglesfATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilOpSeparateATI) {
    prototypeCalled = true;
    glContext->m_glStencilOpSeparateATI(face, sfail, dpfail, dppass);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilFuncSeparateATI) {
    prototypeCalled = true;
    glContext->m_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glNewObjectBufferATI) {
    prototypeCalled = true;
    result = glContext->m_glNewObjectBufferATI(size, pointer, usage);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsObjectBufferATI(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsObjectBufferATI) {
    prototypeCalled = true;
    result = glContext->m_glIsObjectBufferATI(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUpdateObjectBufferATI) {
    prototypeCalled = true;
    glContext->m_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectBufferfvATI) {
    prototypeCalled = true;
    glContext->m_glGetObjectBufferfvATI(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectBufferivATI) {
    prototypeCalled = true;
    glContext->m_glGetObjectBufferivATI(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFreeObjectBufferATI(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFreeObjectBufferATI) {
    prototypeCalled = true;
    glContext->m_glFreeObjectBufferATI(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glArrayObjectATI) {
    prototypeCalled = true;
    glContext->m_glArrayObjectATI(array, size, type, stride, buffer, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetArrayObjectfvATI) {
    prototypeCalled = true;
    glContext->m_glGetArrayObjectfvATI(array, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetArrayObjectivATI) {
    prototypeCalled = true;
    glContext->m_glGetArrayObjectivATI(array, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantArrayObjectATI) {
    prototypeCalled = true;
    glContext->m_glVariantArrayObjectATI(id, type, stride, buffer, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantArrayObjectfvATI) {
    prototypeCalled = true;
    glContext->m_glGetVariantArrayObjectfvATI(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantArrayObjectivATI) {
    prototypeCalled = true;
    glContext->m_glGetVariantArrayObjectivATI(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribArrayObjectATI) {
    prototypeCalled = true;
    glContext->m_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribArrayObjectfvATI) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribArrayObjectfvATI(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribArrayObjectivATI) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribArrayObjectivATI(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1sATI(GLenum stream, GLshort x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1sATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1sATI(stream, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1svATI(GLenum stream, const GLshort * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1svATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1svATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1iATI(GLenum stream, GLint x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1iATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1iATI(stream, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1ivATI(GLenum stream, const GLint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1ivATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1ivATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1fATI(GLenum stream, GLfloat x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1fATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1fATI(stream, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1fvATI(GLenum stream, const GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1fvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1fvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1dATI(GLenum stream, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1dATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1dATI(stream, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream1dvATI(GLenum stream, const GLdouble * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream1dvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream1dvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2sATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2sATI(stream, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2svATI(GLenum stream, const GLshort * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2svATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2svATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2iATI(GLenum stream, GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2iATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2iATI(stream, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2ivATI(GLenum stream, const GLint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2ivATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2ivATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2fATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2fATI(stream, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2fvATI(GLenum stream, const GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2fvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2fvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2dATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2dATI(stream, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream2dvATI(GLenum stream, const GLdouble * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream2dvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream2dvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3sATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3sATI(stream, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3svATI(GLenum stream, const GLshort * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3svATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3svATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3iATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3iATI(stream, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3ivATI(GLenum stream, const GLint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3ivATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3ivATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3fATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3fATI(stream, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3fvATI(GLenum stream, const GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3fvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3fvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3dATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3dATI(stream, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream3dvATI(GLenum stream, const GLdouble * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream3dvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream3dvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4sATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4sATI(stream, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4svATI(GLenum stream, const GLshort * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4svATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4svATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4iATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4iATI(stream, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4ivATI(GLenum stream, const GLint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4ivATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4ivATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4fATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4fATI(stream, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4fvATI(GLenum stream, const GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4fvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4fvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4dATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4dATI(stream, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexStream4dvATI(GLenum stream, const GLdouble * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexStream4dvATI) {
    prototypeCalled = true;
    glContext->m_glVertexStream4dvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3bATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3bATI(stream, nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3bvATI(GLenum stream, const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3bvATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3bvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3sATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3sATI(stream, nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3svATI(GLenum stream, const GLshort * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3svATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3svATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3iATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3iATI(stream, nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3ivATI(GLenum stream, const GLint * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3ivATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3ivATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3fATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3fATI(stream, nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3fvATI(GLenum stream, const GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3fvATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3fvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3dATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3dATI(stream, nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalStream3dvATI(GLenum stream, const GLdouble * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalStream3dvATI) {
    prototypeCalled = true;
    glContext->m_glNormalStream3dvATI(stream, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClientActiveVertexStreamATI(GLenum stream) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClientActiveVertexStreamATI) {
    prototypeCalled = true;
    glContext->m_glClientActiveVertexStreamATI(stream);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexBlendEnviATI(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexBlendEnviATI) {
    prototypeCalled = true;
    glContext->m_glVertexBlendEnviATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexBlendEnvfATI(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexBlendEnvfATI) {
    prototypeCalled = true;
    glContext->m_glVertexBlendEnvfATI(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEGLImageTargetTexStorageEXT) {
    prototypeCalled = true;
    glContext->m_glEGLImageTargetTexStorageEXT(target, image, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEGLImageTargetTextureStorageEXT) {
    prototypeCalled = true;
    glContext->m_glEGLImageTargetTextureStorageEXT(texture, image, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformBufferEXT) {
    prototypeCalled = true;
    glContext->m_glUniformBufferEXT(program, location, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetUniformBufferSizeEXT(GLuint program, GLint location) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetUniformBufferSizeEXT) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformBufferSizeEXT(program, location);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLintptr _glew_gl_glGetUniformOffsetEXT(GLuint program, GLint location) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLintptr result = ((GLintptr)0);
  if (!prototypeCalled && glContext->m_glGetUniformOffsetEXT) {
    prototypeCalled = true;
    result = glContext->m_glGetUniformOffsetEXT(program, location);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendColorEXT) {
    prototypeCalled = true;
    glContext->m_glBlendColorEXT(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationSeparateEXT) {
    prototypeCalled = true;
    glContext->m_glBlendEquationSeparateEXT(modeRGB, modeAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateEXT) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendEquationEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendEquationEXT) {
    prototypeCalled = true;
    glContext->m_glBlendEquationEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorSubTableEXT) {
    prototypeCalled = true;
    glContext->m_glColorSubTableEXT(target, start, count, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyColorSubTableEXT) {
    prototypeCalled = true;
    glContext->m_glCopyColorSubTableEXT(target, start, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLockArraysEXT(GLint first, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLockArraysEXT) {
    prototypeCalled = true;
    glContext->m_glLockArraysEXT(first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUnlockArraysEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUnlockArraysEXT) {
    prototypeCalled = true;
    glContext->m_glUnlockArraysEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionFilter1DEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterfEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameteriEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyConvolutionFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionFilterEXT) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionFilterEXT(target, format, type, image);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSeparableFilterEXT) {
    prototypeCalled = true;
    glContext->m_glGetSeparableFilterEXT(target, format, type, row, column, span);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSeparableFilter2DEXT) {
    prototypeCalled = true;
    glContext->m_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3bEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3bEXT(tx, ty, tz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3bvEXT(const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3bvEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3bvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3dEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3dEXT(tx, ty, tz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3dvEXT(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3dvEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3dvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3fEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3fEXT(tx, ty, tz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3fvEXT(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3fvEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3fvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3iEXT(GLint tx, GLint ty, GLint tz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3iEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3iEXT(tx, ty, tz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3ivEXT(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3ivEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3ivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3sEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3sEXT(tx, ty, tz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangent3svEXT(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangent3svEXT) {
    prototypeCalled = true;
    glContext->m_glTangent3svEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3bEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3bEXT(bx, by, bz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3bvEXT(const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3bvEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3bvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3dEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3dEXT(bx, by, bz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3dvEXT(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3dvEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3dvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3fEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3fEXT(bx, by, bz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3fvEXT(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3fvEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3fvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3iEXT(GLint bx, GLint by, GLint bz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3iEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3iEXT(bx, by, bz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3ivEXT(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3ivEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3ivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3sEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3sEXT(bx, by, bz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormal3svEXT(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormal3svEXT) {
    prototypeCalled = true;
    glContext->m_glBinormal3svEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTangentPointerEXT) {
    prototypeCalled = true;
    glContext->m_glTangentPointerEXT(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBinormalPointerEXT) {
    prototypeCalled = true;
    glContext->m_glBinormalPointerEXT(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCullParameterdvEXT(GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCullParameterdvEXT) {
    prototypeCalled = true;
    glContext->m_glCullParameterdvEXT(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCullParameterfvEXT(GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCullParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glCullParameterfvEXT(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLabelObjectEXT) {
    prototypeCalled = true;
    glContext->m_glLabelObjectEXT(type, object, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetObjectLabelEXT) {
    prototypeCalled = true;
    glContext->m_glGetObjectLabelEXT(type, object, bufSize, length, label);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInsertEventMarkerEXT(GLsizei length, const GLchar * marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInsertEventMarkerEXT) {
    prototypeCalled = true;
    glContext->m_glInsertEventMarkerEXT(length, marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPushGroupMarkerEXT(GLsizei length, const GLchar * marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPushGroupMarkerEXT) {
    prototypeCalled = true;
    glContext->m_glPushGroupMarkerEXT(length, marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPopGroupMarkerEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPopGroupMarkerEXT) {
    prototypeCalled = true;
    glContext->m_glPopGroupMarkerEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthBoundsEXT) {
    prototypeCalled = true;
    glContext->m_glDepthBoundsEXT(zmin, zmax);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoadfEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoadfEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixLoadfEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoaddEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoaddEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixLoaddEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMultfEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMultfEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixMultfEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMultdEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMultdEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixMultdEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoadIdentityEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoadIdentityEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixLoadIdentityEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixRotatefEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixRotatefEXT(mode, angle, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixRotatedEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixRotatedEXT(mode, angle, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixScalefEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixScalefEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixScaledEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixScaledEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixTranslatefEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixTranslatefEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixTranslatedEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixTranslatedEXT(mode, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixFrustumEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixOrthoEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixPopEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixPopEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixPopEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixPushEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixPushEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixPushEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClientAttribDefaultEXT(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClientAttribDefaultEXT) {
    prototypeCalled = true;
    glContext->m_glClientAttribDefaultEXT(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPushClientAttribDefaultEXT(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPushClientAttribDefaultEXT) {
    prototypeCalled = true;
    glContext->m_glPushClientAttribDefaultEXT(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameterfEXT(texture, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameterfvEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameteriEXT(texture, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameterivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureImageEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureImageEXT(texture, target, level, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterfvEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureLevelParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureLevelParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyTextureSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindMultiTextureEXT) {
    prototypeCalled = true;
    glContext->m_glBindMultiTextureEXT(texunit, target, texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoordPointerEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexEnvfEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexEnvfEXT(texunit, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexEnvfvEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexEnvfvEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexEnviEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexEnviEXT(texunit, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexEnvivEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexEnvivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGendEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGendEXT(texunit, coord, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGendvEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGendvEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGenfEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGenfEXT(texunit, coord, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGenfvEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGenfvEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGeniEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGeniEXT(texunit, coord, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexGenivEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexGenivEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexEnvfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexEnvfvEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexEnvivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexEnvivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexGendvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexGendvEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexGenfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexGenfvEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexGenivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexGenivEXT(texunit, coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameteriEXT(texunit, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameterivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameterfEXT(texunit, target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameterfvEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyMultiTexImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyMultiTexImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyMultiTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyMultiTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexImageEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexParameterfvEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexParameterivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexLevelParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexLevelParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyMultiTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableClientStateIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glEnableClientStateIndexedEXT(array, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableClientStateIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glDisableClientStateIndexedEXT(array, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFloatIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetFloatIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetDoubleIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetDoubleIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPointerIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetPointerIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableIndexedEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glEnableIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableIndexedEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glDisableIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsEnabledIndexedEXT(GLenum target, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsEnabledIndexedEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsEnabledIndexedEXT(target, index);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetIntegerIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetIntegerIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBooleanIndexedvEXT) {
    prototypeCalled = true;
    glContext->m_glGetBooleanIndexedvEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedTextureSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedTextureImageEXT) {
    prototypeCalled = true;
    glContext->m_glGetCompressedTextureImageEXT(texture, target, lod, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompressedMultiTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCompressedMultiTexImageEXT) {
    prototypeCalled = true;
    glContext->m_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoadTransposefEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixLoadTransposefEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoadTransposedEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixLoadTransposedEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMultTransposefEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixMultTransposefEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMultTransposedEXT) {
    prototypeCalled = true;
    glContext->m_glMatrixMultTransposedEXT(mode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferDataEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferDataEXT(buffer, size, data, usage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferSubDataEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferSubDataEXT(buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapNamedBufferEXT(GLuint buffer, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapNamedBufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glMapNamedBufferEXT(buffer, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glUnmapNamedBufferEXT(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glUnmapNamedBufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glUnmapNamedBufferEXT(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferParameterivEXT(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferPointervEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferPointervEXT(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferSubDataEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferSubDataEXT(buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1fEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2fEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3fEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4fEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1iEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2iEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3iEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4iEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4fvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4ivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4ivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x2fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x3fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBufferEXT) {
    prototypeCalled = true;
    glContext->m_glTextureBufferEXT(texture, target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexBufferEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexBufferEXT(texunit, target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameterIivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glTextureParameterIuivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterIivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTextureParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTextureParameterIuivEXT(texture, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameterIivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexParameterIuivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexParameterIivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultiTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1uiEXT(program, location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2uiEXT(program, location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3uiEXT(program, location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4uiEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4uivEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4uivEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameters4fvEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameterI4iEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameterI4ivEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParametersI4ivEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameterI4uiEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameterI4uivEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParametersI4uivEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramLocalParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramLocalParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableClientStateiEXT(GLenum array, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableClientStateiEXT) {
    prototypeCalled = true;
    glContext->m_glEnableClientStateiEXT(array, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableClientStateiEXT(GLenum array, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableClientStateiEXT) {
    prototypeCalled = true;
    glContext->m_glDisableClientStateiEXT(array, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFloati_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetFloati_vEXT(pname, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetDoublei_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetDoublei_vEXT(pname, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPointeri_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetPointeri_vEXT(pname, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramStringEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramStringEXT(program, target, format, len, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameter4dEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameter4dvEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameter4dvEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameter4fEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedProgramLocalParameter4fvEXT) {
    prototypeCalled = true;
    glContext->m_glNamedProgramLocalParameter4fvEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramLocalParameterdvEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramLocalParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramivEXT(program, target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedProgramStringEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedProgramStringEXT(program, target, pname, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorageEXT) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedRenderbufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorageMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedRenderbufferStorageMultisampleCoverageEXT) {
    prototypeCalled = true;
    glContext->m_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glCheckNamedFramebufferStatusEXT) {
    prototypeCalled = true;
    result = glContext->m_glCheckNamedFramebufferStatusEXT(framebuffer, target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTexture1DEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTexture2DEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTexture3DEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedFramebufferAttachmentParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenerateTextureMipmapEXT) {
    prototypeCalled = true;
    glContext->m_glGenerateTextureMipmapEXT(texture, target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenerateMultiTexMipmapEXT) {
    prototypeCalled = true;
    glContext->m_glGenerateMultiTexMipmapEXT(texunit, target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferDrawBufferEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferDrawBufferEXT(framebuffer, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferDrawBuffersEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferReadBufferEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferReadBufferEXT(framebuffer, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferParameterivEXT(framebuffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedCopyBufferSubDataEXT) {
    prototypeCalled = true;
    glContext->m_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTextureEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTextureLayerEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferTextureFaceEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glTextureRenderbufferEXT(texture, target, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayColorOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayEdgeFlagOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayIndexOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayNormalOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayTexCoordOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayMultiTexCoordOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayFogCoordOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArraySecondaryColorOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribIOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexArrayEXT) {
    prototypeCalled = true;
    glContext->m_glEnableVertexArrayEXT(vaobj, array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexArrayEXT) {
    prototypeCalled = true;
    glContext->m_glDisableVertexArrayEXT(vaobj, array);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVertexArrayAttribEXT) {
    prototypeCalled = true;
    glContext->m_glEnableVertexArrayAttribEXT(vaobj, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVertexArrayAttribEXT) {
    prototypeCalled = true;
    glContext->m_glDisableVertexArrayAttribEXT(vaobj, index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayIntegervEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayIntegervEXT(vaobj, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayPointervEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayPointervEXT(vaobj, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayIntegeri_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexArrayPointeri_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapNamedBufferRangeEXT) {
    prototypeCalled = true;
    result = glContext->m_glMapNamedBufferRangeEXT(buffer, offset, length, access);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushMappedNamedBufferRangeEXT) {
    prototypeCalled = true;
    glContext->m_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferStorageEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferStorageEXT(buffer, size, data, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedBufferDataEXT) {
    prototypeCalled = true;
    glContext->m_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearNamedBufferSubDataEXT) {
    prototypeCalled = true;
    glContext->m_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferParameteriEXT(framebuffer, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedFramebufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1dEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1dEXT(program, location, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2dEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2dEXT(program, location, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3dEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3dEXT(program, location, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4dEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4dEXT(program, location, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform1dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform1dvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform2dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform2dvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform3dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform3dvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniform4dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniform4dvEXT(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x3dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix2x4dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x2dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix3x4dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x2dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformMatrix4x3dvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBufferRangeEXT) {
    prototypeCalled = true;
    glContext->m_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage1DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage2DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage2DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorage3DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayBindVertexBufferEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribFormatEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribIFormatEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribLFormatEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribBindingEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexBindingDivisorEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribLOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexturePageCommitmentEXT) {
    prototypeCalled = true;
    glContext->m_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayVertexAttribDivisorEXT) {
    prototypeCalled = true;
    glContext->m_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorMaskIndexedEXT) {
    prototypeCalled = true;
    glContext->m_glColorMaskIndexedEXT(index, r, g, b, a);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysInstancedEXT) {
    prototypeCalled = true;
    glContext->m_glDrawArraysInstancedEXT(mode, start, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawElementsInstancedEXT) {
    prototypeCalled = true;
    glContext->m_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawRangeElementsEXT) {
    prototypeCalled = true;
    glContext->m_glDrawRangeElementsEXT(mode, start, end, count, type, indices);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferStorageExternalEXT) {
    prototypeCalled = true;
    glContext->m_glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferStorageExternalEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordfEXT(GLfloat coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordfEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordfEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordfvEXT(const GLfloat * coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordfvEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordfvEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoorddEXT(GLdouble coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoorddEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoorddEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoorddvEXT(const GLdouble * coord) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoorddvEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoorddvEXT(coord);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordPointerEXT) {
    prototypeCalled = true;
    glContext->m_glFogCoordPointerEXT(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlitFramebufferEXT) {
    prototypeCalled = true;
    glContext->m_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorageMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsRenderbufferEXT(GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsRenderbufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsRenderbufferEXT(renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glBindRenderbufferEXT(target, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteRenderbuffersEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteRenderbuffersEXT(n, renderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenRenderbuffersEXT) {
    prototypeCalled = true;
    glContext->m_glGenRenderbuffersEXT(n, renderbuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorageEXT) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageEXT(target, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetRenderbufferParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetRenderbufferParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsFramebufferEXT(GLuint framebuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsFramebufferEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsFramebufferEXT(framebuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFramebufferEXT) {
    prototypeCalled = true;
    glContext->m_glBindFramebufferEXT(target, framebuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteFramebuffersEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteFramebuffersEXT(n, framebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenFramebuffersEXT) {
    prototypeCalled = true;
    glContext->m_glGenFramebuffersEXT(n, framebuffers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glCheckFramebufferStatusEXT(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glCheckFramebufferStatusEXT) {
    prototypeCalled = true;
    result = glContext->m_glCheckFramebufferStatusEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture1DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture2DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTexture3DEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferRenderbufferEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferAttachmentParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenerateMipmapEXT(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenerateMipmapEXT) {
    prototypeCalled = true;
    glContext->m_glGenerateMipmapEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glProgramParameteriEXT(program, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameters4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameters4fvEXT(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameters4fvEXT) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameters4fvEXT(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUniformuivEXT(GLuint program, GLint location, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUniformuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetUniformuivEXT(program, location, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindFragDataLocationEXT) {
    prototypeCalled = true;
    glContext->m_glBindFragDataLocationEXT(program, color, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetFragDataLocationEXT(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetFragDataLocationEXT) {
    prototypeCalled = true;
    result = glContext->m_glGetFragDataLocationEXT(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1uiEXT(GLint location, GLuint v0) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform1uiEXT(location, v0);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform2uiEXT(location, v0, v1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform3uiEXT(location, v0, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4uiEXT) {
    prototypeCalled = true;
    glContext->m_glUniform4uiEXT(location, v0, v1, v2, v3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform1uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform1uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform2uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform2uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform3uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform3uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniform4uivEXT) {
    prototypeCalled = true;
    glContext->m_glUniform4uivEXT(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramEXT) {
    prototypeCalled = true;
    glContext->m_glGetHistogramEXT(target, reset, format, type, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetHistogramParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetHistogramParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmaxEXT) {
    prototypeCalled = true;
    glContext->m_glGetMinmaxEXT(target, reset, format, type, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmaxParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetMinmaxParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMinmaxParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMinmaxParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glHistogramEXT) {
    prototypeCalled = true;
    glContext->m_glHistogramEXT(target, width, internalformat, sink);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMinmaxEXT) {
    prototypeCalled = true;
    glContext->m_glMinmaxEXT(target, internalformat, sink);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResetHistogramEXT(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResetHistogramEXT) {
    prototypeCalled = true;
    glContext->m_glResetHistogramEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResetMinmaxEXT(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResetMinmaxEXT) {
    prototypeCalled = true;
    glContext->m_glResetMinmaxEXT(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexFuncEXT(GLenum func, GLclampf ref) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexFuncEXT) {
    prototypeCalled = true;
    glContext->m_glIndexFuncEXT(func, ref);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexMaterialEXT(GLenum face, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexMaterialEXT) {
    prototypeCalled = true;
    glContext->m_glIndexMaterialEXT(face, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glApplyTextureEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glApplyTextureEXT) {
    prototypeCalled = true;
    glContext->m_glApplyTextureEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureLightEXT(GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureLightEXT) {
    prototypeCalled = true;
    glContext->m_glTextureLightEXT(pname);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureMaterialEXT(GLenum face, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureMaterialEXT) {
    prototypeCalled = true;
    glContext->m_glTextureMaterialEXT(face, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUnsignedBytevEXT(GLenum pname, GLubyte * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUnsignedBytevEXT) {
    prototypeCalled = true;
    glContext->m_glGetUnsignedBytevEXT(pname, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetUnsignedBytei_vEXT) {
    prototypeCalled = true;
    glContext->m_glGetUnsignedBytei_vEXT(target, index, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteMemoryObjectsEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteMemoryObjectsEXT(n, memoryObjects);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsMemoryObjectEXT(GLuint memoryObject) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsMemoryObjectEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsMemoryObjectEXT(memoryObject);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateMemoryObjectsEXT) {
    prototypeCalled = true;
    glContext->m_glCreateMemoryObjectsEXT(n, memoryObjects);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMemoryObjectParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glMemoryObjectParameterivEXT(memoryObject, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMemoryObjectParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetMemoryObjectParameterivEXT(memoryObject, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageMem2DEXT) {
    prototypeCalled = true;
    glContext->m_glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageMem2DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageMem3DEXT) {
    prototypeCalled = true;
    glContext->m_glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageMem3DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferStorageMemEXT) {
    prototypeCalled = true;
    glContext->m_glBufferStorageMemEXT(target, size, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageMem2DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageMem2DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageMem3DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageMem3DMultisampleEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferStorageMemEXT) {
    prototypeCalled = true;
    glContext->m_glNamedBufferStorageMemEXT(buffer, size, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexStorageMem1DEXT) {
    prototypeCalled = true;
    glContext->m_glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureStorageMem1DEXT) {
    prototypeCalled = true;
    glContext->m_glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportMemoryFdEXT) {
    prototypeCalled = true;
    glContext->m_glImportMemoryFdEXT(memory, size, handleType, fd);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportMemoryWin32HandleEXT) {
    prototypeCalled = true;
    glContext->m_glImportMemoryWin32HandleEXT(memory, size, handleType, handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportMemoryWin32NameEXT) {
    prototypeCalled = true;
    glContext->m_glImportMemoryWin32NameEXT(memory, size, handleType, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysEXT) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysEXT(mode, first, count, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsEXT) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsEXT(mode, count, type, indices, primcount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleMaskEXT(GLclampf value, GLboolean invert) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleMaskEXT) {
    prototypeCalled = true;
    glContext->m_glSampleMaskEXT(value, invert);
  }
  if (!prototypeCalled && glContext->m_glSampleMaskSGIS) {
    prototypeCalled = true;
    glContext->m_glSampleMaskSGIS(value, invert);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplePatternEXT(GLenum pattern) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplePatternEXT) {
    prototypeCalled = true;
    glContext->m_glSamplePatternEXT(pattern);
  }
  if (!prototypeCalled && glContext->m_glSamplePatternSGIS) {
    prototypeCalled = true;
    glContext->m_glSamplePatternSGIS(pattern);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableEXT) {
    prototypeCalled = true;
    glContext->m_glColorTableEXT(target, internalFormat, width, format, type, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableEXT(target, format, type, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTransformParameteriEXT) {
    prototypeCalled = true;
    glContext->m_glPixelTransformParameteriEXT(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTransformParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glPixelTransformParameterfEXT(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTransformParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glPixelTransformParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTransformParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glPixelTransformParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPixelTransformParameterivEXT) {
    prototypeCalled = true;
    glContext->m_glGetPixelTransformParameterivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPixelTransformParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glGetPixelTransformParameterfvEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfEXT(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfEXT) {
    prototypeCalled = true;
    glContext->m_glPointParameterfEXT(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfvEXT(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfvEXT) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvEXT(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPolygonOffsetEXT(GLfloat factor, GLfloat bias) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPolygonOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glPolygonOffsetEXT(factor, bias);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPolygonOffsetClampEXT) {
    prototypeCalled = true;
    glContext->m_glPolygonOffsetClampEXT(factor, units, clamp);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProvokingVertexEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProvokingVertexEXT) {
    prototypeCalled = true;
    glContext->m_glProvokingVertexEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterSamplesEXT) {
    prototypeCalled = true;
    glContext->m_glRasterSamplesEXT(samples, fixedsamplelocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenSemaphoresEXT(GLsizei n, GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenSemaphoresEXT) {
    prototypeCalled = true;
    glContext->m_glGenSemaphoresEXT(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteSemaphoresEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteSemaphoresEXT(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsSemaphoreEXT(GLuint semaphore) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsSemaphoreEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsSemaphoreEXT(semaphore);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSemaphoreParameterui64vEXT) {
    prototypeCalled = true;
    glContext->m_glSemaphoreParameterui64vEXT(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSemaphoreParameterui64vEXT) {
    prototypeCalled = true;
    glContext->m_glGetSemaphoreParameterui64vEXT(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWaitSemaphoreEXT) {
    prototypeCalled = true;
    glContext->m_glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSignalSemaphoreEXT) {
    prototypeCalled = true;
    glContext->m_glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportSemaphoreFdEXT) {
    prototypeCalled = true;
    glContext->m_glImportSemaphoreFdEXT(semaphore, handleType, fd);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportSemaphoreWin32HandleEXT) {
    prototypeCalled = true;
    glContext->m_glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImportSemaphoreWin32NameEXT) {
    prototypeCalled = true;
    glContext->m_glImportSemaphoreWin32NameEXT(semaphore, handleType, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3bEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3bEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3bvEXT(const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3bvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3bvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3dEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3dEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3dvEXT(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3dvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3dvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3fEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3fEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3fvEXT(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3fvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3fvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3iEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3iEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ivEXT(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ivEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3sEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3sEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3svEXT(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3svEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3svEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ubEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ubEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3ubvEXT(const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3ubvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3ubvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3uiEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3uiEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3uivEXT(const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3uivEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3uivEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3usEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3usEXT(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3usvEXT(const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3usvEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3usvEXT(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorPointerEXT) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorPointerEXT(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUseShaderProgramEXT(GLenum type, GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUseShaderProgramEXT) {
    prototypeCalled = true;
    glContext->m_glUseShaderProgramEXT(type, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveProgramEXT(GLuint program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveProgramEXT) {
    prototypeCalled = true;
    glContext->m_glActiveProgramEXT(program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glCreateShaderProgramEXT(GLenum type, const GLchar * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glCreateShaderProgramEXT) {
    prototypeCalled = true;
    result = glContext->m_glCreateShaderProgramEXT(type, string);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferFetchBarrierEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferFetchBarrierEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferFetchBarrierEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindImageTextureEXT) {
    prototypeCalled = true;
    glContext->m_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMemoryBarrierEXT(GLbitfield barriers) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMemoryBarrierEXT) {
    prototypeCalled = true;
    glContext->m_glMemoryBarrierEXT(barriers);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilClearTagEXT) {
    prototypeCalled = true;
    glContext->m_glStencilClearTagEXT(stencilTagBits, stencilClearTag);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveStencilFaceEXT(GLenum face) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveStencilFaceEXT) {
    prototypeCalled = true;
    glContext->m_glActiveStencilFaceEXT(face);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage1DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage2DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage3DEXT) {
    prototypeCalled = true;
    glContext->m_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureLayerEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexBufferEXT) {
    prototypeCalled = true;
    glContext->m_glTexBufferEXT(target, internalformat, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterIuivEXT(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearColorIiEXT) {
    prototypeCalled = true;
    glContext->m_glClearColorIiEXT(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearColorIuiEXT) {
    prototypeCalled = true;
    glContext->m_glClearColorIuiEXT(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glAreTexturesResidentEXT) {
    prototypeCalled = true;
    result = glContext->m_glAreTexturesResidentEXT(n, textures, residences);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTextureEXT(GLenum target, GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTextureEXT) {
    prototypeCalled = true;
    glContext->m_glBindTextureEXT(target, texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteTexturesEXT(GLsizei n, const GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteTexturesEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteTexturesEXT(n, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenTexturesEXT(GLsizei n, GLuint * textures) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenTexturesEXT) {
    prototypeCalled = true;
    glContext->m_glGenTexturesEXT(n, textures);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTextureEXT(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTextureEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsTextureEXT(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrioritizeTexturesEXT) {
    prototypeCalled = true;
    glContext->m_glPrioritizeTexturesEXT(n, textures, priorities);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureNormalEXT(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureNormalEXT) {
    prototypeCalled = true;
    glContext->m_glTextureNormalEXT(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateSemaphoresNV(GLsizei n, GLuint * semaphores) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateSemaphoresNV) {
    prototypeCalled = true;
    glContext->m_glCreateSemaphoresNV(n, semaphores);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSemaphoreParameterivNV(GLuint semaphore, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSemaphoreParameterivNV) {
    prototypeCalled = true;
    glContext->m_glSemaphoreParameterivNV(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSemaphoreParameterivNV(GLuint semaphore, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSemaphoreParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetSemaphoreParameterivNV(semaphore, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjecti64vEXT) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjecti64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetQueryObjectui64vEXT) {
    prototypeCalled = true;
    glContext->m_glGetQueryObjectui64vEXT(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginTransformFeedbackEXT(GLenum primitiveMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginTransformFeedbackEXT) {
    prototypeCalled = true;
    glContext->m_glBeginTransformFeedbackEXT(primitiveMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndTransformFeedbackEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndTransformFeedbackEXT) {
    prototypeCalled = true;
    glContext->m_glEndTransformFeedbackEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferRangeEXT) {
    prototypeCalled = true;
    glContext->m_glBindBufferRangeEXT(target, index, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferOffsetEXT) {
    prototypeCalled = true;
    glContext->m_glBindBufferOffsetEXT(target, index, buffer, offset);
  }
  if (!prototypeCalled && glContext->m_glBindBufferOffsetNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferOffsetNV(target, index, buffer, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferBaseEXT) {
    prototypeCalled = true;
    glContext->m_glBindBufferBaseEXT(target, index, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackVaryingsEXT) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbackVaryingEXT) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glArrayElementEXT(GLint i) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glArrayElementEXT) {
    prototypeCalled = true;
    glContext->m_glArrayElementEXT(i);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorPointerEXT) {
    prototypeCalled = true;
    glContext->m_glColorPointerEXT(size, type, stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawArraysEXT) {
    prototypeCalled = true;
    glContext->m_glDrawArraysEXT(mode, first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEdgeFlagPointerEXT) {
    prototypeCalled = true;
    glContext->m_glEdgeFlagPointerEXT(stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPointervEXT(GLenum pname, void ** params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPointervEXT) {
    prototypeCalled = true;
    glContext->m_glGetPointervEXT(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexPointerEXT) {
    prototypeCalled = true;
    glContext->m_glIndexPointerEXT(type, stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalPointerEXT) {
    prototypeCalled = true;
    glContext->m_glNormalPointerEXT(type, stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordPointerEXT) {
    prototypeCalled = true;
    glContext->m_glTexCoordPointerEXT(size, type, stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexPointerEXT(size, type, stride, count, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1dEXT(GLuint index, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1dEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2dEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3dEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4dEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4dEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1dvEXT(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2dvEXT(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3dvEXT(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4dvEXT(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4dvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4dvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribLPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribLPointerEXT(index, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribLdvEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLdvEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginVertexShaderEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginVertexShaderEXT) {
    prototypeCalled = true;
    glContext->m_glBeginVertexShaderEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndVertexShaderEXT() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndVertexShaderEXT) {
    prototypeCalled = true;
    glContext->m_glEndVertexShaderEXT();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVertexShaderEXT(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVertexShaderEXT) {
    prototypeCalled = true;
    glContext->m_glBindVertexShaderEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGenVertexShadersEXT(GLuint range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGenVertexShadersEXT) {
    prototypeCalled = true;
    result = glContext->m_glGenVertexShadersEXT(range);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteVertexShaderEXT(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteVertexShaderEXT) {
    prototypeCalled = true;
    glContext->m_glDeleteVertexShaderEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderOp1EXT) {
    prototypeCalled = true;
    glContext->m_glShaderOp1EXT(op, res, arg1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderOp2EXT) {
    prototypeCalled = true;
    glContext->m_glShaderOp2EXT(op, res, arg1, arg2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShaderOp3EXT) {
    prototypeCalled = true;
    glContext->m_glShaderOp3EXT(op, res, arg1, arg2, arg3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSwizzleEXT) {
    prototypeCalled = true;
    glContext->m_glSwizzleEXT(res, in, outX, outY, outZ, outW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWriteMaskEXT) {
    prototypeCalled = true;
    glContext->m_glWriteMaskEXT(res, in, outX, outY, outZ, outW);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInsertComponentEXT(GLuint res, GLuint src, GLuint num) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInsertComponentEXT) {
    prototypeCalled = true;
    glContext->m_glInsertComponentEXT(res, src, num);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glExtractComponentEXT(GLuint res, GLuint src, GLuint num) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glExtractComponentEXT) {
    prototypeCalled = true;
    glContext->m_glExtractComponentEXT(res, src, num);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGenSymbolsEXT) {
    prototypeCalled = true;
    result = glContext->m_glGenSymbolsEXT(datatype, storagetype, range, components);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetInvariantEXT(GLuint id, GLenum type, const void * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetInvariantEXT) {
    prototypeCalled = true;
    glContext->m_glSetInvariantEXT(id, type, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetLocalConstantEXT) {
    prototypeCalled = true;
    glContext->m_glSetLocalConstantEXT(id, type, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantbvEXT(GLuint id, const GLbyte * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantbvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantbvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantsvEXT(GLuint id, const GLshort * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantsvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantsvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantivEXT(GLuint id, const GLint * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantivEXT) {
    prototypeCalled = true;
    glContext->m_glVariantivEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantfvEXT(GLuint id, const GLfloat * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantfvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantfvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantdvEXT(GLuint id, const GLdouble * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantdvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantdvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantubvEXT(GLuint id, const GLubyte * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantubvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantubvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantusvEXT(GLuint id, const GLushort * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantusvEXT) {
    prototypeCalled = true;
    glContext->m_glVariantusvEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantuivEXT(GLuint id, const GLuint * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantuivEXT) {
    prototypeCalled = true;
    glContext->m_glVariantuivEXT(id, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVariantPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVariantPointerEXT(id, type, stride, addr);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEnableVariantClientStateEXT(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEnableVariantClientStateEXT) {
    prototypeCalled = true;
    glContext->m_glEnableVariantClientStateEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDisableVariantClientStateEXT(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDisableVariantClientStateEXT) {
    prototypeCalled = true;
    glContext->m_glDisableVariantClientStateEXT(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glBindLightParameterEXT(GLenum light, GLenum value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glBindLightParameterEXT) {
    prototypeCalled = true;
    result = glContext->m_glBindLightParameterEXT(light, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glBindMaterialParameterEXT(GLenum face, GLenum value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glBindMaterialParameterEXT) {
    prototypeCalled = true;
    result = glContext->m_glBindMaterialParameterEXT(face, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glBindTexGenParameterEXT) {
    prototypeCalled = true;
    result = glContext->m_glBindTexGenParameterEXT(unit, coord, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glBindTextureUnitParameterEXT(GLenum unit, GLenum value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glBindTextureUnitParameterEXT) {
    prototypeCalled = true;
    result = glContext->m_glBindTextureUnitParameterEXT(unit, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glBindParameterEXT(GLenum value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glBindParameterEXT) {
    prototypeCalled = true;
    result = glContext->m_glBindParameterEXT(value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsVariantEnabledEXT(GLuint id, GLenum cap) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsVariantEnabledEXT) {
    prototypeCalled = true;
    result = glContext->m_glIsVariantEnabledEXT(id, cap);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantBooleanvEXT) {
    prototypeCalled = true;
    glContext->m_glGetVariantBooleanvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantIntegervEXT) {
    prototypeCalled = true;
    glContext->m_glGetVariantIntegervEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantFloatvEXT) {
    prototypeCalled = true;
    glContext->m_glGetVariantFloatvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVariantPointervEXT(GLuint id, GLenum value, void ** data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVariantPointervEXT) {
    prototypeCalled = true;
    glContext->m_glGetVariantPointervEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInvariantBooleanvEXT) {
    prototypeCalled = true;
    glContext->m_glGetInvariantBooleanvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInvariantIntegervEXT) {
    prototypeCalled = true;
    glContext->m_glGetInvariantIntegervEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInvariantFloatvEXT) {
    prototypeCalled = true;
    glContext->m_glGetInvariantFloatvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetLocalConstantBooleanvEXT) {
    prototypeCalled = true;
    glContext->m_glGetLocalConstantBooleanvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetLocalConstantIntegervEXT) {
    prototypeCalled = true;
    glContext->m_glGetLocalConstantIntegervEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetLocalConstantFloatvEXT) {
    prototypeCalled = true;
    glContext->m_glGetLocalConstantFloatvEXT(id, value, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexWeightfEXT(GLfloat weight) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexWeightfEXT) {
    prototypeCalled = true;
    glContext->m_glVertexWeightfEXT(weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexWeightfvEXT(const GLfloat * weight) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexWeightfvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexWeightfvEXT(weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexWeightPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexWeightPointerEXT(size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glAcquireKeyedMutexWin32EXT) {
    prototypeCalled = true;
    result = glContext->m_glAcquireKeyedMutexWin32EXT(memory, key, timeout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glReleaseKeyedMutexWin32EXT) {
    prototypeCalled = true;
    result = glContext->m_glReleaseKeyedMutexWin32EXT(memory, key);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowRectanglesEXT) {
    prototypeCalled = true;
    glContext->m_glWindowRectanglesEXT(mode, count, box);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLsync _glew_gl_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLsync result = ((GLsync)0);
  if (!prototypeCalled && glContext->m_glImportSyncEXT) {
    prototypeCalled = true;
    result = glContext->m_glImportSyncEXT(external_sync_type, external_sync, flags);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFrameTerminatorGREMEDY() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFrameTerminatorGREMEDY) {
    prototypeCalled = true;
    glContext->m_glFrameTerminatorGREMEDY();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStringMarkerGREMEDY(GLsizei len, const void * string) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStringMarkerGREMEDY) {
    prototypeCalled = true;
    glContext->m_glStringMarkerGREMEDY(len, string);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImageTransformParameteriHP) {
    prototypeCalled = true;
    glContext->m_glImageTransformParameteriHP(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImageTransformParameterfHP) {
    prototypeCalled = true;
    glContext->m_glImageTransformParameterfHP(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImageTransformParameterivHP) {
    prototypeCalled = true;
    glContext->m_glImageTransformParameterivHP(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glImageTransformParameterfvHP) {
    prototypeCalled = true;
    glContext->m_glImageTransformParameterfvHP(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetImageTransformParameterivHP) {
    prototypeCalled = true;
    glContext->m_glGetImageTransformParameterivHP(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetImageTransformParameterfvHP) {
    prototypeCalled = true;
    glContext->m_glGetImageTransformParameterfvHP(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiModeDrawArraysIBM) {
    prototypeCalled = true;
    glContext->m_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiModeDrawElementsIBM) {
    prototypeCalled = true;
    glContext->m_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushStaticDataIBM(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushStaticDataIBM) {
    prototypeCalled = true;
    glContext->m_glFlushStaticDataIBM(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glColorPointerListIBM(size, type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEdgeFlagPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glIndexPointerListIBM(type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glNormalPointerListIBM(type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexPointerListIBM) {
    prototypeCalled = true;
    glContext->m_glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendFuncSeparateINGR) {
    prototypeCalled = true;
    glContext->m_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glApplyFramebufferAttachmentCMAAINTEL() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glApplyFramebufferAttachmentCMAAINTEL) {
    prototypeCalled = true;
    glContext->m_glApplyFramebufferAttachmentCMAAINTEL();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSyncTextureINTEL(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSyncTextureINTEL) {
    prototypeCalled = true;
    glContext->m_glSyncTextureINTEL(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUnmapTexture2DINTEL(GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUnmapTexture2DINTEL) {
    prototypeCalled = true;
    glContext->m_glUnmapTexture2DINTEL(texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void * _glew_gl_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  void * result = ((void *)0);
  if (!prototypeCalled && glContext->m_glMapTexture2DINTEL) {
    prototypeCalled = true;
    result = glContext->m_glMapTexture2DINTEL(texture, level, access, stride, layout);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexPointervINTEL) {
    prototypeCalled = true;
    glContext->m_glVertexPointervINTEL(size, type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalPointervINTEL(GLenum type, const void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalPointervINTEL) {
    prototypeCalled = true;
    glContext->m_glNormalPointervINTEL(type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorPointervINTEL) {
    prototypeCalled = true;
    glContext->m_glColorPointervINTEL(size, type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordPointervINTEL) {
    prototypeCalled = true;
    glContext->m_glTexCoordPointervINTEL(size, type, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginPerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginPerfQueryINTEL) {
    prototypeCalled = true;
    glContext->m_glBeginPerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreatePerfQueryINTEL) {
    prototypeCalled = true;
    glContext->m_glCreatePerfQueryINTEL(queryId, queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeletePerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeletePerfQueryINTEL) {
    prototypeCalled = true;
    glContext->m_glDeletePerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndPerfQueryINTEL(GLuint queryHandle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndPerfQueryINTEL) {
    prototypeCalled = true;
    glContext->m_glEndPerfQueryINTEL(queryHandle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFirstPerfQueryIdINTEL(GLuint * queryId) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFirstPerfQueryIdINTEL) {
    prototypeCalled = true;
    glContext->m_glGetFirstPerfQueryIdINTEL(queryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNextPerfQueryIdINTEL) {
    prototypeCalled = true;
    glContext->m_glGetNextPerfQueryIdINTEL(queryId, nextQueryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfCounterInfoINTEL) {
    prototypeCalled = true;
    glContext->m_glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfQueryDataINTEL) {
    prototypeCalled = true;
    glContext->m_glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfQueryIdByNameINTEL) {
    prototypeCalled = true;
    glContext->m_glGetPerfQueryIdByNameINTEL(queryName, queryId);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPerfQueryInfoINTEL) {
    prototypeCalled = true;
    glContext->m_glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendBarrierKHR() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendBarrierKHR) {
    prototypeCalled = true;
    glContext->m_glBlendBarrierKHR();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMaxShaderCompilerThreadsKHR(GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMaxShaderCompilerThreadsKHR) {
    prototypeCalled = true;
    glContext->m_glMaxShaderCompilerThreadsKHR(count);
  }
  if (!prototypeCalled && glContext->m_glMaxShaderCompilerThreadsARB) {
    prototypeCalled = true;
    glContext->m_glMaxShaderCompilerThreadsARB(count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferParameteriMESA) {
    prototypeCalled = true;
    glContext->m_glFramebufferParameteriMESA(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFramebufferParameterivMESA) {
    prototypeCalled = true;
    glContext->m_glGetFramebufferParameterivMESA(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResizeBuffersMESA() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResizeBuffersMESA) {
    prototypeCalled = true;
    glContext->m_glResizeBuffersMESA();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2dMESA(GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2dMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2dvMESA(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2dvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2dvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2fMESA(GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2fMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2fvMESA(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2fvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2fvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2iMESA(GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2iMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2iMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2ivMESA(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2ivMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2ivMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2sMESA(GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2sMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2sMESA(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos2svMESA(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos2svMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos2svMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3dMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3dvMESA(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3dvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3dvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3fMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3fvMESA(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3fvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3fvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3iMESA(GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3iMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3iMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3ivMESA(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3ivMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3ivMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3sMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3sMESA(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos3svMESA(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos3svMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos3svMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4dMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4dMESA(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4dvMESA(const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4dvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4dvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4fMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4fMESA(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4fvMESA(const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4fvMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4fvMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4iMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4iMESA(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4ivMESA(const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4ivMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4ivMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4sMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4sMESA(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWindowPos4svMESA(const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWindowPos4svMESA) {
    prototypeCalled = true;
    glContext->m_glWindowPos4svMESA(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginConditionalRenderNVX(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginConditionalRenderNVX) {
    prototypeCalled = true;
    glContext->m_glBeginConditionalRenderNVX(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndConditionalRenderNVX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndConditionalRenderNVX) {
    prototypeCalled = true;
    glContext->m_glEndConditionalRenderNVX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLGPUNamedBufferSubDataNVX) {
    prototypeCalled = true;
    glContext->m_glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLGPUCopyImageSubDataNVX) {
    prototypeCalled = true;
    glContext->m_glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLGPUInterlockNVX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLGPUInterlockNVX) {
    prototypeCalled = true;
    glContext->m_glLGPUInterlockNVX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAlphaToCoverageDitherControlNV(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAlphaToCoverageDitherControlNV) {
    prototypeCalled = true;
    glContext->m_glAlphaToCoverageDitherControlNV(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectBindlessNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectBindlessNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawArraysIndirectBindlessCountNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawElementsIndirectBindlessCountNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetTextureHandleNV(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetTextureHandleNV) {
    prototypeCalled = true;
    result = glContext->m_glGetTextureHandleNV(texture);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetTextureSamplerHandleNV) {
    prototypeCalled = true;
    result = glContext->m_glGetTextureSamplerHandleNV(texture, sampler);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeTextureHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeTextureHandleResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeTextureHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeTextureHandleNonResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeTextureHandleNonResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint64 _glew_gl_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint64 result = ((GLuint64)0);
  if (!prototypeCalled && glContext->m_glGetImageHandleNV) {
    prototypeCalled = true;
    result = glContext->m_glGetImageHandleNV(texture, level, layered, layer, format);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeImageHandleResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeImageHandleResidentNV(handle, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeImageHandleNonResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeImageHandleNonResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeImageHandleNonResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformHandleui64NV(GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformHandleui64NV) {
    prototypeCalled = true;
    glContext->m_glUniformHandleui64NV(location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformHandleui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniformHandleui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformHandleui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniformHandleui64NV(program, location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformHandleui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniformHandleui64vNV(program, location, count, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTextureHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTextureHandleResidentNV) {
    prototypeCalled = true;
    result = glContext->m_glIsTextureHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsImageHandleResidentNV(GLuint64 handle) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsImageHandleResidentNV) {
    prototypeCalled = true;
    result = glContext->m_glIsImageHandleResidentNV(handle);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendParameteriNV(GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendParameteriNV) {
    prototypeCalled = true;
    glContext->m_glBlendParameteriNV(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendBarrierNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendBarrierNV) {
    prototypeCalled = true;
    glContext->m_glBlendBarrierNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glViewportPositionWScaleNV) {
    prototypeCalled = true;
    glContext->m_glViewportPositionWScaleNV(index, xcoeff, ycoeff);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateStatesNV(GLsizei n, GLuint * states) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateStatesNV) {
    prototypeCalled = true;
    glContext->m_glCreateStatesNV(n, states);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteStatesNV(GLsizei n, const GLuint * states) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteStatesNV) {
    prototypeCalled = true;
    glContext->m_glDeleteStatesNV(n, states);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsStateNV(GLuint state) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsStateNV) {
    prototypeCalled = true;
    result = glContext->m_glIsStateNV(state);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStateCaptureNV(GLuint state, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStateCaptureNV) {
    prototypeCalled = true;
    glContext->m_glStateCaptureNV(state, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGetCommandHeaderNV(GLenum tokenID, GLuint size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGetCommandHeaderNV) {
    prototypeCalled = true;
    result = glContext->m_glGetCommandHeaderNV(tokenID, size);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLushort _glew_gl_glGetStageIndexNV(GLenum shadertype) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLushort result = ((GLushort)0);
  if (!prototypeCalled && glContext->m_glGetStageIndexNV) {
    prototypeCalled = true;
    result = glContext->m_glGetStageIndexNV(shadertype);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawCommandsNV) {
    prototypeCalled = true;
    glContext->m_glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawCommandsAddressNV) {
    prototypeCalled = true;
    glContext->m_glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawCommandsStatesNV) {
    prototypeCalled = true;
    glContext->m_glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawCommandsStatesAddressNV) {
    prototypeCalled = true;
    glContext->m_glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCreateCommandListsNV(GLsizei n, GLuint * lists) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCreateCommandListsNV) {
    prototypeCalled = true;
    glContext->m_glCreateCommandListsNV(n, lists);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteCommandListsNV(GLsizei n, const GLuint * lists) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteCommandListsNV) {
    prototypeCalled = true;
    glContext->m_glDeleteCommandListsNV(n, lists);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsCommandListNV(GLuint list) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsCommandListNV) {
    prototypeCalled = true;
    result = glContext->m_glIsCommandListNV(list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glListDrawCommandsStatesClientNV) {
    prototypeCalled = true;
    glContext->m_glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCommandListSegmentsNV(GLuint list, GLuint segments) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCommandListSegmentsNV) {
    prototypeCalled = true;
    glContext->m_glCommandListSegmentsNV(list, segments);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCompileCommandListNV(GLuint list) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCompileCommandListNV) {
    prototypeCalled = true;
    glContext->m_glCompileCommandListNV(list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCallCommandListNV(GLuint list) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCallCommandListNV) {
    prototypeCalled = true;
    glContext->m_glCallCommandListNV(list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginConditionalRenderNV) {
    prototypeCalled = true;
    glContext->m_glBeginConditionalRenderNV(id, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndConditionalRenderNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndConditionalRenderNV) {
    prototypeCalled = true;
    glContext->m_glEndConditionalRenderNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSubpixelPrecisionBiasNV) {
    prototypeCalled = true;
    glContext->m_glSubpixelPrecisionBiasNV(xbits, ybits);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConservativeRasterParameterfNV(GLenum pname, GLfloat value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConservativeRasterParameterfNV) {
    prototypeCalled = true;
    glContext->m_glConservativeRasterParameterfNV(pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConservativeRasterParameteriNV(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConservativeRasterParameteriNV) {
    prototypeCalled = true;
    glContext->m_glConservativeRasterParameteriNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyImageSubDataNV) {
    prototypeCalled = true;
    glContext->m_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangedNV(GLdouble zNear, GLdouble zFar) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangedNV) {
    prototypeCalled = true;
    glContext->m_glDepthRangedNV(zNear, zFar);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearDepthdNV(GLdouble depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearDepthdNV) {
    prototypeCalled = true;
    glContext->m_glClearDepthdNV(depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthBoundsdNV) {
    prototypeCalled = true;
    glContext->m_glDepthBoundsdNV(zmin, zmax);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTextureNV) {
    prototypeCalled = true;
    glContext->m_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawVkImageNV) {
    prototypeCalled = true;
    glContext->m_glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLVULKANPROCNV _glew_gl_glGetVkProcAddrNV(const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLVULKANPROCNV result = ((GLVULKANPROCNV)0);
  if (!prototypeCalled && glContext->m_glGetVkProcAddrNV) {
    prototypeCalled = true;
    result = glContext->m_glGetVkProcAddrNV(name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWaitVkSemaphoreNV(GLuint64 vkSemaphore) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWaitVkSemaphoreNV) {
    prototypeCalled = true;
    glContext->m_glWaitVkSemaphoreNV(vkSemaphore);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSignalVkSemaphoreNV(GLuint64 vkSemaphore) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSignalVkSemaphoreNV) {
    prototypeCalled = true;
    glContext->m_glSignalVkSemaphoreNV(vkSemaphore);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSignalVkFenceNV(GLuint64 vkFence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSignalVkFenceNV) {
    prototypeCalled = true;
    glContext->m_glSignalVkFenceNV(vkFence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapControlPointsNV) {
    prototypeCalled = true;
    glContext->m_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapParameterivNV(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapParameterivNV) {
    prototypeCalled = true;
    glContext->m_glMapParameterivNV(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glMapParameterfvNV(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapControlPointsNV) {
    prototypeCalled = true;
    glContext->m_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetMapParameterivNV(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetMapParameterfvNV(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapAttribParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetMapAttribParameterivNV(target, index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapAttribParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetMapAttribParameterfvNV(target, index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvalMapsNV(GLenum target, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvalMapsNV) {
    prototypeCalled = true;
    glContext->m_glEvalMapsNV(target, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMultisamplefvNV) {
    prototypeCalled = true;
    glContext->m_glGetMultisamplefvNV(pname, index, val);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleMaskIndexedNV) {
    prototypeCalled = true;
    glContext->m_glSampleMaskIndexedNV(index, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexRenderbufferNV) {
    prototypeCalled = true;
    glContext->m_glTexRenderbufferNV(target, renderbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteFencesNV(GLsizei n, const GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteFencesNV) {
    prototypeCalled = true;
    glContext->m_glDeleteFencesNV(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenFencesNV(GLsizei n, GLuint * fences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenFencesNV) {
    prototypeCalled = true;
    glContext->m_glGenFencesNV(n, fences);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsFenceNV) {
    prototypeCalled = true;
    result = glContext->m_glIsFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glTestFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glTestFenceNV) {
    prototypeCalled = true;
    result = glContext->m_glTestFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFenceivNV(GLuint fence, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFenceivNV) {
    prototypeCalled = true;
    glContext->m_glGetFenceivNV(fence, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFinishFenceNV(GLuint fence) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFinishFenceNV) {
    prototypeCalled = true;
    glContext->m_glFinishFenceNV(fence);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSetFenceNV(GLuint fence, GLenum condition) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSetFenceNV) {
    prototypeCalled = true;
    glContext->m_glSetFenceNV(fence, condition);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentCoverageColorNV(GLuint color) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentCoverageColorNV) {
    prototypeCalled = true;
    glContext->m_glFragmentCoverageColorNV(color);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramNamedParameter4fNV) {
    prototypeCalled = true;
    glContext->m_glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramNamedParameter4fvNV) {
    prototypeCalled = true;
    glContext->m_glProgramNamedParameter4fvNV(id, len, name, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramNamedParameter4dNV) {
    prototypeCalled = true;
    glContext->m_glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramNamedParameter4dvNV) {
    prototypeCalled = true;
    glContext->m_glProgramNamedParameter4dvNV(id, len, name, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramNamedParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramNamedParameterfvNV(id, len, name, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramNamedParameterdvNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramNamedParameterdvNV(id, len, name, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverageModulationTableNV(GLsizei n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverageModulationTableNV) {
    prototypeCalled = true;
    glContext->m_glCoverageModulationTableNV(n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCoverageModulationTableNV(GLsizei bufSize, GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCoverageModulationTableNV) {
    prototypeCalled = true;
    glContext->m_glGetCoverageModulationTableNV(bufSize, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverageModulationNV(GLenum components) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverageModulationNV) {
    prototypeCalled = true;
    glContext->m_glCoverageModulationNV(components);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderbufferStorageMultisampleCoverageNV) {
    prototypeCalled = true;
    glContext->m_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramVertexLimitNV(GLenum target, GLint limit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramVertexLimitNV) {
    prototypeCalled = true;
    glContext->m_glProgramVertexLimitNV(target, limit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureEXT(target, attachment, texture, level);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureFaceEXT) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameterI4iNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameterI4iNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameterI4ivNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameterI4ivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParametersI4ivNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParametersI4ivNV(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameterI4uiNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParameterI4uivNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParameterI4uivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramLocalParametersI4uivNV) {
    prototypeCalled = true;
    glContext->m_glProgramLocalParametersI4uivNV(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameterI4iNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameterI4iNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameterI4ivNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameterI4ivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParametersI4ivNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParametersI4ivNV(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameterI4uiNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParameterI4uivNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParameterI4uivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramEnvParametersI4uivNV) {
    prototypeCalled = true;
    glContext->m_glProgramEnvParametersI4uivNV(target, index, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramLocalParameterIivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramLocalParameterIivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramLocalParameterIuivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramLocalParameterIuivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramEnvParameterIivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramEnvParameterIivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramEnvParameterIuivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramEnvParameterIuivNV(target, index, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramSubroutineParametersuivNV) {
    prototypeCalled = true;
    glContext->m_glProgramSubroutineParametersuivNV(target, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramSubroutineParameteruivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramSubroutineParameteruivNV(target, index, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2hNV(GLhalfNV x, GLhalfNV y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2hNV) {
    prototypeCalled = true;
    glContext->m_glVertex2hNV(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2hvNV) {
    prototypeCalled = true;
    glContext->m_glVertex2hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3hNV) {
    prototypeCalled = true;
    glContext->m_glVertex3hNV(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3hvNV) {
    prototypeCalled = true;
    glContext->m_glVertex3hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4hNV) {
    prototypeCalled = true;
    glContext->m_glVertex4hNV(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4hvNV) {
    prototypeCalled = true;
    glContext->m_glVertex4hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3hNV) {
    prototypeCalled = true;
    glContext->m_glNormal3hNV(nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3hvNV) {
    prototypeCalled = true;
    glContext->m_glNormal3hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3hNV) {
    prototypeCalled = true;
    glContext->m_glColor3hNV(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3hvNV) {
    prototypeCalled = true;
    glContext->m_glColor3hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4hNV) {
    prototypeCalled = true;
    glContext->m_glColor4hNV(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4hvNV) {
    prototypeCalled = true;
    glContext->m_glColor4hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1hNV(GLhalfNV s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1hNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord1hNV(s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1hvNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord1hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2hNV(GLhalfNV s, GLhalfNV t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2hNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord2hNV(s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2hvNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord2hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3hNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord3hNV(s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3hvNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord3hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4hNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord4hNV(s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4hvNV) {
    prototypeCalled = true;
    glContext->m_glTexCoord4hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1hNV(GLenum target, GLhalfNV s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1hNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1hNV(target, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1hvNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1hvNV(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2hNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2hNV(target, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2hvNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2hvNV(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3hNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3hNV(target, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3hvNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3hvNV(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4hNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4hNV(target, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4hvNV) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4hvNV(target, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordhNV(GLhalfNV fog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordhNV) {
    prototypeCalled = true;
    glContext->m_glFogCoordhNV(fog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordhvNV(const GLhalfNV * fog) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordhvNV) {
    prototypeCalled = true;
    glContext->m_glFogCoordhvNV(fog);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3hNV) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3hNV(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColor3hvNV(const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColor3hvNV) {
    prototypeCalled = true;
    glContext->m_glSecondaryColor3hvNV(v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexWeighthNV(GLhalfNV weight) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexWeighthNV) {
    prototypeCalled = true;
    glContext->m_glVertexWeighthNV(weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexWeighthvNV(const GLhalfNV * weight) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexWeighthvNV) {
    prototypeCalled = true;
    glContext->m_glVertexWeighthvNV(weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1hNV(GLuint index, GLhalfNV x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1hNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1hNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1hvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2hNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2hNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2hvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3hNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3hNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3hvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4hNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4hNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4hvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs1hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs1hvNV(index, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs2hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs2hvNV(index, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs3hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs3hvNV(index, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs4hvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs4hvNV(index, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetInternalformatSampleivNV) {
    prototypeCalled = true;
    glContext->m_glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRenderGpuMaskNV(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRenderGpuMaskNV) {
    prototypeCalled = true;
    glContext->m_glRenderGpuMaskNV(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastBufferSubDataNV) {
    prototypeCalled = true;
    glContext->m_glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastCopyBufferSubDataNV) {
    prototypeCalled = true;
    glContext->m_glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastCopyImageSubDataNV) {
    prototypeCalled = true;
    glContext->m_glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastBlitFramebufferNV) {
    prototypeCalled = true;
    glContext->m_glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastFramebufferSampleLocationsfvNV) {
    prototypeCalled = true;
    glContext->m_glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastBarrierNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastBarrierNV) {
    prototypeCalled = true;
    glContext->m_glMulticastBarrierNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastWaitSyncNV) {
    prototypeCalled = true;
    glContext->m_glMulticastWaitSyncNV(signalGpu, waitGpuMask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastGetQueryObjectivNV) {
    prototypeCalled = true;
    glContext->m_glMulticastGetQueryObjectivNV(gpu, id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastGetQueryObjectuivNV) {
    prototypeCalled = true;
    glContext->m_glMulticastGetQueryObjectuivNV(gpu, id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastGetQueryObjecti64vNV) {
    prototypeCalled = true;
    glContext->m_glMulticastGetQueryObjecti64vNV(gpu, id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastGetQueryObjectui64vNV) {
    prototypeCalled = true;
    glContext->m_glMulticastGetQueryObjectui64vNV(gpu, id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUploadGpuMaskNVX(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUploadGpuMaskNVX) {
    prototypeCalled = true;
    glContext->m_glUploadGpuMaskNVX(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastViewportArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastViewportArrayvNVX) {
    prototypeCalled = true;
    glContext->m_glMulticastViewportArrayvNVX(gpu, first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastViewportPositionWScaleNVX(GLuint gpu, GLuint index, GLfloat xcoeff, GLfloat ycoeff) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastViewportPositionWScaleNVX) {
    prototypeCalled = true;
    glContext->m_glMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMulticastScissorArrayvNVX(GLuint gpu, GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMulticastScissorArrayvNVX) {
    prototypeCalled = true;
    glContext->m_glMulticastScissorArrayvNVX(gpu, first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glAsyncCopyBufferSubDataNVX(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * fenceValueArray, GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glAsyncCopyBufferSubDataNVX) {
    prototypeCalled = true;
    result = glContext->m_glAsyncCopyBufferSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glAsyncCopyImageSubDataNVX(GLsizei waitSemaphoreCount, const GLuint * waitSemaphoreArray, const GLuint64 * waitValueArray, GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsizei signalSemaphoreCount, const GLuint * signalSemaphoreArray, const GLuint64 * signalValueArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glAsyncCopyImageSubDataNVX) {
    prototypeCalled = true;
    result = glContext->m_glAsyncCopyImageSubDataNVX(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glCreateProgressFenceNVX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glCreateProgressFenceNVX) {
    prototypeCalled = true;
    result = glContext->m_glCreateProgressFenceNVX();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSignalSemaphoreui64NVX(GLuint signalGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSignalSemaphoreui64NVX) {
    prototypeCalled = true;
    glContext->m_glSignalSemaphoreui64NVX(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWaitSemaphoreui64NVX(GLuint waitGpu, GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWaitSemaphoreui64NVX) {
    prototypeCalled = true;
    glContext->m_glWaitSemaphoreui64NVX(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClientWaitSemaphoreui64NVX(GLsizei fenceObjectCount, const GLuint * semaphoreArray, const GLuint64 * fenceValueArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClientWaitSemaphoreui64NVX) {
    prototypeCalled = true;
    glContext->m_glClientWaitSemaphoreui64NVX(fenceObjectCount, semaphoreArray, fenceValueArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMemoryObjectDetachedResourcesuivNV) {
    prototypeCalled = true;
    glContext->m_glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResetMemoryObjectParameterNV) {
    prototypeCalled = true;
    glContext->m_glResetMemoryObjectParameterNV(memory, pname);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexAttachMemoryNV) {
    prototypeCalled = true;
    glContext->m_glTexAttachMemoryNV(target, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferAttachMemoryNV) {
    prototypeCalled = true;
    glContext->m_glBufferAttachMemoryNV(target, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureAttachMemoryNV) {
    prototypeCalled = true;
    glContext->m_glTextureAttachMemoryNV(texture, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferAttachMemoryNV) {
    prototypeCalled = true;
    glContext->m_glNamedBufferAttachMemoryNV(buffer, memory, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferPageCommitmentMemNV(GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferPageCommitmentMemNV) {
    prototypeCalled = true;
    glContext->m_glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexPageCommitmentMemNV(GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexPageCommitmentMemNV) {
    prototypeCalled = true;
    glContext->m_glTexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedBufferPageCommitmentMemNV(GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedBufferPageCommitmentMemNV) {
    prototypeCalled = true;
    glContext->m_glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexturePageCommitmentMemNV(GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexturePageCommitmentMemNV) {
    prototypeCalled = true;
    glContext->m_glTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawMeshTasksNV(GLuint first, GLuint count) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawMeshTasksNV) {
    prototypeCalled = true;
    glContext->m_glDrawMeshTasksNV(first, count);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawMeshTasksIndirectNV(GLintptr indirect) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawMeshTasksIndirectNV) {
    prototypeCalled = true;
    glContext->m_glDrawMeshTasksIndirectNV(indirect);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawMeshTasksIndirectNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiDrawMeshTasksIndirectCountNV) {
    prototypeCalled = true;
    glContext->m_glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenOcclusionQueriesNV(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenOcclusionQueriesNV) {
    prototypeCalled = true;
    glContext->m_glGenOcclusionQueriesNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteOcclusionQueriesNV) {
    prototypeCalled = true;
    glContext->m_glDeleteOcclusionQueriesNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsOcclusionQueryNV(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsOcclusionQueryNV) {
    prototypeCalled = true;
    result = glContext->m_glIsOcclusionQueryNV(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginOcclusionQueryNV(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginOcclusionQueryNV) {
    prototypeCalled = true;
    glContext->m_glBeginOcclusionQueryNV(id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndOcclusionQueryNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndOcclusionQueryNV) {
    prototypeCalled = true;
    glContext->m_glEndOcclusionQueryNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetOcclusionQueryivNV) {
    prototypeCalled = true;
    glContext->m_glGetOcclusionQueryivNV(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetOcclusionQueryuivNV) {
    prototypeCalled = true;
    glContext->m_glGetOcclusionQueryuivNV(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramBufferParametersfvNV) {
    prototypeCalled = true;
    glContext->m_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramBufferParametersIivNV) {
    prototypeCalled = true;
    glContext->m_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramBufferParametersIuivNV) {
    prototypeCalled = true;
    glContext->m_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGenPathsNV(GLsizei range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGenPathsNV) {
    prototypeCalled = true;
    result = glContext->m_glGenPathsNV(range);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeletePathsNV(GLuint path, GLsizei range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeletePathsNV) {
    prototypeCalled = true;
    glContext->m_glDeletePathsNV(path, range);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsPathNV(GLuint path) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsPathNV) {
    prototypeCalled = true;
    result = glContext->m_glIsPathNV(path);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathCommandsNV) {
    prototypeCalled = true;
    glContext->m_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathCoordsNV) {
    prototypeCalled = true;
    glContext->m_glPathCoordsNV(path, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathSubCommandsNV) {
    prototypeCalled = true;
    glContext->m_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathSubCoordsNV) {
    prototypeCalled = true;
    glContext->m_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathStringNV) {
    prototypeCalled = true;
    glContext->m_glPathStringNV(path, format, length, pathString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathGlyphsNV) {
    prototypeCalled = true;
    glContext->m_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathGlyphRangeNV) {
    prototypeCalled = true;
    glContext->m_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glWeightPathsNV) {
    prototypeCalled = true;
    glContext->m_glWeightPathsNV(resultPath, numPaths, paths, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyPathNV) {
    prototypeCalled = true;
    glContext->m_glCopyPathNV(resultPath, srcPath);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInterpolatePathsNV) {
    prototypeCalled = true;
    glContext->m_glInterpolatePathsNV(resultPath, pathA, pathB, weight);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformPathNV) {
    prototypeCalled = true;
    glContext->m_glTransformPathNV(resultPath, srcPath, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathParameterivNV(GLuint path, GLenum pname, const GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathParameterivNV) {
    prototypeCalled = true;
    glContext->m_glPathParameterivNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathParameteriNV) {
    prototypeCalled = true;
    glContext->m_glPathParameteriNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glPathParameterfvNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathParameterfNV) {
    prototypeCalled = true;
    glContext->m_glPathParameterfNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathDashArrayNV) {
    prototypeCalled = true;
    glContext->m_glPathDashArrayNV(path, dashCount, dashArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathStencilFuncNV) {
    prototypeCalled = true;
    glContext->m_glPathStencilFuncNV(func, ref, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathStencilDepthOffsetNV) {
    prototypeCalled = true;
    glContext->m_glPathStencilDepthOffsetNV(factor, units);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilFillPathNV) {
    prototypeCalled = true;
    glContext->m_glStencilFillPathNV(path, fillMode, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilStrokePathNV) {
    prototypeCalled = true;
    glContext->m_glStencilStrokePathNV(path, reference, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilFillPathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilStrokePathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathCoverDepthFuncNV(GLenum func) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathCoverDepthFuncNV) {
    prototypeCalled = true;
    glContext->m_glPathCoverDepthFuncNV(func);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverFillPathNV(GLuint path, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverFillPathNV) {
    prototypeCalled = true;
    glContext->m_glCoverFillPathNV(path, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverStrokePathNV(GLuint path, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverStrokePathNV) {
    prototypeCalled = true;
    glContext->m_glCoverStrokePathNV(path, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverFillPathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCoverStrokePathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetPathParameterivNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetPathParameterfvNV(path, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathCommandsNV(GLuint path, GLubyte * commands) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathCommandsNV) {
    prototypeCalled = true;
    glContext->m_glGetPathCommandsNV(path, commands);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathCoordsNV(GLuint path, GLfloat * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathCoordsNV) {
    prototypeCalled = true;
    glContext->m_glGetPathCoordsNV(path, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathDashArrayNV(GLuint path, GLfloat * dashArray) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathDashArrayNV) {
    prototypeCalled = true;
    glContext->m_glGetPathDashArrayNV(path, dashArray);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathMetricsNV) {
    prototypeCalled = true;
    glContext->m_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathMetricRangeNV) {
    prototypeCalled = true;
    glContext->m_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathSpacingNV) {
    prototypeCalled = true;
    glContext->m_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsPointInFillPathNV) {
    prototypeCalled = true;
    result = glContext->m_glIsPointInFillPathNV(path, mask, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsPointInStrokePathNV) {
    prototypeCalled = true;
    result = glContext->m_glIsPointInStrokePathNV(path, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLfloat _glew_gl_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLfloat result = ((GLfloat)0);
  if (!prototypeCalled && glContext->m_glGetPathLengthNV) {
    prototypeCalled = true;
    result = glContext->m_glGetPathLengthNV(path, startSegment, numSegments);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glPointAlongPathNV) {
    prototypeCalled = true;
    result = glContext->m_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoad3x2fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixLoad3x2fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoad3x3fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixLoad3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixLoadTranspose3x3fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixLoadTranspose3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMult3x2fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixMult3x2fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMult3x3fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixMult3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMatrixMultTranspose3x3fNV) {
    prototypeCalled = true;
    glContext->m_glMatrixMultTranspose3x3fNV(matrixMode, m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilThenCoverFillPathNV) {
    prototypeCalled = true;
    glContext->m_glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilThenCoverStrokePathNV) {
    prototypeCalled = true;
    glContext->m_glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilThenCoverFillPathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStencilThenCoverStrokePathInstancedNV) {
    prototypeCalled = true;
    glContext->m_glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint * baseAndCount) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glPathGlyphIndexRangeNV) {
    prototypeCalled = true;
    result = glContext->m_glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glPathGlyphIndexArrayNV) {
    prototypeCalled = true;
    result = glContext->m_glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glPathMemoryGlyphIndexArrayNV) {
    prototypeCalled = true;
    result = glContext->m_glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramPathFragmentInputGenNV) {
    prototypeCalled = true;
    glContext->m_glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramResourcefvNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramResourcefvNV(program, programInterface, index, propCount, props, count, length, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathColorGenNV) {
    prototypeCalled = true;
    glContext->m_glPathColorGenNV(color, genMode, colorFormat, coeffs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathTexGenNV) {
    prototypeCalled = true;
    glContext->m_glPathTexGenNV(texCoordSet, genMode, components, coeffs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPathFogGenNV(GLenum genMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPathFogGenNV) {
    prototypeCalled = true;
    glContext->m_glPathFogGenNV(genMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathColorGenivNV) {
    prototypeCalled = true;
    glContext->m_glGetPathColorGenivNV(color, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathColorGenfvNV) {
    prototypeCalled = true;
    glContext->m_glGetPathColorGenfvNV(color, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathTexGenivNV) {
    prototypeCalled = true;
    glContext->m_glGetPathTexGenivNV(texCoordSet, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPathTexGenfvNV) {
    prototypeCalled = true;
    glContext->m_glGetPathTexGenfvNV(texCoordSet, pname, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelDataRangeNV) {
    prototypeCalled = true;
    glContext->m_glPixelDataRangeNV(target, length, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushPixelDataRangeNV(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushPixelDataRangeNV) {
    prototypeCalled = true;
    glContext->m_glFlushPixelDataRangeNV(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameteriNV(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameteriNV) {
    prototypeCalled = true;
    glContext->m_glPointParameteriNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterivNV(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterivNV) {
    prototypeCalled = true;
    glContext->m_glPointParameterivNV(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPresentFrameKeyedNV) {
    prototypeCalled = true;
    glContext->m_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPresentFrameDualFillNV) {
    prototypeCalled = true;
    glContext->m_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoivNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoivNV(video_slot, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideouivNV) {
    prototypeCalled = true;
    glContext->m_glGetVideouivNV(video_slot, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoi64vNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoi64vNV(video_slot, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoui64vNV(video_slot, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrimitiveRestartNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrimitiveRestartNV) {
    prototypeCalled = true;
    glContext->m_glPrimitiveRestartNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrimitiveRestartIndexNV(GLuint index) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrimitiveRestartIndexNV) {
    prototypeCalled = true;
    glContext->m_glPrimitiveRestartIndexNV(index);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glQueryResourceNV(GLenum queryType, GLint tagId, GLuint count, GLint * buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glQueryResourceNV) {
    prototypeCalled = true;
    result = glContext->m_glQueryResourceNV(queryType, tagId, count, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenQueryResourceTagNV(GLsizei n, GLint * tagIds) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenQueryResourceTagNV) {
    prototypeCalled = true;
    glContext->m_glGenQueryResourceTagNV(n, tagIds);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteQueryResourceTagNV) {
    prototypeCalled = true;
    glContext->m_glDeleteQueryResourceTagNV(n, tagIds);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glQueryResourceTagNV(GLint tagId, const GLchar * tagString) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glQueryResourceTagNV) {
    prototypeCalled = true;
    glContext->m_glQueryResourceTagNV(tagId, tagString);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerParameterfvNV(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glCombinerParameterfvNV(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerParameterfNV(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerParameterfNV) {
    prototypeCalled = true;
    glContext->m_glCombinerParameterfNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerParameterivNV(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerParameterivNV) {
    prototypeCalled = true;
    glContext->m_glCombinerParameterivNV(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerParameteriNV(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerParameteriNV) {
    prototypeCalled = true;
    glContext->m_glCombinerParameteriNV(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerInputNV) {
    prototypeCalled = true;
    glContext->m_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerOutputNV) {
    prototypeCalled = true;
    glContext->m_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFinalCombinerInputNV) {
    prototypeCalled = true;
    glContext->m_glFinalCombinerInputNV(variable, input, mapping, componentUsage);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCombinerInputParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCombinerInputParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCombinerOutputParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCombinerOutputParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetCombinerOutputParameterivNV(stage, portion, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFinalCombinerInputParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetFinalCombinerInputParameterfvNV(variable, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFinalCombinerInputParameterivNV) {
    prototypeCalled = true;
    glContext->m_glGetFinalCombinerInputParameterivNV(variable, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCombinerStageParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glCombinerStageParameterfvNV(stage, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetCombinerStageParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetCombinerStageParameterfvNV(stage, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferSampleLocationsfvNV) {
    prototypeCalled = true;
    glContext->m_glFramebufferSampleLocationsfvNV(target, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNamedFramebufferSampleLocationsfvNV) {
    prototypeCalled = true;
    glContext->m_glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResolveDepthValuesNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResolveDepthValuesNV) {
    prototypeCalled = true;
    glContext->m_glResolveDepthValuesNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScissorExclusiveNV) {
    prototypeCalled = true;
    glContext->m_glScissorExclusiveNV(x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScissorExclusiveArrayvNV) {
    prototypeCalled = true;
    glContext->m_glScissorExclusiveArrayvNV(first, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeBufferResidentNV(GLenum target, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeBufferResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeBufferResidentNV(target, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeBufferNonResidentNV(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeBufferNonResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeBufferNonResidentNV(target);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsBufferResidentNV(GLenum target) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsBufferResidentNV) {
    prototypeCalled = true;
    result = glContext->m_glIsBufferResidentNV(target);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeNamedBufferResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeNamedBufferResidentNV(buffer, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMakeNamedBufferNonResidentNV(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMakeNamedBufferNonResidentNV) {
    prototypeCalled = true;
    glContext->m_glMakeNamedBufferNonResidentNV(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsNamedBufferResidentNV(GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsNamedBufferResidentNV) {
    prototypeCalled = true;
    result = glContext->m_glIsNamedBufferResidentNV(buffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetBufferParameterui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetBufferParameterui64vNV(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetNamedBufferParameterui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetNamedBufferParameterui64vNV(buffer, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetIntegerui64vNV(GLenum value, GLuint64EXT * result) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetIntegerui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetIntegerui64vNV(value, result);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformui64NV(GLint location, GLuint64EXT value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformui64NV) {
    prototypeCalled = true;
    glContext->m_glUniformui64NV(location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glUniformui64vNV) {
    prototypeCalled = true;
    glContext->m_glUniformui64vNV(location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformui64NV) {
    prototypeCalled = true;
    glContext->m_glProgramUniformui64NV(program, location, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramUniformui64vNV) {
    prototypeCalled = true;
    glContext->m_glProgramUniformui64vNV(program, location, count, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindShadingRateImageNV(GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindShadingRateImageNV) {
    prototypeCalled = true;
    glContext->m_glBindShadingRateImageNV(texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum * rate) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShadingRateImagePaletteNV) {
    prototypeCalled = true;
    glContext->m_glGetShadingRateImagePaletteNV(viewport, entry, rate);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint * location) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetShadingRateSampleLocationivNV) {
    prototypeCalled = true;
    glContext->m_glGetShadingRateSampleLocationivNV(rate, samples, index, location);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShadingRateImageBarrierNV(GLboolean synchronize) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShadingRateImageBarrierNV) {
    prototypeCalled = true;
    glContext->m_glShadingRateImageBarrierNV(synchronize);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShadingRateImagePaletteNV) {
    prototypeCalled = true;
    glContext->m_glShadingRateImagePaletteNV(viewport, first, count, rates);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShadingRateSampleOrderNV(GLenum order) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShadingRateSampleOrderNV) {
    prototypeCalled = true;
    glContext->m_glShadingRateSampleOrderNV(order);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint * locations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glShadingRateSampleOrderCustomNV) {
    prototypeCalled = true;
    glContext->m_glShadingRateSampleOrderCustomNV(rate, samples, locations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureBarrierNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureBarrierNV) {
    prototypeCalled = true;
    glContext->m_glTextureBarrierNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage2DMultisampleCoverageNV) {
    prototypeCalled = true;
    glContext->m_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage3DMultisampleCoverageNV) {
    prototypeCalled = true;
    glContext->m_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage2DMultisampleNV) {
    prototypeCalled = true;
    glContext->m_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage3DMultisampleNV) {
    prototypeCalled = true;
    glContext->m_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage2DMultisampleCoverageNV) {
    prototypeCalled = true;
    glContext->m_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureImage3DMultisampleCoverageNV) {
    prototypeCalled = true;
    glContext->m_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginTransformFeedbackNV(GLenum primitiveMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glBeginTransformFeedbackNV(primitiveMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndTransformFeedbackNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glEndTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackAttribsNV) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackAttribsNV(count, attribs, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferRangeNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferRangeNV(target, index, buffer, offset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferOffsetNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferOffsetNV(target, index, buffer, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindBufferBaseNV) {
    prototypeCalled = true;
    glContext->m_glBindBufferBaseNV(target, index, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackVaryingsNV) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glActiveVaryingNV(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glActiveVaryingNV) {
    prototypeCalled = true;
    glContext->m_glActiveVaryingNV(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetVaryingLocationNV(GLuint program, const GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetVaryingLocationNV) {
    prototypeCalled = true;
    result = glContext->m_glGetVaryingLocationNV(program, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetActiveVaryingNV) {
    prototypeCalled = true;
    glContext->m_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTransformFeedbackVaryingNV) {
    prototypeCalled = true;
    glContext->m_glGetTransformFeedbackVaryingNV(program, index, location);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTransformFeedbackStreamAttribsNV) {
    prototypeCalled = true;
    glContext->m_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindTransformFeedbackNV(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glBindTransformFeedbackNV(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteTransformFeedbacksNV) {
    prototypeCalled = true;
    glContext->m_glDeleteTransformFeedbacksNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenTransformFeedbacksNV(GLsizei n, GLuint * ids) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenTransformFeedbacksNV) {
    prototypeCalled = true;
    glContext->m_glGenTransformFeedbacksNV(n, ids);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsTransformFeedbackNV(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsTransformFeedbackNV) {
    prototypeCalled = true;
    result = glContext->m_glIsTransformFeedbackNV(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPauseTransformFeedbackNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPauseTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glPauseTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glResumeTransformFeedbackNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glResumeTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glResumeTransformFeedbackNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawTransformFeedbackNV(GLenum mode, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawTransformFeedbackNV) {
    prototypeCalled = true;
    glContext->m_glDrawTransformFeedbackNV(mode, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUInitNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUInitNV(vdpDevice, getProcAddress);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUFiniNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUFiniNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUFiniNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLvdpauSurfaceNV _glew_gl_glVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLvdpauSurfaceNV result = ((GLvdpauSurfaceNV)0);
  if (!prototypeCalled && glContext->m_glVDPAURegisterVideoSurfaceNV) {
    prototypeCalled = true;
    result = glContext->m_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLvdpauSurfaceNV _glew_gl_glVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLvdpauSurfaceNV result = ((GLvdpauSurfaceNV)0);
  if (!prototypeCalled && glContext->m_glVDPAURegisterOutputSurfaceNV) {
    prototypeCalled = true;
    result = glContext->m_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glVDPAUIsSurfaceNV) {
    prototypeCalled = true;
    result = glContext->m_glVDPAUIsSurfaceNV(surface);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUUnregisterSurfaceNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUUnregisterSurfaceNV(surface);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUGetSurfaceivNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUGetSurfaceivNV(surface, pname, count, length, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUSurfaceAccessNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUSurfaceAccessNV(surface, access);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUMapSurfacesNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUMapSurfacesNV(numSurfaces, surfaces);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVDPAUUnmapSurfacesNV) {
    prototypeCalled = true;
    glContext->m_glVDPAUUnmapSurfacesNV(numSurface, surfaces);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLvdpauSurfaceNV _glew_gl_glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames, GLboolean isFrameStructure) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLvdpauSurfaceNV result = ((GLvdpauSurfaceNV)0);
  if (!prototypeCalled && glContext->m_glVDPAURegisterVideoSurfaceWithPictureStructureNV) {
    prototypeCalled = true;
    result = glContext->m_glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushVertexArrayRangeNV() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushVertexArrayRangeNV) {
    prototypeCalled = true;
    glContext->m_glFlushVertexArrayRangeNV();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexArrayRangeNV(GLsizei length, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexArrayRangeNV) {
    prototypeCalled = true;
    glContext->m_glVertexArrayRangeNV(length, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1i64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1i64NV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2i64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2i64NV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3i64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3i64NV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4i64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4i64NV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1i64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1i64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2i64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2i64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3i64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3i64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4i64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4i64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1ui64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1ui64NV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2ui64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2ui64NV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3ui64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3ui64NV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4ui64NV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4ui64NV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL1ui64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL1ui64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL2ui64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL2ui64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL3ui64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL3ui64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribL4ui64vNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribL4ui64vNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribLi64vNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLi64vNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribLui64vNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribLui64vNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribLFormatNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribLFormatNV(index, size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBufferAddressRangeNV) {
    prototypeCalled = true;
    glContext->m_glBufferAddressRangeNV(pname, index, address, length);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexFormatNV) {
    prototypeCalled = true;
    glContext->m_glVertexFormatNV(size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormalFormatNV(GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormalFormatNV) {
    prototypeCalled = true;
    glContext->m_glNormalFormatNV(type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorFormatNV) {
    prototypeCalled = true;
    glContext->m_glColorFormatNV(size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexFormatNV(GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexFormatNV) {
    prototypeCalled = true;
    glContext->m_glIndexFormatNV(type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoordFormatNV) {
    prototypeCalled = true;
    glContext->m_glTexCoordFormatNV(size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEdgeFlagFormatNV(GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEdgeFlagFormatNV) {
    prototypeCalled = true;
    glContext->m_glEdgeFlagFormatNV(stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSecondaryColorFormatNV) {
    prototypeCalled = true;
    glContext->m_glSecondaryColorFormatNV(size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogCoordFormatNV(GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogCoordFormatNV) {
    prototypeCalled = true;
    glContext->m_glFogCoordFormatNV(type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribFormatNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribFormatNV(index, size, type, normalized, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribIFormatNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribIFormatNV(index, size, type, stride);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetIntegerui64i_vNV) {
    prototypeCalled = true;
    glContext->m_glGetIntegerui64i_vNV(value, index, result);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glAreProgramsResidentNV) {
    prototypeCalled = true;
    result = glContext->m_glAreProgramsResidentNV(n, programs, residences);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindProgramNV(GLenum target, GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindProgramNV) {
    prototypeCalled = true;
    glContext->m_glBindProgramNV(target, id);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteProgramsNV(GLsizei n, const GLuint * programs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteProgramsNV) {
    prototypeCalled = true;
    glContext->m_glDeleteProgramsNV(n, programs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glExecuteProgramNV) {
    prototypeCalled = true;
    glContext->m_glExecuteProgramNV(target, id, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGenProgramsNV(GLsizei n, GLuint * programs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGenProgramsNV) {
    prototypeCalled = true;
    glContext->m_glGenProgramsNV(n, programs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramParameterdvNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramParameterdvNV(target, index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramParameterfvNV(target, index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramivNV(GLuint id, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramivNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramivNV(id, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetProgramStringNV) {
    prototypeCalled = true;
    glContext->m_glGetProgramStringNV(id, pname, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTrackMatrixivNV) {
    prototypeCalled = true;
    glContext->m_glGetTrackMatrixivNV(target, address, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribdvNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribdvNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribfvNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribfvNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribivNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribivNV(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribPointervNV) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribPointervNV(index, pname, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsProgramNV(GLuint id) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsProgramNV) {
    prototypeCalled = true;
    result = glContext->m_glIsProgramNV(id);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadProgramNV) {
    prototypeCalled = true;
    glContext->m_glLoadProgramNV(target, id, len, program);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameter4dNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameter4dNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameter4dvNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameter4dvNV(target, index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameter4fNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameter4fNV(target, index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameter4fvNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameter4fvNV(target, index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameters4dvNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameters4dvNV(target, index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glProgramParameters4fvNV) {
    prototypeCalled = true;
    glContext->m_glProgramParameters4fvNV(target, index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRequestResidentProgramsNV(GLsizei n, const GLuint * programs) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRequestResidentProgramsNV) {
    prototypeCalled = true;
    glContext->m_glRequestResidentProgramsNV(n, programs);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTrackMatrixNV) {
    prototypeCalled = true;
    glContext->m_glTrackMatrixNV(target, address, matrix, transform);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribPointerNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribPointerNV(index, fsize, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1dNV(GLuint index, GLdouble x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1dvNV(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1fNV(GLuint index, GLfloat x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1fvNV(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1sNV(GLuint index, GLshort x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1sNV(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib1svNV(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib1svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib1svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2dvNV(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2fvNV(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2sNV(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib2svNV(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib2svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib2svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3dvNV(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3fvNV(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3sNV(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib3svNV(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib3svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib3svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4dNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4dvNV(GLuint index, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4dvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4fNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4fvNV(GLuint index, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4fvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4sNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4sNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4svNV(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4svNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubNV(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttrib4ubvNV(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttrib4ubvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttrib4ubvNV(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs1dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs1dvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs1fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs1fvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs1svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs1svNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs2dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs2dvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs2fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs2fvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs2svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs2svNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs3dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs3dvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs3fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs3fvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs3svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs3svNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs4dvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs4dvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs4fvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs4fvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs4svNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs4svNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribs4ubvNV) {
    prototypeCalled = true;
    glContext->m_glVertexAttribs4ubvNV(index, count, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1iEXT(GLuint index, GLint x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1iEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2iEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3iEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4iEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4iEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1uiEXT(GLuint index, GLuint x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1uiEXT(index, x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2uiEXT(index, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3uiEXT(index, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4uiEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4uiEXT(index, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1ivEXT(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2ivEXT(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3ivEXT(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4ivEXT(GLuint index, const GLint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4ivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI1uivEXT(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI1uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI1uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI2uivEXT(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI2uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI2uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI3uivEXT(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI3uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI3uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4uivEXT(GLuint index, const GLuint * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4uivEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4uivEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4bvEXT(GLuint index, const GLbyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4bvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4bvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4svEXT(GLuint index, const GLshort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4svEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4svEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4ubvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4ubvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribI4usvEXT(GLuint index, const GLushort * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribI4usvEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribI4usvEXT(index, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertexAttribIPointerEXT) {
    prototypeCalled = true;
    glContext->m_glVertexAttribIPointerEXT(index, size, type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribIivEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIivEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVertexAttribIuivEXT) {
    prototypeCalled = true;
    glContext->m_glGetVertexAttribIuivEXT(index, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBeginVideoCaptureNV(GLuint video_capture_slot) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBeginVideoCaptureNV) {
    prototypeCalled = true;
    glContext->m_glBeginVideoCaptureNV(video_capture_slot);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVideoCaptureStreamBufferNV) {
    prototypeCalled = true;
    glContext->m_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBindVideoCaptureStreamTextureNV) {
    prototypeCalled = true;
    glContext->m_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEndVideoCaptureNV(GLuint video_capture_slot) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEndVideoCaptureNV) {
    prototypeCalled = true;
    glContext->m_glEndVideoCaptureNV(video_capture_slot);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoCaptureivNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoCaptureivNV(video_capture_slot, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoCaptureStreamivNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoCaptureStreamfvNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetVideoCaptureStreamdvNV) {
    prototypeCalled = true;
    glContext->m_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLenum _glew_gl_glVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLenum result = ((GLenum)0);
  if (!prototypeCalled && glContext->m_glVideoCaptureNV) {
    prototypeCalled = true;
    result = glContext->m_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVideoCaptureStreamParameterivNV) {
    prototypeCalled = true;
    glContext->m_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVideoCaptureStreamParameterfvNV) {
    prototypeCalled = true;
    glContext->m_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVideoCaptureStreamParameterdvNV) {
    prototypeCalled = true;
    glContext->m_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glViewportSwizzleNV) {
    prototypeCalled = true;
    glContext->m_glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1bOES(GLenum texture, GLbyte s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1bOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1bOES(texture, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1bvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1bvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2bOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2bOES(texture, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2bvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2bvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3bOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3bOES(texture, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3bvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3bvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4bOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4bOES(texture, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4bvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4bvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1bOES(GLbyte s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1bOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord1bOES(s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1bvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord1bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2bOES(GLbyte s, GLbyte t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2bOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord2bOES(s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2bvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord2bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3bOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord3bOES(s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3bvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord3bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4bOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord4bOES(s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4bvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord4bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2bOES(GLbyte x, GLbyte y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2bOES) {
    prototypeCalled = true;
    glContext->m_glVertex2bOES(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2bvOES) {
    prototypeCalled = true;
    glContext->m_glVertex2bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3bOES(GLbyte x, GLbyte y, GLbyte z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3bOES) {
    prototypeCalled = true;
    glContext->m_glVertex3bOES(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3bvOES) {
    prototypeCalled = true;
    glContext->m_glVertex3bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4bOES) {
    prototypeCalled = true;
    glContext->m_glVertex4bOES(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4bvOES(const GLbyte * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4bvOES) {
    prototypeCalled = true;
    glContext->m_glVertex4bvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAlphaFuncxOES(GLenum func, GLfixed ref) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAlphaFuncxOES) {
    prototypeCalled = true;
    glContext->m_glAlphaFuncxOES(func, ref);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearColorxOES) {
    prototypeCalled = true;
    glContext->m_glClearColorxOES(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearDepthxOES(GLfixed depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearDepthxOES) {
    prototypeCalled = true;
    glContext->m_glClearDepthxOES(depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClipPlanexOES(GLenum plane, const GLfixed * equation) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClipPlanexOES) {
    prototypeCalled = true;
    glContext->m_glClipPlanexOES(plane, equation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4xOES) {
    prototypeCalled = true;
    glContext->m_glColor4xOES(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangexOES(GLfixed n, GLfixed f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangexOES) {
    prototypeCalled = true;
    glContext->m_glDepthRangexOES(n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogxOES(GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogxOES) {
    prototypeCalled = true;
    glContext->m_glFogxOES(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogxvOES(GLenum pname, const GLfixed * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogxvOES) {
    prototypeCalled = true;
    glContext->m_glFogxvOES(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFrustumxOES) {
    prototypeCalled = true;
    glContext->m_glFrustumxOES(l, r, b, t, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetClipPlanexOES(GLenum plane, GLfixed * equation) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetClipPlanexOES) {
    prototypeCalled = true;
    glContext->m_glGetClipPlanexOES(plane, equation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFixedvOES(GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFixedvOES) {
    prototypeCalled = true;
    glContext->m_glGetFixedvOES(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexEnvxvOES) {
    prototypeCalled = true;
    glContext->m_glGetTexEnvxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glGetTexParameterxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLightModelxOES(GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLightModelxOES) {
    prototypeCalled = true;
    glContext->m_glLightModelxOES(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLightModelxvOES(GLenum pname, const GLfixed * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLightModelxvOES) {
    prototypeCalled = true;
    glContext->m_glLightModelxvOES(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLightxOES(GLenum light, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLightxOES) {
    prototypeCalled = true;
    glContext->m_glLightxOES(light, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLightxvOES(GLenum light, GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLightxvOES) {
    prototypeCalled = true;
    glContext->m_glLightxvOES(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLineWidthxOES(GLfixed width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLineWidthxOES) {
    prototypeCalled = true;
    glContext->m_glLineWidthxOES(width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadMatrixxOES(const GLfixed * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadMatrixxOES) {
    prototypeCalled = true;
    glContext->m_glLoadMatrixxOES(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMaterialxOES) {
    prototypeCalled = true;
    glContext->m_glMaterialxOES(face, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMaterialxvOES) {
    prototypeCalled = true;
    glContext->m_glMaterialxvOES(face, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultMatrixxOES(const GLfixed * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultMatrixxOES) {
    prototypeCalled = true;
    glContext->m_glMultMatrixxOES(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4xOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4xOES(texture, s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3xOES) {
    prototypeCalled = true;
    glContext->m_glNormal3xOES(nx, ny, nz);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glOrthoxOES) {
    prototypeCalled = true;
    glContext->m_glOrthoxOES(l, r, b, t, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterxvOES(GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glPointParameterxvOES(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointSizexOES(GLfixed size) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointSizexOES) {
    prototypeCalled = true;
    glContext->m_glPointSizexOES(size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPolygonOffsetxOES(GLfixed factor, GLfixed units) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPolygonOffsetxOES) {
    prototypeCalled = true;
    glContext->m_glPolygonOffsetxOES(factor, units);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRotatexOES) {
    prototypeCalled = true;
    glContext->m_glRotatexOES(angle, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glScalexOES(GLfixed x, GLfixed y, GLfixed z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glScalexOES) {
    prototypeCalled = true;
    glContext->m_glScalexOES(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexEnvxOES) {
    prototypeCalled = true;
    glContext->m_glTexEnvxOES(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexEnvxvOES) {
    prototypeCalled = true;
    glContext->m_glTexEnvxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterxOES) {
    prototypeCalled = true;
    glContext->m_glTexParameterxOES(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glTexParameterxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTranslatexOES) {
    prototypeCalled = true;
    glContext->m_glTranslatexOES(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAccumxOES(GLenum op, GLfixed value) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAccumxOES) {
    prototypeCalled = true;
    glContext->m_glAccumxOES(op, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBitmapxOES) {
    prototypeCalled = true;
    glContext->m_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glBlendColorxOES) {
    prototypeCalled = true;
    glContext->m_glBlendColorxOES(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearAccumxOES) {
    prototypeCalled = true;
    glContext->m_glClearAccumxOES(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3xOES) {
    prototypeCalled = true;
    glContext->m_glColor3xOES(red, green, blue);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3xvOES(const GLfixed * components) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3xvOES) {
    prototypeCalled = true;
    glContext->m_glColor3xvOES(components);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4xvOES(const GLfixed * components) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4xvOES) {
    prototypeCalled = true;
    glContext->m_glColor4xvOES(components);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterxOES) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterxOES(target, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glConvolutionParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glConvolutionParameterxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvalCoord1xOES(GLfixed u) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvalCoord1xOES) {
    prototypeCalled = true;
    glContext->m_glEvalCoord1xOES(u);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvalCoord1xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvalCoord1xvOES) {
    prototypeCalled = true;
    glContext->m_glEvalCoord1xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvalCoord2xOES(GLfixed u, GLfixed v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvalCoord2xOES) {
    prototypeCalled = true;
    glContext->m_glEvalCoord2xOES(u, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glEvalCoord2xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glEvalCoord2xvOES) {
    prototypeCalled = true;
    glContext->m_glEvalCoord2xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFeedbackBufferxOES) {
    prototypeCalled = true;
    glContext->m_glFeedbackBufferxOES(n, type, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetConvolutionParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glGetConvolutionParameterxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetHistogramParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glGetHistogramParameterxvOES(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetLightxOES(GLenum light, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetLightxOES) {
    prototypeCalled = true;
    glContext->m_glGetLightxOES(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMapxvOES(GLenum target, GLenum query, GLfixed * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMapxvOES) {
    prototypeCalled = true;
    glContext->m_glGetMapxvOES(target, query, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetMaterialxOES) {
    prototypeCalled = true;
    glContext->m_glGetMaterialxOES(face, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPixelMapxv(GLenum map, GLint size, GLfixed * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPixelMapxv) {
    prototypeCalled = true;
    glContext->m_glGetPixelMapxv(map, size, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexGenxvOES) {
    prototypeCalled = true;
    glContext->m_glGetTexGenxvOES(coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexLevelParameterxvOES) {
    prototypeCalled = true;
    glContext->m_glGetTexLevelParameterxvOES(target, level, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexxOES(GLfixed component) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexxOES) {
    prototypeCalled = true;
    glContext->m_glIndexxOES(component);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIndexxvOES(const GLfixed * component) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIndexxvOES) {
    prototypeCalled = true;
    glContext->m_glIndexxvOES(component);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadTransposeMatrixxOES(const GLfixed * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadTransposeMatrixxOES) {
    prototypeCalled = true;
    glContext->m_glLoadTransposeMatrixxOES(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMap1xOES) {
    prototypeCalled = true;
    glContext->m_glMap1xOES(target, u1, u2, stride, order, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMap2xOES) {
    prototypeCalled = true;
    glContext->m_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapGrid1xOES) {
    prototypeCalled = true;
    glContext->m_glMapGrid1xOES(n, u1, u2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMapGrid2xOES) {
    prototypeCalled = true;
    glContext->m_glMapGrid2xOES(n, u1, u2, v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultTransposeMatrixxOES(const GLfixed * m) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultTransposeMatrixxOES) {
    prototypeCalled = true;
    glContext->m_glMultTransposeMatrixxOES(m);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1xOES(GLenum texture, GLfixed s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1xOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1xOES(texture, s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord1xvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord1xvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2xOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2xOES(texture, s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord2xvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord2xvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3xOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3xOES(texture, s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord3xvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord3xvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glMultiTexCoord4xvOES) {
    prototypeCalled = true;
    glContext->m_glMultiTexCoord4xvOES(texture, coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3xvOES) {
    prototypeCalled = true;
    glContext->m_glNormal3xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPassThroughxOES(GLfixed token) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPassThroughxOES) {
    prototypeCalled = true;
    glContext->m_glPassThroughxOES(token);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelMapx(GLenum map, GLint size, const GLfixed * values) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelMapx) {
    prototypeCalled = true;
    glContext->m_glPixelMapx(map, size, values);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelStorex(GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelStorex) {
    prototypeCalled = true;
    glContext->m_glPixelStorex(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTransferxOES(GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTransferxOES) {
    prototypeCalled = true;
    glContext->m_glPixelTransferxOES(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelZoomxOES) {
    prototypeCalled = true;
    glContext->m_glPixelZoomxOES(xfactor, yfactor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPrioritizeTexturesxOES) {
    prototypeCalled = true;
    glContext->m_glPrioritizeTexturesxOES(n, textures, priorities);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos2xOES(GLfixed x, GLfixed y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos2xOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos2xOES(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos2xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos2xvOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos2xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos3xOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos3xOES(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos3xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos3xvOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos3xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos4xOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos4xOES(x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRasterPos4xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRasterPos4xvOES) {
    prototypeCalled = true;
    glContext->m_glRasterPos4xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRectxOES) {
    prototypeCalled = true;
    glContext->m_glRectxOES(x1, y1, x2, y2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glRectxvOES(const GLfixed * v1, const GLfixed * v2) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glRectxvOES) {
    prototypeCalled = true;
    glContext->m_glRectxvOES(v1, v2);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1xOES(GLfixed s) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1xOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord1xOES(s);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord1xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord1xvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord1xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2xOES(GLfixed s, GLfixed t) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2xOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord2xOES(s, t);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2xvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord2xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3xOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord3xOES(s, t, r);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord3xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord3xvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord3xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4xOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord4xOES(s, t, r, q);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4xvOES) {
    prototypeCalled = true;
    glContext->m_glTexCoord4xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexGenxOES) {
    prototypeCalled = true;
    glContext->m_glTexGenxOES(coord, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexGenxvOES) {
    prototypeCalled = true;
    glContext->m_glTexGenxvOES(coord, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2xOES(GLfixed x) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2xOES) {
    prototypeCalled = true;
    glContext->m_glVertex2xOES(x);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex2xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex2xvOES) {
    prototypeCalled = true;
    glContext->m_glVertex2xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3xOES(GLfixed x, GLfixed y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3xOES) {
    prototypeCalled = true;
    glContext->m_glVertex3xOES(x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex3xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex3xvOES) {
    prototypeCalled = true;
    glContext->m_glVertex3xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4xOES) {
    prototypeCalled = true;
    glContext->m_glVertex4xOES(x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glVertex4xvOES(const GLfixed * coords) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glVertex4xvOES) {
    prototypeCalled = true;
    glContext->m_glVertex4xvOES(coords);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLbitfield _glew_gl_glQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLbitfield result = ((GLbitfield)0);
  if (!prototypeCalled && glContext->m_glQueryMatrixxOES) {
    prototypeCalled = true;
    result = glContext->m_glQueryMatrixxOES(mantissa, exponent);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClearDepthfOES(GLclampf depth) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClearDepthfOES) {
    prototypeCalled = true;
    glContext->m_glClearDepthfOES(depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glClipPlanefOES(GLenum plane, const GLfloat * equation) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glClipPlanefOES) {
    prototypeCalled = true;
    glContext->m_glClipPlanefOES(plane, equation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDepthRangefOES(GLclampf n, GLclampf f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDepthRangefOES) {
    prototypeCalled = true;
    glContext->m_glDepthRangefOES(n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFrustumfOES) {
    prototypeCalled = true;
    glContext->m_glFrustumfOES(l, r, b, t, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetClipPlanefOES(GLenum plane, GLfloat * equation) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetClipPlanefOES) {
    prototypeCalled = true;
    glContext->m_glGetClipPlanefOES(plane, equation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glOrthofOES) {
    prototypeCalled = true;
    glContext->m_glOrthofOES(l, r, b, t, n, f);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFramebufferTextureMultiviewOVR) {
    prototypeCalled = true;
    glContext->m_glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glHintPGI(GLenum target, GLint mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glHintPGI) {
    prototypeCalled = true;
    glContext->m_glHintPGI(target, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDetailTexFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glDetailTexFuncSGIS(target, n, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetDetailTexFuncSGIS(GLenum target, GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetDetailTexFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glGetDetailTexFuncSGIS(target, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFogFuncSGIS(GLsizei n, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFogFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glFogFuncSGIS(n, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFogFuncSGIS(GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFogFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glGetFogFuncSGIS(points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSampleMaskSGIS(GLclampf value, GLboolean invert) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSampleMaskSGIS) {
    prototypeCalled = true;
    glContext->m_glSampleMaskSGIS(value, invert);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSamplePatternSGIS(GLenum pattern) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSamplePatternSGIS) {
    prototypeCalled = true;
    glContext->m_glSamplePatternSGIS(pattern);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTexGenParameteriSGIS(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTexGenParameteriSGIS) {
    prototypeCalled = true;
    glContext->m_glPixelTexGenParameteriSGIS(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTexGenParameterivSGIS) {
    prototypeCalled = true;
    glContext->m_glPixelTexGenParameterivSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTexGenParameterfSGIS) {
    prototypeCalled = true;
    glContext->m_glPixelTexGenParameterfSGIS(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTexGenParameterfvSGIS) {
    prototypeCalled = true;
    glContext->m_glPixelTexGenParameterfvSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPixelTexGenParameterivSGIS) {
    prototypeCalled = true;
    glContext->m_glGetPixelTexGenParameterivSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetPixelTexGenParameterfvSGIS) {
    prototypeCalled = true;
    glContext->m_glGetPixelTexGenParameterfvSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfSGIS(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfSGIS) {
    prototypeCalled = true;
    glContext->m_glPointParameterfSGIS(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPointParameterfvSGIS(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPointParameterfvSGIS) {
    prototypeCalled = true;
    glContext->m_glPointParameterfvSGIS(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSharpenTexFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glSharpenTexFuncSGIS(target, n, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetSharpenTexFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glGetSharpenTexFuncSGIS(target, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexImage4DSGIS) {
    prototypeCalled = true;
    glContext->m_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexSubImage4DSGIS) {
    prototypeCalled = true;
    glContext->m_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTextureColorMaskSGIS) {
    prototypeCalled = true;
    glContext->m_glTextureColorMaskSGIS(red, green, blue, alpha);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetTexFilterFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glGetTexFilterFuncSGIS(target, filter, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexFilterFuncSGIS) {
    prototypeCalled = true;
    glContext->m_glTexFilterFuncSGIS(target, filter, n, weights);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glAsyncMarkerSGIX(GLuint marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glAsyncMarkerSGIX) {
    prototypeCalled = true;
    glContext->m_glAsyncMarkerSGIX(marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glFinishAsyncSGIX(GLuint * markerp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glFinishAsyncSGIX) {
    prototypeCalled = true;
    result = glContext->m_glFinishAsyncSGIX(markerp);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glPollAsyncSGIX(GLuint * markerp) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glPollAsyncSGIX) {
    prototypeCalled = true;
    result = glContext->m_glPollAsyncSGIX(markerp);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLuint _glew_gl_glGenAsyncMarkersSGIX(GLsizei range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLuint result = ((GLuint)0);
  if (!prototypeCalled && glContext->m_glGenAsyncMarkersSGIX) {
    prototypeCalled = true;
    result = glContext->m_glGenAsyncMarkersSGIX(range);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeleteAsyncMarkersSGIX) {
    prototypeCalled = true;
    glContext->m_glDeleteAsyncMarkersSGIX(marker, range);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_gl_glIsAsyncMarkerSGIX(GLuint marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glContext->m_glIsAsyncMarkerSGIX) {
    prototypeCalled = true;
    result = glContext->m_glIsAsyncMarkerSGIX(marker);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFlushRasterSGIX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFlushRasterSGIX) {
    prototypeCalled = true;
    glContext->m_glFlushRasterSGIX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentColorMaterialSGIX(GLenum face, GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentColorMaterialSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentColorMaterialSGIX(face, mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightfSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightfSGIX(light, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightfvSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightfvSGIX(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightiSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightiSGIX(light, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightivSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightivSGIX(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightModelfSGIX(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightModelfSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightModelfSGIX(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightModelfvSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightModelfvSGIX(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightModeliSGIX(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightModeliSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightModeliSGIX(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentLightModelivSGIX(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentLightModelivSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentLightModelivSGIX(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentMaterialfSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentMaterialfSGIX(face, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentMaterialfvSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentMaterialfvSGIX(face, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentMaterialiSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentMaterialiSGIX(face, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFragmentMaterialivSGIX) {
    prototypeCalled = true;
    glContext->m_glFragmentMaterialivSGIX(face, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFragmentLightfvSGIX) {
    prototypeCalled = true;
    glContext->m_glGetFragmentLightfvSGIX(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFragmentLightivSGIX) {
    prototypeCalled = true;
    glContext->m_glGetFragmentLightivSGIX(light, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFragmentMaterialfvSGIX) {
    prototypeCalled = true;
    glContext->m_glGetFragmentMaterialfvSGIX(face, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetFragmentMaterialivSGIX) {
    prototypeCalled = true;
    glContext->m_glGetFragmentMaterialivSGIX(face, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLightEnviSGIX(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLightEnviSGIX) {
    prototypeCalled = true;
    glContext->m_glLightEnviSGIX(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFrameZoomSGIX(GLint factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFrameZoomSGIX) {
    prototypeCalled = true;
    glContext->m_glFrameZoomSGIX(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glIglooInterfaceSGIX(GLenum pname, const void * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glIglooInterfaceSGIX) {
    prototypeCalled = true;
    glContext->m_glIglooInterfaceSGIX(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glGetInstrumentsSGIX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glGetInstrumentsSGIX) {
    prototypeCalled = true;
    result = glContext->m_glGetInstrumentsSGIX();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glInstrumentsBufferSGIX(GLsizei size, GLint * buffer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glInstrumentsBufferSGIX) {
    prototypeCalled = true;
    glContext->m_glInstrumentsBufferSGIX(size, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLint _glew_gl_glPollInstrumentsSGIX(GLint * marker_p) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  GLint result = ((GLint)0);
  if (!prototypeCalled && glContext->m_glPollInstrumentsSGIX) {
    prototypeCalled = true;
    result = glContext->m_glPollInstrumentsSGIX(marker_p);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReadInstrumentsSGIX(GLint marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReadInstrumentsSGIX) {
    prototypeCalled = true;
    glContext->m_glReadInstrumentsSGIX(marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStartInstrumentsSGIX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStartInstrumentsSGIX) {
    prototypeCalled = true;
    glContext->m_glStartInstrumentsSGIX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glStopInstrumentsSGIX(GLint marker) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glStopInstrumentsSGIX) {
    prototypeCalled = true;
    glContext->m_glStopInstrumentsSGIX(marker);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetListParameterfvSGIX) {
    prototypeCalled = true;
    glContext->m_glGetListParameterfvSGIX(list, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetListParameterivSGIX) {
    prototypeCalled = true;
    glContext->m_glGetListParameterivSGIX(list, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glListParameterfSGIX) {
    prototypeCalled = true;
    glContext->m_glListParameterfSGIX(list, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glListParameterfvSGIX) {
    prototypeCalled = true;
    glContext->m_glListParameterfvSGIX(list, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glListParameteriSGIX(GLuint list, GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glListParameteriSGIX) {
    prototypeCalled = true;
    glContext->m_glListParameteriSGIX(list, pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glListParameterivSGIX) {
    prototypeCalled = true;
    glContext->m_glListParameterivSGIX(list, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glPixelTexGenSGIX(GLenum mode) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glPixelTexGenSGIX) {
    prototypeCalled = true;
    glContext->m_glPixelTexGenSGIX(mode);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeformationMap3dSGIX) {
    prototypeCalled = true;
    glContext->m_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeformationMap3fSGIX) {
    prototypeCalled = true;
    glContext->m_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDeformSGIX(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDeformSGIX) {
    prototypeCalled = true;
    glContext->m_glDeformSGIX(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glLoadIdentityDeformationMapSGIX(GLbitfield mask) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glLoadIdentityDeformationMapSGIX) {
    prototypeCalled = true;
    glContext->m_glLoadIdentityDeformationMapSGIX(mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReferencePlaneSGIX(const GLdouble * equation) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReferencePlaneSGIX) {
    prototypeCalled = true;
    glContext->m_glReferencePlaneSGIX(equation);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpriteParameterfSGIX(GLenum pname, GLfloat param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpriteParameterfSGIX) {
    prototypeCalled = true;
    glContext->m_glSpriteParameterfSGIX(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpriteParameterfvSGIX) {
    prototypeCalled = true;
    glContext->m_glSpriteParameterfvSGIX(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpriteParameteriSGIX(GLenum pname, GLint param) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpriteParameteriSGIX) {
    prototypeCalled = true;
    glContext->m_glSpriteParameteriSGIX(pname, param);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glSpriteParameterivSGIX(GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glSpriteParameterivSGIX) {
    prototypeCalled = true;
    glContext->m_glSpriteParameterivSGIX(pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTagSampleBufferSGIX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTagSampleBufferSGIX) {
    prototypeCalled = true;
    glContext->m_glTagSampleBufferSGIX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableSGI(target, internalformat, width, format, type, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableParameterfvSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableParameterfvSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColorTableParameterivSGI) {
    prototypeCalled = true;
    glContext->m_glColorTableParameterivSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glCopyColorTableSGI) {
    prototypeCalled = true;
    glContext->m_glCopyColorTableSGI(target, internalformat, x, y, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableSGI) {
    prototypeCalled = true;
    glContext->m_glGetColorTableSGI(target, format, type, table);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameterfvSGI) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterfvSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGetColorTableParameterivSGI) {
    prototypeCalled = true;
    glContext->m_glGetColorTableParameterivSGI(target, pname, params);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glFinishTextureSUNX() {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glFinishTextureSUNX) {
    prototypeCalled = true;
    glContext->m_glFinishTextureSUNX();
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactorbSUN(GLbyte factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactorbSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactorbSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactorsSUN(GLshort factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactorsSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactorsSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactoriSUN(GLint factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactoriSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactoriSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactorfSUN(GLfloat factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactorfSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactorfSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactordSUN(GLdouble factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactordSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactordSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactorubSUN(GLubyte factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactorubSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactorubSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactorusSUN(GLushort factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactorusSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactorusSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glGlobalAlphaFactoruiSUN(GLuint factor) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glGlobalAlphaFactoruiSUN) {
    prototypeCalled = true;
    glContext->m_glGlobalAlphaFactoruiSUN(factor);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glDrawMeshArraysSUN) {
    prototypeCalled = true;
    glContext->m_glDrawMeshArraysSUN(mode, first, count, width);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiSUN(GLuint code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeusSUN(GLushort code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeusSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeusSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeubSUN(GLubyte code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeubSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeubSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuivSUN(const GLuint * code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuivSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuivSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeusvSUN(const GLushort * code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeusvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeusvSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeubvSUN(const GLubyte * code) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeubvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeubvSUN(code);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodePointerSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodePointerSUN(type, stride, pointer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4ubVertex2fSUN) {
    prototypeCalled = true;
    glContext->m_glColor4ubVertex2fSUN(r, g, b, a, x, y);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4ubVertex2fvSUN) {
    prototypeCalled = true;
    glContext->m_glColor4ubVertex2fvSUN(c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4ubVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4ubVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glColor4ubVertex3fvSUN(c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glColor3fVertex3fSUN(r, g, b, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glColor3fVertex3fvSUN(c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glNormal3fVertex3fvSUN(n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glColor4fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glColor4fNormal3fVertex3fvSUN(c, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fVertex3fSUN(s, t, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fVertex3fvSUN(tc, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4fVertex4fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4fVertex4fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord4fVertex4fvSUN(tc, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor4ubVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor4ubVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor4fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord2fColor4fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4fColor4fNormal3fVertex4fSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glTexCoord4fColor4fNormal3fVertex4fvSUN) {
    prototypeCalled = true;
    glContext->m_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiVertex3fSUN(rc, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiVertex3fvSUN(rc, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor4ubVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor4ubVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor4fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
  bool prototypeCalled = false;
  const glew::gl::Context *glContext = glew::gl::s_glContext;
  if (!prototypeCalled && glContext->m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) {
    prototypeCalled = true;
    glContext->m_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
