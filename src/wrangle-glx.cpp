////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-glx.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

XVisualInfo * glXChooseVisual (Display * dpy, int screen, int * attribList)
{
  // GLX_VERSION_1_0 - glXChooseVisual
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXChooseVisual)
  {
    return deviceState->m_glXChooseVisual (dpy, screen, attribList);
  }
  return ((XVisualInfo *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateContext (Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct)
{
  // GLX_VERSION_1_0 - glXCreateContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateContext)
  {
    return deviceState->m_glXCreateContext (dpy, vis, shareList, direct);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyContext (Display * dpy, GLXContext ctx)
{
  // GLX_VERSION_1_0 - glXDestroyContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyContext)
  {
    deviceState->m_glXDestroyContext (dpy, ctx);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXMakeCurrent (Display * dpy, GLXDrawable drawable, GLXContext ctx)
{
  // GLX_VERSION_1_0 - glXMakeCurrent
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXMakeCurrent)
  {
    return deviceState->m_glXMakeCurrent (dpy, drawable, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXCopyContext (Display * dpy, GLXContext src, GLXContext dst, unsigned long mask)
{
  // GLX_VERSION_1_0 - glXCopyContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCopyContext)
  {
    deviceState->m_glXCopyContext (dpy, src, dst, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXSwapBuffers (Display * dpy, GLXDrawable drawable)
{
  // GLX_VERSION_1_0 - glXSwapBuffers
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSwapBuffers)
  {
    deviceState->m_glXSwapBuffers (dpy, drawable);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap glXCreateGLXPixmap (Display * dpy, XVisualInfo * visual, Pixmap pixmap)
{
  // GLX_VERSION_1_0 - glXCreateGLXPixmap
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateGLXPixmap)
  {
    return deviceState->m_glXCreateGLXPixmap (dpy, visual, pixmap);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyGLXPixmap (Display * dpy, GLXPixmap pixmap)
{
  // GLX_VERSION_1_0 - glXDestroyGLXPixmap
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyGLXPixmap)
  {
    deviceState->m_glXDestroyGLXPixmap (dpy, pixmap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryExtension (Display * dpy, int * errorb, int * event)
{
  // GLX_VERSION_1_0 - glXQueryExtension
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryExtension)
  {
    return deviceState->m_glXQueryExtension (dpy, errorb, event);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryVersion (Display * dpy, int * maj, int * min)
{
  // GLX_VERSION_1_0 - glXQueryVersion
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryVersion)
  {
    return deviceState->m_glXQueryVersion (dpy, maj, min);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXIsDirect (Display * dpy, GLXContext ctx)
{
  // GLX_VERSION_1_0 - glXIsDirect
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXIsDirect)
  {
    return deviceState->m_glXIsDirect (dpy, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetConfig (Display * dpy, XVisualInfo * visual, int attrib, int * value)
{
  // GLX_VERSION_1_0 - glXGetConfig
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetConfig)
  {
    return deviceState->m_glXGetConfig (dpy, visual, attrib, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXGetCurrentContext ()
{
  // GLX_VERSION_1_0 - glXGetCurrentContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentContext)
  {
    return deviceState->m_glXGetCurrentContext ();
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXDrawable glXGetCurrentDrawable ()
{
  // GLX_VERSION_1_0 - glXGetCurrentDrawable
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentDrawable)
  {
    return deviceState->m_glXGetCurrentDrawable ();
  }
  return ((GLXDrawable)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXWaitGL ()
{
  // GLX_VERSION_1_0 - glXWaitGL
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXWaitGL)
  {
    deviceState->m_glXWaitGL ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXWaitX ()
{
  // GLX_VERSION_1_0 - glXWaitX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXWaitX)
  {
    deviceState->m_glXWaitX ();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXUseXFont (Font font, int first, int count, int list)
{
  // GLX_VERSION_1_0 - glXUseXFont
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXUseXFont)
  {
    deviceState->m_glXUseXFont (font, first, count, list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * glXQueryExtensionsString (Display * dpy, int screen)
{
  // GLX_VERSION_1_1 - glXQueryExtensionsString
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryExtensionsString)
  {
    return deviceState->m_glXQueryExtensionsString (dpy, screen);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * glXQueryServerString (Display * dpy, int screen, int name)
{
  // GLX_VERSION_1_1 - glXQueryServerString
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryServerString)
  {
    return deviceState->m_glXQueryServerString (dpy, screen, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * glXGetClientString (Display * dpy, int name)
{
  // GLX_VERSION_1_1 - glXGetClientString
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetClientString)
  {
    return deviceState->m_glXGetClientString (dpy, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Display * glXGetCurrentDisplay ()
{
  // GLX_VERSION_1_2 - glXGetCurrentDisplay
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentDisplay)
  {
    return deviceState->m_glXGetCurrentDisplay ();
  }
  return ((Display *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfig * glXGetFBConfigs (Display * dpy, int screen, int * nelements)
{
  // GLX_VERSION_1_3 - glXGetFBConfigs
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetFBConfigs)
  {
    return deviceState->m_glXGetFBConfigs (dpy, screen, nelements);
  }
  return ((GLXFBConfig *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfig * glXChooseFBConfig (Display * dpy, int screen, const int * attrib_list, int * nelements)
{
  // GLX_VERSION_1_3 - glXChooseFBConfig
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXChooseFBConfig)
  {
    return deviceState->m_glXChooseFBConfig (dpy, screen, attrib_list, nelements);
  }
  return ((GLXFBConfig *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetFBConfigAttrib (Display * dpy, GLXFBConfig config, int attribute, int * value)
{
  // GLX_VERSION_1_3 - glXGetFBConfigAttrib
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetFBConfigAttrib)
  {
    return deviceState->m_glXGetFBConfigAttrib (dpy, config, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

XVisualInfo * glXGetVisualFromFBConfig (Display * dpy, GLXFBConfig config)
{
  // GLX_VERSION_1_3 - glXGetVisualFromFBConfig
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetVisualFromFBConfig)
  {
    return deviceState->m_glXGetVisualFromFBConfig (dpy, config);
  }
  return ((XVisualInfo *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXWindow glXCreateWindow (Display * dpy, GLXFBConfig config, Window win, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreateWindow
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateWindow)
  {
    return deviceState->m_glXCreateWindow (dpy, config, win, attrib_list);
  }
  return ((GLXWindow)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyWindow (Display * dpy, GLXWindow win)
{
  // GLX_VERSION_1_3 - glXDestroyWindow
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyWindow)
  {
    deviceState->m_glXDestroyWindow (dpy, win);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap glXCreatePixmap (Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreatePixmap
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreatePixmap)
  {
    return deviceState->m_glXCreatePixmap (dpy, config, pixmap, attrib_list);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyPixmap (Display * dpy, GLXPixmap pixmap)
{
  // GLX_VERSION_1_3 - glXDestroyPixmap
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyPixmap)
  {
    deviceState->m_glXDestroyPixmap (dpy, pixmap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPbuffer glXCreatePbuffer (Display * dpy, GLXFBConfig config, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreatePbuffer
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreatePbuffer)
  {
    return deviceState->m_glXCreatePbuffer (dpy, config, attrib_list);
  }
  return ((GLXPbuffer)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyPbuffer (Display * dpy, GLXPbuffer pbuf)
{
  // GLX_VERSION_1_3 - glXDestroyPbuffer
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyPbuffer)
  {
    deviceState->m_glXDestroyPbuffer (dpy, pbuf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXQueryDrawable (Display * dpy, GLXDrawable draw, int attribute, unsigned int * value)
{
  // GLX_VERSION_1_3 - glXQueryDrawable
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryDrawable)
  {
    deviceState->m_glXQueryDrawable (dpy, draw, attribute, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateNewContext (Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
  // GLX_VERSION_1_3 - glXCreateNewContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateNewContext)
  {
    return deviceState->m_glXCreateNewContext (dpy, config, render_type, share_list, direct);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXMakeContextCurrent (Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  // GLX_VERSION_1_3 - glXMakeContextCurrent
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXMakeContextCurrent)
  {
    return deviceState->m_glXMakeContextCurrent (dpy, draw, read, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXDrawable glXGetCurrentReadDrawable ()
{
  // GLX_VERSION_1_3 - glXGetCurrentReadDrawable
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentReadDrawable)
  {
    return deviceState->m_glXGetCurrentReadDrawable ();
  }
  return ((GLXDrawable)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryContext (Display * dpy, GLXContext ctx, int attribute, int * value)
{
  // GLX_VERSION_1_3 - glXQueryContext
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryContext)
  {
    return deviceState->m_glXQueryContext (dpy, ctx, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXSelectEvent (Display * dpy, GLXDrawable draw, unsigned long event_mask)
{
  // GLX_VERSION_1_3 - glXSelectEvent
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSelectEvent)
  {
    deviceState->m_glXSelectEvent (dpy, draw, event_mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXGetSelectedEvent (Display * dpy, GLXDrawable draw, unsigned long * event_mask)
{
  // GLX_VERSION_1_3 - glXGetSelectedEvent
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetSelectedEvent)
  {
    deviceState->m_glXGetSelectedEvent (dpy, draw, event_mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__GLXextFuncPtr glXGetProcAddress (const GLubyte * procName)
{
  // GLX_VERSION_1_4 - glXGetProcAddress
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetProcAddress)
  {
    return deviceState->m_glXGetProcAddress (procName);
  }
  return ((__GLXextFuncPtr)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int glXGetGPUIDsAMD (unsigned int maxCount, unsigned int * ids)
{
  // GLX_AMD_gpu_association - glXGetGPUIDsAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetGPUIDsAMD)
  {
    return deviceState->m_glXGetGPUIDsAMD (maxCount, ids);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetGPUInfoAMD (unsigned int id, int property, GLenum dataType, unsigned int size, void * data)
{
  // GLX_AMD_gpu_association - glXGetGPUInfoAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetGPUInfoAMD)
  {
    return deviceState->m_glXGetGPUInfoAMD (id, property, dataType, size, data);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int glXGetContextGPUIDAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXGetContextGPUIDAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetContextGPUIDAMD)
  {
    return deviceState->m_glXGetContextGPUIDAMD (ctx);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateAssociatedContextAMD (unsigned int id, GLXContext share_list)
{
  // GLX_AMD_gpu_association - glXCreateAssociatedContextAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateAssociatedContextAMD)
  {
    return deviceState->m_glXCreateAssociatedContextAMD (id, share_list);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateAssociatedContextAttribsAMD (unsigned int id, GLXContext share_context, const int * attribList)
{
  // GLX_AMD_gpu_association - glXCreateAssociatedContextAttribsAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateAssociatedContextAttribsAMD)
  {
    return deviceState->m_glXCreateAssociatedContextAttribsAMD (id, share_context, attribList);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXDeleteAssociatedContextAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXDeleteAssociatedContextAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDeleteAssociatedContextAMD)
  {
    return deviceState->m_glXDeleteAssociatedContextAMD (ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXMakeAssociatedContextCurrentAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXMakeAssociatedContextCurrentAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXMakeAssociatedContextCurrentAMD)
  {
    return deviceState->m_glXMakeAssociatedContextCurrentAMD (ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXGetCurrentAssociatedContextAMD ()
{
  // GLX_AMD_gpu_association - glXGetCurrentAssociatedContextAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentAssociatedContextAMD)
  {
    return deviceState->m_glXGetCurrentAssociatedContextAMD ();
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXBlitContextFramebufferAMD (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GLX_AMD_gpu_association - glXBlitContextFramebufferAMD
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBlitContextFramebufferAMD)
  {
    deviceState->m_glXBlitContextFramebufferAMD (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateContextAttribsARB (Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list)
{
  // GLX_ARB_create_context - glXCreateContextAttribsARB
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateContextAttribsARB)
  {
    return deviceState->m_glXCreateContextAttribsARB (dpy, config, share_context, direct, attrib_list);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__GLXextFuncPtr glXGetProcAddressARB (const GLubyte * procName)
{
  // GLX_ARB_get_proc_address - glXGetProcAddressARB
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetProcAddressARB)
  {
    return deviceState->m_glXGetProcAddressARB (procName);
  }
  return ((__GLXextFuncPtr)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Display * glXGetCurrentDisplayEXT ()
{
  // GLX_EXT_import_context - glXGetCurrentDisplayEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentDisplayEXT)
  {
    return deviceState->m_glXGetCurrentDisplayEXT ();
  }
  return ((Display *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryContextInfoEXT (Display * dpy, GLXContext context, int attribute, int * value)
{
  // GLX_EXT_import_context - glXQueryContextInfoEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryContextInfoEXT)
  {
    return deviceState->m_glXQueryContextInfoEXT (dpy, context, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContextID glXGetContextIDEXT (const GLXContext context)
{
  // GLX_EXT_import_context - glXGetContextIDEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetContextIDEXT)
  {
    return deviceState->m_glXGetContextIDEXT (context);
  }
  return ((GLXContextID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXImportContextEXT (Display * dpy, GLXContextID contextID)
{
  // GLX_EXT_import_context - glXImportContextEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXImportContextEXT)
  {
    return deviceState->m_glXImportContextEXT (dpy, contextID);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXFreeContextEXT (Display * dpy, GLXContext context)
{
  // GLX_EXT_import_context - glXFreeContextEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXFreeContextEXT)
  {
    deviceState->m_glXFreeContextEXT (dpy, context);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXSwapIntervalEXT (Display * dpy, GLXDrawable drawable, int interval)
{
  // GLX_EXT_swap_control - glXSwapIntervalEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSwapIntervalEXT)
  {
    deviceState->m_glXSwapIntervalEXT (dpy, drawable, interval);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXBindTexImageEXT (Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list)
{
  // GLX_EXT_texture_from_pixmap - glXBindTexImageEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindTexImageEXT)
  {
    deviceState->m_glXBindTexImageEXT (dpy, drawable, buffer, attrib_list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXReleaseTexImageEXT (Display * dpy, GLXDrawable drawable, int buffer)
{
  // GLX_EXT_texture_from_pixmap - glXReleaseTexImageEXT
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXReleaseTexImageEXT)
  {
    deviceState->m_glXReleaseTexImageEXT (dpy, drawable, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int glXGetAGPOffsetMESA (const void * pointer)
{
  // GLX_MESA_agp_offset - glXGetAGPOffsetMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetAGPOffsetMESA)
  {
    return deviceState->m_glXGetAGPOffsetMESA (pointer);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXCopySubBufferMESA (Display * dpy, GLXDrawable drawable, int x, int y, int width, int height)
{
  // GLX_MESA_copy_sub_buffer - glXCopySubBufferMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCopySubBufferMESA)
  {
    deviceState->m_glXCopySubBufferMESA (dpy, drawable, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap glXCreateGLXPixmapMESA (Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap)
{
  // GLX_MESA_pixmap_colormap - glXCreateGLXPixmapMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateGLXPixmapMESA)
  {
    return deviceState->m_glXCreateGLXPixmapMESA (dpy, visual, pixmap, cmap);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryCurrentRendererIntegerMESA (int attribute, unsigned int * value)
{
  // GLX_MESA_query_renderer - glXQueryCurrentRendererIntegerMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryCurrentRendererIntegerMESA)
  {
    return deviceState->m_glXQueryCurrentRendererIntegerMESA (attribute, value);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * glXQueryCurrentRendererStringMESA (int attribute)
{
  // GLX_MESA_query_renderer - glXQueryCurrentRendererStringMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryCurrentRendererStringMESA)
  {
    return deviceState->m_glXQueryCurrentRendererStringMESA (attribute);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryRendererIntegerMESA (Display * dpy, int screen, int renderer, int attribute, unsigned int * value)
{
  // GLX_MESA_query_renderer - glXQueryRendererIntegerMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryRendererIntegerMESA)
  {
    return deviceState->m_glXQueryRendererIntegerMESA (dpy, screen, renderer, attribute, value);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * glXQueryRendererStringMESA (Display * dpy, int screen, int renderer, int attribute)
{
  // GLX_MESA_query_renderer - glXQueryRendererStringMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryRendererStringMESA)
  {
    return deviceState->m_glXQueryRendererStringMESA (dpy, screen, renderer, attribute);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXReleaseBuffersMESA (Display * dpy, GLXDrawable drawable)
{
  // GLX_MESA_release_buffers - glXReleaseBuffersMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXReleaseBuffersMESA)
  {
    return deviceState->m_glXReleaseBuffersMESA (dpy, drawable);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXSet3DfxModeMESA (int mode)
{
  // GLX_MESA_set_3dfx_mode - glXSet3DfxModeMESA
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSet3DfxModeMESA)
  {
    return deviceState->m_glXSet3DfxModeMESA (mode);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXCopyBufferSubDataNV (Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GLX_NV_copy_buffer - glXCopyBufferSubDataNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCopyBufferSubDataNV)
  {
    deviceState->m_glXCopyBufferSubDataNV (dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXNamedCopyBufferSubDataNV (Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GLX_NV_copy_buffer - glXNamedCopyBufferSubDataNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXNamedCopyBufferSubDataNV)
  {
    deviceState->m_glXNamedCopyBufferSubDataNV (dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXCopyImageSubDataNV (Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // GLX_NV_copy_image - glXCopyImageSubDataNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCopyImageSubDataNV)
  {
    deviceState->m_glXCopyImageSubDataNV (dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXDelayBeforeSwapNV (Display * dpy, GLXDrawable drawable, GLfloat seconds)
{
  // GLX_NV_delay_before_swap - glXDelayBeforeSwapNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDelayBeforeSwapNV)
  {
    return deviceState->m_glXDelayBeforeSwapNV (dpy, drawable, seconds);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int * glXEnumerateVideoDevicesNV (Display * dpy, int screen, int * nelements)
{
  // GLX_NV_present_video - glXEnumerateVideoDevicesNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXEnumerateVideoDevicesNV)
  {
    return deviceState->m_glXEnumerateVideoDevicesNV (dpy, screen, nelements);
  }
  return ((unsigned int *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXBindVideoDeviceNV (Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list)
{
  // GLX_NV_present_video - glXBindVideoDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindVideoDeviceNV)
  {
    return deviceState->m_glXBindVideoDeviceNV (dpy, video_slot, video_device, attrib_list);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXJoinSwapGroupNV (Display * dpy, GLXDrawable drawable, GLuint group)
{
  // GLX_NV_swap_group - glXJoinSwapGroupNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXJoinSwapGroupNV)
  {
    return deviceState->m_glXJoinSwapGroupNV (dpy, drawable, group);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXBindSwapBarrierNV (Display * dpy, GLuint group, GLuint barrier)
{
  // GLX_NV_swap_group - glXBindSwapBarrierNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindSwapBarrierNV)
  {
    return deviceState->m_glXBindSwapBarrierNV (dpy, group, barrier);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQuerySwapGroupNV (Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier)
{
  // GLX_NV_swap_group - glXQuerySwapGroupNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQuerySwapGroupNV)
  {
    return deviceState->m_glXQuerySwapGroupNV (dpy, drawable, group, barrier);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryMaxSwapGroupsNV (Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers)
{
  // GLX_NV_swap_group - glXQueryMaxSwapGroupsNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryMaxSwapGroupsNV)
  {
    return deviceState->m_glXQueryMaxSwapGroupsNV (dpy, screen, maxGroups, maxBarriers);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryFrameCountNV (Display * dpy, int screen, GLuint * count)
{
  // GLX_NV_swap_group - glXQueryFrameCountNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryFrameCountNV)
  {
    return deviceState->m_glXQueryFrameCountNV (dpy, screen, count);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXResetFrameCountNV (Display * dpy, int screen)
{
  // GLX_NV_swap_group - glXResetFrameCountNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXResetFrameCountNV)
  {
    return deviceState->m_glXResetFrameCountNV (dpy, screen);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXBindVideoCaptureDeviceNV (Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXBindVideoCaptureDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindVideoCaptureDeviceNV)
  {
    return deviceState->m_glXBindVideoCaptureDeviceNV (dpy, video_capture_slot, device);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV (Display * dpy, int screen, int * nelements)
{
  // GLX_NV_video_capture - glXEnumerateVideoCaptureDevicesNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXEnumerateVideoCaptureDevicesNV)
  {
    return deviceState->m_glXEnumerateVideoCaptureDevicesNV (dpy, screen, nelements);
  }
  return ((GLXVideoCaptureDeviceNV *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXLockVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXLockVideoCaptureDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXLockVideoCaptureDeviceNV)
  {
    deviceState->m_glXLockVideoCaptureDeviceNV (dpy, device);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value)
{
  // GLX_NV_video_capture - glXQueryVideoCaptureDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryVideoCaptureDeviceNV)
  {
    return deviceState->m_glXQueryVideoCaptureDeviceNV (dpy, device, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXReleaseVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXReleaseVideoCaptureDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXReleaseVideoCaptureDeviceNV)
  {
    deviceState->m_glXReleaseVideoCaptureDeviceNV (dpy, device);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetVideoDeviceNV (Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice)
{
  // GLX_NV_video_out - glXGetVideoDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetVideoDeviceNV)
  {
    return deviceState->m_glXGetVideoDeviceNV (dpy, screen, numVideoDevices, pVideoDevice);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXReleaseVideoDeviceNV (Display * dpy, int screen, GLXVideoDeviceNV VideoDevice)
{
  // GLX_NV_video_out - glXReleaseVideoDeviceNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXReleaseVideoDeviceNV)
  {
    return deviceState->m_glXReleaseVideoDeviceNV (dpy, screen, VideoDevice);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXBindVideoImageNV (Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
{
  // GLX_NV_video_out - glXBindVideoImageNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindVideoImageNV)
  {
    return deviceState->m_glXBindVideoImageNV (dpy, VideoDevice, pbuf, iVideoBuffer);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXReleaseVideoImageNV (Display * dpy, GLXPbuffer pbuf)
{
  // GLX_NV_video_out - glXReleaseVideoImageNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXReleaseVideoImageNV)
  {
    return deviceState->m_glXReleaseVideoImageNV (dpy, pbuf);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXSendPbufferToVideoNV (Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock)
{
  // GLX_NV_video_out - glXSendPbufferToVideoNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSendPbufferToVideoNV)
  {
    return deviceState->m_glXSendPbufferToVideoNV (dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetVideoInfoNV (Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)
{
  // GLX_NV_video_out - glXGetVideoInfoNV
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetVideoInfoNV)
  {
    return deviceState->m_glXGetVideoInfoNV (dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXGetSyncValuesOML (Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXGetSyncValuesOML
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetSyncValuesOML)
  {
    return deviceState->m_glXGetSyncValuesOML (dpy, drawable, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXGetMscRateOML (Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator)
{
  // GLX_OML_sync_control - glXGetMscRateOML
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetMscRateOML)
  {
    return deviceState->m_glXGetMscRateOML (dpy, drawable, numerator, denominator);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int64_t glXSwapBuffersMscOML (Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
  // GLX_OML_sync_control - glXSwapBuffersMscOML
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSwapBuffersMscOML)
  {
    return deviceState->m_glXSwapBuffersMscOML (dpy, drawable, target_msc, divisor, remainder);
  }
  return ((int64_t)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXWaitForMscOML (Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXWaitForMscOML
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXWaitForMscOML)
  {
    return deviceState->m_glXWaitForMscOML (dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXWaitForSbcOML (Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXWaitForSbcOML
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXWaitForSbcOML)
  {
    return deviceState->m_glXWaitForSbcOML (dpy, drawable, target_sbc, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXCushionSGI (Display * dpy, Window window, float cushion)
{
  // GLX_SGI_cushion - glXCushionSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCushionSGI)
  {
    deviceState->m_glXCushionSGI (dpy, window, cushion);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXMakeCurrentReadSGI (Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  // GLX_SGI_make_current_read - glXMakeCurrentReadSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXMakeCurrentReadSGI)
  {
    return deviceState->m_glXMakeCurrentReadSGI (dpy, draw, read, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXDrawable glXGetCurrentReadDrawableSGI ()
{
  // GLX_SGI_make_current_read - glXGetCurrentReadDrawableSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetCurrentReadDrawableSGI)
  {
    return deviceState->m_glXGetCurrentReadDrawableSGI ();
  }
  return ((GLXDrawable)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXSwapIntervalSGI (int interval)
{
  // GLX_SGI_swap_control - glXSwapIntervalSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSwapIntervalSGI)
  {
    return deviceState->m_glXSwapIntervalSGI (interval);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetVideoSyncSGI (unsigned int * count)
{
  // GLX_SGI_video_sync - glXGetVideoSyncSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetVideoSyncSGI)
  {
    return deviceState->m_glXGetVideoSyncSGI (count);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXWaitVideoSyncSGI (int divisor, int remainder, unsigned int * count)
{
  // GLX_SGI_video_sync - glXWaitVideoSyncSGI
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXWaitVideoSyncSGI)
  {
    return deviceState->m_glXWaitVideoSyncSGI (divisor, remainder, count);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXAssociateDMPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuffer, DMparams * params, DMbuffer dmbuffer)
{
  // GLX_SGIX_dmbuffer - glXAssociateDMPbufferSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXAssociateDMPbufferSGIX)
  {
    return deviceState->m_glXAssociateDMPbufferSGIX (dpy, pbuffer, params, dmbuffer);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXGetFBConfigAttribSGIX (Display * dpy, GLXFBConfigSGIX config, int attribute, int * value)
{
  // GLX_SGIX_fbconfig - glXGetFBConfigAttribSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetFBConfigAttribSGIX)
  {
    return deviceState->m_glXGetFBConfigAttribSGIX (dpy, config, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfigSGIX * glXChooseFBConfigSGIX (Display * dpy, int screen, int * attrib_list, int * nelements)
{
  // GLX_SGIX_fbconfig - glXChooseFBConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXChooseFBConfigSGIX)
  {
    return deviceState->m_glXChooseFBConfigSGIX (dpy, screen, attrib_list, nelements);
  }
  return ((GLXFBConfigSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap glXCreateGLXPixmapWithConfigSGIX (Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap)
{
  // GLX_SGIX_fbconfig - glXCreateGLXPixmapWithConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateGLXPixmapWithConfigSGIX)
  {
    return deviceState->m_glXCreateGLXPixmapWithConfigSGIX (dpy, config, pixmap);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext glXCreateContextWithConfigSGIX (Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct)
{
  // GLX_SGIX_fbconfig - glXCreateContextWithConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateContextWithConfigSGIX)
  {
    return deviceState->m_glXCreateContextWithConfigSGIX (dpy, config, render_type, share_list, direct);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

XVisualInfo * glXGetVisualFromFBConfigSGIX (Display * dpy, GLXFBConfigSGIX config)
{
  // GLX_SGIX_fbconfig - glXGetVisualFromFBConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetVisualFromFBConfigSGIX)
  {
    return deviceState->m_glXGetVisualFromFBConfigSGIX (dpy, config);
  }
  return ((XVisualInfo *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX (Display * dpy, XVisualInfo * vis)
{
  // GLX_SGIX_fbconfig - glXGetFBConfigFromVisualSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetFBConfigFromVisualSGIX)
  {
    return deviceState->m_glXGetFBConfigFromVisualSGIX (dpy, vis);
  }
  return ((GLXFBConfigSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXHyperpipeNetworkSGIX * glXQueryHyperpipeNetworkSGIX (Display * dpy, int * npipes)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeNetworkSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryHyperpipeNetworkSGIX)
  {
    return deviceState->m_glXQueryHyperpipeNetworkSGIX (dpy, npipes);
  }
  return ((GLXHyperpipeNetworkSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXHyperpipeConfigSGIX (Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId)
{
  // GLX_SGIX_hyperpipe - glXHyperpipeConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXHyperpipeConfigSGIX)
  {
    return deviceState->m_glXHyperpipeConfigSGIX (dpy, networkId, npipes, cfg, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXHyperpipeConfigSGIX * glXQueryHyperpipeConfigSGIX (Display * dpy, int hpId, int * npipes)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryHyperpipeConfigSGIX)
  {
    return deviceState->m_glXQueryHyperpipeConfigSGIX (dpy, hpId, npipes);
  }
  return ((GLXHyperpipeConfigSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXDestroyHyperpipeConfigSGIX (Display * dpy, int hpId)
{
  // GLX_SGIX_hyperpipe - glXDestroyHyperpipeConfigSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyHyperpipeConfigSGIX)
  {
    return deviceState->m_glXDestroyHyperpipeConfigSGIX (dpy, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXBindHyperpipeSGIX (Display * dpy, int hpId)
{
  // GLX_SGIX_hyperpipe - glXBindHyperpipeSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindHyperpipeSGIX)
  {
    return deviceState->m_glXBindHyperpipeSGIX (dpy, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryHyperpipeBestAttribSGIX (Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeBestAttribSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryHyperpipeBestAttribSGIX)
  {
    return deviceState->m_glXQueryHyperpipeBestAttribSGIX (dpy, timeSlice, attrib, size, attribList, returnAttribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXHyperpipeAttribSGIX (Display * dpy, int timeSlice, int attrib, int size, void * attribList)
{
  // GLX_SGIX_hyperpipe - glXHyperpipeAttribSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXHyperpipeAttribSGIX)
  {
    return deviceState->m_glXHyperpipeAttribSGIX (dpy, timeSlice, attrib, size, attribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryHyperpipeAttribSGIX (Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeAttribSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryHyperpipeAttribSGIX)
  {
    return deviceState->m_glXQueryHyperpipeAttribSGIX (dpy, timeSlice, attrib, size, returnAttribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPbufferSGIX glXCreateGLXPbufferSGIX (Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list)
{
  // GLX_SGIX_pbuffer - glXCreateGLXPbufferSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateGLXPbufferSGIX)
  {
    return deviceState->m_glXCreateGLXPbufferSGIX (dpy, config, width, height, attrib_list);
  }
  return ((GLXPbufferSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyGLXPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuf)
{
  // GLX_SGIX_pbuffer - glXDestroyGLXPbufferSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyGLXPbufferSGIX)
  {
    deviceState->m_glXDestroyGLXPbufferSGIX (dpy, pbuf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryGLXPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value)
{
  // GLX_SGIX_pbuffer - glXQueryGLXPbufferSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryGLXPbufferSGIX)
  {
    return deviceState->m_glXQueryGLXPbufferSGIX (dpy, pbuf, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXSelectEventSGIX (Display * dpy, GLXDrawable drawable, unsigned long mask)
{
  // GLX_SGIX_pbuffer - glXSelectEventSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXSelectEventSGIX)
  {
    deviceState->m_glXSelectEventSGIX (dpy, drawable, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXGetSelectedEventSGIX (Display * dpy, GLXDrawable drawable, unsigned long * mask)
{
  // GLX_SGIX_pbuffer - glXGetSelectedEventSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetSelectedEventSGIX)
  {
    deviceState->m_glXGetSelectedEventSGIX (dpy, drawable, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXBindSwapBarrierSGIX (Display * dpy, GLXDrawable drawable, int barrier)
{
  // GLX_SGIX_swap_barrier - glXBindSwapBarrierSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindSwapBarrierSGIX)
  {
    deviceState->m_glXBindSwapBarrierSGIX (dpy, drawable, barrier);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool glXQueryMaxSwapBarriersSGIX (Display * dpy, int screen, int * max)
{
  // GLX_SGIX_swap_barrier - glXQueryMaxSwapBarriersSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryMaxSwapBarriersSGIX)
  {
    return deviceState->m_glXQueryMaxSwapBarriersSGIX (dpy, screen, max);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXJoinSwapGroupSGIX (Display * dpy, GLXDrawable drawable, GLXDrawable member)
{
  // GLX_SGIX_swap_group - glXJoinSwapGroupSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXJoinSwapGroupSGIX)
  {
    deviceState->m_glXJoinSwapGroupSGIX (dpy, drawable, member);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXBindChannelToWindowSGIX (Display * display, int screen, int channel, Window window)
{
  // GLX_SGIX_video_resize - glXBindChannelToWindowSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXBindChannelToWindowSGIX)
  {
    return deviceState->m_glXBindChannelToWindowSGIX (display, screen, channel, window);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXChannelRectSGIX (Display * display, int screen, int channel, int x, int y, int w, int h)
{
  // GLX_SGIX_video_resize - glXChannelRectSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXChannelRectSGIX)
  {
    return deviceState->m_glXChannelRectSGIX (display, screen, channel, x, y, w, h);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryChannelRectSGIX (Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh)
{
  // GLX_SGIX_video_resize - glXQueryChannelRectSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryChannelRectSGIX)
  {
    return deviceState->m_glXQueryChannelRectSGIX (display, screen, channel, dx, dy, dw, dh);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXQueryChannelDeltasSGIX (Display * display, int screen, int channel, int * x, int * y, int * w, int * h)
{
  // GLX_SGIX_video_resize - glXQueryChannelDeltasSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXQueryChannelDeltasSGIX)
  {
    return deviceState->m_glXQueryChannelDeltasSGIX (display, screen, channel, x, y, w, h);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int glXChannelRectSyncSGIX (Display * display, int screen, int channel, GLenum synctype)
{
  // GLX_SGIX_video_resize - glXChannelRectSyncSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXChannelRectSyncSGIX)
  {
    return deviceState->m_glXChannelRectSyncSGIX (display, screen, channel, synctype);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXVideoSourceSGIX glXCreateGLXVideoSourceSGIX (Display * display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode)
{
  // GLX_SGIX_video_source - glXCreateGLXVideoSourceSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXCreateGLXVideoSourceSGIX)
  {
    return deviceState->m_glXCreateGLXVideoSourceSGIX (display, screen, server, path, nodeClass, drainNode);
  }
  return ((GLXVideoSourceSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void glXDestroyGLXVideoSourceSGIX (Display * dpy, GLXVideoSourceSGIX glxvideosource)
{
  // GLX_SGIX_video_source - glXDestroyGLXVideoSourceSGIX
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXDestroyGLXVideoSourceSGIX)
  {
    deviceState->m_glXDestroyGLXVideoSourceSGIX (dpy, glxvideosource);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Status glXGetTransparentIndexSUN (Display * dpy, Window overlay, Window underlay, long * pTransparentIndex)
{
  // GLX_SUN_get_transparent_index - glXGetTransparentIndexSUN
  const glew::glx::DeviceState *deviceState = glew::glx::GetDeviceState ();
  if (deviceState && deviceState->m_glXGetTransparentIndexSUN)
  {
    return deviceState->m_glXGetTransparentIndexSUN (dpy, overlay, underlay, pTransparentIndex);
  }
  return ((Status)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
