////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-glx.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_glx_glXQueryExtensionsString(Display * dpy, int screen) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && glxContext->m_glXQueryExtensionsString) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryExtensionsString(dpy, screen);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_glx_glXQueryServerString(Display * dpy, int screen, int name) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && glxContext->m_glXQueryServerString) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryServerString(dpy, screen, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_glx_glXGetClientString(Display * dpy, int name) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && glxContext->m_glXGetClientString) {
    prototypeCalled = true;
    result = glxContext->m_glXGetClientString(dpy, name);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Display * _glew_glx_glXGetCurrentDisplay() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Display * result = ((Display *)0);
  if (!prototypeCalled && glxContext->m_glXGetCurrentDisplay) {
    prototypeCalled = true;
    result = glxContext->m_glXGetCurrentDisplay();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfig * _glew_glx_glXGetFBConfigs(Display * dpy, int screen, int * nelements) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXFBConfig * result = ((GLXFBConfig *)0);
  if (!prototypeCalled && glxContext->m_glXGetFBConfigs) {
    prototypeCalled = true;
    result = glxContext->m_glXGetFBConfigs(dpy, screen, nelements);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfig * _glew_glx_glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXFBConfig * result = ((GLXFBConfig *)0);
  if (!prototypeCalled && glxContext->m_glXChooseFBConfig) {
    prototypeCalled = true;
    result = glxContext->m_glXChooseFBConfig(dpy, screen, attrib_list, nelements);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetFBConfigAttrib) {
    prototypeCalled = true;
    result = glxContext->m_glXGetFBConfigAttrib(dpy, config, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

XVisualInfo * _glew_glx_glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  XVisualInfo * result = ((XVisualInfo *)0);
  if (!prototypeCalled && glxContext->m_glXGetVisualFromFBConfig) {
    prototypeCalled = true;
    result = glxContext->m_glXGetVisualFromFBConfig(dpy, config);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXWindow _glew_glx_glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXWindow result = ((GLXWindow)0);
  if (!prototypeCalled && glxContext->m_glXCreateWindow) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateWindow(dpy, config, win, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXDestroyWindow(Display * dpy, GLXWindow win) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXDestroyWindow) {
    prototypeCalled = true;
    glxContext->m_glXDestroyWindow(dpy, win);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap _glew_glx_glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXPixmap result = ((GLXPixmap)0);
  if (!prototypeCalled && glxContext->m_glXCreatePixmap) {
    prototypeCalled = true;
    result = glxContext->m_glXCreatePixmap(dpy, config, pixmap, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXDestroyPixmap(Display * dpy, GLXPixmap pixmap) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXDestroyPixmap) {
    prototypeCalled = true;
    glxContext->m_glXDestroyPixmap(dpy, pixmap);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPbuffer _glew_glx_glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXPbuffer result = ((GLXPbuffer)0);
  if (!prototypeCalled && glxContext->m_glXCreatePbuffer) {
    prototypeCalled = true;
    result = glxContext->m_glXCreatePbuffer(dpy, config, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXDestroyPbuffer) {
    prototypeCalled = true;
    glxContext->m_glXDestroyPbuffer(dpy, pbuf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXQueryDrawable) {
    prototypeCalled = true;
    glxContext->m_glXQueryDrawable(dpy, draw, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXCreateNewContext) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateNewContext(dpy, config, render_type, share_list, direct);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXMakeContextCurrent(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXMakeContextCurrent) {
    prototypeCalled = true;
    result = glxContext->m_glXMakeContextCurrent(dpy, draw, read, ctx);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXDrawable _glew_glx_glXGetCurrentReadDrawable() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXDrawable result = ((GLXDrawable)0);
  if (!prototypeCalled && glxContext->m_glXGetCurrentReadDrawable) {
    prototypeCalled = true;
    result = glxContext->m_glXGetCurrentReadDrawable();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryContext) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryContext(dpy, ctx, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXSelectEvent) {
    prototypeCalled = true;
    glxContext->m_glXSelectEvent(dpy, draw, event_mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXGetSelectedEvent) {
    prototypeCalled = true;
    glxContext->m_glXGetSelectedEvent(dpy, draw, event_mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__GLXextFuncPtr _glew_glx_glXGetProcAddress(const GLubyte * procName) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  __GLXextFuncPtr result = ((__GLXextFuncPtr)0);
  if (!prototypeCalled && glxContext->m_glXGetProcAddress) {
    prototypeCalled = true;
    result = glxContext->m_glXGetProcAddress(procName);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int _glew_glx_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int * ids) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  unsigned int result = ((unsigned int)0);
  if (!prototypeCalled && glxContext->m_glXGetGPUIDsAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXGetGPUIDsAMD(maxCount, ids);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void * data) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetGPUInfoAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXGetGPUInfoAMD(id, property, dataType, size, data);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int _glew_glx_glXGetContextGPUIDAMD(GLXContext ctx) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  unsigned int result = ((unsigned int)0);
  if (!prototypeCalled && glxContext->m_glXGetContextGPUIDAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXGetContextGPUIDAMD(ctx);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXCreateAssociatedContextAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateAssociatedContextAMD(id, share_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int * attribList) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXCreateAssociatedContextAttribsAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateAssociatedContextAttribsAMD(id, share_context, attribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXDeleteAssociatedContextAMD(GLXContext ctx) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXDeleteAssociatedContextAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXDeleteAssociatedContextAMD(ctx);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXMakeAssociatedContextCurrentAMD(GLXContext ctx) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXMakeAssociatedContextCurrentAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXMakeAssociatedContextCurrentAMD(ctx);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXGetCurrentAssociatedContextAMD() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXGetCurrentAssociatedContextAMD) {
    prototypeCalled = true;
    result = glxContext->m_glXGetCurrentAssociatedContextAMD();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXBlitContextFramebufferAMD) {
    prototypeCalled = true;
    glxContext->m_glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXCreateContextAttribsARB(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXCreateContextAttribsARB) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__GLXextFuncPtr _glew_glx_glXGetProcAddressARB(const GLubyte * procName) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  __GLXextFuncPtr result = ((__GLXextFuncPtr)0);
  if (!prototypeCalled && glxContext->m_glXGetProcAddressARB) {
    prototypeCalled = true;
    result = glxContext->m_glXGetProcAddressARB(procName);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Display * _glew_glx_glXGetCurrentDisplayEXT() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Display * result = ((Display *)0);
  if (!prototypeCalled && glxContext->m_glXGetCurrentDisplayEXT) {
    prototypeCalled = true;
    result = glxContext->m_glXGetCurrentDisplayEXT();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryContextInfoEXT(Display * dpy, GLXContext context, int attribute, int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryContextInfoEXT) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryContextInfoEXT(dpy, context, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContextID _glew_glx_glXGetContextIDEXT(const GLXContext context) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContextID result = ((GLXContextID)0);
  if (!prototypeCalled && glxContext->m_glXGetContextIDEXT) {
    prototypeCalled = true;
    result = glxContext->m_glXGetContextIDEXT(context);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXImportContextEXT(Display * dpy, GLXContextID contextID) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXImportContextEXT) {
    prototypeCalled = true;
    result = glxContext->m_glXImportContextEXT(dpy, contextID);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXFreeContextEXT(Display * dpy, GLXContext context) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXFreeContextEXT) {
    prototypeCalled = true;
    glxContext->m_glXFreeContextEXT(dpy, context);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXSwapIntervalEXT(Display * dpy, GLXDrawable drawable, int interval) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXSwapIntervalEXT) {
    prototypeCalled = true;
    glxContext->m_glXSwapIntervalEXT(dpy, drawable, interval);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXBindTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXBindTexImageEXT) {
    prototypeCalled = true;
    glxContext->m_glXBindTexImageEXT(dpy, drawable, buffer, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXReleaseTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXReleaseTexImageEXT) {
    prototypeCalled = true;
    glxContext->m_glXReleaseTexImageEXT(dpy, drawable, buffer);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int _glew_glx_glXGetAGPOffsetMESA(const void * pointer) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  unsigned int result = ((unsigned int)0);
  if (!prototypeCalled && glxContext->m_glXGetAGPOffsetMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXGetAGPOffsetMESA(pointer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXCopySubBufferMESA(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXCopySubBufferMESA) {
    prototypeCalled = true;
    glxContext->m_glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap _glew_glx_glXCreateGLXPixmapMESA(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXPixmap result = ((GLXPixmap)0);
  if (!prototypeCalled && glxContext->m_glXCreateGLXPixmapMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQueryCurrentRendererIntegerMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryCurrentRendererIntegerMESA(attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_glx_glXQueryCurrentRendererStringMESA(int attribute) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && glxContext->m_glXQueryCurrentRendererStringMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryCurrentRendererStringMESA(attribute);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQueryRendererIntegerMESA(Display * dpy, int screen, int renderer, int attribute, unsigned int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQueryRendererIntegerMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * _glew_glx_glXQueryRendererStringMESA(Display * dpy, int screen, int renderer, int attribute) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  const char * result = ((const char *)0);
  if (!prototypeCalled && glxContext->m_glXQueryRendererStringMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryRendererStringMESA(dpy, screen, renderer, attribute);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXReleaseBuffersMESA(Display * dpy, GLXDrawable drawable) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXReleaseBuffersMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXReleaseBuffersMESA(dpy, drawable);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLboolean _glew_glx_glXSet3DfxModeMESA(GLint mode) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLboolean result = ((GLboolean)0);
  if (!prototypeCalled && glxContext->m_glXSet3DfxModeMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXSet3DfxModeMESA(mode);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetSwapIntervalMESA() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetSwapIntervalMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXGetSwapIntervalMESA();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXSwapIntervalMESA(unsigned int interval) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXSwapIntervalMESA) {
    prototypeCalled = true;
    result = glxContext->m_glXSwapIntervalMESA(interval);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXCopyBufferSubDataNV) {
    prototypeCalled = true;
    glxContext->m_glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXNamedCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXNamedCopyBufferSubDataNV) {
    prototypeCalled = true;
    glxContext->m_glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXCopyImageSubDataNV(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXCopyImageSubDataNV) {
    prototypeCalled = true;
    glxContext->m_glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXDelayBeforeSwapNV(Display * dpy, GLXDrawable drawable, GLfloat seconds) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXDelayBeforeSwapNV) {
    prototypeCalled = true;
    result = glxContext->m_glXDelayBeforeSwapNV(dpy, drawable, seconds);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

unsigned int * _glew_glx_glXEnumerateVideoDevicesNV(Display * dpy, int screen, int * nelements) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  unsigned int * result = ((unsigned int *)0);
  if (!prototypeCalled && glxContext->m_glXEnumerateVideoDevicesNV) {
    prototypeCalled = true;
    result = glxContext->m_glXEnumerateVideoDevicesNV(dpy, screen, nelements);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXBindVideoDeviceNV(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXBindVideoDeviceNV) {
    prototypeCalled = true;
    result = glxContext->m_glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXJoinSwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint group) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXJoinSwapGroupNV) {
    prototypeCalled = true;
    result = glxContext->m_glXJoinSwapGroupNV(dpy, drawable, group);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXBindSwapBarrierNV(Display * dpy, GLuint group, GLuint barrier) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXBindSwapBarrierNV) {
    prototypeCalled = true;
    result = glxContext->m_glXBindSwapBarrierNV(dpy, group, barrier);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQuerySwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQuerySwapGroupNV) {
    prototypeCalled = true;
    result = glxContext->m_glXQuerySwapGroupNV(dpy, drawable, group, barrier);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQueryMaxSwapGroupsNV(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQueryMaxSwapGroupsNV) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQueryFrameCountNV(Display * dpy, int screen, GLuint * count) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQueryFrameCountNV) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryFrameCountNV(dpy, screen, count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXResetFrameCountNV(Display * dpy, int screen) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXResetFrameCountNV) {
    prototypeCalled = true;
    result = glxContext->m_glXResetFrameCountNV(dpy, screen);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXBindVideoCaptureDeviceNV(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXBindVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = glxContext->m_glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXVideoCaptureDeviceNV * _glew_glx_glXEnumerateVideoCaptureDevicesNV(Display * dpy, int screen, int * nelements) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXVideoCaptureDeviceNV * result = ((GLXVideoCaptureDeviceNV *)0);
  if (!prototypeCalled && glxContext->m_glXEnumerateVideoCaptureDevicesNV) {
    prototypeCalled = true;
    result = glxContext->m_glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXLockVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXLockVideoCaptureDeviceNV) {
    prototypeCalled = true;
    glxContext->m_glXLockVideoCaptureDeviceNV(dpy, device);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryVideoCaptureDeviceNV) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXReleaseVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXReleaseVideoCaptureDeviceNV) {
    prototypeCalled = true;
    glxContext->m_glXReleaseVideoCaptureDeviceNV(dpy, device);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetVideoDeviceNV(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetVideoDeviceNV) {
    prototypeCalled = true;
    result = glxContext->m_glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXReleaseVideoDeviceNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXReleaseVideoDeviceNV) {
    prototypeCalled = true;
    result = glxContext->m_glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXBindVideoImageNV(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXBindVideoImageNV) {
    prototypeCalled = true;
    result = glxContext->m_glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXReleaseVideoImageNV(Display * dpy, GLXPbuffer pbuf) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXReleaseVideoImageNV) {
    prototypeCalled = true;
    result = glxContext->m_glXReleaseVideoImageNV(dpy, pbuf);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXSendPbufferToVideoNV(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXSendPbufferToVideoNV) {
    prototypeCalled = true;
    result = glxContext->m_glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetVideoInfoNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetVideoInfoNV) {
    prototypeCalled = true;
    result = glxContext->m_glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXGetSyncValuesOML(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXGetSyncValuesOML) {
    prototypeCalled = true;
    result = glxContext->m_glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXGetMscRateOML(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXGetMscRateOML) {
    prototypeCalled = true;
    result = glxContext->m_glXGetMscRateOML(dpy, drawable, numerator, denominator);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int64_t _glew_glx_glXSwapBuffersMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int64_t result = ((int64_t)0);
  if (!prototypeCalled && glxContext->m_glXSwapBuffersMscOML) {
    prototypeCalled = true;
    result = glxContext->m_glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXWaitForMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXWaitForMscOML) {
    prototypeCalled = true;
    result = glxContext->m_glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXWaitForSbcOML(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXWaitForSbcOML) {
    prototypeCalled = true;
    result = glxContext->m_glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXCushionSGI(Display * dpy, Window window, float cushion) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXCushionSGI) {
    prototypeCalled = true;
    glxContext->m_glXCushionSGI(dpy, window, cushion);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXMakeCurrentReadSGI(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXMakeCurrentReadSGI) {
    prototypeCalled = true;
    result = glxContext->m_glXMakeCurrentReadSGI(dpy, draw, read, ctx);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXDrawable _glew_glx_glXGetCurrentReadDrawableSGI() {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXDrawable result = ((GLXDrawable)0);
  if (!prototypeCalled && glxContext->m_glXGetCurrentReadDrawableSGI) {
    prototypeCalled = true;
    result = glxContext->m_glXGetCurrentReadDrawableSGI();
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXSwapIntervalSGI(int interval) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXSwapIntervalSGI) {
    prototypeCalled = true;
    result = glxContext->m_glXSwapIntervalSGI(interval);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetVideoSyncSGI(unsigned int * count) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetVideoSyncSGI) {
    prototypeCalled = true;
    result = glxContext->m_glXGetVideoSyncSGI(count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int * count) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXWaitVideoSyncSGI) {
    prototypeCalled = true;
    result = glxContext->m_glXWaitVideoSyncSGI(divisor, remainder, count);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXAssociateDMPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuffer, DMparams * params, DMbuffer dmbuffer) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXAssociateDMPbufferSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXGetFBConfigAttribSGIX(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXGetFBConfigAttribSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfigSGIX * _glew_glx_glXChooseFBConfigSGIX(Display * dpy, int screen, int * attrib_list, int * nelements) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXFBConfigSGIX * result = ((GLXFBConfigSGIX *)0);
  if (!prototypeCalled && glxContext->m_glXChooseFBConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPixmap _glew_glx_glXCreateGLXPixmapWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXPixmap result = ((GLXPixmap)0);
  if (!prototypeCalled && glxContext->m_glXCreateGLXPixmapWithConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXContext _glew_glx_glXCreateContextWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXContext result = ((GLXContext)0);
  if (!prototypeCalled && glxContext->m_glXCreateContextWithConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

XVisualInfo * _glew_glx_glXGetVisualFromFBConfigSGIX(Display * dpy, GLXFBConfigSGIX config) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  XVisualInfo * result = ((XVisualInfo *)0);
  if (!prototypeCalled && glxContext->m_glXGetVisualFromFBConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXGetVisualFromFBConfigSGIX(dpy, config);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXFBConfigSGIX _glew_glx_glXGetFBConfigFromVisualSGIX(Display * dpy, XVisualInfo * vis) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXFBConfigSGIX result = ((GLXFBConfigSGIX)0);
  if (!prototypeCalled && glxContext->m_glXGetFBConfigFromVisualSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXGetFBConfigFromVisualSGIX(dpy, vis);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXHyperpipeNetworkSGIX * _glew_glx_glXQueryHyperpipeNetworkSGIX(Display * dpy, int * npipes) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXHyperpipeNetworkSGIX * result = ((GLXHyperpipeNetworkSGIX *)0);
  if (!prototypeCalled && glxContext->m_glXQueryHyperpipeNetworkSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryHyperpipeNetworkSGIX(dpy, npipes);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXHyperpipeConfigSGIX(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXHyperpipeConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXHyperpipeConfigSGIX * _glew_glx_glXQueryHyperpipeConfigSGIX(Display * dpy, int hpId, int * npipes) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXHyperpipeConfigSGIX * result = ((GLXHyperpipeConfigSGIX *)0);
  if (!prototypeCalled && glxContext->m_glXQueryHyperpipeConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXDestroyHyperpipeConfigSGIX(Display * dpy, int hpId) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXDestroyHyperpipeConfigSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXDestroyHyperpipeConfigSGIX(dpy, hpId);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXBindHyperpipeSGIX(Display * dpy, int hpId) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXBindHyperpipeSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXBindHyperpipeSGIX(dpy, hpId);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryHyperpipeBestAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryHyperpipeBestAttribSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXHyperpipeAttribSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryHyperpipeAttribSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXPbufferSGIX _glew_glx_glXCreateGLXPbufferSGIX(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXPbufferSGIX result = ((GLXPbufferSGIX)0);
  if (!prototypeCalled && glxContext->m_glXCreateGLXPbufferSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXDestroyGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXDestroyGLXPbufferSGIX) {
    prototypeCalled = true;
    glxContext->m_glXDestroyGLXPbufferSGIX(dpy, pbuf);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXQueryGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXQueryGLXPbufferSGIX) {
    prototypeCalled = true;
    glxContext->m_glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXSelectEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long mask) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXSelectEventSGIX) {
    prototypeCalled = true;
    glxContext->m_glXSelectEventSGIX(dpy, drawable, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXGetSelectedEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long * mask) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXGetSelectedEventSGIX) {
    prototypeCalled = true;
    glxContext->m_glXGetSelectedEventSGIX(dpy, drawable, mask);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXBindSwapBarrierSGIX(Display * dpy, GLXDrawable drawable, int barrier) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXBindSwapBarrierSGIX) {
    prototypeCalled = true;
    glxContext->m_glXBindSwapBarrierSGIX(dpy, drawable, barrier);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bool _glew_glx_glXQueryMaxSwapBarriersSGIX(Display * dpy, int screen, int * max) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Bool result = ((Bool)0);
  if (!prototypeCalled && glxContext->m_glXQueryMaxSwapBarriersSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXJoinSwapGroupSGIX(Display * dpy, GLXDrawable drawable, GLXDrawable member) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXJoinSwapGroupSGIX) {
    prototypeCalled = true;
    glxContext->m_glXJoinSwapGroupSGIX(dpy, drawable, member);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXBindChannelToWindowSGIX(Display * display, int screen, int channel, Window window) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXBindChannelToWindowSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXBindChannelToWindowSGIX(display, screen, channel, window);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXChannelRectSGIX(Display * display, int screen, int channel, int x, int y, int w, int h) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXChannelRectSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXChannelRectSGIX(display, screen, channel, x, y, w, h);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryChannelRectSGIX(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryChannelRectSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXQueryChannelDeltasSGIX(Display * display, int screen, int channel, int * x, int * y, int * w, int * h) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXQueryChannelDeltasSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int _glew_glx_glXChannelRectSyncSGIX(Display * display, int screen, int channel, GLenum synctype) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  int result = ((int)0);
  if (!prototypeCalled && glxContext->m_glXChannelRectSyncSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXChannelRectSyncSGIX(display, screen, channel, synctype);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GLXVideoSourceSGIX _glew_glx_glXCreateGLXVideoSourceSGIX(Display * display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  GLXVideoSourceSGIX result = ((GLXVideoSourceSGIX)0);
  if (!prototypeCalled && glxContext->m_glXCreateGLXVideoSourceSGIX) {
    prototypeCalled = true;
    result = glxContext->m_glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void _glew_glx_glXDestroyGLXVideoSourceSGIX(Display * dpy, GLXVideoSourceSGIX glxvideosource) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  if (!prototypeCalled && glxContext->m_glXDestroyGLXVideoSourceSGIX) {
    prototypeCalled = true;
    glxContext->m_glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource);
  }
  GLEW_ASSERT (prototypeCalled);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Status _glew_glx_glXGetTransparentIndexSUN(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex) {
  bool prototypeCalled = false;
  const glew::glx::Context *glxContext = glew::glx::s_glxContext;
  Status result = ((Status)0);
  if (!prototypeCalled && glxContext->m_glXGetTransparentIndexSUN) {
    prototypeCalled = true;
    result = glxContext->m_glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
  }
  GLEW_ASSERT (prototypeCalled);
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
