////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-glx.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryExtensionsString

const char * glew::glx::glXQueryExtensionsString (Display * dpy, int  screen)
{
  // GLX_VERSION_1_1 - glXQueryExtensionsString
  if (s_deviceConfig.m_glXQueryExtensionsString)
  {
    return s_deviceConfig.m_glXQueryExtensionsString (dpy, screen);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryServerString

const char * glew::glx::glXQueryServerString (Display * dpy, int  screen, int  name)
{
  // GLX_VERSION_1_1 - glXQueryServerString
  if (s_deviceConfig.m_glXQueryServerString)
  {
    return s_deviceConfig.m_glXQueryServerString (dpy, screen, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetClientString

const char * glew::glx::glXGetClientString (Display * dpy, int  name)
{
  // GLX_VERSION_1_1 - glXGetClientString
  if (s_deviceConfig.m_glXGetClientString)
  {
    return s_deviceConfig.m_glXGetClientString (dpy, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetCurrentDisplay

Display * glew::glx::glXGetCurrentDisplay ()
{
  // GLX_VERSION_1_2 - glXGetCurrentDisplay
  if (s_deviceConfig.m_glXGetCurrentDisplay)
  {
    return s_deviceConfig.m_glXGetCurrentDisplay ();
  }
  return ((Display *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetFBConfigs

GLXFBConfig * glew::glx::glXGetFBConfigs (Display * dpy, int  screen, int * nelements)
{
  // GLX_VERSION_1_3 - glXGetFBConfigs
  if (s_deviceConfig.m_glXGetFBConfigs)
  {
    return s_deviceConfig.m_glXGetFBConfigs (dpy, screen, nelements);
  }
  return ((GLXFBConfig *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXChooseFBConfig

GLXFBConfig * glew::glx::glXChooseFBConfig (Display * dpy, int  screen, const int * attrib_list, int * nelements)
{
  // GLX_VERSION_1_3 - glXChooseFBConfig
  if (s_deviceConfig.m_glXChooseFBConfig)
  {
    return s_deviceConfig.m_glXChooseFBConfig (dpy, screen, attrib_list, nelements);
  }
  return ((GLXFBConfig *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetFBConfigAttrib

int  glew::glx::glXGetFBConfigAttrib (Display * dpy, GLXFBConfig config, int  attribute, int * value)
{
  // GLX_VERSION_1_3 - glXGetFBConfigAttrib
  if (s_deviceConfig.m_glXGetFBConfigAttrib)
  {
    return s_deviceConfig.m_glXGetFBConfigAttrib (dpy, config, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetVisualFromFBConfig

XVisualInfo * glew::glx::glXGetVisualFromFBConfig (Display * dpy, GLXFBConfig config)
{
  // GLX_VERSION_1_3 - glXGetVisualFromFBConfig
  if (s_deviceConfig.m_glXGetVisualFromFBConfig)
  {
    return s_deviceConfig.m_glXGetVisualFromFBConfig (dpy, config);
  }
  return ((XVisualInfo *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateWindow

GLXWindow glew::glx::glXCreateWindow (Display * dpy, GLXFBConfig config, Window win, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreateWindow
  if (s_deviceConfig.m_glXCreateWindow)
  {
    return s_deviceConfig.m_glXCreateWindow (dpy, config, win, attrib_list);
  }
  return ((GLXWindow)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyWindow

void  glew::glx::glXDestroyWindow (Display * dpy, GLXWindow win)
{
  // GLX_VERSION_1_3 - glXDestroyWindow
  if (s_deviceConfig.m_glXDestroyWindow)
  {
    s_deviceConfig.m_glXDestroyWindow (dpy, win);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreatePixmap

GLXPixmap glew::glx::glXCreatePixmap (Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreatePixmap
  if (s_deviceConfig.m_glXCreatePixmap)
  {
    return s_deviceConfig.m_glXCreatePixmap (dpy, config, pixmap, attrib_list);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyPixmap

void  glew::glx::glXDestroyPixmap (Display * dpy, GLXPixmap pixmap)
{
  // GLX_VERSION_1_3 - glXDestroyPixmap
  if (s_deviceConfig.m_glXDestroyPixmap)
  {
    s_deviceConfig.m_glXDestroyPixmap (dpy, pixmap);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreatePbuffer

GLXPbuffer glew::glx::glXCreatePbuffer (Display * dpy, GLXFBConfig config, const int * attrib_list)
{
  // GLX_VERSION_1_3 - glXCreatePbuffer
  if (s_deviceConfig.m_glXCreatePbuffer)
  {
    return s_deviceConfig.m_glXCreatePbuffer (dpy, config, attrib_list);
  }
  return ((GLXPbuffer)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyPbuffer

void  glew::glx::glXDestroyPbuffer (Display * dpy, GLXPbuffer pbuf)
{
  // GLX_VERSION_1_3 - glXDestroyPbuffer
  if (s_deviceConfig.m_glXDestroyPbuffer)
  {
    s_deviceConfig.m_glXDestroyPbuffer (dpy, pbuf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryDrawable

void  glew::glx::glXQueryDrawable (Display * dpy, GLXDrawable draw, int  attribute, unsigned int * value)
{
  // GLX_VERSION_1_3 - glXQueryDrawable
  if (s_deviceConfig.m_glXQueryDrawable)
  {
    s_deviceConfig.m_glXQueryDrawable (dpy, draw, attribute, value);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateNewContext

GLXContext glew::glx::glXCreateNewContext (Display * dpy, GLXFBConfig config, int  render_type, GLXContext share_list, Bool direct)
{
  // GLX_VERSION_1_3 - glXCreateNewContext
  if (s_deviceConfig.m_glXCreateNewContext)
  {
    return s_deviceConfig.m_glXCreateNewContext (dpy, config, render_type, share_list, direct);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXMakeContextCurrent

Bool glew::glx::glXMakeContextCurrent (Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  // GLX_VERSION_1_3 - glXMakeContextCurrent
  if (s_deviceConfig.m_glXMakeContextCurrent)
  {
    return s_deviceConfig.m_glXMakeContextCurrent (dpy, draw, read, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetCurrentReadDrawable

GLXDrawable glew::glx::glXGetCurrentReadDrawable ()
{
  // GLX_VERSION_1_3 - glXGetCurrentReadDrawable
  if (s_deviceConfig.m_glXGetCurrentReadDrawable)
  {
    return s_deviceConfig.m_glXGetCurrentReadDrawable ();
  }
  return ((GLXDrawable)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryContext

int  glew::glx::glXQueryContext (Display * dpy, GLXContext ctx, int  attribute, int * value)
{
  // GLX_VERSION_1_3 - glXQueryContext
  if (s_deviceConfig.m_glXQueryContext)
  {
    return s_deviceConfig.m_glXQueryContext (dpy, ctx, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSelectEvent

void  glew::glx::glXSelectEvent (Display * dpy, GLXDrawable draw, unsigned long  event_mask)
{
  // GLX_VERSION_1_3 - glXSelectEvent
  if (s_deviceConfig.m_glXSelectEvent)
  {
    s_deviceConfig.m_glXSelectEvent (dpy, draw, event_mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetSelectedEvent

void  glew::glx::glXGetSelectedEvent (Display * dpy, GLXDrawable draw, unsigned long * event_mask)
{
  // GLX_VERSION_1_3 - glXGetSelectedEvent
  if (s_deviceConfig.m_glXGetSelectedEvent)
  {
    s_deviceConfig.m_glXGetSelectedEvent (dpy, draw, event_mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetProcAddress

__GLXextFuncPtr glew::glx::glXGetProcAddress (const GLubyte * procName)
{
  // GLX_VERSION_1_4 - glXGetProcAddress
  if (s_deviceConfig.m_glXGetProcAddress)
  {
    return s_deviceConfig.m_glXGetProcAddress (procName);
  }
  return ((__GLXextFuncPtr)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetGPUIDsAMD

unsigned int  glew::glx::glXGetGPUIDsAMD (unsigned int  maxCount, unsigned int * ids)
{
  // GLX_AMD_gpu_association - glXGetGPUIDsAMD
  if (s_deviceConfig.m_glXGetGPUIDsAMD)
  {
    return s_deviceConfig.m_glXGetGPUIDsAMD (maxCount, ids);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetGPUInfoAMD

int  glew::glx::glXGetGPUInfoAMD (unsigned int  id, int  property, GLenum dataType, unsigned int  size, void * data)
{
  // GLX_AMD_gpu_association - glXGetGPUInfoAMD
  if (s_deviceConfig.m_glXGetGPUInfoAMD)
  {
    return s_deviceConfig.m_glXGetGPUInfoAMD (id, property, dataType, size, data);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetContextGPUIDAMD

unsigned int  glew::glx::glXGetContextGPUIDAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXGetContextGPUIDAMD
  if (s_deviceConfig.m_glXGetContextGPUIDAMD)
  {
    return s_deviceConfig.m_glXGetContextGPUIDAMD (ctx);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateAssociatedContextAMD

GLXContext glew::glx::glXCreateAssociatedContextAMD (unsigned int  id, GLXContext share_list)
{
  // GLX_AMD_gpu_association - glXCreateAssociatedContextAMD
  if (s_deviceConfig.m_glXCreateAssociatedContextAMD)
  {
    return s_deviceConfig.m_glXCreateAssociatedContextAMD (id, share_list);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateAssociatedContextAttribsAMD

GLXContext glew::glx::glXCreateAssociatedContextAttribsAMD (unsigned int  id, GLXContext share_context, const int * attribList)
{
  // GLX_AMD_gpu_association - glXCreateAssociatedContextAttribsAMD
  if (s_deviceConfig.m_glXCreateAssociatedContextAttribsAMD)
  {
    return s_deviceConfig.m_glXCreateAssociatedContextAttribsAMD (id, share_context, attribList);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDeleteAssociatedContextAMD

Bool glew::glx::glXDeleteAssociatedContextAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXDeleteAssociatedContextAMD
  if (s_deviceConfig.m_glXDeleteAssociatedContextAMD)
  {
    return s_deviceConfig.m_glXDeleteAssociatedContextAMD (ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXMakeAssociatedContextCurrentAMD

Bool glew::glx::glXMakeAssociatedContextCurrentAMD (GLXContext ctx)
{
  // GLX_AMD_gpu_association - glXMakeAssociatedContextCurrentAMD
  if (s_deviceConfig.m_glXMakeAssociatedContextCurrentAMD)
  {
    return s_deviceConfig.m_glXMakeAssociatedContextCurrentAMD (ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetCurrentAssociatedContextAMD

GLXContext glew::glx::glXGetCurrentAssociatedContextAMD ()
{
  // GLX_AMD_gpu_association - glXGetCurrentAssociatedContextAMD
  if (s_deviceConfig.m_glXGetCurrentAssociatedContextAMD)
  {
    return s_deviceConfig.m_glXGetCurrentAssociatedContextAMD ();
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBlitContextFramebufferAMD

void  glew::glx::glXBlitContextFramebufferAMD (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  // GLX_AMD_gpu_association - glXBlitContextFramebufferAMD
  if (s_deviceConfig.m_glXBlitContextFramebufferAMD)
  {
    s_deviceConfig.m_glXBlitContextFramebufferAMD (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateContextAttribsARB

GLXContext glew::glx::glXCreateContextAttribsARB (Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list)
{
  // GLX_ARB_create_context - glXCreateContextAttribsARB
  if (s_deviceConfig.m_glXCreateContextAttribsARB)
  {
    return s_deviceConfig.m_glXCreateContextAttribsARB (dpy, config, share_context, direct, attrib_list);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetProcAddressARB

__GLXextFuncPtr glew::glx::glXGetProcAddressARB (const GLubyte * procName)
{
  // GLX_ARB_get_proc_address - glXGetProcAddressARB
  if (s_deviceConfig.m_glXGetProcAddressARB)
  {
    return s_deviceConfig.m_glXGetProcAddressARB (procName);
  }
  return ((__GLXextFuncPtr)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetCurrentDisplayEXT

Display * glew::glx::glXGetCurrentDisplayEXT ()
{
  // GLX_EXT_import_context - glXGetCurrentDisplayEXT
  if (s_deviceConfig.m_glXGetCurrentDisplayEXT)
  {
    return s_deviceConfig.m_glXGetCurrentDisplayEXT ();
  }
  return ((Display *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryContextInfoEXT

int  glew::glx::glXQueryContextInfoEXT (Display * dpy, GLXContext context, int  attribute, int * value)
{
  // GLX_EXT_import_context - glXQueryContextInfoEXT
  if (s_deviceConfig.m_glXQueryContextInfoEXT)
  {
    return s_deviceConfig.m_glXQueryContextInfoEXT (dpy, context, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetContextIDEXT

GLXContextID glew::glx::glXGetContextIDEXT (const GLXContext context)
{
  // GLX_EXT_import_context - glXGetContextIDEXT
  if (s_deviceConfig.m_glXGetContextIDEXT)
  {
    return s_deviceConfig.m_glXGetContextIDEXT (context);
  }
  return ((GLXContextID)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXImportContextEXT

GLXContext glew::glx::glXImportContextEXT (Display * dpy, GLXContextID contextID)
{
  // GLX_EXT_import_context - glXImportContextEXT
  if (s_deviceConfig.m_glXImportContextEXT)
  {
    return s_deviceConfig.m_glXImportContextEXT (dpy, contextID);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXFreeContextEXT

void  glew::glx::glXFreeContextEXT (Display * dpy, GLXContext context)
{
  // GLX_EXT_import_context - glXFreeContextEXT
  if (s_deviceConfig.m_glXFreeContextEXT)
  {
    s_deviceConfig.m_glXFreeContextEXT (dpy, context);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSwapIntervalEXT

void  glew::glx::glXSwapIntervalEXT (Display * dpy, GLXDrawable drawable, int  interval)
{
  // GLX_EXT_swap_control - glXSwapIntervalEXT
  if (s_deviceConfig.m_glXSwapIntervalEXT)
  {
    s_deviceConfig.m_glXSwapIntervalEXT (dpy, drawable, interval);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindTexImageEXT

void  glew::glx::glXBindTexImageEXT (Display * dpy, GLXDrawable drawable, int  buffer, const int * attrib_list)
{
  // GLX_EXT_texture_from_pixmap - glXBindTexImageEXT
  if (s_deviceConfig.m_glXBindTexImageEXT)
  {
    s_deviceConfig.m_glXBindTexImageEXT (dpy, drawable, buffer, attrib_list);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXReleaseTexImageEXT

void  glew::glx::glXReleaseTexImageEXT (Display * dpy, GLXDrawable drawable, int  buffer)
{
  // GLX_EXT_texture_from_pixmap - glXReleaseTexImageEXT
  if (s_deviceConfig.m_glXReleaseTexImageEXT)
  {
    s_deviceConfig.m_glXReleaseTexImageEXT (dpy, drawable, buffer);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetAGPOffsetMESA

unsigned int  glew::glx::glXGetAGPOffsetMESA (const void * pointer)
{
  // GLX_MESA_agp_offset - glXGetAGPOffsetMESA
  if (s_deviceConfig.m_glXGetAGPOffsetMESA)
  {
    return s_deviceConfig.m_glXGetAGPOffsetMESA (pointer);
  }
  return ((unsigned int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCopySubBufferMESA

void  glew::glx::glXCopySubBufferMESA (Display * dpy, GLXDrawable drawable, int  x, int  y, int  width, int  height)
{
  // GLX_MESA_copy_sub_buffer - glXCopySubBufferMESA
  if (s_deviceConfig.m_glXCopySubBufferMESA)
  {
    s_deviceConfig.m_glXCopySubBufferMESA (dpy, drawable, x, y, width, height);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateGLXPixmapMESA

GLXPixmap glew::glx::glXCreateGLXPixmapMESA (Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap)
{
  // GLX_MESA_pixmap_colormap - glXCreateGLXPixmapMESA
  if (s_deviceConfig.m_glXCreateGLXPixmapMESA)
  {
    return s_deviceConfig.m_glXCreateGLXPixmapMESA (dpy, visual, pixmap, cmap);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryCurrentRendererIntegerMESA

Bool glew::glx::glXQueryCurrentRendererIntegerMESA (int  attribute, unsigned int * value)
{
  // GLX_MESA_query_renderer - glXQueryCurrentRendererIntegerMESA
  if (s_deviceConfig.m_glXQueryCurrentRendererIntegerMESA)
  {
    return s_deviceConfig.m_glXQueryCurrentRendererIntegerMESA (attribute, value);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryCurrentRendererStringMESA

const char * glew::glx::glXQueryCurrentRendererStringMESA (int  attribute)
{
  // GLX_MESA_query_renderer - glXQueryCurrentRendererStringMESA
  if (s_deviceConfig.m_glXQueryCurrentRendererStringMESA)
  {
    return s_deviceConfig.m_glXQueryCurrentRendererStringMESA (attribute);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryRendererIntegerMESA

Bool glew::glx::glXQueryRendererIntegerMESA (Display * dpy, int  screen, int  renderer, int  attribute, unsigned int * value)
{
  // GLX_MESA_query_renderer - glXQueryRendererIntegerMESA
  if (s_deviceConfig.m_glXQueryRendererIntegerMESA)
  {
    return s_deviceConfig.m_glXQueryRendererIntegerMESA (dpy, screen, renderer, attribute, value);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryRendererStringMESA

const char * glew::glx::glXQueryRendererStringMESA (Display * dpy, int  screen, int  renderer, int  attribute)
{
  // GLX_MESA_query_renderer - glXQueryRendererStringMESA
  if (s_deviceConfig.m_glXQueryRendererStringMESA)
  {
    return s_deviceConfig.m_glXQueryRendererStringMESA (dpy, screen, renderer, attribute);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXReleaseBuffersMESA

Bool glew::glx::glXReleaseBuffersMESA (Display * dpy, GLXDrawable drawable)
{
  // GLX_MESA_release_buffers - glXReleaseBuffersMESA
  if (s_deviceConfig.m_glXReleaseBuffersMESA)
  {
    return s_deviceConfig.m_glXReleaseBuffersMESA (dpy, drawable);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSet3DfxModeMESA

Bool glew::glx::glXSet3DfxModeMESA (int  mode)
{
  // GLX_MESA_set_3dfx_mode - glXSet3DfxModeMESA
  if (s_deviceConfig.m_glXSet3DfxModeMESA)
  {
    return s_deviceConfig.m_glXSet3DfxModeMESA (mode);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCopyBufferSubDataNV

void  glew::glx::glXCopyBufferSubDataNV (Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GLX_NV_copy_buffer - glXCopyBufferSubDataNV
  if (s_deviceConfig.m_glXCopyBufferSubDataNV)
  {
    s_deviceConfig.m_glXCopyBufferSubDataNV (dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXNamedCopyBufferSubDataNV

void  glew::glx::glXNamedCopyBufferSubDataNV (Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  // GLX_NV_copy_buffer - glXNamedCopyBufferSubDataNV
  if (s_deviceConfig.m_glXNamedCopyBufferSubDataNV)
  {
    s_deviceConfig.m_glXNamedCopyBufferSubDataNV (dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCopyImageSubDataNV

void  glew::glx::glXCopyImageSubDataNV (Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  // GLX_NV_copy_image - glXCopyImageSubDataNV
  if (s_deviceConfig.m_glXCopyImageSubDataNV)
  {
    s_deviceConfig.m_glXCopyImageSubDataNV (dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDelayBeforeSwapNV

Bool glew::glx::glXDelayBeforeSwapNV (Display * dpy, GLXDrawable drawable, GLfloat seconds)
{
  // GLX_NV_delay_before_swap - glXDelayBeforeSwapNV
  if (s_deviceConfig.m_glXDelayBeforeSwapNV)
  {
    return s_deviceConfig.m_glXDelayBeforeSwapNV (dpy, drawable, seconds);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXEnumerateVideoDevicesNV

unsigned int * glew::glx::glXEnumerateVideoDevicesNV (Display * dpy, int  screen, int * nelements)
{
  // GLX_NV_present_video - glXEnumerateVideoDevicesNV
  if (s_deviceConfig.m_glXEnumerateVideoDevicesNV)
  {
    return s_deviceConfig.m_glXEnumerateVideoDevicesNV (dpy, screen, nelements);
  }
  return ((unsigned int *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindVideoDeviceNV

int  glew::glx::glXBindVideoDeviceNV (Display * dpy, unsigned int  video_slot, unsigned int  video_device, const int * attrib_list)
{
  // GLX_NV_present_video - glXBindVideoDeviceNV
  if (s_deviceConfig.m_glXBindVideoDeviceNV)
  {
    return s_deviceConfig.m_glXBindVideoDeviceNV (dpy, video_slot, video_device, attrib_list);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXJoinSwapGroupNV

Bool glew::glx::glXJoinSwapGroupNV (Display * dpy, GLXDrawable drawable, GLuint group)
{
  // GLX_NV_swap_group - glXJoinSwapGroupNV
  if (s_deviceConfig.m_glXJoinSwapGroupNV)
  {
    return s_deviceConfig.m_glXJoinSwapGroupNV (dpy, drawable, group);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindSwapBarrierNV

Bool glew::glx::glXBindSwapBarrierNV (Display * dpy, GLuint group, GLuint barrier)
{
  // GLX_NV_swap_group - glXBindSwapBarrierNV
  if (s_deviceConfig.m_glXBindSwapBarrierNV)
  {
    return s_deviceConfig.m_glXBindSwapBarrierNV (dpy, group, barrier);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQuerySwapGroupNV

Bool glew::glx::glXQuerySwapGroupNV (Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier)
{
  // GLX_NV_swap_group - glXQuerySwapGroupNV
  if (s_deviceConfig.m_glXQuerySwapGroupNV)
  {
    return s_deviceConfig.m_glXQuerySwapGroupNV (dpy, drawable, group, barrier);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryMaxSwapGroupsNV

Bool glew::glx::glXQueryMaxSwapGroupsNV (Display * dpy, int  screen, GLuint * maxGroups, GLuint * maxBarriers)
{
  // GLX_NV_swap_group - glXQueryMaxSwapGroupsNV
  if (s_deviceConfig.m_glXQueryMaxSwapGroupsNV)
  {
    return s_deviceConfig.m_glXQueryMaxSwapGroupsNV (dpy, screen, maxGroups, maxBarriers);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryFrameCountNV

Bool glew::glx::glXQueryFrameCountNV (Display * dpy, int  screen, GLuint * count)
{
  // GLX_NV_swap_group - glXQueryFrameCountNV
  if (s_deviceConfig.m_glXQueryFrameCountNV)
  {
    return s_deviceConfig.m_glXQueryFrameCountNV (dpy, screen, count);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXResetFrameCountNV

Bool glew::glx::glXResetFrameCountNV (Display * dpy, int  screen)
{
  // GLX_NV_swap_group - glXResetFrameCountNV
  if (s_deviceConfig.m_glXResetFrameCountNV)
  {
    return s_deviceConfig.m_glXResetFrameCountNV (dpy, screen);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindVideoCaptureDeviceNV

int  glew::glx::glXBindVideoCaptureDeviceNV (Display * dpy, unsigned int  video_capture_slot, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXBindVideoCaptureDeviceNV
  if (s_deviceConfig.m_glXBindVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_glXBindVideoCaptureDeviceNV (dpy, video_capture_slot, device);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXEnumerateVideoCaptureDevicesNV

GLXVideoCaptureDeviceNV * glew::glx::glXEnumerateVideoCaptureDevicesNV (Display * dpy, int  screen, int * nelements)
{
  // GLX_NV_video_capture - glXEnumerateVideoCaptureDevicesNV
  if (s_deviceConfig.m_glXEnumerateVideoCaptureDevicesNV)
  {
    return s_deviceConfig.m_glXEnumerateVideoCaptureDevicesNV (dpy, screen, nelements);
  }
  return ((GLXVideoCaptureDeviceNV *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXLockVideoCaptureDeviceNV

void  glew::glx::glXLockVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXLockVideoCaptureDeviceNV
  if (s_deviceConfig.m_glXLockVideoCaptureDeviceNV)
  {
    s_deviceConfig.m_glXLockVideoCaptureDeviceNV (dpy, device);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryVideoCaptureDeviceNV

int  glew::glx::glXQueryVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device, int  attribute, int * value)
{
  // GLX_NV_video_capture - glXQueryVideoCaptureDeviceNV
  if (s_deviceConfig.m_glXQueryVideoCaptureDeviceNV)
  {
    return s_deviceConfig.m_glXQueryVideoCaptureDeviceNV (dpy, device, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXReleaseVideoCaptureDeviceNV

void  glew::glx::glXReleaseVideoCaptureDeviceNV (Display * dpy, GLXVideoCaptureDeviceNV device)
{
  // GLX_NV_video_capture - glXReleaseVideoCaptureDeviceNV
  if (s_deviceConfig.m_glXReleaseVideoCaptureDeviceNV)
  {
    s_deviceConfig.m_glXReleaseVideoCaptureDeviceNV (dpy, device);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetVideoDeviceNV

int  glew::glx::glXGetVideoDeviceNV (Display * dpy, int  screen, int  numVideoDevices, GLXVideoDeviceNV * pVideoDevice)
{
  // GLX_NV_video_out - glXGetVideoDeviceNV
  if (s_deviceConfig.m_glXGetVideoDeviceNV)
  {
    return s_deviceConfig.m_glXGetVideoDeviceNV (dpy, screen, numVideoDevices, pVideoDevice);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXReleaseVideoDeviceNV

int  glew::glx::glXReleaseVideoDeviceNV (Display * dpy, int  screen, GLXVideoDeviceNV VideoDevice)
{
  // GLX_NV_video_out - glXReleaseVideoDeviceNV
  if (s_deviceConfig.m_glXReleaseVideoDeviceNV)
  {
    return s_deviceConfig.m_glXReleaseVideoDeviceNV (dpy, screen, VideoDevice);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindVideoImageNV

int  glew::glx::glXBindVideoImageNV (Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int  iVideoBuffer)
{
  // GLX_NV_video_out - glXBindVideoImageNV
  if (s_deviceConfig.m_glXBindVideoImageNV)
  {
    return s_deviceConfig.m_glXBindVideoImageNV (dpy, VideoDevice, pbuf, iVideoBuffer);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXReleaseVideoImageNV

int  glew::glx::glXReleaseVideoImageNV (Display * dpy, GLXPbuffer pbuf)
{
  // GLX_NV_video_out - glXReleaseVideoImageNV
  if (s_deviceConfig.m_glXReleaseVideoImageNV)
  {
    return s_deviceConfig.m_glXReleaseVideoImageNV (dpy, pbuf);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSendPbufferToVideoNV

int  glew::glx::glXSendPbufferToVideoNV (Display * dpy, GLXPbuffer pbuf, int  iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock)
{
  // GLX_NV_video_out - glXSendPbufferToVideoNV
  if (s_deviceConfig.m_glXSendPbufferToVideoNV)
  {
    return s_deviceConfig.m_glXSendPbufferToVideoNV (dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetVideoInfoNV

int  glew::glx::glXGetVideoInfoNV (Display * dpy, int  screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo)
{
  // GLX_NV_video_out - glXGetVideoInfoNV
  if (s_deviceConfig.m_glXGetVideoInfoNV)
  {
    return s_deviceConfig.m_glXGetVideoInfoNV (dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetSyncValuesOML

Bool glew::glx::glXGetSyncValuesOML (Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXGetSyncValuesOML
  if (s_deviceConfig.m_glXGetSyncValuesOML)
  {
    return s_deviceConfig.m_glXGetSyncValuesOML (dpy, drawable, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetMscRateOML

Bool glew::glx::glXGetMscRateOML (Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator)
{
  // GLX_OML_sync_control - glXGetMscRateOML
  if (s_deviceConfig.m_glXGetMscRateOML)
  {
    return s_deviceConfig.m_glXGetMscRateOML (dpy, drawable, numerator, denominator);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSwapBuffersMscOML

int64_t glew::glx::glXSwapBuffersMscOML (Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
  // GLX_OML_sync_control - glXSwapBuffersMscOML
  if (s_deviceConfig.m_glXSwapBuffersMscOML)
  {
    return s_deviceConfig.m_glXSwapBuffersMscOML (dpy, drawable, target_msc, divisor, remainder);
  }
  return ((int64_t)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXWaitForMscOML

Bool glew::glx::glXWaitForMscOML (Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXWaitForMscOML
  if (s_deviceConfig.m_glXWaitForMscOML)
  {
    return s_deviceConfig.m_glXWaitForMscOML (dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXWaitForSbcOML

Bool glew::glx::glXWaitForSbcOML (Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc)
{
  // GLX_OML_sync_control - glXWaitForSbcOML
  if (s_deviceConfig.m_glXWaitForSbcOML)
  {
    return s_deviceConfig.m_glXWaitForSbcOML (dpy, drawable, target_sbc, ust, msc, sbc);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCushionSGI

void  glew::glx::glXCushionSGI (Display * dpy, Window window, float  cushion)
{
  // GLX_SGI_cushion - glXCushionSGI
  if (s_deviceConfig.m_glXCushionSGI)
  {
    s_deviceConfig.m_glXCushionSGI (dpy, window, cushion);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXMakeCurrentReadSGI

Bool glew::glx::glXMakeCurrentReadSGI (Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
  // GLX_SGI_make_current_read - glXMakeCurrentReadSGI
  if (s_deviceConfig.m_glXMakeCurrentReadSGI)
  {
    return s_deviceConfig.m_glXMakeCurrentReadSGI (dpy, draw, read, ctx);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetCurrentReadDrawableSGI

GLXDrawable glew::glx::glXGetCurrentReadDrawableSGI ()
{
  // GLX_SGI_make_current_read - glXGetCurrentReadDrawableSGI
  if (s_deviceConfig.m_glXGetCurrentReadDrawableSGI)
  {
    return s_deviceConfig.m_glXGetCurrentReadDrawableSGI ();
  }
  return ((GLXDrawable)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSwapIntervalSGI

int  glew::glx::glXSwapIntervalSGI (int  interval)
{
  // GLX_SGI_swap_control - glXSwapIntervalSGI
  if (s_deviceConfig.m_glXSwapIntervalSGI)
  {
    return s_deviceConfig.m_glXSwapIntervalSGI (interval);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetVideoSyncSGI

int  glew::glx::glXGetVideoSyncSGI (unsigned int * count)
{
  // GLX_SGI_video_sync - glXGetVideoSyncSGI
  if (s_deviceConfig.m_glXGetVideoSyncSGI)
  {
    return s_deviceConfig.m_glXGetVideoSyncSGI (count);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXWaitVideoSyncSGI

int  glew::glx::glXWaitVideoSyncSGI (int  divisor, int  remainder, unsigned int * count)
{
  // GLX_SGI_video_sync - glXWaitVideoSyncSGI
  if (s_deviceConfig.m_glXWaitVideoSyncSGI)
  {
    return s_deviceConfig.m_glXWaitVideoSyncSGI (divisor, remainder, count);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXAssociateDMPbufferSGIX

Bool glew::glx::glXAssociateDMPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuffer, DMparams * params, DMbuffer dmbuffer)
{
  // GLX_SGIX_dmbuffer - glXAssociateDMPbufferSGIX
  if (s_deviceConfig.m_glXAssociateDMPbufferSGIX)
  {
    return s_deviceConfig.m_glXAssociateDMPbufferSGIX (dpy, pbuffer, params, dmbuffer);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetFBConfigAttribSGIX

int  glew::glx::glXGetFBConfigAttribSGIX (Display * dpy, GLXFBConfigSGIX config, int  attribute, int * value)
{
  // GLX_SGIX_fbconfig - glXGetFBConfigAttribSGIX
  if (s_deviceConfig.m_glXGetFBConfigAttribSGIX)
  {
    return s_deviceConfig.m_glXGetFBConfigAttribSGIX (dpy, config, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXChooseFBConfigSGIX

GLXFBConfigSGIX * glew::glx::glXChooseFBConfigSGIX (Display * dpy, int  screen, int * attrib_list, int * nelements)
{
  // GLX_SGIX_fbconfig - glXChooseFBConfigSGIX
  if (s_deviceConfig.m_glXChooseFBConfigSGIX)
  {
    return s_deviceConfig.m_glXChooseFBConfigSGIX (dpy, screen, attrib_list, nelements);
  }
  return ((GLXFBConfigSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateGLXPixmapWithConfigSGIX

GLXPixmap glew::glx::glXCreateGLXPixmapWithConfigSGIX (Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap)
{
  // GLX_SGIX_fbconfig - glXCreateGLXPixmapWithConfigSGIX
  if (s_deviceConfig.m_glXCreateGLXPixmapWithConfigSGIX)
  {
    return s_deviceConfig.m_glXCreateGLXPixmapWithConfigSGIX (dpy, config, pixmap);
  }
  return ((GLXPixmap)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateContextWithConfigSGIX

GLXContext glew::glx::glXCreateContextWithConfigSGIX (Display * dpy, GLXFBConfigSGIX config, int  render_type, GLXContext share_list, Bool direct)
{
  // GLX_SGIX_fbconfig - glXCreateContextWithConfigSGIX
  if (s_deviceConfig.m_glXCreateContextWithConfigSGIX)
  {
    return s_deviceConfig.m_glXCreateContextWithConfigSGIX (dpy, config, render_type, share_list, direct);
  }
  return ((GLXContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetVisualFromFBConfigSGIX

XVisualInfo * glew::glx::glXGetVisualFromFBConfigSGIX (Display * dpy, GLXFBConfigSGIX config)
{
  // GLX_SGIX_fbconfig - glXGetVisualFromFBConfigSGIX
  if (s_deviceConfig.m_glXGetVisualFromFBConfigSGIX)
  {
    return s_deviceConfig.m_glXGetVisualFromFBConfigSGIX (dpy, config);
  }
  return ((XVisualInfo *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetFBConfigFromVisualSGIX

GLXFBConfigSGIX glew::glx::glXGetFBConfigFromVisualSGIX (Display * dpy, XVisualInfo * vis)
{
  // GLX_SGIX_fbconfig - glXGetFBConfigFromVisualSGIX
  if (s_deviceConfig.m_glXGetFBConfigFromVisualSGIX)
  {
    return s_deviceConfig.m_glXGetFBConfigFromVisualSGIX (dpy, vis);
  }
  return ((GLXFBConfigSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryHyperpipeNetworkSGIX

GLXHyperpipeNetworkSGIX * glew::glx::glXQueryHyperpipeNetworkSGIX (Display * dpy, int * npipes)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeNetworkSGIX
  if (s_deviceConfig.m_glXQueryHyperpipeNetworkSGIX)
  {
    return s_deviceConfig.m_glXQueryHyperpipeNetworkSGIX (dpy, npipes);
  }
  return ((GLXHyperpipeNetworkSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXHyperpipeConfigSGIX

int  glew::glx::glXHyperpipeConfigSGIX (Display * dpy, int  networkId, int  npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId)
{
  // GLX_SGIX_hyperpipe - glXHyperpipeConfigSGIX
  if (s_deviceConfig.m_glXHyperpipeConfigSGIX)
  {
    return s_deviceConfig.m_glXHyperpipeConfigSGIX (dpy, networkId, npipes, cfg, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryHyperpipeConfigSGIX

GLXHyperpipeConfigSGIX * glew::glx::glXQueryHyperpipeConfigSGIX (Display * dpy, int  hpId, int * npipes)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeConfigSGIX
  if (s_deviceConfig.m_glXQueryHyperpipeConfigSGIX)
  {
    return s_deviceConfig.m_glXQueryHyperpipeConfigSGIX (dpy, hpId, npipes);
  }
  return ((GLXHyperpipeConfigSGIX *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyHyperpipeConfigSGIX

int  glew::glx::glXDestroyHyperpipeConfigSGIX (Display * dpy, int  hpId)
{
  // GLX_SGIX_hyperpipe - glXDestroyHyperpipeConfigSGIX
  if (s_deviceConfig.m_glXDestroyHyperpipeConfigSGIX)
  {
    return s_deviceConfig.m_glXDestroyHyperpipeConfigSGIX (dpy, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindHyperpipeSGIX

int  glew::glx::glXBindHyperpipeSGIX (Display * dpy, int  hpId)
{
  // GLX_SGIX_hyperpipe - glXBindHyperpipeSGIX
  if (s_deviceConfig.m_glXBindHyperpipeSGIX)
  {
    return s_deviceConfig.m_glXBindHyperpipeSGIX (dpy, hpId);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryHyperpipeBestAttribSGIX

int  glew::glx::glXQueryHyperpipeBestAttribSGIX (Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList, void * returnAttribList)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeBestAttribSGIX
  if (s_deviceConfig.m_glXQueryHyperpipeBestAttribSGIX)
  {
    return s_deviceConfig.m_glXQueryHyperpipeBestAttribSGIX (dpy, timeSlice, attrib, size, attribList, returnAttribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXHyperpipeAttribSGIX

int  glew::glx::glXHyperpipeAttribSGIX (Display * dpy, int  timeSlice, int  attrib, int  size, void * attribList)
{
  // GLX_SGIX_hyperpipe - glXHyperpipeAttribSGIX
  if (s_deviceConfig.m_glXHyperpipeAttribSGIX)
  {
    return s_deviceConfig.m_glXHyperpipeAttribSGIX (dpy, timeSlice, attrib, size, attribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryHyperpipeAttribSGIX

int  glew::glx::glXQueryHyperpipeAttribSGIX (Display * dpy, int  timeSlice, int  attrib, int  size, void * returnAttribList)
{
  // GLX_SGIX_hyperpipe - glXQueryHyperpipeAttribSGIX
  if (s_deviceConfig.m_glXQueryHyperpipeAttribSGIX)
  {
    return s_deviceConfig.m_glXQueryHyperpipeAttribSGIX (dpy, timeSlice, attrib, size, returnAttribList);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateGLXPbufferSGIX

GLXPbufferSGIX glew::glx::glXCreateGLXPbufferSGIX (Display * dpy, GLXFBConfigSGIX config, unsigned int  width, unsigned int  height, int * attrib_list)
{
  // GLX_SGIX_pbuffer - glXCreateGLXPbufferSGIX
  if (s_deviceConfig.m_glXCreateGLXPbufferSGIX)
  {
    return s_deviceConfig.m_glXCreateGLXPbufferSGIX (dpy, config, width, height, attrib_list);
  }
  return ((GLXPbufferSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyGLXPbufferSGIX

void  glew::glx::glXDestroyGLXPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuf)
{
  // GLX_SGIX_pbuffer - glXDestroyGLXPbufferSGIX
  if (s_deviceConfig.m_glXDestroyGLXPbufferSGIX)
  {
    s_deviceConfig.m_glXDestroyGLXPbufferSGIX (dpy, pbuf);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryGLXPbufferSGIX

int  glew::glx::glXQueryGLXPbufferSGIX (Display * dpy, GLXPbufferSGIX pbuf, int  attribute, unsigned int * value)
{
  // GLX_SGIX_pbuffer - glXQueryGLXPbufferSGIX
  if (s_deviceConfig.m_glXQueryGLXPbufferSGIX)
  {
    return s_deviceConfig.m_glXQueryGLXPbufferSGIX (dpy, pbuf, attribute, value);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXSelectEventSGIX

void  glew::glx::glXSelectEventSGIX (Display * dpy, GLXDrawable drawable, unsigned long  mask)
{
  // GLX_SGIX_pbuffer - glXSelectEventSGIX
  if (s_deviceConfig.m_glXSelectEventSGIX)
  {
    s_deviceConfig.m_glXSelectEventSGIX (dpy, drawable, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetSelectedEventSGIX

void  glew::glx::glXGetSelectedEventSGIX (Display * dpy, GLXDrawable drawable, unsigned long * mask)
{
  // GLX_SGIX_pbuffer - glXGetSelectedEventSGIX
  if (s_deviceConfig.m_glXGetSelectedEventSGIX)
  {
    s_deviceConfig.m_glXGetSelectedEventSGIX (dpy, drawable, mask);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindSwapBarrierSGIX

void  glew::glx::glXBindSwapBarrierSGIX (Display * dpy, GLXDrawable drawable, int  barrier)
{
  // GLX_SGIX_swap_barrier - glXBindSwapBarrierSGIX
  if (s_deviceConfig.m_glXBindSwapBarrierSGIX)
  {
    s_deviceConfig.m_glXBindSwapBarrierSGIX (dpy, drawable, barrier);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryMaxSwapBarriersSGIX

Bool glew::glx::glXQueryMaxSwapBarriersSGIX (Display * dpy, int  screen, int * max)
{
  // GLX_SGIX_swap_barrier - glXQueryMaxSwapBarriersSGIX
  if (s_deviceConfig.m_glXQueryMaxSwapBarriersSGIX)
  {
    return s_deviceConfig.m_glXQueryMaxSwapBarriersSGIX (dpy, screen, max);
  }
  return ((Bool)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXJoinSwapGroupSGIX

void  glew::glx::glXJoinSwapGroupSGIX (Display * dpy, GLXDrawable drawable, GLXDrawable member)
{
  // GLX_SGIX_swap_group - glXJoinSwapGroupSGIX
  if (s_deviceConfig.m_glXJoinSwapGroupSGIX)
  {
    s_deviceConfig.m_glXJoinSwapGroupSGIX (dpy, drawable, member);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXBindChannelToWindowSGIX

int  glew::glx::glXBindChannelToWindowSGIX (Display * display, int  screen, int  channel, Window window)
{
  // GLX_SGIX_video_resize - glXBindChannelToWindowSGIX
  if (s_deviceConfig.m_glXBindChannelToWindowSGIX)
  {
    return s_deviceConfig.m_glXBindChannelToWindowSGIX (display, screen, channel, window);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXChannelRectSGIX

int  glew::glx::glXChannelRectSGIX (Display * display, int  screen, int  channel, int  x, int  y, int  w, int  h)
{
  // GLX_SGIX_video_resize - glXChannelRectSGIX
  if (s_deviceConfig.m_glXChannelRectSGIX)
  {
    return s_deviceConfig.m_glXChannelRectSGIX (display, screen, channel, x, y, w, h);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryChannelRectSGIX

int  glew::glx::glXQueryChannelRectSGIX (Display * display, int  screen, int  channel, int * dx, int * dy, int * dw, int * dh)
{
  // GLX_SGIX_video_resize - glXQueryChannelRectSGIX
  if (s_deviceConfig.m_glXQueryChannelRectSGIX)
  {
    return s_deviceConfig.m_glXQueryChannelRectSGIX (display, screen, channel, dx, dy, dw, dh);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXQueryChannelDeltasSGIX

int  glew::glx::glXQueryChannelDeltasSGIX (Display * display, int  screen, int  channel, int * x, int * y, int * w, int * h)
{
  // GLX_SGIX_video_resize - glXQueryChannelDeltasSGIX
  if (s_deviceConfig.m_glXQueryChannelDeltasSGIX)
  {
    return s_deviceConfig.m_glXQueryChannelDeltasSGIX (display, screen, channel, x, y, w, h);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXChannelRectSyncSGIX

int  glew::glx::glXChannelRectSyncSGIX (Display * display, int  screen, int  channel, GLenum synctype)
{
  // GLX_SGIX_video_resize - glXChannelRectSyncSGIX
  if (s_deviceConfig.m_glXChannelRectSyncSGIX)
  {
    return s_deviceConfig.m_glXChannelRectSyncSGIX (display, screen, channel, synctype);
  }
  return ((int )0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXCreateGLXVideoSourceSGIX

GLXVideoSourceSGIX glew::glx::glXCreateGLXVideoSourceSGIX (Display * display, int  screen, VLServer server, VLPath path, int  nodeClass, VLNode drainNode)
{
  // GLX_SGIX_video_source - glXCreateGLXVideoSourceSGIX
  if (s_deviceConfig.m_glXCreateGLXVideoSourceSGIX)
  {
    return s_deviceConfig.m_glXCreateGLXVideoSourceSGIX (display, screen, server, path, nodeClass, drainNode);
  }
  return ((GLXVideoSourceSGIX)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXDestroyGLXVideoSourceSGIX

void  glew::glx::glXDestroyGLXVideoSourceSGIX (Display * dpy, GLXVideoSourceSGIX glxvideosource)
{
  // GLX_SGIX_video_source - glXDestroyGLXVideoSourceSGIX
  if (s_deviceConfig.m_glXDestroyGLXVideoSourceSGIX)
  {
    s_deviceConfig.m_glXDestroyGLXVideoSourceSGIX (dpy, glxvideosource);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#undef glXGetTransparentIndexSUN

Status glew::glx::glXGetTransparentIndexSUN (Display * dpy, Window overlay, Window underlay, long * pTransparentIndex)
{
  // GLX_SUN_get_transparent_index - glXGetTransparentIndexSUN
  if (s_deviceConfig.m_glXGetTransparentIndexSUN)
  {
    return s_deviceConfig.m_glXGetTransparentIndexSUN (dpy, overlay, underlay, pTransparentIndex);
  }
  return ((Status)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
