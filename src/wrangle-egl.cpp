////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-egl.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglChooseConfig (EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config)
{
  // EGL_VERSION_1_0 - eglChooseConfig
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglChooseConfig)
  {
    return deviceState->m_eglChooseConfig (dpy, attrib_list, configs, config_size, num_config);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglCopyBuffers (EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
{
  // EGL_VERSION_1_0 - eglCopyBuffers
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCopyBuffers)
  {
    return deviceState->m_eglCopyBuffers (dpy, surface, target);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLContext eglCreateContext (EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list)
{
  // EGL_VERSION_1_0 - eglCreateContext
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateContext)
  {
    return deviceState->m_eglCreateContext (dpy, config, share_context, attrib_list);
  }
  return ((EGLContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePbufferSurface (EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list)
{
  // EGL_VERSION_1_0 - eglCreatePbufferSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePbufferSurface)
  {
    return deviceState->m_eglCreatePbufferSurface (dpy, config, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePixmapSurface (EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list)
{
  // EGL_VERSION_1_0 - eglCreatePixmapSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePixmapSurface)
  {
    return deviceState->m_eglCreatePixmapSurface (dpy, config, pixmap, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreateWindowSurface (EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list)
{
  // EGL_VERSION_1_0 - eglCreateWindowSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateWindowSurface)
  {
    return deviceState->m_eglCreateWindowSurface (dpy, config, win, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroyContext (EGLDisplay dpy, EGLContext ctx)
{
  // EGL_VERSION_1_0 - eglDestroyContext
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroyContext)
  {
    return deviceState->m_eglDestroyContext (dpy, ctx);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroySurface (EGLDisplay dpy, EGLSurface surface)
{
  // EGL_VERSION_1_0 - eglDestroySurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroySurface)
  {
    return deviceState->m_eglDestroySurface (dpy, surface);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetConfigAttrib (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value)
{
  // EGL_VERSION_1_0 - eglGetConfigAttrib
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetConfigAttrib)
  {
    return deviceState->m_eglGetConfigAttrib (dpy, config, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetConfigs (EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config)
{
  // EGL_VERSION_1_0 - eglGetConfigs
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetConfigs)
  {
    return deviceState->m_eglGetConfigs (dpy, configs, config_size, num_config);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLDisplay eglGetCurrentDisplay ()
{
  // EGL_VERSION_1_0 - eglGetCurrentDisplay
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetCurrentDisplay)
  {
    return deviceState->m_eglGetCurrentDisplay ();
  }
  return ((EGLDisplay)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglGetCurrentSurface (EGLint readdraw)
{
  // EGL_VERSION_1_0 - eglGetCurrentSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetCurrentSurface)
  {
    return deviceState->m_eglGetCurrentSurface (readdraw);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLDisplay eglGetDisplay (EGLNativeDisplayType display_id)
{
  // EGL_VERSION_1_0 - eglGetDisplay
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetDisplay)
  {
    return deviceState->m_eglGetDisplay (display_id);
  }
  return ((EGLDisplay)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglGetError ()
{
  // EGL_VERSION_1_0 - eglGetError
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetError)
  {
    return deviceState->m_eglGetError ();
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

__eglMustCastToProperFunctionPointerType eglGetProcAddress (const char * procname)
{
  // EGL_VERSION_1_0 - eglGetProcAddress
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetProcAddress)
  {
    return deviceState->m_eglGetProcAddress (procname);
  }
  return ((__eglMustCastToProperFunctionPointerType)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglInitialize (EGLDisplay dpy, EGLint * major, EGLint * minor)
{
  // EGL_VERSION_1_0 - eglInitialize
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglInitialize)
  {
    return deviceState->m_eglInitialize (dpy, major, minor);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglMakeCurrent (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
{
  // EGL_VERSION_1_0 - eglMakeCurrent
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglMakeCurrent)
  {
    return deviceState->m_eglMakeCurrent (dpy, draw, read, ctx);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryContext (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value)
{
  // EGL_VERSION_1_0 - eglQueryContext
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryContext)
  {
    return deviceState->m_eglQueryContext (dpy, ctx, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * eglQueryString (EGLDisplay dpy, EGLint name)
{
  // EGL_VERSION_1_0 - eglQueryString
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryString)
  {
    return deviceState->m_eglQueryString (dpy, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQuerySurface (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value)
{
  // EGL_VERSION_1_0 - eglQuerySurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQuerySurface)
  {
    return deviceState->m_eglQuerySurface (dpy, surface, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapBuffers (EGLDisplay dpy, EGLSurface surface)
{
  // EGL_VERSION_1_0 - eglSwapBuffers
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapBuffers)
  {
    return deviceState->m_eglSwapBuffers (dpy, surface);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglTerminate (EGLDisplay dpy)
{
  // EGL_VERSION_1_0 - eglTerminate
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglTerminate)
  {
    return deviceState->m_eglTerminate (dpy);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglWaitGL ()
{
  // EGL_VERSION_1_0 - eglWaitGL
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglWaitGL)
  {
    return deviceState->m_eglWaitGL ();
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglWaitNative (EGLint engine)
{
  // EGL_VERSION_1_0 - eglWaitNative
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglWaitNative)
  {
    return deviceState->m_eglWaitNative (engine);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglBindTexImage (EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  // EGL_VERSION_1_1 - eglBindTexImage
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglBindTexImage)
  {
    return deviceState->m_eglBindTexImage (dpy, surface, buffer);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglReleaseTexImage (EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
  // EGL_VERSION_1_1 - eglReleaseTexImage
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglReleaseTexImage)
  {
    return deviceState->m_eglReleaseTexImage (dpy, surface, buffer);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSurfaceAttrib (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
{
  // EGL_VERSION_1_1 - eglSurfaceAttrib
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSurfaceAttrib)
  {
    return deviceState->m_eglSurfaceAttrib (dpy, surface, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapInterval (EGLDisplay dpy, EGLint interval)
{
  // EGL_VERSION_1_1 - eglSwapInterval
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapInterval)
  {
    return deviceState->m_eglSwapInterval (dpy, interval);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglBindAPI (EGLenum api)
{
  // EGL_VERSION_1_2 - eglBindAPI
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglBindAPI)
  {
    return deviceState->m_eglBindAPI (api);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLenum eglQueryAPI ()
{
  // EGL_VERSION_1_2 - eglQueryAPI
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryAPI)
  {
    return deviceState->m_eglQueryAPI ();
  }
  return ((EGLenum)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePbufferFromClientBuffer (EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list)
{
  // EGL_VERSION_1_2 - eglCreatePbufferFromClientBuffer
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePbufferFromClientBuffer)
  {
    return deviceState->m_eglCreatePbufferFromClientBuffer (dpy, buftype, buffer, config, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglReleaseThread ()
{
  // EGL_VERSION_1_2 - eglReleaseThread
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglReleaseThread)
  {
    return deviceState->m_eglReleaseThread ();
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglWaitClient ()
{
  // EGL_VERSION_1_2 - eglWaitClient
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglWaitClient)
  {
    return deviceState->m_eglWaitClient ();
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLContext eglGetCurrentContext ()
{
  // EGL_VERSION_1_4 - eglGetCurrentContext
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetCurrentContext)
  {
    return deviceState->m_eglGetCurrentContext ();
  }
  return ((EGLContext)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSync eglCreateSync (EGLDisplay dpy, EGLenum type, const EGLAttrib * attrib_list)
{
  // EGL_VERSION_1_5 - eglCreateSync
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateSync)
  {
    return deviceState->m_eglCreateSync (dpy, type, attrib_list);
  }
  return ((EGLSync)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroySync (EGLDisplay dpy, EGLSync sync)
{
  // EGL_VERSION_1_5 - eglDestroySync
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroySync)
  {
    return deviceState->m_eglDestroySync (dpy, sync);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglClientWaitSync (EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)
{
  // EGL_VERSION_1_5 - eglClientWaitSync
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglClientWaitSync)
  {
    return deviceState->m_eglClientWaitSync (dpy, sync, flags, timeout);
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetSyncAttrib (EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib * value)
{
  // EGL_VERSION_1_5 - eglGetSyncAttrib
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetSyncAttrib)
  {
    return deviceState->m_eglGetSyncAttrib (dpy, sync, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLImage eglCreateImage (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib * attrib_list)
{
  // EGL_VERSION_1_5 - eglCreateImage
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateImage)
  {
    return deviceState->m_eglCreateImage (dpy, ctx, target, buffer, attrib_list);
  }
  return ((EGLImage)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroyImage (EGLDisplay dpy, EGLImage image)
{
  // EGL_VERSION_1_5 - eglDestroyImage
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroyImage)
  {
    return deviceState->m_eglDestroyImage (dpy, image);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLDisplay eglGetPlatformDisplay (EGLenum platform, void * native_display, const EGLAttrib * attrib_list)
{
  // EGL_VERSION_1_5 - eglGetPlatformDisplay
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetPlatformDisplay)
  {
    return deviceState->m_eglGetPlatformDisplay (platform, native_display, attrib_list);
  }
  return ((EGLDisplay)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePlatformWindowSurface (EGLDisplay dpy, EGLConfig config, void * native_window, const EGLAttrib * attrib_list)
{
  // EGL_VERSION_1_5 - eglCreatePlatformWindowSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePlatformWindowSurface)
  {
    return deviceState->m_eglCreatePlatformWindowSurface (dpy, config, native_window, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePlatformPixmapSurface (EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLAttrib * attrib_list)
{
  // EGL_VERSION_1_5 - eglCreatePlatformPixmapSurface
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePlatformPixmapSurface)
  {
    return deviceState->m_eglCreatePlatformPixmapSurface (dpy, config, native_pixmap, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglWaitSync (EGLDisplay dpy, EGLSync sync, EGLint flags)
{
  // EGL_VERSION_1_5 - eglWaitSync
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglWaitSync)
  {
    return deviceState->m_eglWaitSync (dpy, sync, flags);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void eglSetBlobCacheFuncsANDROID (EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get)
{
  // EGL_ANDROID_blob_cache - eglSetBlobCacheFuncsANDROID
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSetBlobCacheFuncsANDROID)
  {
    deviceState->m_eglSetBlobCacheFuncsANDROID (dpy, set, get);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglDupNativeFenceFDANDROID (EGLDisplay dpy, EGLSyncKHR sync)
{
  // EGL_ANDROID_native_fence_sync - eglDupNativeFenceFDANDROID
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDupNativeFenceFDANDROID)
  {
    return deviceState->m_eglDupNativeFenceFDANDROID (dpy, sync);
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQuerySurfacePointerANGLE (EGLDisplay dpy, EGLSurface surface, EGLint attribute, void ** value)
{
  // EGL_ANGLE_query_surface_pointer - eglQuerySurfacePointerANGLE
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQuerySurfacePointerANGLE)
  {
    return deviceState->m_eglQuerySurfacePointerANGLE (dpy, surface, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryDeviceAttribEXT (EGLDeviceEXT device, EGLint attribute, EGLAttrib * value)
{
  // EGL_EXT_device_base - eglQueryDeviceAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryDeviceAttribEXT)
  {
    return deviceState->m_eglQueryDeviceAttribEXT (device, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * eglQueryDeviceStringEXT (EGLDeviceEXT device, EGLint name)
{
  // EGL_EXT_device_base - eglQueryDeviceStringEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryDeviceStringEXT)
  {
    return deviceState->m_eglQueryDeviceStringEXT (device, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryDevicesEXT (EGLint max_devices, EGLDeviceEXT * devices, EGLint * num_devices)
{
  // EGL_EXT_device_base - eglQueryDevicesEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryDevicesEXT)
  {
    return deviceState->m_eglQueryDevicesEXT (max_devices, devices, num_devices);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryDisplayAttribEXT (EGLDisplay dpy, EGLint attribute, EGLAttrib * value)
{
  // EGL_EXT_device_base - eglQueryDisplayAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryDisplayAttribEXT)
  {
    return deviceState->m_eglQueryDisplayAttribEXT (dpy, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetOutputLayersEXT (EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputLayerEXT * layers, EGLint max_layers, EGLint * num_layers)
{
  // EGL_EXT_output_base - eglGetOutputLayersEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetOutputLayersEXT)
  {
    return deviceState->m_eglGetOutputLayersEXT (dpy, attrib_list, layers, max_layers, num_layers);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetOutputPortsEXT (EGLDisplay dpy, const EGLAttrib * attrib_list, EGLOutputPortEXT * ports, EGLint max_ports, EGLint * num_ports)
{
  // EGL_EXT_output_base - eglGetOutputPortsEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetOutputPortsEXT)
  {
    return deviceState->m_eglGetOutputPortsEXT (dpy, attrib_list, ports, max_ports, num_ports);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglOutputLayerAttribEXT (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value)
{
  // EGL_EXT_output_base - eglOutputLayerAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglOutputLayerAttribEXT)
  {
    return deviceState->m_eglOutputLayerAttribEXT (dpy, layer, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryOutputLayerAttribEXT (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib * value)
{
  // EGL_EXT_output_base - eglQueryOutputLayerAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryOutputLayerAttribEXT)
  {
    return deviceState->m_eglQueryOutputLayerAttribEXT (dpy, layer, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * eglQueryOutputLayerStringEXT (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name)
{
  // EGL_EXT_output_base - eglQueryOutputLayerStringEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryOutputLayerStringEXT)
  {
    return deviceState->m_eglQueryOutputLayerStringEXT (dpy, layer, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglOutputPortAttribEXT (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value)
{
  // EGL_EXT_output_base - eglOutputPortAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglOutputPortAttribEXT)
  {
    return deviceState->m_eglOutputPortAttribEXT (dpy, port, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryOutputPortAttribEXT (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib * value)
{
  // EGL_EXT_output_base - eglQueryOutputPortAttribEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryOutputPortAttribEXT)
  {
    return deviceState->m_eglQueryOutputPortAttribEXT (dpy, port, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char * eglQueryOutputPortStringEXT (EGLDisplay dpy, EGLOutputPortEXT port, EGLint name)
{
  // EGL_EXT_output_base - eglQueryOutputPortStringEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryOutputPortStringEXT)
  {
    return deviceState->m_eglQueryOutputPortStringEXT (dpy, port, name);
  }
  return ((const char *)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLDisplay eglGetPlatformDisplayEXT (EGLenum platform, void * native_display, const EGLint * attrib_list)
{
  // EGL_EXT_platform_base - eglGetPlatformDisplayEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetPlatformDisplayEXT)
  {
    return deviceState->m_eglGetPlatformDisplayEXT (platform, native_display, attrib_list);
  }
  return ((EGLDisplay)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePlatformWindowSurfaceEXT (EGLDisplay dpy, EGLConfig config, void * native_window, const EGLint * attrib_list)
{
  // EGL_EXT_platform_base - eglCreatePlatformWindowSurfaceEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePlatformWindowSurfaceEXT)
  {
    return deviceState->m_eglCreatePlatformWindowSurfaceEXT (dpy, config, native_window, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePlatformPixmapSurfaceEXT (EGLDisplay dpy, EGLConfig config, void * native_pixmap, const EGLint * attrib_list)
{
  // EGL_EXT_platform_base - eglCreatePlatformPixmapSurfaceEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePlatformPixmapSurfaceEXT)
  {
    return deviceState->m_eglCreatePlatformPixmapSurfaceEXT (dpy, config, native_pixmap, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglStreamConsumerOutputEXT (EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer)
{
  // EGL_EXT_stream_consumer_egloutput - eglStreamConsumerOutputEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglStreamConsumerOutputEXT)
  {
    return deviceState->m_eglStreamConsumerOutputEXT (dpy, stream, layer);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapBuffersWithDamageEXT (EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects)
{
  // EGL_EXT_swap_buffers_with_damage - eglSwapBuffersWithDamageEXT
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapBuffersWithDamageEXT)
  {
    return deviceState->m_eglSwapBuffersWithDamageEXT (dpy, surface, rects, n_rects);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreatePixmapSurfaceHI (EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap)
{
  // EGL_HI_clientpixmap - eglCreatePixmapSurfaceHI
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreatePixmapSurfaceHI)
  {
    return deviceState->m_eglCreatePixmapSurfaceHI (dpy, config, pixmap);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSyncKHR eglCreateSync64KHR (EGLDisplay dpy, EGLenum type, const EGLAttribKHR * attrib_list)
{
  // EGL_KHR_cl_event2 - eglCreateSync64KHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateSync64KHR)
  {
    return deviceState->m_eglCreateSync64KHR (dpy, type, attrib_list);
  }
  return ((EGLSyncKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSyncKHR eglCreateSyncKHR (EGLDisplay dpy, EGLenum type, const EGLint * attrib_list)
{
  // EGL_KHR_fence_sync - eglCreateSyncKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateSyncKHR)
  {
    return deviceState->m_eglCreateSyncKHR (dpy, type, attrib_list);
  }
  return ((EGLSyncKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroySyncKHR (EGLDisplay dpy, EGLSyncKHR sync)
{
  // EGL_KHR_fence_sync - eglDestroySyncKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroySyncKHR)
  {
    return deviceState->m_eglDestroySyncKHR (dpy, sync);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglClientWaitSyncKHR (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout)
{
  // EGL_KHR_fence_sync - eglClientWaitSyncKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglClientWaitSyncKHR)
  {
    return deviceState->m_eglClientWaitSyncKHR (dpy, sync, flags, timeout);
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetSyncAttribKHR (EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value)
{
  // EGL_KHR_fence_sync - eglGetSyncAttribKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetSyncAttribKHR)
  {
    return deviceState->m_eglGetSyncAttribKHR (dpy, sync, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLImageKHR eglCreateImageKHR (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list)
{
  // EGL_KHR_image - eglCreateImageKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateImageKHR)
  {
    return deviceState->m_eglCreateImageKHR (dpy, ctx, target, buffer, attrib_list);
  }
  return ((EGLImageKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroyImageKHR (EGLDisplay dpy, EGLImageKHR image)
{
  // EGL_KHR_image - eglDestroyImageKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroyImageKHR)
  {
    return deviceState->m_eglDestroyImageKHR (dpy, image);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglLockSurfaceKHR (EGLDisplay dpy, EGLSurface surface, const EGLint * attrib_list)
{
  // EGL_KHR_lock_surface - eglLockSurfaceKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglLockSurfaceKHR)
  {
    return deviceState->m_eglLockSurfaceKHR (dpy, surface, attrib_list);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglUnlockSurfaceKHR (EGLDisplay dpy, EGLSurface surface)
{
  // EGL_KHR_lock_surface - eglUnlockSurfaceKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglUnlockSurfaceKHR)
  {
    return deviceState->m_eglUnlockSurfaceKHR (dpy, surface);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQuerySurface64KHR (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR * value)
{
  // EGL_KHR_lock_surface3 - eglQuerySurface64KHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQuerySurface64KHR)
  {
    return deviceState->m_eglQuerySurface64KHR (dpy, surface, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSetDamageRegionKHR (EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects)
{
  // EGL_KHR_partial_update - eglSetDamageRegionKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSetDamageRegionKHR)
  {
    return deviceState->m_eglSetDamageRegionKHR (dpy, surface, rects, n_rects);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSignalSyncKHR (EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)
{
  // EGL_KHR_reusable_sync - eglSignalSyncKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSignalSyncKHR)
  {
    return deviceState->m_eglSignalSyncKHR (dpy, sync, mode);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLStreamKHR eglCreateStreamKHR (EGLDisplay dpy, const EGLint * attrib_list)
{
  // EGL_KHR_stream - eglCreateStreamKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateStreamKHR)
  {
    return deviceState->m_eglCreateStreamKHR (dpy, attrib_list);
  }
  return ((EGLStreamKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroyStreamKHR (EGLDisplay dpy, EGLStreamKHR stream)
{
  // EGL_KHR_stream - eglDestroyStreamKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroyStreamKHR)
  {
    return deviceState->m_eglDestroyStreamKHR (dpy, stream);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglStreamAttribKHR (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value)
{
  // EGL_KHR_stream - eglStreamAttribKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglStreamAttribKHR)
  {
    return deviceState->m_eglStreamAttribKHR (dpy, stream, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryStreamKHR (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint * value)
{
  // EGL_KHR_stream - eglQueryStreamKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryStreamKHR)
  {
    return deviceState->m_eglQueryStreamKHR (dpy, stream, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryStreamu64KHR (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR * value)
{
  // EGL_KHR_stream - eglQueryStreamu64KHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryStreamu64KHR)
  {
    return deviceState->m_eglQueryStreamu64KHR (dpy, stream, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglStreamConsumerGLTextureExternalKHR (EGLDisplay dpy, EGLStreamKHR stream)
{
  // EGL_KHR_stream_consumer_gltexture - eglStreamConsumerGLTextureExternalKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglStreamConsumerGLTextureExternalKHR)
  {
    return deviceState->m_eglStreamConsumerGLTextureExternalKHR (dpy, stream);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglStreamConsumerAcquireKHR (EGLDisplay dpy, EGLStreamKHR stream)
{
  // EGL_KHR_stream_consumer_gltexture - eglStreamConsumerAcquireKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglStreamConsumerAcquireKHR)
  {
    return deviceState->m_eglStreamConsumerAcquireKHR (dpy, stream);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglStreamConsumerReleaseKHR (EGLDisplay dpy, EGLStreamKHR stream)
{
  // EGL_KHR_stream_consumer_gltexture - eglStreamConsumerReleaseKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglStreamConsumerReleaseKHR)
  {
    return deviceState->m_eglStreamConsumerReleaseKHR (dpy, stream);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLNativeFileDescriptorKHR eglGetStreamFileDescriptorKHR (EGLDisplay dpy, EGLStreamKHR stream)
{
  // EGL_KHR_stream_cross_process_fd - eglGetStreamFileDescriptorKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetStreamFileDescriptorKHR)
  {
    return deviceState->m_eglGetStreamFileDescriptorKHR (dpy, stream);
  }
  return ((EGLNativeFileDescriptorKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLStreamKHR eglCreateStreamFromFileDescriptorKHR (EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
{
  // EGL_KHR_stream_cross_process_fd - eglCreateStreamFromFileDescriptorKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateStreamFromFileDescriptorKHR)
  {
    return deviceState->m_eglCreateStreamFromFileDescriptorKHR (dpy, file_descriptor);
  }
  return ((EGLStreamKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryStreamTimeKHR (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR * value)
{
  // EGL_KHR_stream_fifo - eglQueryStreamTimeKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryStreamTimeKHR)
  {
    return deviceState->m_eglQueryStreamTimeKHR (dpy, stream, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSurface eglCreateStreamProducerSurfaceKHR (EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint * attrib_list)
{
  // EGL_KHR_stream_producer_eglsurface - eglCreateStreamProducerSurfaceKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateStreamProducerSurfaceKHR)
  {
    return deviceState->m_eglCreateStreamProducerSurfaceKHR (dpy, config, stream, attrib_list);
  }
  return ((EGLSurface)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapBuffersWithDamageKHR (EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects)
{
  // EGL_KHR_swap_buffers_with_damage - eglSwapBuffersWithDamageKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapBuffersWithDamageKHR)
  {
    return deviceState->m_eglSwapBuffersWithDamageKHR (dpy, surface, rects, n_rects);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglWaitSyncKHR (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)
{
  // EGL_KHR_wait_sync - eglWaitSyncKHR
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglWaitSyncKHR)
  {
    return deviceState->m_eglWaitSyncKHR (dpy, sync, flags);
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLImageKHR eglCreateDRMImageMESA (EGLDisplay dpy, const EGLint * attrib_list)
{
  // EGL_MESA_drm_image - eglCreateDRMImageMESA
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateDRMImageMESA)
  {
    return deviceState->m_eglCreateDRMImageMESA (dpy, attrib_list);
  }
  return ((EGLImageKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglExportDRMImageMESA (EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride)
{
  // EGL_MESA_drm_image - eglExportDRMImageMESA
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglExportDRMImageMESA)
  {
    return deviceState->m_eglExportDRMImageMESA (dpy, image, name, handle, stride);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglExportDMABUFImageQueryMESA (EGLDisplay dpy, EGLImageKHR image, int * fourcc, int * num_planes, EGLuint64KHR * modifiers)
{
  // EGL_MESA_image_dma_buf_export - eglExportDMABUFImageQueryMESA
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglExportDMABUFImageQueryMESA)
  {
    return deviceState->m_eglExportDMABUFImageQueryMESA (dpy, image, fourcc, num_planes, modifiers);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglExportDMABUFImageMESA (EGLDisplay dpy, EGLImageKHR image, int * fds, EGLint * strides, EGLint * offsets)
{
  // EGL_MESA_image_dma_buf_export - eglExportDMABUFImageMESA
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglExportDMABUFImageMESA)
  {
    return deviceState->m_eglExportDMABUFImageMESA (dpy, image, fds, strides, offsets);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapBuffersRegionNOK (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects)
{
  // EGL_NOK_swap_region - eglSwapBuffersRegionNOK
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapBuffersRegionNOK)
  {
    return deviceState->m_eglSwapBuffersRegionNOK (dpy, surface, numRects, rects);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSwapBuffersRegion2NOK (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint * rects)
{
  // EGL_NOK_swap_region2 - eglSwapBuffersRegion2NOK
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSwapBuffersRegion2NOK)
  {
    return deviceState->m_eglSwapBuffersRegion2NOK (dpy, surface, numRects, rects);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryNativeDisplayNV (EGLDisplay dpy, EGLNativeDisplayType * display_id)
{
  // EGL_NV_native_query - eglQueryNativeDisplayNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryNativeDisplayNV)
  {
    return deviceState->m_eglQueryNativeDisplayNV (dpy, display_id);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryNativeWindowNV (EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType * window)
{
  // EGL_NV_native_query - eglQueryNativeWindowNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryNativeWindowNV)
  {
    return deviceState->m_eglQueryNativeWindowNV (dpy, surf, window);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglQueryNativePixmapNV (EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType * pixmap)
{
  // EGL_NV_native_query - eglQueryNativePixmapNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglQueryNativePixmapNV)
  {
    return deviceState->m_eglQueryNativePixmapNV (dpy, surf, pixmap);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglPostSubBufferNV (EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
{
  // EGL_NV_post_sub_buffer - eglPostSubBufferNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglPostSubBufferNV)
  {
    return deviceState->m_eglPostSubBufferNV (dpy, surface, x, y, width, height);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSyncKHR eglCreateStreamSyncNV (EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint * attrib_list)
{
  // EGL_NV_stream_sync - eglCreateStreamSyncNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateStreamSyncNV)
  {
    return deviceState->m_eglCreateStreamSyncNV (dpy, stream, type, attrib_list);
  }
  return ((EGLSyncKHR)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLSyncNV eglCreateFenceSyncNV (EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list)
{
  // EGL_NV_sync - eglCreateFenceSyncNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglCreateFenceSyncNV)
  {
    return deviceState->m_eglCreateFenceSyncNV (dpy, condition, attrib_list);
  }
  return ((EGLSyncNV)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglDestroySyncNV (EGLSyncNV sync)
{
  // EGL_NV_sync - eglDestroySyncNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglDestroySyncNV)
  {
    return deviceState->m_eglDestroySyncNV (sync);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglFenceNV (EGLSyncNV sync)
{
  // EGL_NV_sync - eglFenceNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglFenceNV)
  {
    return deviceState->m_eglFenceNV (sync);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLint eglClientWaitSyncNV (EGLSyncNV sync, EGLint flags, EGLTimeNV timeout)
{
  // EGL_NV_sync - eglClientWaitSyncNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglClientWaitSyncNV)
  {
    return deviceState->m_eglClientWaitSyncNV (sync, flags, timeout);
  }
  return ((EGLint)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglSignalSyncNV (EGLSyncNV sync, EGLenum mode)
{
  // EGL_NV_sync - eglSignalSyncNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglSignalSyncNV)
  {
    return deviceState->m_eglSignalSyncNV (sync, mode);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLBoolean eglGetSyncAttribNV (EGLSyncNV sync, EGLint attribute, EGLint * value)
{
  // EGL_NV_sync - eglGetSyncAttribNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetSyncAttribNV)
  {
    return deviceState->m_eglGetSyncAttribNV (sync, attribute, value);
  }
  return ((EGLBoolean)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLuint64NV eglGetSystemTimeFrequencyNV ()
{
  // EGL_NV_system_time - eglGetSystemTimeFrequencyNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetSystemTimeFrequencyNV)
  {
    return deviceState->m_eglGetSystemTimeFrequencyNV ();
  }
  return ((EGLuint64NV)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EGLuint64NV eglGetSystemTimeNV ()
{
  // EGL_NV_system_time - eglGetSystemTimeNV
  const glew::egl::DeviceState *deviceState = glew::egl::GetDeviceState ();
  if (deviceState && deviceState->m_eglGetSystemTimeNV)
  {
    return deviceState->m_eglGetSystemTimeNV ();
  }
  return ((EGLuint64NV)0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
