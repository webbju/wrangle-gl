////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <wrangle-egl.h>

#include <unordered_set>

#include <string>

#include <cstdio>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* DescribeEGLError (EGLint err)
{
  switch (err)
  {
    case EGL_TRUE:                return "EGL_TRUE";
    case EGL_FALSE:               return "EGL_FALSE";
    // Error codes:
    case EGL_NOT_INITIALIZED:     return "EGL_NOT_INITIALIZED";
    case EGL_BAD_ACCESS:          return "EGL_BAD_ACCESS";
    case EGL_BAD_ALLOC:           return "EGL_BAD_ALLOC";
    case EGL_BAD_ATTRIBUTE:       return "EGL_BAD_ATTRIBUTE";
    case EGL_BAD_CONTEXT:         return "EGL_BAD_CONTEXT";
    case EGL_BAD_CONFIG:          return "EGL_BAD_CONFIG";
    case EGL_BAD_CURRENT_SURFACE: return "EGL_BAD_CURRENT_SURFACE";
    case EGL_BAD_DISPLAY:         return "EGL_BAD_DISPLAY";
    case EGL_BAD_SURFACE:         return "EGL_BAD_SURFACE";
    case EGL_BAD_MATCH:           return "EGL_BAD_MATCH";
    case EGL_BAD_PARAMETER:       return "EGL_BAD_PARAMETER";
    case EGL_BAD_NATIVE_PIXMAP:   return "EGL_BAD_NATIVE_PIXMAP";
    case EGL_BAD_NATIVE_WINDOW:   return "EGL_BAD_NATIVE_WINDOW";
    case EGL_CONTEXT_LOST:        return "EGL_CONTEXT_LOST";
    case EGL_SUCCESS:             return "EGL_SUCCESS";
  }

  return "Unknown";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void CheckEGLError (const bool shouldAssert, const char* file, const int line)
{
  EGLint err = eglGetError ();

  if (err != EGL_SUCCESS)
  {
    char buffer [512];

    sprintf (buffer, "[%s:%d] eglGetError returned 0x%x (%s)\n", file, line, err, DescribeEGLError (err));

#if WIN32
    OutputDebugString (buffer);
#endif

    fputs (buffer, stderr);

    fflush (stderr);
  }

  if (shouldAssert)
  {
    GLEW_ASSERT (err == EGL_SUCCESS);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (int argc, char ** argv)
{
  std::unordered_set<std::string> supportedExtensions;

  glew::egl::Context *eglContext = new glew::egl::Context(EGL_NO_DISPLAY, supportedExtensions, _glew_eglGetProcAddress);

  GLEW_ASSERT (eglContext != nullptr);

  return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
