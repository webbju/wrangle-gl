////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __GLEW_API_H__
#define __GLEW_API_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined (_WIN32)
  #ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN 1
    #define _WIN32_LEAN_AND_MEAN 1
  #endif
  #include <windows.h>
  #pragma comment (lib, "opengl32.lib")
  #ifdef _WIN32_LEAN_AND_MEAN
    #undef WIN32_LEAN_AND_MEAN
    #undef _WIN32_LEAN_AND_MEAN
  #endif
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GLEW_EXTERN
#define GLEW_EXTERN extern
#endif

#ifndef GLEW_EXTERN_C
#ifdef __cplusplus
#define GLEW_EXTERN_C extern "C"
#else
#define GLEW_EXTERN_C extern
#endif
#endif

#ifndef GLEW_API
#define GLEW_API extern
#endif

#ifndef GLEW_APIENTRY
#define GLEW_APIENTRY
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// /System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL
// /System/Library/Frameworks/OpenGLES.framework/OpenGLES

#if defined(__APPLE__)
#include <dlfcn.h>
static inline void *dlGetProcAddress (const char *library, const char *symbol)
{
  static void *image = NULL;
  void *addr = NULL;
  if (image == NULL)
  {
    image = dlopen (library, RTLD_LAZY);
  }
  if (image != NULL)
  {
    addr = dlsym (image, symbol);
  }
  return addr;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if (_WIN32 || GLEW_USE_WGL)
  #if !defined (GLEW_USE_WGL)
    #define GLEW_USE_WGL 1
  #endif
  GLEW_EXTERN WINGDIAPI PROC WINAPI wglGetProcAddress (LPCSTR lpszProc);
  #undef wglUseFontBitmaps
  #undef wglUseFontOutlines
  #if !defined (glewGetProcAddress)
    #define glewGetProcAddress(proc) wglGetProcAddress((LPCSTR)proc)
  #endif
#elif __ANDROID__ || GLEW_USE_EGL
  #if !defined (GLEW_USE_EGL)
    #define GLEW_USE_EGL 1
  #endif
  #include <EGL\egl.h>
  GLEW_EXTERN_C EGLAPI __eglMustCastToProperFunctionPointerType EGLAPIENTRY eglGetProcAddress (const char *procname);
  #if !defined (glewGetProcAddress)
  #define glewGetProcAddress(proc) eglGetProcAddress((const char *)proc)
  #endif
#elif defined(__APPLE__)
  #include "TargetConditionals.h"
  #define OPENGL_FRAMEWORK "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
  #define OPENGL_ES_FRAMEWORK "/System/Library/Frameworks/OpenGLES.framework/OpenGLES"
  #if !defined (glewGetProcAddress)
    #if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
      #define glewGetProcAddress(proc) dlGetProcAddress(OPENGL_ES_FRAMEWORK,(const char *)proc)
    #elif TARGET_OS_MAC
      #define glewGetProcAddress(proc) dlGetProcAddress(OPENGL_FRAMEWORK,(const char *)proc)
    #else
      #error Unrecognised Apple target.
  #endif
  #endif
#endif

#if !defined (glewGetProcAddress)
#error glewGetProcAddress definition required.
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GLEW_MIN
#define GLEW_MIN(a,b) ((a < b) ? a : b)
#endif

#ifndef GLEW_MAX
#define GLEW_MAX(a,b) ((a > b) ? a : b)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if !defined(GLEW_ASSERT) && (defined(_DEBUG) || defined(DEBUG))
#if defined(__GNUC__) || defined(__clang__)
#define GLEW_ASSERT(X) if(!(X)) { __builtin_trap (); }
#elif WIN32
#define GLEW_ASSERT(X) if(!(X)) { __debugbreak (); }
#endif
#endif

#if !defined(GLEW_ASSERT)
#if WIN32
#define GLEW_ASSERT(X) \
  do { \
  __pragma(warning(push)) \
  __pragma(warning (disable:4127)) \
    (void)(true ? 0 : ((X), void(), 0)); \
  } while (0) \
  __pragma(warning(pop))
#else
#define GLEW_ASSERT(X) \
  do { \
    (void)(true ? 0 : ((X), void(), 0)); \
  } while (0)
#endif
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __GLEW_API_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
