////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__APPLE__) || defined(__linux__)
#include <dlfcn.h>
#define _glew_has_dlfcn_h_ 1
#endif

// Availability of TARGET_IOS_IPHONE, TARGET_IPHONE_SIMULATOR, etc.
#if defined(__APPLE__)
#include "TargetConditionals.h"
#endif

// Redefine GLEW_ASSERT to your own preference.
#ifndef GLEW_ASSERT
#include <assert.h>
#define GLEW_ASSERT assert
#endif

#if defined(_WIN32)
  #if !defined(WIN32_LEAN_AND_MEAN)
    #define WIN32_LEAN_AND_MEAN 1
  #endif
  #include <windows.h>
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GLEW_EXTERN
#define GLEW_EXTERN extern
#endif

#ifndef GLEW_EXTERN_C
#ifdef __cplusplus
#define GLEW_EXTERN_C extern "C"
#else
#define GLEW_EXTERN_C extern
#endif
#endif

#ifndef GLEW_API
#define GLEW_API extern
#endif

#ifndef GLEW_APIENTRY
#define GLEW_APIENTRY
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GLEW_MIN
#define GLEW_MIN(a,b) ((a < b) ? a : b)
#endif

#ifndef GLEW_MAX
#define GLEW_MAX(a,b) ((a > b) ? a : b)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Sometimes we don't even receive valid addresses for base spec functions using eglGetProcAddress.
// It seems this is isolated to early PowerVR and Mali drivers, but we workaround it by probing the EGL library directly.
#if defined(GLEW_USE_EGL)
static void* GLEW_APIENTRY _glew_eglGetProcAddress(const char* procname) {
  void* fp = nullptr;
#if defined(__egl_h_)
  if (procname && !fp) {
    fp = eglGetProcAddress(procname);
  }
#endif
#if defined(_glew_has_dlfcn_h_)
  if (procname && !fp) {
    static void *image = nullptr;
    if (image == nullptr) {
      image = dlopen("libEGL.so", RTLD_LAZY);
    }
    if (image != nullptr) {
      fp = (void*) dlsym(image, procname);
    }
  }
#endif
#if defined(_WIN32)
  // Hopeful last attempt for anyone running GLES/EGL emulation.
  if (procname && !fp) {
    static HMODULE module = nullptr;
    if (module == nullptr) {
      module = LoadLibraryA("libEGL.dll");
    }
    if (module != nullptr) {
      fp = (void*) GetProcAddress(module, procname);
    }
  }
#endif
  return fp;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(GLEW_USE_WGL) && defined(_WIN32)
static void* GLEW_APIENTRY _glew_wglGetProcAddress(const char* procname) {
  void* fp = nullptr;
#if defined(__wgl_wgl_h_)
  // MSDN documentation says that wglGetProcAddress returns NULL on failure, some implementations will return other values. 1, 2, and 3 are used, as well as -1.
  if (procname && !fp) {
#error fdsafsd
    fp = (void*) wglGetProcAddress(procname);
    if ((fp == (void*)0x1) || (fp == (void*)0x2) || (fp == (void*)0x3) || (fp == (void*)-1)) {
      fp = nullptr;
    }
  }
#endif
  if (procname && !fp) {
    static HMODULE module = nullptr;
    if (module == nullptr) {
      module = LoadLibraryA("opengl32.dll");
    }
    if (module != nullptr) {
      fp = (void*) GetProcAddress(module, procname);
    }
  }
  return fp;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__linux__) && defined(GLEW_USE_GLX)
static void* GLEW_APIENTRY _glew_glXGetProcAddress(const char* procname) {
  void* fp = nullptr;
#if defined(__glx_glxext_h_)
  if (procname && !fp) {
    fp = glXGetProcAddress(procname);
  }
#endif
#if defined(_glew_has_dlfcn_h_)
  if (procname && !fp) {
    static void *image = nullptr;
    if (image == nullptr) {
      image = dlopen("libOpenGL.so", RTLD_LAZY);
    }
    if (image != nullptr) {
      fp = (void*) dlsym(image, procname);
    }
  }
#endif
  return fp;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__APPLE__) && (defined(GLEW_USE_GL) || defined(GLEW_USE_GLES))
static void* GLEW_APIENTRY _glew_aglGetProcAddress(const char* procname) {
  void* fp = nullptr;
#if (TARGET_IOS_IPHONE || TARGET_IPHONE_SIMULATOR)
  if (procname && !fp) {
    static void *image = nullptr;
    if (image == nullptr) {
      image = dlopen("/System/Library/Frameworks/OpenGLES.framework/OpenGLES", RTLD_LAZY);
    }
    if (image != nullptr) {
      fp = (void*) dlsym(image, procname);
    }
  }
#elif (TARGET_OS_MAC)
  if (procname && !fp) {
    static void *image = nullptr;
    if (image == nullptr) {
      image = dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", RTLD_LAZY);
    }
    if (image != nullptr) {
      fp = (void*) dlsym(image, procname);
    }
  }
#endif
  return fp;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
